,{
  "2020-11-10T06:42:22.285ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "90",
                "sol": "90"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.287ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.287ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.288ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.288ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.289ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.289ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month>12",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.292ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.294ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.295ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.295ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.295ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.296ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.303ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.306ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.306ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.307ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.307ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.307ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.308ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.308ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.308ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.309ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.309ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.310ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.311ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.312ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.312ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.313ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.313ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.314ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.314ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.315ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.315ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146097,
                "sol": 146097
              },
              {
                "js": "146096",
                "sol": "146096"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.316ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 29,
                "sol": 29
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.316ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.317ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1338,
                "sol": 1338
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.318ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 96,
                "sol": 96
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.319ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.321ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.323ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.325ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.ContractRole.GUA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.329ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": 15,
                "sol": 15
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "23",
                "sol": "23"
              },
              {
                "js": 22,
                "sol": 22
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "30",
                "sol": "30"
              },
              {
                "js": 29,
                "sol": 29
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": 2440586,
                "sol": 2440586
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": 98,
                "sol": 98
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:42:22.334ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.335ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.335ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.336ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.337ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{\"i\": 131,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(131,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{\"i\": 32,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{\"i\": 41,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{\"i\": 110,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(110,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.340ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.341ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.342ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.345ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.349ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.352ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.354ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.358ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 3999,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(3999,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(39,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1337,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1337,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 4901,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4901,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 14,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(14,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 68568,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(68568,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 90,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.363ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{\"i\": 131,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{\"i\": 27,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(27,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{\"i\": 2440588,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2440588,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{\"i\": 2448,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2448,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{\"i\": 361,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(361,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 10001,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(10001,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{\"i\": 11,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(11,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{\"i\": 149,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(149,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.372ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 12,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(12,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 900,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 80,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(80,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 97,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(97,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 32,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 23,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.375ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 7,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 9999,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 19},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 3,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 899,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 159,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 50,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 367,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 39,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 0,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 361,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1337,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 23,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 100,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 31,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 400,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 86401,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 1337,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 4801,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 60,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 17},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 130,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 96,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1460,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 29,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 4899,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 79,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 159,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 65,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 150,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 96,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1970,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 21,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 27,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 14,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 400,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 79,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 68569,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 367,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 9,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 3,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 11,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 2014223715,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 109,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 10},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 3999,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1338,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 100,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 256,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 151,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 120,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 2014223715,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 32,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 14,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 1532892062,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 12,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 3999,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 9999,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 4799,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 32076,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 4000,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 151,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 2014223716,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 21,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 130,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 146098,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 15}]",
              "sol": "[Definitions.ProtoEvent(89,150,7,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(121,10000,9999,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.STD),Definitions.ProtoEvent(32,1532892062,3,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(4900,159,899,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(21,49,159,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(32075,1336,50,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(4799,1461001,367,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(1,10000,39,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(900,368,0,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(31,18,361,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(40,97,1337,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(1461,121,23,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(4001,2440589,100,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(49,68570,31,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(8,1461002,400,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(1338,150,86401,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(66,139,1337,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(17,161,4801,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(2440588,26,60,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MR),Definitions.ProtoEvent(69,48,130,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(1532892064,161,96,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(139,27,1460,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(27,15,29,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(40,59,4899,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(23,1462,79,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(91,1462,159,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(59,70,65,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(2014223715,2446,150,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(49,160,96,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(19,1461002,1970,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(150,27,21,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(129,81,27,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(32,4,14,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(89,367,400,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(13,23,79,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(159,366,68569,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(40,146097,367,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(110,951,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(949,140,9,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(7,146096,3,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(1532892064,21,11,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(4800,1461002,2014223715,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(365,901,109,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.TD),Definitions.ProtoEvent(24,121,3999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(32074,129,1338,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(951,401,100,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(70,32076,256,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(4001,140,151,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(109,1970,120,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(49,27,2014223715,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(28,96,32,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(4801,1971,14,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(141,365,1532892062,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(10000,63,12,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(2440588,65,3999,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(32075,4900,9999,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(1532892062,5,4799,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(11,32,32076,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(13,1337,4000,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(49,110,151,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(17,1461000,2014223716,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(2014223714,2014223716,21,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(400,6,130,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(140,1462,146098,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD)]"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.389ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 255,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 31,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 71,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 14},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 61,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 359,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 150,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 146096,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 14,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 69,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 86400,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 79,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 146097,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1532892062,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 1461000,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 12,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 160,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 4901,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 109,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 365,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 1462,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 27,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 1460,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 255,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 66,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 30,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 129,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 27,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 1},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 361,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 80,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 361,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 49,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 149,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1461001,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 255,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 254,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 1,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 16,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 1},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 901,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 80,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 2448,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 68570,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 139,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 951,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1532892063,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 50,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 13,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 16,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 10},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 2440588,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 119,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 81,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 15},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 950,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 11},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 1,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1461,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1532892062,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 949,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 1,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 51,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 12},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 254,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 131,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 149,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 899,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 101,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 19,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 139,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(90,401,255,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440587,69,31,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(129,101,71,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SC),Definitions.ProtoEvent(1461002,119,61,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(0,89,359,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(1532892062,2440589,150,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(365,111,146096,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(2447,254,14,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(19,150,69,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(90,110,86400,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(4800,950,79,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(1,2447,146097,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(129,29,1532892062,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(95,4000,1461000,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(401,12,12,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(1532892062,97,160,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(146097,110,4901,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(951,90,109,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(66,4900,365,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(63,3999,1462,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(32,149,27,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(160,91,1460,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(400,255,255,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(4800,1532892064,66,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(2014223714,368,30,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(41,63,129,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(5,60,27,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MD),Definitions.ProtoEvent(399,10000,361,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(111,1461001,80,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(119,9999,361,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(901,399,49,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(32074,149,149,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(17,51,1461001,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(4801,95,255,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(254,360,254,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(69,68568,1,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(11,0,16,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MD),Definitions.ProtoEvent(9999,951,901,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(368,61,80,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(6,59,2448,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(111,28,68570,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(26,89,139,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(20,10,951,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(90,1338,1532892063,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(9,1,50,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(4,65,13,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(160,161,16,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.TD),Definitions.ProtoEvent(361,32075,2440588,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(97,66,119,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(8,1461000,81,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.CD),Definitions.ProtoEvent(150,70,950,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCI),Definitions.ProtoEvent(86401,24,1,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(1338,900,1461,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(2014223716,951,1532892062,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(32074,1461000,949,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(3,23,1,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(68568,9,51,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RR),Definitions.ProtoEvent(146096,9,254,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(129,41,131,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(899,2014223715,149,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(26,2440587,899,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(50,399,101,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(1462,146097,19,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(4001,97,139,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD)]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.411ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.413ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [28,111,137,228,175,128,106,109,114,180,84,151,45,223,197,159,63,146,96,95,136,67,163,77,126,138,201,211,156,49,147,255],\"legalEntityIdCounterparty\": [35,82,183,157,235,160,181,181,221,52,250,99,65,18,23,102,95,161,67,28,223,7,37,112,55,123,144,234,173,62,230,225],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 18,\"statusDate\": 4001,\"initialExchangeDate\": 24,\"maturityDate\": 949,\"terminationDate\": 19,\"purchaseDate\": 4799,\"capitalizationEndDate\": 361,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 68568,\"notionalPrincipal\": 401,\"nominalInterestRate\": 899,\"feeAccrued\": 900,\"accruedInterest\": 146098,\"rateMultiplier\": 86399,\"rateSpread\": 146098,\"feeRate\": 1969,\"nextResetRate\": 101,\"penaltyRate\": 18,\"premiumDiscountAtIED\": 4900,\"priceAtPurchaseDate\": 2440589,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 0,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 0,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 17,\"lifeFloor\": 14,\"periodCap\": 63,\"periodFloor\": 4000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"28,111,137,228,175,128,106,109,114,180,84,151,45,223,197,159,63,146,96,95,136,67,163,77,126,138,201,211,156,49,147,255\"),stringToBytes32(\"35,82,183,157,235,160,181,181,221,52,250,99,65,18,23,102,95,161,67,28,223,7,37,112,55,123,144,234,173,62,230,225\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,18,4001,24,949,19,4799,361,95,401,48,68568,401,899,900,146098,86399,146098,1969,101,18,4900,2440589,Definitions.IPS(364,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(0,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.D,Definitions.S.LONG,true),17,14,63,4000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.420ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [239,132,153,156,164,103,91,35,211,1,223,227,22,81,184,214,50,46,187,248,81,168,113,82,117,249,50,250,224,250,127,191],\"legalEntityIdCounterparty\": [84,217,62,21,230,66,170,233,66,100,194,144,192,33,163,112,254,165,216,25,238,174,127,193,12,32,42,159,90,18,244,204],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 399,\"initialExchangeDate\": 140,\"maturityDate\": 40,\"terminationDate\": 400,\"purchaseDate\": 2440587,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 0,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 255,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 5,\"feeAccrued\": 63,\"accruedInterest\": 899,\"rateMultiplier\": 139,\"rateSpread\": 9999,\"feeRate\": 160,\"nextResetRate\": 68570,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 401,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 6,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 32075,\"lifeFloor\": 27,\"periodCap\": 131,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"239,132,153,156,164,103,91,35,211,1,223,227,22,81,184,214,50,46,187,248,81,168,113,82,117,249,50,250,224,250,127,191\"),stringToBytes32(\"84,217,62,21,230,66,170,233,66,100,194,144,192,33,163,112,254,165,216,25,238,174,127,193,12,32,42,159,90,18,244,204\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,21,399,140,40,400,2440587,8,0,11,0,255,1461001,5,63,899,139,9999,160,68570,4799,109,120,Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(401,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.M,Definitions.S.SHORT,false),32075,27,131,900)"
            },
            {
              "js": "{\"lastEventTime\": 101,\"contractStatus\": 0,\"timeFromLastEvent\": 257,\"nominalValue\": 1970,\"nominalAccrued\": 1,\"feeAccrued\": 1460,\"nominalRate\": 1532892062,\"interestScalingMultiplier\": 27,\"nominalScalingMultiplier\": 149,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(101,Definitions.ContractStatus.PF,257,1970,1,1460,1532892062,27,149,Definitions.ContractRole.BUY)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.424ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [36,126,99,78,105,50,231,159,49,216,75,92,211,54,202,210,171,145,239,161,178,226,60,214,117,62,187,112,94,141,28,254],\"legalEntityIdCounterparty\": [192,241,234,186,225,129,134,75,143,23,118,235,243,54,160,214,95,131,119,46,115,249,39,107,4,216,56,62,216,166,30,9],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 80,\"statusDate\": 15,\"initialExchangeDate\": 1461000,\"maturityDate\": 401,\"terminationDate\": 367,\"purchaseDate\": 21,\"capitalizationEndDate\": 1969,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 86401,\"notionalPrincipal\": 4899,\"nominalInterestRate\": 1970,\"feeAccrued\": 10000,\"accruedInterest\": 146096,\"rateMultiplier\": 90,\"rateSpread\": 1460,\"feeRate\": 49,\"nextResetRate\": 10000,\"penaltyRate\": 2448,\"premiumDiscountAtIED\": 2440588,\"priceAtPurchaseDate\": 1970,\"cycleOfInterestPayment\": {\"i\": 65,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2448,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 401,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 100,\"lifeFloor\": 70,\"periodCap\": 17,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"36,126,99,78,105,50,231,159,49,216,75,92,211,54,202,210,171,145,239,161,178,226,60,214,117,62,187,112,94,141,28,254\"),stringToBytes32(\"192,241,234,186,225,129,134,75,143,23,118,235,243,54,160,214,95,131,119,46,115,249,39,107,4,216,56,62,216,166,30,9\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,80,15,1461000,401,367,21,1969,120,111,1336,86401,4899,1970,10000,146096,90,1460,49,10000,2448,2440588,1970,Definitions.IPS(65,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2448,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.D,Definitions.S.SHORT,false),100,70,17,17)"
            },
            {
              "js": "{\"lastEventTime\": 364,\"contractStatus\": 3,\"timeFromLastEvent\": 139,\"nominalValue\": 950,\"nominalAccrued\": 2014223714,\"feeAccrued\": 80,\"nominalRate\": 4001,\"interestScalingMultiplier\": 2014223716,\"nominalScalingMultiplier\": 1462,\"contractRoleSign\": 3}",
              "sol": "Definitions.ContractState(364,Definitions.ContractStatus.DF,139,950,2014223714,80,4001,2014223716,1462,Definitions.ContractRole.ST)"
            },
            {
              "js": "{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 1970,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 13}",
              "sol": "Definitions.ProtoEvent(89,151,1970,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.434ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [32,40,193,203,161,148,4,34,240,228,183,251,226,176,62,0,103,145,49,110,243,54,44,198,107,159,249,31,89,247,234,169],\"legalEntityIdCounterparty\": [119,91,0,87,40,215,153,54,197,140,98,27,3,4,53,122,157,99,27,205,52,55,163,25,188,202,230,88,239,149,79,194],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86399,\"statusDate\": 19,\"initialExchangeDate\": 4001,\"maturityDate\": 2440589,\"terminationDate\": 951,\"purchaseDate\": 3,\"capitalizationEndDate\": 2448,\"cycleAnchorDateOfInterestPayment\": 32076,\"cycleAnchorDateOfRateReset\": 10001,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 101,\"notionalPrincipal\": 146098,\"nominalInterestRate\": 65,\"feeAccrued\": 1970,\"accruedInterest\": 15,\"rateMultiplier\": 31,\"rateSpread\": 146096,\"feeRate\": 2446,\"nextResetRate\": 254,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 17,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 1532892063,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 0,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 59,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 146096,\"lifeFloor\": 399,\"periodCap\": 86400,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"32,40,193,203,161,148,4,34,240,228,183,251,226,176,62,0,103,145,49,110,243,54,44,198,107,159,249,31,89,247,234,169\"),stringToBytes32(\"119,91,0,87,40,215,153,54,197,140,98,27,3,4,53,122,157,99,27,205,52,55,163,25,188,202,230,88,239,149,79,194\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86399,19,4001,2440589,951,3,2448,32076,10001,8,101,146098,65,1970,15,31,146096,2446,254,1532892062,17,146097,Definitions.IPS(1532892063,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(0,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(59,Definitions.P.H,Definitions.S.LONG,true),146096,399,86400,4799)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [171,23,134,226,3,8,227,85,106,41,155,42,165,25,205,236,58,230,55,192,125,55,15,72,60,48,18,36,179,213,169,63],\"legalEntityIdCounterparty\": [92,159,53,209,35,200,166,98,189,79,249,239,54,217,12,114,190,42,29,9,178,221,185,153,197,50,5,21,217,21,16,158],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 364,\"statusDate\": 161,\"initialExchangeDate\": 1461,\"maturityDate\": 2447,\"terminationDate\": 1338,\"purchaseDate\": 399,\"capitalizationEndDate\": 41,\"cycleAnchorDateOfInterestPayment\": 66,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 68569,\"cycleAnchorDateOfFee\": 48,\"notionalPrincipal\": 146098,\"nominalInterestRate\": 97,\"feeAccrued\": 1336,\"accruedInterest\": 27,\"rateMultiplier\": 4801,\"rateSpread\": 400,\"feeRate\": 32074,\"nextResetRate\": 366,\"penaltyRate\": 255,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": -1,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 364,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 120,\"lifeFloor\": 10,\"periodCap\": 111,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"171,23,134,226,3,8,227,85,106,41,155,42,165,25,205,236,58,230,55,192,125,55,15,72,60,48,18,36,179,213,169,63\"),stringToBytes32(\"92,159,53,209,35,200,166,98,189,79,249,239,54,217,12,114,190,42,29,9,178,221,185,153,197,50,5,21,217,21,16,158\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,364,161,1461,2447,1338,399,41,66,4800,68569,48,146098,97,1336,27,4801,400,32074,366,255,2440589,-1,Definitions.IPS(86399,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(4800,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,true),120,10,111,4799)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [41,125,53,166,233,213,59,16,9,65,252,107,39,177,184,154,220,43,154,180,83,118,229,95,176,176,82,195,104,77,66,81],\"legalEntityIdCounterparty\": [31,37,198,105,190,46,75,146,37,245,6,251,236,26,244,99,213,16,6,141,95,10,121,129,29,63,171,171,153,106,177,92],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 150,\"statusDate\": 2,\"initialExchangeDate\": 2440588,\"maturityDate\": 1336,\"terminationDate\": 141,\"purchaseDate\": 10000,\"capitalizationEndDate\": 1338,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 901,\"cycleAnchorDateOfScalingIndex\": 2447,\"cycleAnchorDateOfFee\": 10,\"notionalPrincipal\": 60,\"nominalInterestRate\": 254,\"feeAccrued\": 2440588,\"accruedInterest\": 10001,\"rateMultiplier\": 4000,\"rateSpread\": 2448,\"feeRate\": 3,\"nextResetRate\": 32074,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 1337,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 26,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 151,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 60,\"lifeFloor\": 1461001,\"periodCap\": 160,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"41,125,53,166,233,213,59,16,9,65,252,107,39,177,184,154,220,43,154,180,83,118,229,95,176,176,82,195,104,77,66,81\"),stringToBytes32(\"31,37,198,105,190,46,75,146,37,245,6,251,236,26,244,99,213,16,6,141,95,10,121,129,29,63,171,171,153,106,177,92\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,150,2,2440588,1336,141,10000,1338,110,901,2447,10,60,254,2440588,10001,4000,2448,3,32074,951,1970,1337,Definitions.IPS(365,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(26,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(89,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(151,Definitions.P.H,Definitions.S.SHORT,false),60,1461001,160,31)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [99,234,28,153,145,202,206,204,20,190,3,21,135,212,100,139,35,188,142,74,49,195,249,98,143,92,11,205,193,173,154,55],\"legalEntityIdCounterparty\": [130,170,129,107,254,101,195,100,48,115,14,111,4,149,74,59,205,168,146,79,200,242,211,42,29,74,249,4,60,190,186,224],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 49,\"statusDate\": 71,\"initialExchangeDate\": 40,\"maturityDate\": 256,\"terminationDate\": 17,\"purchaseDate\": 899,\"capitalizationEndDate\": 4800,\"cycleAnchorDateOfInterestPayment\": 99,\"cycleAnchorDateOfRateReset\": 399,\"cycleAnchorDateOfScalingIndex\": 100,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 63,\"nominalInterestRate\": 4800,\"feeAccrued\": 110,\"accruedInterest\": 64,\"rateMultiplier\": 2,\"rateSpread\": 15,\"feeRate\": 95,\"nextResetRate\": 121,\"penaltyRate\": 4901,\"premiumDiscountAtIED\": 61,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1462,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223715,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 19,\"lifeFloor\": 2440588,\"periodCap\": 121,\"periodFloor\": 151}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"99,234,28,153,145,202,206,204,20,190,3,21,135,212,100,139,35,188,142,74,49,195,249,98,143,92,11,205,193,173,154,55\"),stringToBytes32(\"130,170,129,107,254,101,195,100,48,115,14,111,4,149,74,59,205,168,146,79,200,242,211,42,29,74,249,4,60,190,186,224\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,49,71,40,256,17,899,4800,99,399,100,1532892063,63,4800,110,64,2,15,95,121,4901,61,139,Definitions.IPS(32074,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1462,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.M,Definitions.S.SHORT,true),19,2440588,121,151)"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [120,21,166,158,200,56,217,154,246,221,170,5,41,116,10,117,192,198,205,12,7,69,34,91,225,12,253,237,104,177,1,187],\"legalEntityIdCounterparty\": [96,64,95,13,8,165,29,30,187,95,55,72,233,248,58,82,49,28,173,207,210,89,36,60,242,142,170,147,41,129,243,248],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1461001,\"statusDate\": 3999,\"initialExchangeDate\": 79,\"maturityDate\": 4001,\"terminationDate\": 20,\"purchaseDate\": 0,\"capitalizationEndDate\": 32,\"cycleAnchorDateOfInterestPayment\": 64,\"cycleAnchorDateOfRateReset\": 900,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 399,\"nominalInterestRate\": 10,\"feeAccrued\": 2014223715,\"accruedInterest\": 79,\"rateMultiplier\": 1336,\"rateSpread\": 5,\"feeRate\": 2440587,\"nextResetRate\": 86400,\"penaltyRate\": 31,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 69,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1532892064,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 5,\"lifeFloor\": 40,\"periodCap\": 949,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"120,21,166,158,200,56,217,154,246,221,170,5,41,116,10,117,192,198,205,12,7,69,34,91,225,12,253,237,104,177,1,187\"),stringToBytes32(\"96,64,95,13,8,165,29,30,187,95,55,72,233,248,58,82,49,28,173,207,210,89,36,60,242,142,170,147,41,129,243,248\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1461001,3999,79,4001,20,0,32,64,900,150,139,399,10,2014223715,79,1336,5,2440587,86400,31,2440587,69,Definitions.IPS(364,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1532892064,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(65,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,false),5,40,949,60)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [68,23,71,12,214,191,149,109,201,9,82,216,249,26,125,66,4,13,193,69,34,247,168,35,138,131,147,54,161,77,82,102],\"legalEntityIdCounterparty\": [195,188,89,253,177,227,18,12,196,102,94,221,80,173,120,110,214,243,114,180,229,191,213,172,230,56,208,83,41,4,33,9],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 151,\"statusDate\": 0,\"initialExchangeDate\": 1461001,\"maturityDate\": 4800,\"terminationDate\": 10,\"purchaseDate\": 131,\"capitalizationEndDate\": 368,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 59,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 91,\"nominalInterestRate\": 60,\"feeAccrued\": 12,\"accruedInterest\": 1,\"rateMultiplier\": 1970,\"rateSpread\": 2014223716,\"feeRate\": 4799,\"nextResetRate\": 26,\"penaltyRate\": 255,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 146096,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 399,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4900,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 139,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 2440589,\"lifeFloor\": 40,\"periodCap\": 60,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"68,23,71,12,214,191,149,109,201,9,82,216,249,26,125,66,4,13,193,69,34,247,168,35,138,131,147,54,161,77,82,102\"),stringToBytes32(\"195,188,89,253,177,227,18,12,196,102,94,221,80,173,120,110,214,243,114,180,229,191,213,172,230,56,208,83,41,4,33,9\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,151,0,1461001,4800,10,131,368,9999,59,66,160,91,60,12,1,1970,2014223716,4799,26,255,26,25,Definitions.IPS(146096,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(399,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4900,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(139,Definitions.P.H,Definitions.S.SHORT,true),2440589,40,60,146096)"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [200,77,48,10,14,109,155,74,108,49,140,78,253,201,166,229,151,246,61,139,100,243,40,41,118,194,150,139,68,238,9,209],\"legalEntityIdCounterparty\": [92,129,128,62,237,99,57,250,202,95,223,246,195,12,142,28,98,44,11,191,90,134,82,175,21,252,223,1,198,151,212,30],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2,\"statusDate\": 61,\"initialExchangeDate\": 1,\"maturityDate\": 97,\"terminationDate\": 14,\"purchaseDate\": 121,\"capitalizationEndDate\": 51,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 4901,\"cycleAnchorDateOfScalingIndex\": 7,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 63,\"nominalInterestRate\": 15,\"feeAccrued\": 1338,\"accruedInterest\": 69,\"rateMultiplier\": 951,\"rateSpread\": 95,\"feeRate\": 2440589,\"nextResetRate\": 159,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146097,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 4801,\"lifeFloor\": -1,\"periodCap\": 161,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"200,77,48,10,14,109,155,74,108,49,140,78,253,201,166,229,151,246,61,139,100,243,40,41,118,194,150,139,68,238,9,209\"),stringToBytes32(\"92,129,128,62,237,99,57,250,202,95,223,246,195,12,142,28,98,44,11,191,90,134,82,175,21,252,223,1,198,151,212,30\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2,61,1,97,14,121,51,31,4901,7,1532892063,63,15,1338,69,951,95,2440589,159,68568,1532892062,1461002,Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(146097,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(4,Definitions.P.W,Definitions.S.SHORT,false),4801,-1,161,8)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [57,137,162,2,113,185,95,241,195,251,72,228,25,236,247,56,116,195,0,246,187,211,244,39,39,62,27,75,215,107,6,114],\"legalEntityIdCounterparty\": [91,196,142,185,92,88,192,224,28,205,189,231,110,235,176,71,77,203,236,71,220,130,33,183,216,48,138,5,173,208,142,104],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 86399,\"statusDate\": 5,\"initialExchangeDate\": 0,\"maturityDate\": 4900,\"terminationDate\": 121,\"purchaseDate\": 1461,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 20,\"notionalPrincipal\": 100,\"nominalInterestRate\": 10001,\"feeAccrued\": 5,\"accruedInterest\": 19,\"rateMultiplier\": 10,\"rateSpread\": 151,\"feeRate\": 24,\"nextResetRate\": 4801,\"penaltyRate\": 7,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 20,\"cycleOfInterestPayment\": {\"i\": 129,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 399,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2440588,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1462,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 24,\"periodCap\": 360,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"57,137,162,2,113,185,95,241,195,251,72,228,25,236,247,56,116,195,0,246,187,211,244,39,39,62,27,75,215,107,6,114\"),stringToBytes32(\"91,196,142,185,92,88,192,224,28,205,189,231,110,235,176,71,77,203,236,71,220,130,33,183,216,48,138,5,173,208,142,104\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,86399,5,0,4900,121,1461,0,4800,11,63,20,100,10001,5,19,10,151,24,4801,7,399,20,Definitions.IPS(129,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(399,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2440588,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1462,Definitions.P.Q,Definitions.S.SHORT,false),18,24,360,4800)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [113,22,40,183,15,254,177,23,30,53,189,43,52,60,14,246,115,78,135,38,213,136,19,134,49,205,248,155,122,60,76,118],\"legalEntityIdCounterparty\": [210,211,131,12,180,157,147,193,10,106,26,34,176,204,117,108,52,114,2,80,118,154,140,70,84,16,5,123,27,243,0,129],\"dayCountConvention\": 2,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 49,\"initialExchangeDate\": 3,\"maturityDate\": 111,\"terminationDate\": 950,\"purchaseDate\": 401,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 66,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 140,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 1532892062,\"nominalInterestRate\": 367,\"feeAccrued\": 951,\"accruedInterest\": 15,\"rateMultiplier\": 26,\"rateSpread\": 4899,\"feeRate\": 26,\"nextResetRate\": 160,\"penaltyRate\": 59,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 69,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1337,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 14,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 19,\"lifeFloor\": 949,\"periodCap\": 86400,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"113,22,40,183,15,254,177,23,30,53,189,43,52,60,14,246,115,78,135,38,213,136,19,134,49,205,248,155,122,60,76,118\"),stringToBytes32(\"210,211,131,12,180,157,147,193,10,106,26,34,176,204,117,108,52,114,2,80,118,154,140,70,84,16,5,123,27,243,0,129\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,21,49,3,111,950,401,30,66,1532892063,140,70,1532892062,367,951,15,26,4899,26,160,59,12,97,Definitions.IPS(86399,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(69,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1337,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(14,Definitions.P.M,Definitions.S.LONG,false),19,949,86400,2440589)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [254,241,120,255,56,147,63,125,229,118,182,228,94,30,197,127,7,201,32,113,2,107,228,17,237,122,71,212,11,78,162,80],\"legalEntityIdCounterparty\": [222,33,103,68,172,207,106,153,172,160,196,177,111,150,174,189,189,93,89,112,98,81,220,6,106,194,176,89,234,26,217,227],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 109,\"statusDate\": 131,\"initialExchangeDate\": 89,\"maturityDate\": 365,\"terminationDate\": 17,\"purchaseDate\": 256,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 4000,\"cycleAnchorDateOfRateReset\": 159,\"cycleAnchorDateOfScalingIndex\": 2446,\"cycleAnchorDateOfFee\": 89,\"notionalPrincipal\": 14,\"nominalInterestRate\": 0,\"feeAccrued\": 25,\"accruedInterest\": 63,\"rateMultiplier\": 29,\"rateSpread\": 1461002,\"feeRate\": 21,\"nextResetRate\": 2440589,\"penaltyRate\": 149,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 365,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 0,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 2,\"lifeFloor\": 1532892062,\"periodCap\": 81,\"periodFloor\": 25}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"254,241,120,255,56,147,63,125,229,118,182,228,94,30,197,127,7,201,32,113,2,107,228,17,237,122,71,212,11,78,162,80\"),stringToBytes32(\"222,33,103,68,172,207,106,153,172,160,196,177,111,150,174,189,189,93,89,112,98,81,220,6,106,194,176,89,234,26,217,227\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,109,131,89,365,17,256,68569,4000,159,2446,89,14,0,25,63,29,1461002,21,2440589,149,1337,1461,Definitions.IPS(61,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1337,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(365,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.M,Definitions.S.LONG,false),2,1532892062,81,25)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [84,205,67,174,181,95,102,191,38,193,65,16,57,236,232,232,128,46,136,170,82,221,62,31,59,109,196,140,23,253,70,94],\"legalEntityIdCounterparty\": [137,73,138,225,117,233,88,113,163,243,172,91,222,66,43,176,116,221,56,92,80,198,132,22,99,188,102,124,231,238,174,75],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 130,\"statusDate\": 32074,\"initialExchangeDate\": 899,\"maturityDate\": 71,\"terminationDate\": 130,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 256,\"cycleAnchorDateOfScalingIndex\": 130,\"cycleAnchorDateOfFee\": 9,\"notionalPrincipal\": 2440587,\"nominalInterestRate\": 0,\"feeAccrued\": 4800,\"accruedInterest\": 71,\"rateMultiplier\": 1461002,\"rateSpread\": 8,\"feeRate\": 13,\"nextResetRate\": 20,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 10000,\"priceAtPurchaseDate\": 90,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 400,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 4900,\"lifeFloor\": 359,\"periodCap\": 1337,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"84,205,67,174,181,95,102,191,38,193,65,16,57,236,232,232,128,46,136,170,82,221,62,31,59,109,196,140,23,253,70,94\"),stringToBytes32(\"137,73,138,225,117,233,88,113,163,243,172,91,222,66,43,176,116,221,56,92,80,198,132,22,99,188,102,124,231,238,174,75\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,130,32074,899,71,130,0,0,110,256,130,9,2440587,0,4800,71,1461002,8,13,20,95,10000,90,Definitions.IPS(365,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(400,Definitions.P.M,Definitions.S.SHORT,true),4900,359,1337,111)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [7,1,57,165,26,121,245,4,37,242,153,28,244,184,105,182,79,251,163,171,45,6,222,251,20,239,69,17,113,69,187,16],\"legalEntityIdCounterparty\": [159,94,147,45,139,27,19,165,86,197,192,151,136,198,196,49,13,226,40,128,54,231,34,95,21,202,89,1,216,236,13,217],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4900,\"statusDate\": 2014223715,\"initialExchangeDate\": 159,\"maturityDate\": 48,\"terminationDate\": 31,\"purchaseDate\": 60,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 399,\"nominalInterestRate\": 1532892063,\"feeAccrued\": 21,\"accruedInterest\": 66,\"rateMultiplier\": 0,\"rateSpread\": 1338,\"feeRate\": 256,\"nextResetRate\": 1461002,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 13,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4001,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 65,\"lifeFloor\": 31,\"periodCap\": 1,\"periodFloor\": 2446}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"7,1,57,165,26,121,245,4,37,242,153,28,244,184,105,182,79,251,163,171,45,6,222,251,20,239,69,17,113,69,187,16\"),stringToBytes32(\"159,94,147,45,139,27,19,165,86,197,192,151,136,198,196,49,13,226,40,128,54,231,34,95,21,202,89,1,216,236,13,217\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4900,2014223715,159,48,31,60,11,90,110,81,71,399,1532892063,21,66,0,1338,256,1461002,2440587,13,97,Definitions.IPS(130,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.Q,Definitions.S.LONG,true),65,31,1,2446)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [244,70,185,152,1,58,182,147,235,125,247,111,120,182,50,75,111,48,225,57,215,37,207,213,192,104,227,166,125,230,252,177],\"legalEntityIdCounterparty\": [6,166,243,147,215,94,51,99,109,126,23,131,65,225,235,93,255,232,56,123,212,229,22,204,142,181,85,109,1,182,140,219],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 256,\"statusDate\": 0,\"initialExchangeDate\": 4801,\"maturityDate\": 32,\"terminationDate\": 121,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 400,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 951,\"nominalInterestRate\": 0,\"feeAccrued\": 68568,\"accruedInterest\": -1,\"rateMultiplier\": 89,\"rateSpread\": 32076,\"feeRate\": 129,\"nextResetRate\": 11,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 49,\"priceAtPurchaseDate\": 79,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 39,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4900,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 139,\"lifeFloor\": 51,\"periodCap\": 99,\"periodFloor\": 361}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"244,70,185,152,1,58,182,147,235,125,247,111,120,182,50,75,111,48,225,57,215,37,207,213,192,104,227,166,125,230,252,177\"),stringToBytes32(\"6,166,243,147,215,94,51,99,109,126,23,131,65,225,235,93,255,232,56,123,212,229,22,204,142,181,85,109,1,182,140,219\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,256,0,4801,32,121,0,0,1337,0,400,1969,951,0,68568,-1,89,32076,129,11,19,49,79,Definitions.IPS(360,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(39,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(86399,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4900,Definitions.P.Q,Definitions.S.LONG,false),139,51,99,361)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [123,108,130,45,141,54,109,27,101,152,217,195,106,2,212,63,250,13,0,19,38,47,130,219,195,9,232,43,45,5,77,236],\"legalEntityIdCounterparty\": [2,168,162,198,176,120,153,201,166,163,249,18,39,253,112,147,197,125,88,56,41,129,199,76,41,97,243,116,247,87,160,230],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 401,\"statusDate\": 159,\"initialExchangeDate\": 159,\"maturityDate\": 1532892063,\"terminationDate\": 86399,\"purchaseDate\": 359,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 19,\"cycleAnchorDateOfRateReset\": 39,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 119,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 64,\"feeAccrued\": 130,\"accruedInterest\": 97,\"rateMultiplier\": 31,\"rateSpread\": 63,\"feeRate\": 359,\"nextResetRate\": 110,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4000,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4800,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 68568,\"lifeFloor\": 86401,\"periodCap\": 68569,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"123,108,130,45,141,54,109,27,101,152,217,195,106,2,212,63,250,13,0,19,38,47,130,219,195,9,232,43,45,5,77,236\"),stringToBytes32(\"2,168,162,198,176,120,153,201,166,163,249,18,39,253,112,147,197,125,88,56,41,129,199,76,41,97,243,116,247,87,160,230\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,401,159,159,1532892063,86399,359,19,19,39,11,119,146097,64,130,97,31,63,359,110,13,19,4800,Definitions.IPS(256,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4000,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4800,Definitions.P.Q,Definitions.S.SHORT,true),68568,86401,68569,96)"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [222,43,184,243,31,166,221,139,118,114,0,57,253,23,59,200,48,245,64,55,167,175,0,69,219,137,126,215,90,171,53,237],\"legalEntityIdCounterparty\": [227,144,59,27,190,163,138,69,33,196,19,69,119,157,172,61,137,102,82,174,224,235,182,233,230,224,34,227,81,235,8,89],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 86399,\"statusDate\": 1336,\"initialExchangeDate\": 141,\"maturityDate\": 32,\"terminationDate\": 86399,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 161,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 89,\"nominalInterestRate\": 0,\"feeAccrued\": 2,\"accruedInterest\": 899,\"rateMultiplier\": 1970,\"rateSpread\": 901,\"feeRate\": 4,\"nextResetRate\": 80,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 366,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 119,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 950,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 2014223716,\"lifeFloor\": -1,\"periodCap\": 359,\"periodFloor\": 12}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"222,43,184,243,31,166,221,139,118,114,0,57,253,23,59,200,48,245,64,55,167,175,0,69,219,137,126,215,90,171,53,237\"),stringToBytes32(\"227,144,59,27,190,163,138,69,33,196,19,69,119,157,172,61,137,102,82,174,224,235,182,233,230,224,34,227,81,235,8,89\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,86399,1336,141,32,86399,0,0,100,161,131,0,89,0,2,899,1970,901,4,80,367,2014223715,59,Definitions.IPS(366,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(950,Definitions.P.H,Definitions.S.LONG,false),2014223716,-1,359,12)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [245,206,249,109,178,1,113,185,110,213,100,66,239,196,100,113,26,93,254,225,0,246,237,221,80,132,27,104,60,133,111,198],\"legalEntityIdCounterparty\": [131,182,74,89,72,245,107,12,6,108,239,93,4,75,196,104,210,48,224,213,147,60,55,17,165,74,247,33,173,219,251,204],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 10,\"statusDate\": 100,\"initialExchangeDate\": 6,\"maturityDate\": 1462,\"terminationDate\": 99,\"purchaseDate\": 111,\"capitalizationEndDate\": 111,\"cycleAnchorDateOfInterestPayment\": 4799,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 65,\"cycleAnchorDateOfFee\": 2014223716,\"notionalPrincipal\": 86401,\"nominalInterestRate\": 28,\"feeAccrued\": 28,\"accruedInterest\": 51,\"rateMultiplier\": 1971,\"rateSpread\": 120,\"feeRate\": 364,\"nextResetRate\": 257,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 101,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 950,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 95,\"periodCap\": 61,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"245,206,249,109,178,1,113,185,110,213,100,66,239,196,100,113,26,93,254,225,0,246,237,221,80,132,27,104,60,133,111,198\"),stringToBytes32(\"131,182,74,89,72,245,107,12,6,108,239,93,4,75,196,104,210,48,224,213,147,60,55,17,165,74,247,33,173,219,251,204\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,10,100,6,1462,99,111,111,4799,1532892064,65,2014223716,86401,28,28,51,1971,120,364,257,79,80,1,Definitions.IPS(101,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(950,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(17,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,true),949,95,61,950)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [181,237,49,176,248,117,159,120,18,251,77,172,120,31,145,232,127,191,87,255,137,212,205,42,222,252,240,88,0,82,78,112],\"legalEntityIdCounterparty\": [189,183,97,12,175,134,86,206,160,40,215,117,60,101,148,255,172,201,161,20,249,238,145,234,55,254,234,249,176,17,245,117],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 80,\"statusDate\": 70,\"initialExchangeDate\": 95,\"maturityDate\": 80,\"terminationDate\": 2440587,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 2447,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 68570,\"notionalPrincipal\": 95,\"nominalInterestRate\": 0,\"feeAccrued\": 109,\"accruedInterest\": 86399,\"rateMultiplier\": 151,\"rateSpread\": 110,\"feeRate\": 13,\"nextResetRate\": 4801,\"penaltyRate\": 4000,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 68569,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4801,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 4799,\"lifeFloor\": 23,\"periodCap\": 25,\"periodFloor\": 1337}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"181,237,49,176,248,117,159,120,18,251,77,172,120,31,145,232,127,191,87,255,137,212,205,42,222,252,240,88,0,82,78,112\"),stringToBytes32(\"189,183,97,12,175,134,86,206,160,40,215,117,60,101,148,255,172,201,161,20,249,238,145,234,55,254,234,249,176,17,245,117\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,80,70,95,80,2440587,0,0,11,2447,0,68570,95,0,109,86399,151,110,13,4801,4000,131,68569,Definitions.IPS(97,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(160,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.Y,Definitions.S.SHORT,true),4799,23,25,1337)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [54,197,46,79,149,172,143,204,19,27,8,221,171,168,33,26,70,31,94,248,135,43,199,245,7,120,98,47,246,199,116,149],\"legalEntityIdCounterparty\": [170,62,149,53,148,167,77,216,254,112,37,115,28,244,135,79,95,92,36,210,4,102,192,136,32,177,185,148,0,208,137,171],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 2440587,\"statusDate\": 97,\"initialExchangeDate\": 255,\"maturityDate\": 97,\"terminationDate\": 10000,\"purchaseDate\": 10,\"capitalizationEndDate\": 1462,\"cycleAnchorDateOfInterestPayment\": 1971,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 3,\"cycleAnchorDateOfFee\": 91,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 400,\"feeAccrued\": 81,\"accruedInterest\": 32076,\"rateMultiplier\": 257,\"rateSpread\": 1,\"feeRate\": 1971,\"nextResetRate\": 2447,\"penaltyRate\": 1971,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 71,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 11,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 4801,\"lifeFloor\": 65,\"periodCap\": 4001,\"periodFloor\": 365}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"54,197,46,79,149,172,143,204,19,27,8,221,171,168,33,26,70,31,94,248,135,43,199,245,7,120,98,47,246,199,116,149\"),stringToBytes32(\"170,62,149,53,148,167,77,216,254,112,37,115,28,244,135,79,95,92,36,210,4,102,192,136,32,177,185,148,0,208,137,171\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,2440587,97,255,97,10000,10,1462,1971,0,3,91,1969,400,81,32076,257,1,1971,2447,1971,365,100,Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(71,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(11,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,false),4801,65,4001,365)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [54,70,16,176,15,88,240,255,80,118,110,121,229,83,214,245,103,91,87,45,60,40,40,233,59,182,83,165,48,44,110,6],\"legalEntityIdCounterparty\": [22,42,118,117,123,142,54,37,122,89,126,9,36,15,22,202,247,52,28,12,190,59,32,59,154,218,175,111,140,35,99,49],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 950,\"statusDate\": 121,\"initialExchangeDate\": 16,\"maturityDate\": 365,\"terminationDate\": 81,\"purchaseDate\": 26,\"capitalizationEndDate\": 50,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 79,\"notionalPrincipal\": 255,\"nominalInterestRate\": 368,\"feeAccrued\": 7,\"accruedInterest\": 950,\"rateMultiplier\": 27,\"rateSpread\": 60,\"feeRate\": -1,\"nextResetRate\": 26,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 1971,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 96,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440589,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 19,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2014223714,\"lifeFloor\": 1461,\"periodCap\": 2447,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"54,70,16,176,15,88,240,255,80,118,110,121,229,83,214,245,103,91,87,45,60,40,40,233,59,182,83,165,48,44,110,6\"),stringToBytes32(\"22,42,118,117,123,142,54,37,122,89,126,9,36,15,22,202,247,52,28,12,190,59,32,59,154,218,175,111,140,35,99,49\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,950,121,16,365,81,26,50,359,5,5,79,255,368,7,950,27,60,-1,26,151,10001,32074,Definitions.IPS(1971,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(2440589,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(19,Definitions.P.M,Definitions.S.LONG,true),2014223714,1461,2447,129)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [231,83,222,55,23,1,23,160,100,176,247,1,54,128,223,39,142,151,45,184,106,208,66,151,236,155,170,103,195,85,91,165],\"legalEntityIdCounterparty\": [24,185,226,130,138,231,241,128,131,2,42,197,254,20,88,219,116,161,234,199,143,196,228,76,7,160,188,247,40,220,232,132],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 146096,\"statusDate\": 96,\"initialExchangeDate\": 97,\"maturityDate\": 360,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 89,\"cycleAnchorDateOfRateReset\": 899,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 899,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 0,\"feeAccrued\": 12,\"accruedInterest\": 10,\"rateMultiplier\": 254,\"rateSpread\": 1532892064,\"feeRate\": 28,\"nextResetRate\": 4800,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": 70,\"cycleOfInterestPayment\": {\"i\": 400,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440587,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 12,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 400,\"lifeFloor\": 368,\"periodCap\": 129,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"231,83,222,55,23,1,23,160,100,176,247,1,54,128,223,39,142,151,45,184,106,208,66,151,236,155,170,103,195,85,91,165\"),stringToBytes32(\"24,185,226,130,138,231,241,128,131,2,42,197,254,20,88,219,116,161,234,199,143,196,228,76,7,160,188,247,40,220,232,132\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,146096,96,97,360,0,0,0,89,899,63,899,4000,0,12,10,254,1532892064,28,4800,151,31,70,Definitions.IPS(400,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2440587,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.H,Definitions.S.SHORT,true),400,368,129,1532892064)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [71,179,239,103,20,196,119,86,148,16,76,231,143,131,107,101,89,137,77,9,27,28,101,213,40,147,37,147,221,90,149,134],\"legalEntityIdCounterparty\": [65,178,252,233,21,50,252,212,72,35,27,200,128,226,115,206,120,33,187,109,86,44,44,46,160,105,99,2,41,1,11,139],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 12,\"statusDate\": 71,\"initialExchangeDate\": 129,\"maturityDate\": 400,\"terminationDate\": 89,\"purchaseDate\": 91,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 255,\"cycleAnchorDateOfScalingIndex\": 29,\"cycleAnchorDateOfFee\": 11,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 12,\"feeAccrued\": 1969,\"accruedInterest\": 28,\"rateMultiplier\": 59,\"rateSpread\": 68569,\"feeRate\": 8,\"nextResetRate\": 71,\"penaltyRate\": 39,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 1532892064,\"cycleOfInterestPayment\": {\"i\": 1462,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4001,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2446,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 401,\"lifeFloor\": 2440587,\"periodCap\": 2446,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"71,179,239,103,20,196,119,86,148,16,76,231,143,131,107,101,89,137,77,9,27,28,101,213,40,147,37,147,221,90,149,134\"),stringToBytes32(\"65,178,252,233,21,50,252,212,72,35,27,200,128,226,115,206,120,33,187,109,86,44,44,46,160,105,99,2,41,1,11,139\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,12,71,129,400,89,91,2014223715,68569,255,29,11,68570,12,1969,28,59,68569,8,71,39,359,1532892064,Definitions.IPS(1462,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4001,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(69,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(2446,Definitions.P.W,Definitions.S.SHORT,true),401,2440587,2446,28)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [102,166,37,215,213,135,206,82,228,252,215,22,106,163,151,145,8,58,224,85,74,159,217,42,26,29,146,165,180,11,190,25],\"legalEntityIdCounterparty\": [42,194,148,53,76,222,242,149,87,207,249,33,183,93,20,87,28,40,1,1,255,103,23,56,85,3,36,112,96,40,246,214],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 59,\"statusDate\": 109,\"initialExchangeDate\": 20,\"maturityDate\": 40,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 359,\"notionalPrincipal\": 19,\"nominalInterestRate\": 0,\"feeAccrued\": 11,\"accruedInterest\": 48,\"rateMultiplier\": 401,\"rateSpread\": 68568,\"feeRate\": 32074,\"nextResetRate\": 149,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 97,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 9999,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 400,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 10001,\"lifeFloor\": 4799,\"periodCap\": 141,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"102,166,37,215,213,135,206,82,228,252,215,22,106,163,151,145,8,58,224,85,74,159,217,42,26,29,146,165,180,11,190,25\"),stringToBytes32(\"42,194,148,53,76,222,242,149,87,207,249,33,183,93,20,87,28,40,1,1,255,103,23,56,85,3,36,112,96,40,246,214\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,59,109,20,40,0,0,0,949,2446,71,359,19,0,11,48,401,68568,32074,149,1,1,6,Definitions.IPS(401,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(97,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(9999,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(400,Definitions.P.M,Definitions.S.LONG,true),10001,4799,141,96)"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.477ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:42:22.499ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}