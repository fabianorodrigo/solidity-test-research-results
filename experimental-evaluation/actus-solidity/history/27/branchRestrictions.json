,{
  "2020-11-13T05:15:23.177ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.179ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.179ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.180ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.180ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.181ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.182ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12",
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12,year<1970",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.184ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.186ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.186ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.187ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.187ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.188ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.189ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.191ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.192ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.192ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.192ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.193ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.193ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.193ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.194ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.194ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.194ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.195ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.195ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.196ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.196ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.196ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.197ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.197ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.198ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.199ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.199ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 950,
                "sol": 950
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.200ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 110,
                "sol": 110
              },
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.202ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4000,
                "sol": 4000
              },
              {
                "js": "3999",
                "sol": "3999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.203ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 29,
                "sol": 29
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.203ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68570,
                "sol": 68570
              },
              {
                "js": "68569",
                "sol": "68569"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.204ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 901,
                "sol": 901
              },
              {
                "js": "900",
                "sol": "900"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.207ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.208ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "146097",
                "sol": "146097"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.210ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.214ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "39",
                "sol": "39"
              },
              {
                "js": 38,
                "sol": 38
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "68569",
                "sol": "68569"
              },
              {
                "js": 68568,
                "sol": 68568
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": 70,
                "sol": 70
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:15:23.217ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.217ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.218ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.218ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.219ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{\"i\": 20,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(20,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{\"i\": 90,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(90,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{\"i\": 111,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(111,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{\"i\": 146096,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146096,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.222ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.222ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.224ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.236ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.240ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.244ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.244ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.250ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 109,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(109,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2447,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 951,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(951,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 17,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(17,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 149,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(149,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 41,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2014223714,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.255ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{\"i\": 2014223714,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223714,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{\"i\": 120,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(120,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{\"i\": 160,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(160,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{\"i\": 9999,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(9999,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{\"i\": 121,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(121,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{\"i\": 109,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(109,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{\"i\": 364,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(364,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{\"i\": 4,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{\"i\": 254,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(254,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.266ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 59,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(59,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 29,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(29,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 80,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(80,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 4801,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4801,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(63,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 4,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 129,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.270ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 401,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 366,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 95,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 89,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 91,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 2014223715,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 19,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 2447,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 86400,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 2,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 3999,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 1532892062,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 1336,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 59,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 68569,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 150,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 1462,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 2014223715,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 96,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 161,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 140,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 254,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 2446,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 1532892064,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 159,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 63,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 14,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 146098,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 25,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 1532892064,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 2014223715,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 950,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 361,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 8},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 70,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 366,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 4799,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 0},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 61,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 950,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 150,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 129,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 1336,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 0,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 48,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 121,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 146098,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 13,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 100,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 1970,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1336,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 31,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 6,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 161,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 1532892064,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 899,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 6,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 100,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 364,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 71,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 16},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 900,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 68569,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 399,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 1532892064,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 17,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 50,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 16}]",
              "sol": "[Definitions.ProtoEvent(129,151,401,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(8,1462,366,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(4901,1461002,95,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(32075,11,89,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(69,4799,91,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(6,149,2014223715,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(17,1969,19,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(401,63,2447,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(8,61,86400,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(364,65,2,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(2,254,3999,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(4800,12,1532892062,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(1461001,361,1336,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(399,100,59,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(40,1460,68569,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(2014223714,159,150,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(2014223714,2440589,1462,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(161,6,2014223715,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(10000,59,96,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(257,24,161,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(109,97,140,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(4901,16,254,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(10000,68569,2446,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(4801,21,1532892064,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(361,100,159,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(4000,7,63,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(2014223714,109,14,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(68568,367,146098,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(40,63,25,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(2440589,3,1532892064,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(8,949,2014223715,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(1337,146097,950,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(899,949,361,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.FP),Definitions.ProtoEvent(41,2440587,70,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(130,140,366,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(101,1970,4799,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SD),Definitions.ProtoEvent(90,1969,61,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(254,361,950,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(89,139,150,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(141,12,129,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(19,1532892064,1336,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(40,2440587,0,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(91,151,48,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(40,28,121,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(1461,900,146098,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(60,86400,13,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(949,111,100,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(1532892063,63,1970,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(25,1338,1336,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(10001,2440588,31,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(79,60,6,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(21,68569,161,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(14,17,1532892064,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(69,109,899,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(41,1,6,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(10000,68570,100,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(401,368,364,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(161,14,71,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.DV),Definitions.ProtoEvent(4001,39,900,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(14,69,68569,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(5,161,399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440588,61,1532892064,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(40,2014223714,17,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(101,129,50,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV)]"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.283ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 27,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 2440589,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 254,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 901,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 256,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 59,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 23,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 257,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 18,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 949,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 14,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 51,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 30,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 14,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 4899,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 0,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 159,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 2},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 368,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 1971,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 2440588,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 159,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 901,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 99,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 111,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 8},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 97,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 70,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 141,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 109,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 17,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 365,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 7,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 4,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 59,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 3,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 2014223714,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 1461002,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 29,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 1461000,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1532892063,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 13,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 86400,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 5,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 110,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 1532892063,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 2440587,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 9999,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4800,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 69,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 120,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 101,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 25,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 70,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 10000,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 1970,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 1338,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 66,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 16,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 4900,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 13,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 111,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 64,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 150,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 100,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 17}]",
              "sol": "[Definitions.ProtoEvent(68570,100,27,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(49,1532892063,2440589,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(9999,151,254,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(71,80,901,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(28,161,256,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(2440587,26,59,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(65,68570,23,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(32074,69,257,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(21,14,18,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(50,111,949,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(70,1336,14,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(899,32075,51,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(2446,4,30,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(27,15,14,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(950,32076,4899,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(89,360,0,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(254,146098,159,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.AD),Definitions.ProtoEvent(95,101,368,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(1971,255,1971,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(63,139,2440588,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(1461,109,159,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(150,18,901,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(1532892062,159,99,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(365,4901,111,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.FP),Definitions.ProtoEvent(90,3,97,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(14,100,70,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(96,61,141,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(69,63,109,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(4000,12,17,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(4901,1461002,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(2448,100,365,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(146097,899,7,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(86400,368,4,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(1337,20,59,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(68570,361,3,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(3,23,2014223714,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(20,91,1461002,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(4001,130,29,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(4001,160,1461000,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(400,1461002,1532892063,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(25,86401,13,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(31,4901,86400,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(110,27,5,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(23,4800,110,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(31,66,1532892063,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(1461002,7,2440587,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(63,1462,9999,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(71,4801,4800,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(66,401,69,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(70,86401,120,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(1969,901,101,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(3,19,25,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(4899,65,70,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(100,140,10000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(900,361,1970,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(4799,146098,1338,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(1461001,97,66,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(400,1338,16,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(99,256,4900,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(68570,2,13,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(4000,1970,111,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(90,360,64,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(97,400,150,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(10000,366,100,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR)]"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.312ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.315ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [183,238,224,57,139,29,38,14,169,98,250,68,66,251,133,234,16,122,218,115,131,77,238,105,157,47,197,84,22,111,125,89],\"legalEntityIdCounterparty\": [27,169,3,199,125,250,88,148,112,121,114,189,14,108,188,205,183,96,195,207,42,148,140,208,131,116,9,233,104,182,130,198],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1337,\"statusDate\": 120,\"initialExchangeDate\": 2447,\"maturityDate\": 111,\"terminationDate\": 2014223715,\"purchaseDate\": 1461002,\"capitalizationEndDate\": 95,\"cycleAnchorDateOfInterestPayment\": 86400,\"cycleAnchorDateOfRateReset\": 7,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 4799,\"nominalInterestRate\": 86401,\"feeAccrued\": -1,\"accruedInterest\": 1462,\"rateMultiplier\": 361,\"rateSpread\": 949,\"feeRate\": 130,\"nextResetRate\": 159,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 360,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 400,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223715,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 364,\"lifeFloor\": 101,\"periodCap\": 2440588,\"periodFloor\": 140}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"183,238,224,57,139,29,38,14,169,98,250,68,66,251,133,234,16,122,218,115,131,77,238,105,157,47,197,84,22,111,125,89\"),stringToBytes32(\"27,169,3,199,125,250,88,148,112,121,114,189,14,108,188,205,183,96,195,207,42,148,140,208,131,116,9,233,104,182,130,198\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1337,120,2447,111,2014223715,1461002,95,86400,7,4901,141,4799,86401,-1,1462,361,949,130,159,901,360,365,Definitions.IPS(81,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(400,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(86399,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2014223715,Definitions.P.Q,Definitions.S.SHORT,true),364,101,2440588,140)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.319ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [37,68,246,155,73,160,234,94,74,222,158,4,187,198,211,191,2,126,68,43,251,105,81,88,102,143,80,189,194,115,204,247],\"legalEntityIdCounterparty\": [174,134,107,178,151,43,217,50,189,140,145,132,124,165,55,149,211,154,55,72,150,151,189,125,174,90,99,244,192,86,245,32],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 131,\"statusDate\": 64,\"initialExchangeDate\": 151,\"maturityDate\": 20,\"terminationDate\": 368,\"purchaseDate\": 365,\"capitalizationEndDate\": 109,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 121,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 80,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 29,\"feeAccrued\": 24,\"accruedInterest\": 2448,\"rateMultiplier\": 7,\"rateSpread\": 32076,\"feeRate\": 949,\"nextResetRate\": 150,\"penaltyRate\": 2014223715,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 150,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 366,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1337,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 70,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 140,\"lifeFloor\": 146098,\"periodCap\": 6,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"37,68,246,155,73,160,234,94,74,222,158,4,187,198,211,191,2,126,68,43,251,105,81,88,102,143,80,189,194,115,204,247\"),stringToBytes32(\"174,134,107,178,151,43,217,50,189,140,145,132,124,165,55,149,211,154,55,72,150,151,189,125,174,90,99,244,192,86,245,32\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,131,64,151,20,368,365,109,39,121,68570,80,1337,29,24,2448,7,32076,949,150,2014223715,131,150,Definitions.IPS(69,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(366,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1337,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.Q,Definitions.S.SHORT,false),140,146098,6,64)"
            },
            {
              "js": "{\"lastEventTime\": 3,\"contractStatus\": 3,\"timeFromLastEvent\": 79,\"nominalValue\": 4,\"nominalAccrued\": 4000,\"feeAccrued\": 111,\"nominalRate\": 97,\"interestScalingMultiplier\": 1460,\"nominalScalingMultiplier\": 26,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(3,Definitions.ContractStatus.DF,79,4,4000,111,97,1460,26,Definitions.ContractRole.RPL)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.324ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [222,44,163,4,240,52,21,243,183,171,0,228,157,209,190,132,224,70,40,57,164,197,149,252,62,18,105,186,241,244,35,75],\"legalEntityIdCounterparty\": [49,205,127,244,187,69,112,157,252,72,124,93,11,100,103,49,167,197,124,152,158,253,115,201,122,86,229,8,250,46,175,104],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 146096,\"statusDate\": 1969,\"initialExchangeDate\": 3,\"maturityDate\": 68568,\"terminationDate\": 899,\"purchaseDate\": 367,\"capitalizationEndDate\": 139,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 31,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 80,\"nominalInterestRate\": 48,\"feeAccrued\": 1532892063,\"accruedInterest\": 2447,\"rateMultiplier\": 257,\"rateSpread\": 17,\"feeRate\": 14,\"nextResetRate\": 257,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 59,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 39,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 11,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 10000,\"lifeFloor\": 23,\"periodCap\": 65,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"222,44,163,4,240,52,21,243,183,171,0,228,157,209,190,132,224,70,40,57,164,197,149,252,62,18,105,186,241,244,35,75\"),stringToBytes32(\"49,205,127,244,187,69,112,157,252,72,124,93,11,100,103,49,167,197,124,152,158,253,115,201,122,86,229,8,250,46,175,104\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,146096,1969,3,68568,899,367,139,71,31,1970,2,80,48,1532892063,2447,257,17,14,257,1532892062,1971,81,Definitions.IPS(146098,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(59,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(39,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(11,Definitions.P.M,Definitions.S.SHORT,false),10000,23,65,28)"
            },
            {
              "js": "{\"lastEventTime\": 68569,\"contractStatus\": 0,\"timeFromLastEvent\": 24,\"nominalValue\": 120,\"nominalAccrued\": 2014223715,\"feeAccrued\": 361,\"nominalRate\": 2440587,\"interestScalingMultiplier\": 28,\"nominalScalingMultiplier\": 1532892063,\"contractRoleSign\": 5}",
              "sol": "Definitions.ContractState(68569,Definitions.ContractStatus.PF,24,120,2014223715,361,2440587,28,1532892063,Definitions.ContractRole.PFL)"
            },
            {
              "js": "{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 2446,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 14}",
              "sol": "Definitions.ProtoEvent(401,71,2446,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.333ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [63,133,180,7,249,23,50,92,201,69,206,108,68,118,36,127,176,88,76,165,214,195,17,159,41,95,252,6,102,135,99,137],\"legalEntityIdCounterparty\": [128,113,66,155,113,132,18,189,163,33,32,23,55,80,221,180,133,111,12,109,86,106,96,128,134,141,254,138,227,180,125,217],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4901,\"statusDate\": 4901,\"initialExchangeDate\": 32,\"maturityDate\": 40,\"terminationDate\": 12,\"purchaseDate\": 131,\"capitalizationEndDate\": 3999,\"cycleAnchorDateOfInterestPayment\": 69,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 25,\"notionalPrincipal\": 2014223715,\"nominalInterestRate\": 71,\"feeAccrued\": 100,\"accruedInterest\": 130,\"rateMultiplier\": 40,\"rateSpread\": 151,\"feeRate\": 101,\"nextResetRate\": 110,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 254,\"priceAtPurchaseDate\": 19,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 80,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 119,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 2446,\"lifeFloor\": 10000,\"periodCap\": -1,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"63,133,180,7,249,23,50,92,201,69,206,108,68,118,36,127,176,88,76,165,214,195,17,159,41,95,252,6,102,135,99,137\"),stringToBytes32(\"128,113,66,155,113,132,18,189,163,33,32,23,55,80,221,180,133,111,12,109,86,106,96,128,134,141,254,138,227,180,125,217\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4901,4901,32,40,12,131,3999,69,91,59,25,2014223715,71,100,130,40,151,101,110,13,254,19,Definitions.IPS(111,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(80,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(257,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(119,Definitions.P.D,Definitions.S.LONG,false),2446,10000,-1,257)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [65,141,35,6,36,168,227,96,136,168,107,126,66,67,183,244,220,30,244,11,62,247,247,141,94,191,21,10,188,37,156,174],\"legalEntityIdCounterparty\": [194,70,46,75,44,212,49,181,133,10,104,120,121,50,4,68,53,193,127,198,67,50,172,99,57,226,145,189,128,200,208,233],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 5,\"statusDate\": 255,\"initialExchangeDate\": 23,\"maturityDate\": 140,\"terminationDate\": 10001,\"purchaseDate\": 2,\"capitalizationEndDate\": 368,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 4901,\"cycleAnchorDateOfScalingIndex\": 4899,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 1461001,\"feeAccrued\": 4799,\"accruedInterest\": 14,\"rateMultiplier\": 1461,\"rateSpread\": 2440588,\"feeRate\": 2014223716,\"nextResetRate\": 32075,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 256,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 69,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 15,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 1532892064,\"lifeFloor\": 141,\"periodCap\": 2440587,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"65,141,35,6,36,168,227,96,136,168,107,126,66,67,183,244,220,30,244,11,62,247,247,141,94,191,21,10,188,37,156,174\"),stringToBytes32(\"194,70,46,75,44,212,49,181,133,10,104,120,121,50,4,68,53,193,127,198,67,50,172,99,57,226,145,189,128,200,208,233\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,5,255,23,140,10001,2,368,2014223714,4901,4899,949,1532892064,1461001,4799,14,1461,2440588,2014223716,32075,901,256,950,Definitions.IPS(368,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(15,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,true),1532892064,141,2440587,80)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [65,193,206,81,152,49,44,206,220,142,178,141,76,122,250,64,5,98,181,58,65,241,234,182,207,106,99,24,229,216,154,196],\"legalEntityIdCounterparty\": [156,46,108,34,87,208,80,155,164,194,43,216,6,1,75,3,231,56,128,211,197,193,120,186,230,12,3,0,164,44,100,176],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 0,\"statusDate\": 95,\"initialExchangeDate\": 32074,\"maturityDate\": 68569,\"terminationDate\": 366,\"purchaseDate\": 3,\"capitalizationEndDate\": 29,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 21,\"cycleAnchorDateOfFee\": 161,\"notionalPrincipal\": 10,\"nominalInterestRate\": 59,\"feeAccrued\": 359,\"accruedInterest\": 6,\"rateMultiplier\": 79,\"rateSpread\": 24,\"feeRate\": 111,\"nextResetRate\": 10000,\"penaltyRate\": 2447,\"premiumDiscountAtIED\": 81,\"priceAtPurchaseDate\": 86399,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10000,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 66,\"lifeFloor\": 9,\"periodCap\": 4800,\"periodFloor\": 30}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"65,193,206,81,152,49,44,206,220,142,178,141,76,122,250,64,5,98,181,58,65,241,234,182,207,106,99,24,229,216,154,196\"),stringToBytes32(\"156,46,108,34,87,208,80,155,164,194,43,216,6,1,75,3,231,56,128,211,197,193,120,186,230,12,3,0,164,44,100,176\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,0,95,32074,68569,366,3,29,1337,8,21,161,10,59,359,6,79,24,111,10000,2447,81,86399,Definitions.IPS(1969,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(9999,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(949,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(10000,Definitions.P.W,Definitions.S.LONG,true),66,9,4800,30)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [21,102,166,174,246,254,53,163,47,162,246,149,199,242,83,61,208,182,215,33,131,38,100,217,143,168,143,76,60,74,76,66],\"legalEntityIdCounterparty\": [59,182,80,243,104,159,10,221,205,192,128,21,197,201,150,174,203,221,246,183,31,97,242,87,134,141,24,204,170,14,173,239],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 361,\"statusDate\": 256,\"initialExchangeDate\": 96,\"maturityDate\": 2014223715,\"terminationDate\": 361,\"purchaseDate\": 146098,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 64,\"cycleAnchorDateOfRateReset\": 1462,\"cycleAnchorDateOfScalingIndex\": 65,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 60,\"feeAccrued\": 70,\"accruedInterest\": 111,\"rateMultiplier\": 2448,\"rateSpread\": 1336,\"feeRate\": 254,\"nextResetRate\": 1461001,\"penaltyRate\": 10000,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68569,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4800,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 61,\"lifeFloor\": 15,\"periodCap\": 4000,\"periodFloor\": 901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"21,102,166,174,246,254,53,163,47,162,246,149,199,242,83,61,208,182,215,33,131,38,100,217,143,168,143,76,60,74,76,66\"),stringToBytes32(\"59,182,80,243,104,159,10,221,205,192,128,21,197,201,150,174,203,221,246,183,31,97,242,87,134,141,24,204,170,14,173,239\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,361,256,96,2014223715,361,146098,101,64,1462,65,28,146097,60,70,111,2448,1336,254,1461001,10000,1532892063,368,Definitions.IPS(4000,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(2,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(68569,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(4800,Definitions.P.D,Definitions.S.LONG,false),61,15,4000,901)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [98,145,60,30,255,198,124,142,165,194,140,13,132,117,127,115,214,118,81,144,110,119,208,50,25,7,232,165,70,22,141,202],\"legalEntityIdCounterparty\": [217,12,163,206,238,20,63,252,96,218,55,84,190,214,115,37,89,197,3,228,43,193,252,151,193,159,250,163,129,18,219,51],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 65,\"statusDate\": 100,\"initialExchangeDate\": 141,\"maturityDate\": 1461001,\"terminationDate\": 63,\"purchaseDate\": 0,\"capitalizationEndDate\": 49,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 400,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 66,\"nominalInterestRate\": 2446,\"feeAccrued\": 31,\"accruedInterest\": 12,\"rateMultiplier\": 8,\"rateSpread\": 11,\"feeRate\": 400,\"nextResetRate\": 2440587,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 109,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 71,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 6,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 63,\"lifeFloor\": 25,\"periodCap\": 160,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"98,145,60,30,255,198,124,142,165,194,140,13,132,117,127,115,214,118,81,144,110,119,208,50,25,7,232,165,70,22,141,202\"),stringToBytes32(\"217,12,163,206,238,20,63,252,96,218,55,84,190,214,115,37,89,197,3,228,43,193,252,151,193,159,250,163,129,18,219,51\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,65,100,141,1461001,63,0,49,97,401,400,901,66,2446,31,12,8,11,400,2440587,256,950,96,Definitions.IPS(109,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(71,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.H,Definitions.S.SHORT,true),63,25,160,68569)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [67,129,116,236,136,42,206,138,100,171,204,224,157,236,84,150,232,18,127,56,124,158,152,247,134,126,161,212,94,148,165,226],\"legalEntityIdCounterparty\": [149,136,195,47,183,198,101,121,55,56,65,128,230,106,169,192,178,185,115,252,153,214,12,56,162,209,76,204,90,235,84,30],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 6,\"statusDate\": 3999,\"initialExchangeDate\": 9,\"maturityDate\": 14,\"terminationDate\": 4900,\"purchaseDate\": 2447,\"capitalizationEndDate\": 1461,\"cycleAnchorDateOfInterestPayment\": 29,\"cycleAnchorDateOfRateReset\": 4901,\"cycleAnchorDateOfScalingIndex\": 9999,\"cycleAnchorDateOfFee\": 101,\"notionalPrincipal\": 71,\"nominalInterestRate\": 1460,\"feeAccrued\": 899,\"accruedInterest\": 159,\"rateMultiplier\": 6,\"rateSpread\": 2447,\"feeRate\": 1337,\"nextResetRate\": 161,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892063,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 2440587,\"lifeFloor\": 1532892062,\"periodCap\": 130,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"67,129,116,236,136,42,206,138,100,171,204,224,157,236,84,150,232,18,127,56,124,158,152,247,134,126,161,212,94,148,165,226\"),stringToBytes32(\"149,136,195,47,183,198,101,121,55,56,65,128,230,106,169,192,178,185,115,252,153,214,12,56,162,209,76,204,90,235,84,30\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,6,3999,9,14,4900,2447,1461,29,4901,9999,101,71,1460,899,159,6,2447,1337,161,4001,131,32075,Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1337,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(24,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(1532892063,Definitions.P.W,Definitions.S.LONG,false),2440587,1532892062,130,4799)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [153,14,245,183,68,208,195,167,46,253,54,219,35,116,85,165,2,139,80,103,63,157,105,241,245,49,109,36,5,208,205,5],\"legalEntityIdCounterparty\": [103,44,240,37,131,229,63,215,181,209,49,117,125,30,92,2,4,150,10,1,20,18,78,137,7,187,82,217,185,187,113,81],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 111,\"statusDate\": 11,\"initialExchangeDate\": 4001,\"maturityDate\": 4801,\"terminationDate\": 4801,\"purchaseDate\": 2447,\"capitalizationEndDate\": 364,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 255,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 150,\"feeAccrued\": 70,\"accruedInterest\": 11,\"rateMultiplier\": 256,\"rateSpread\": 30,\"feeRate\": 63,\"nextResetRate\": 119,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 2440587,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 50,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 69,\"periodCap\": 1532892062,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"153,14,245,183,68,208,195,167,46,253,54,219,35,116,85,165,2,139,80,103,63,157,105,241,245,49,109,36,5,208,205,5\"),stringToBytes32(\"103,44,240,37,131,229,63,215,181,209,49,117,125,30,92,2,4,150,10,1,20,18,78,137,7,187,82,217,185,187,113,81\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,111,11,4001,4801,4801,2447,364,899,255,1336,2440588,1532892064,150,70,11,256,30,63,119,111,91,9,Definitions.IPS(2440587,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1461,Definitions.P.Y,Definitions.S.LONG,false),256,69,1532892062,10)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [86,170,87,173,16,13,31,138,183,154,64,91,161,114,49,91,244,237,88,180,140,136,199,161,67,114,4,71,178,145,224,72],\"legalEntityIdCounterparty\": [231,71,9,219,158,61,57,99,3,241,28,21,57,243,78,241,214,80,2,178,240,185,92,231,105,225,238,138,40,40,84,139],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 255,\"statusDate\": 79,\"initialExchangeDate\": 12,\"maturityDate\": 1462,\"terminationDate\": 399,\"purchaseDate\": 1461002,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 256,\"cycleAnchorDateOfScalingIndex\": 365,\"cycleAnchorDateOfFee\": 10001,\"notionalPrincipal\": 1532892062,\"nominalInterestRate\": 29,\"feeAccrued\": 365,\"accruedInterest\": 254,\"rateMultiplier\": 1338,\"rateSpread\": 19,\"feeRate\": 2014223715,\"nextResetRate\": 4901,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 5,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 30,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 2014223714,\"lifeFloor\": 101,\"periodCap\": 365,\"periodFloor\": 151}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"86,170,87,173,16,13,31,138,183,154,64,91,161,114,49,91,244,237,88,180,140,136,199,161,67,114,4,71,178,145,224,72\"),stringToBytes32(\"231,71,9,219,158,61,57,99,3,241,28,21,57,243,78,241,214,80,2,178,240,185,92,231,105,225,238,138,40,40,84,139\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,255,79,12,1462,399,1461002,0,4900,256,365,10001,1532892062,29,365,254,1338,19,2014223715,4901,1461002,79,4,Definitions.IPS(4800,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(5,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(367,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(30,Definitions.P.Y,Definitions.S.SHORT,false),2014223714,101,365,151)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [90,45,81,104,124,5,74,29,221,142,105,60,155,57,141,29,18,23,47,104,220,55,205,220,214,78,110,194,133,177,80,54],\"legalEntityIdCounterparty\": [54,8,134,240,167,45,99,96,29,129,33,165,52,48,237,28,86,223,89,69,15,189,37,77,130,58,202,74,188,64,103,92],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 86401,\"statusDate\": 14,\"initialExchangeDate\": 109,\"maturityDate\": 41,\"terminationDate\": 25,\"purchaseDate\": 89,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 149,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 368,\"notionalPrincipal\": 68568,\"nominalInterestRate\": 18,\"feeAccrued\": 901,\"accruedInterest\": 149,\"rateMultiplier\": 30,\"rateSpread\": 119,\"feeRate\": 96,\"nextResetRate\": 365,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 1532892062,\"cycleOfInterestPayment\": {\"i\": 129,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 14,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 91,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 6,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 60,\"lifeFloor\": 161,\"periodCap\": -1,\"periodFloor\": 899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"90,45,81,104,124,5,74,29,221,142,105,60,155,57,141,29,18,23,47,104,220,55,205,220,214,78,110,194,133,177,80,54\"),stringToBytes32(\"54,8,134,240,167,45,99,96,29,129,33,165,52,48,237,28,86,223,89,69,15,189,37,77,130,58,202,74,188,64,103,92\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,86401,14,109,41,25,89,68569,90,149,4,368,68568,18,901,149,30,119,96,365,1461000,5,1532892062,Definitions.IPS(129,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(14,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(91,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(6,Definitions.P.M,Definitions.S.LONG,true),60,161,-1,899)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [29,49,231,151,28,208,197,40,3,92,184,63,234,122,55,202,245,203,175,247,77,99,228,249,175,63,66,154,119,121,8,244],\"legalEntityIdCounterparty\": [158,35,136,122,194,202,126,108,85,11,40,4,145,170,197,86,124,134,158,150,85,66,203,97,127,107,132,152,69,193,86,4],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 26,\"statusDate\": 131,\"initialExchangeDate\": 901,\"maturityDate\": 20,\"terminationDate\": 32076,\"purchaseDate\": 10000,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 359,\"cycleAnchorDateOfFee\": 51,\"notionalPrincipal\": 97,\"nominalInterestRate\": 4000,\"feeAccrued\": 401,\"accruedInterest\": 31,\"rateMultiplier\": 3,\"rateSpread\": 59,\"feeRate\": 64,\"nextResetRate\": 97,\"penaltyRate\": 70,\"premiumDiscountAtIED\": 6,\"priceAtPurchaseDate\": 99,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4899,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 3999,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 79,\"lifeFloor\": 4899,\"periodCap\": 6,\"periodFloor\": 3999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"29,49,231,151,28,208,197,40,3,92,184,63,234,122,55,202,245,203,175,247,77,99,228,249,175,63,66,154,119,121,8,244\"),stringToBytes32(\"158,35,136,122,194,202,126,108,85,11,40,4,145,170,197,86,124,134,158,150,85,66,203,97,127,107,132,152,69,193,86,4\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,26,131,901,20,32076,10000,11,100,63,359,51,97,4000,401,31,3,59,64,97,70,6,99,Definitions.IPS(951,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4899,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(3999,Definitions.P.W,Definitions.S.SHORT,false),79,4899,6,3999)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [21,47,94,173,85,189,171,8,209,240,224,83,133,69,162,86,43,189,230,93,53,231,38,231,75,99,178,26,174,188,156,58],\"legalEntityIdCounterparty\": [200,183,34,240,215,70,34,145,86,4,227,161,193,9,152,9,208,232,133,60,216,58,47,249,226,50,66,239,252,172,210,20],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2014223714,\"statusDate\": 368,\"initialExchangeDate\": 51,\"maturityDate\": 159,\"terminationDate\": 365,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 24,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 11,\"nominalInterestRate\": 0,\"feeAccrued\": 32076,\"accruedInterest\": 149,\"rateMultiplier\": 60,\"rateSpread\": 254,\"feeRate\": 2440588,\"nextResetRate\": 4899,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 4001,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4001,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 68570,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 12,\"lifeFloor\": 86399,\"periodCap\": 119,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"21,47,94,173,85,189,171,8,209,240,224,83,133,69,162,86,43,189,230,93,53,231,38,231,75,99,178,26,174,188,156,58\"),stringToBytes32(\"200,183,34,240,215,70,34,145,86,4,227,161,193,9,152,9,208,232,133,60,216,58,47,249,226,50,66,239,252,172,210,20\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2014223714,368,51,159,365,0,0,359,13,24,901,11,0,32076,149,60,254,2440588,4899,3999,4001,25,Definitions.IPS(900,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(68570,Definitions.P.Y,Definitions.S.SHORT,false),12,86399,119,2448)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [89,119,163,194,36,196,110,219,240,228,252,44,233,215,25,114,116,11,95,55,129,234,82,224,0,186,50,126,52,220,2,88],\"legalEntityIdCounterparty\": [151,48,148,177,120,234,187,235,64,24,106,189,129,16,125,77,80,136,16,168,248,11,240,21,37,14,181,71,242,79,146,21],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 13,\"statusDate\": 11,\"initialExchangeDate\": 3,\"maturityDate\": 14,\"terminationDate\": 3999,\"purchaseDate\": 2446,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 121,\"cycleAnchorDateOfScalingIndex\": 951,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 120,\"nominalInterestRate\": 130,\"feeAccrued\": 63,\"accruedInterest\": 2448,\"rateMultiplier\": 1461,\"rateSpread\": 120,\"feeRate\": 80,\"nextResetRate\": 4001,\"penaltyRate\": 4801,\"premiumDiscountAtIED\": 11,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1337,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 61,\"periodCap\": 2014223714,\"periodFloor\": 63}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"89,119,163,194,36,196,110,219,240,228,252,44,233,215,25,114,116,11,95,55,129,234,82,224,0,186,50,126,52,220,2,88\"),stringToBytes32(\"151,48,148,177,120,234,187,235,64,24,106,189,129,16,125,77,80,136,16,168,248,11,240,21,37,14,181,71,242,79,146,21\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,13,11,3,14,3999,2446,16,1532892062,121,951,2448,120,130,63,2448,1461,120,80,4001,4801,11,3999,Definitions.IPS(900,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(3,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(119,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1337,Definitions.P.H,Definitions.S.SHORT,false),256,61,2014223714,63)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [116,111,100,77,56,149,31,178,43,104,168,186,234,6,253,96,13,3,189,107,167,3,64,205,162,117,222,251,213,132,84,114],\"legalEntityIdCounterparty\": [248,78,187,228,72,237,76,133,148,109,3,250,1,38,172,48,103,3,11,242,182,210,251,13,234,23,239,237,124,116,16,146],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 121,\"statusDate\": 899,\"initialExchangeDate\": 1338,\"maturityDate\": 10,\"terminationDate\": 95,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 2440587,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 71,\"nominalInterestRate\": 0,\"feeAccrued\": 151,\"accruedInterest\": 50,\"rateMultiplier\": 2446,\"rateSpread\": 2440588,\"feeRate\": 70,\"nextResetRate\": 146097,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 31,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 8,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 1338,\"lifeFloor\": 32,\"periodCap\": 30,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"116,111,100,77,56,149,31,178,43,104,168,186,234,6,253,96,13,3,189,107,167,3,64,205,162,117,222,251,213,132,84,114\"),stringToBytes32(\"248,78,187,228,72,237,76,133,148,109,3,250,1,38,172,48,103,3,11,242,182,210,251,13,234,23,239,237,124,116,16,146\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,121,899,1338,10,95,0,0,9999,0,2440587,3999,71,0,151,50,2446,2440588,70,146097,1969,1337,101,Definitions.IPS(159,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(31,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4800,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(8,Definitions.P.H,Definitions.S.SHORT,true),1338,32,30,40)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [150,245,234,216,96,183,43,244,170,82,234,48,18,235,191,101,125,84,82,77,93,18,98,188,215,238,169,186,123,3,143,103],\"legalEntityIdCounterparty\": [89,145,174,77,240,172,111,19,98,141,233,50,119,6,237,20,244,46,82,52,171,2,167,8,51,213,252,210,182,19,233,69],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 150,\"statusDate\": 368,\"initialExchangeDate\": 950,\"maturityDate\": 149,\"terminationDate\": 9,\"purchaseDate\": 29,\"capitalizationEndDate\": 65,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 139,\"nominalInterestRate\": 1532892062,\"feeAccrued\": 59,\"accruedInterest\": 31,\"rateMultiplier\": 19,\"rateSpread\": 149,\"feeRate\": 6,\"nextResetRate\": 2,\"penaltyRate\": 4000,\"premiumDiscountAtIED\": 16,\"priceAtPurchaseDate\": 17,\"cycleOfInterestPayment\": {\"i\": 150,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 18,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 99,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 5,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440588,\"lifeFloor\": 4899,\"periodCap\": 1461001,\"periodFloor\": 90}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"150,245,234,216,96,183,43,244,170,82,234,48,18,235,191,101,125,84,82,77,93,18,98,188,215,238,169,186,123,3,143,103\"),stringToBytes32(\"89,145,174,77,240,172,111,19,98,141,233,50,119,6,237,20,244,46,82,52,171,2,167,8,51,213,252,210,182,19,233,69\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,150,368,950,149,9,29,65,15,3999,4900,71,139,1532892062,59,31,19,149,6,2,4000,16,17,Definitions.IPS(150,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(18,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(5,Definitions.P.Y,Definitions.S.LONG,true),2440588,4899,1461001,90)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [66,76,135,45,149,47,131,33,207,189,79,158,197,93,164,236,146,226,222,196,108,172,48,110,152,175,95,106,143,18,185,243],\"legalEntityIdCounterparty\": [219,190,196,178,171,24,82,41,42,247,240,1,110,88,244,226,1,195,133,44,29,133,181,19,213,54,255,37,63,119,73,46],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 19,\"statusDate\": 1461,\"initialExchangeDate\": 97,\"maturityDate\": 32,\"terminationDate\": 63,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 9,\"nominalInterestRate\": 0,\"feeAccrued\": 20,\"accruedInterest\": 1462,\"rateMultiplier\": 7,\"rateSpread\": 368,\"feeRate\": 28,\"nextResetRate\": 68570,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 95,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461001,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1460,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 1337,\"lifeFloor\": 1461002,\"periodCap\": 4901,\"periodFloor\": 100}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"66,76,135,45,149,47,131,33,207,189,79,158,197,93,164,236,146,226,222,196,108,172,48,110,152,175,95,106,143,18,185,243\"),stringToBytes32(\"219,190,196,178,171,24,82,41,42,247,240,1,110,88,244,226,1,195,133,44,29,133,181,19,213,54,255,37,63,119,73,46\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,19,1461,97,32,63,0,0,100,28,23,0,9,0,20,1462,7,368,28,68570,3999,95,9,Definitions.IPS(1969,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.W,Definitions.S.LONG,true),1337,1461002,4901,100)"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [11,122,98,232,250,39,129,8,102,163,242,115,177,206,50,200,229,57,45,117,43,236,115,8,69,41,145,254,182,196,250,165],\"legalEntityIdCounterparty\": [5,10,131,36,45,232,161,76,162,248,152,163,169,245,117,206,3,110,241,204,86,122,184,121,2,45,83,191,34,80,198,34],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 149,\"statusDate\": 99,\"initialExchangeDate\": 1971,\"maturityDate\": 27,\"terminationDate\": 1461002,\"purchaseDate\": 3999,\"capitalizationEndDate\": 2440587,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 81,\"notionalPrincipal\": 31,\"nominalInterestRate\": 17,\"feeAccrued\": 39,\"accruedInterest\": 1462,\"rateMultiplier\": 79,\"rateSpread\": 27,\"feeRate\": 99,\"nextResetRate\": 50,\"penaltyRate\": 146097,\"premiumDiscountAtIED\": 90,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 7,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 96,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4001,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 20,\"lifeFloor\": 3,\"periodCap\": 50,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"11,122,98,232,250,39,129,8,102,163,242,115,177,206,50,200,229,57,45,117,43,236,115,8,69,41,145,254,182,196,250,165\"),stringToBytes32(\"5,10,131,36,45,232,161,76,162,248,152,163,169,245,117,206,3,110,241,204,86,122,184,121,2,45,83,191,34,80,198,34\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,149,99,1971,27,1461002,3999,2440587,31,19,8,81,31,17,39,1462,79,27,99,50,146097,90,130,Definitions.IPS(7,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.Q,Definitions.S.LONG,false),20,3,50,8)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [159,164,245,201,42,160,191,218,212,233,250,210,15,144,35,28,88,167,247,217,115,155,146,8,74,202,32,148,122,173,235,228],\"legalEntityIdCounterparty\": [121,112,77,194,90,182,204,216,172,128,229,228,251,156,72,81,114,187,248,195,78,99,56,11,173,54,8,196,29,51,18,144],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 400,\"statusDate\": 159,\"initialExchangeDate\": 1461001,\"maturityDate\": 39,\"terminationDate\": 17,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 19,\"cycleAnchorDateOfRateReset\": 68569,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 146097,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 0,\"feeAccrued\": 139,\"accruedInterest\": 41,\"rateMultiplier\": 4899,\"rateSpread\": 69,\"feeRate\": 2,\"nextResetRate\": 66,\"penaltyRate\": 50,\"premiumDiscountAtIED\": 160,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 64,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 71,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1971,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 950,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 89,\"lifeFloor\": 4000,\"periodCap\": 139,\"periodFloor\": 49}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"159,164,245,201,42,160,191,218,212,233,250,210,15,144,35,28,88,167,247,217,115,155,146,8,74,202,32,148,122,173,235,228\"),stringToBytes32(\"121,112,77,194,90,182,204,216,172,128,229,228,251,156,72,81,114,187,248,195,78,99,56,11,173,54,8,196,29,51,18,144\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,400,159,1461001,39,17,0,0,19,68569,0,146097,1461000,0,139,41,4899,69,2,66,50,160,3999,Definitions.IPS(64,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(71,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1971,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(950,Definitions.P.W,Definitions.S.SHORT,true),89,4000,139,49)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [19,64,52,57,194,5,116,93,175,80,99,27,90,236,190,77,165,231,212,66,137,0,66,249,211,64,91,93,210,33,47,109],\"legalEntityIdCounterparty\": [162,23,50,4,168,250,15,112,10,153,180,96,125,56,8,207,8,215,107,62,137,103,10,173,184,210,18,192,128,202,58,86],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2446,\"statusDate\": 99,\"initialExchangeDate\": 2014223714,\"maturityDate\": 64,\"terminationDate\": 90,\"purchaseDate\": 2448,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 1461002,\"cycleAnchorDateOfRateReset\": 146096,\"cycleAnchorDateOfScalingIndex\": 60,\"cycleAnchorDateOfFee\": 86400,\"notionalPrincipal\": 89,\"nominalInterestRate\": 29,\"feeAccrued\": 100,\"accruedInterest\": -1,\"rateMultiplier\": 32,\"rateSpread\": 150,\"feeRate\": 146098,\"nextResetRate\": 361,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 69,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 951,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1970,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 49,\"lifeFloor\": -1,\"periodCap\": 1336,\"periodFloor\": 2446}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"19,64,52,57,194,5,116,93,175,80,99,27,90,236,190,77,165,231,212,66,137,0,66,249,211,64,91,93,210,33,47,109\"),stringToBytes32(\"162,23,50,4,168,250,15,112,10,153,180,96,125,56,8,207,8,215,107,62,137,103,10,173,184,210,18,192,128,202,58,86\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2446,99,2014223714,64,90,2448,1,1461002,146096,60,86400,89,29,100,-1,32,150,146098,361,71,1532892062,15,Definitions.IPS(32074,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(951,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1970,Definitions.P.M,Definitions.S.LONG,true),49,-1,1336,2446)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [111,99,243,48,70,203,109,154,66,174,151,19,50,119,115,86,80,180,42,202,37,186,142,52,45,234,28,208,244,158,5,168],\"legalEntityIdCounterparty\": [58,105,1,194,179,172,51,83,122,229,23,208,170,188,97,59,88,247,146,156,139,87,90,25,10,107,13,224,241,183,212,30],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 80,\"initialExchangeDate\": 41,\"maturityDate\": 29,\"terminationDate\": 2,\"purchaseDate\": 70,\"capitalizationEndDate\": 1461000,\"cycleAnchorDateOfInterestPayment\": 1971,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 1532892062,\"cycleAnchorDateOfFee\": 100,\"notionalPrincipal\": 80,\"nominalInterestRate\": 9999,\"feeAccrued\": 68568,\"accruedInterest\": 139,\"rateMultiplier\": 51,\"rateSpread\": 95,\"feeRate\": 11,\"nextResetRate\": 48,\"penaltyRate\": 4000,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 5,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 399,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4899,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 59,\"lifeFloor\": 151,\"periodCap\": 70,\"periodFloor\": 16}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"111,99,243,48,70,203,109,154,66,174,151,19,50,119,115,86,80,180,42,202,37,186,142,52,45,234,28,208,244,158,5,168\"),stringToBytes32(\"58,105,1,194,179,172,51,83,122,229,23,208,170,188,97,59,88,247,146,156,139,87,90,25,10,107,13,224,241,183,212,30\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,21,80,41,29,2,70,1461000,1971,26,1532892062,100,80,9999,68568,139,51,95,11,48,4000,1462,60,Definitions.IPS(5,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(399,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4899,Definitions.P.M,Definitions.S.SHORT,true),59,151,70,16)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [141,161,252,210,155,34,144,68,15,169,222,168,153,62,80,101,178,239,94,56,254,215,41,244,162,115,13,231,81,137,199,79],\"legalEntityIdCounterparty\": [148,98,144,3,106,57,74,119,216,96,99,216,230,215,53,141,55,58,44,54,51,96,18,17,186,84,101,80,229,24,142,118],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1461001,\"statusDate\": 130,\"initialExchangeDate\": 2014223715,\"maturityDate\": 13,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 359,\"cycleAnchorDateOfFee\": 4900,\"notionalPrincipal\": 4001,\"nominalInterestRate\": 0,\"feeAccrued\": 79,\"accruedInterest\": 109,\"rateMultiplier\": 69,\"rateSpread\": 4800,\"feeRate\": 109,\"nextResetRate\": 81,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 71,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 360,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4801,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": -1,\"lifeFloor\": 50,\"periodCap\": 951,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"141,161,252,210,155,34,144,68,15,169,222,168,153,62,80,101,178,239,94,56,254,215,41,244,162,115,13,231,81,137,199,79\"),stringToBytes32(\"148,98,144,3,106,57,74,119,216,96,99,216,230,215,53,141,55,58,44,54,51,96,18,17,186,84,101,80,229,24,142,118\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1461001,130,2014223715,13,0,0,0,68569,146097,359,4900,4001,0,79,109,69,4800,109,81,4899,9,71,Definitions.IPS(19,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(360,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.W,Definitions.S.SHORT,false),-1,50,951,1)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [101,163,102,66,250,224,179,49,210,109,84,210,219,164,248,41,23,78,5,231,100,0,44,193,137,146,232,84,235,115,108,126],\"legalEntityIdCounterparty\": [50,230,123,185,16,130,239,13,99,89,111,59,152,253,186,163,103,83,107,57,96,159,75,35,137,238,87,231,121,93,57,254],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4901,\"statusDate\": 69,\"initialExchangeDate\": 255,\"maturityDate\": 1532892062,\"terminationDate\": 4899,\"purchaseDate\": 40,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 129,\"cycleAnchorDateOfFee\": 25,\"notionalPrincipal\": 13,\"nominalInterestRate\": 89,\"feeAccrued\": 64,\"accruedInterest\": 65,\"rateMultiplier\": 63,\"rateSpread\": 109,\"feeRate\": 66,\"nextResetRate\": 1461000,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 32075,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 19,\"lifeFloor\": 4801,\"periodCap\": 25,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"101,163,102,66,250,224,179,49,210,109,84,210,219,164,248,41,23,78,5,231,100,0,44,193,137,146,232,84,235,115,108,126\"),stringToBytes32(\"50,230,123,185,16,130,239,13,99,89,111,59,152,253,186,163,103,83,107,57,96,159,75,35,137,238,87,231,121,93,57,254\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4901,69,255,1532892062,4899,40,130,364,19,129,25,13,89,64,65,63,109,66,1461000,49,32075,10,Definitions.IPS(97,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,false),19,4801,25,949)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [28,179,53,236,150,162,246,39,18,131,11,129,44,93,167,66,251,140,253,47,112,158,150,27,149,128,217,107,191,217,15,198],\"legalEntityIdCounterparty\": [235,141,159,143,240,80,136,119,11,221,228,227,202,139,109,236,141,96,188,101,186,173,217,45,88,22,130,1,76,7,250,42],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 81,\"statusDate\": 71,\"initialExchangeDate\": 140,\"maturityDate\": 901,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 80,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 68568,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 1532892062,\"nominalInterestRate\": 0,\"feeAccrued\": 70,\"accruedInterest\": 368,\"rateMultiplier\": 159,\"rateSpread\": 100,\"feeRate\": 26,\"nextResetRate\": 1970,\"penaltyRate\": 18,\"premiumDiscountAtIED\": 4901,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 161,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 360,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 4899,\"lifeFloor\": 68570,\"periodCap\": 31,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"28,179,53,236,150,162,246,39,18,131,11,129,44,93,167,66,251,140,253,47,112,158,150,27,149,128,217,107,191,217,15,198\"),stringToBytes32(\"235,141,159,143,240,80,136,119,11,221,228,227,202,139,109,236,141,96,188,101,186,173,217,45,88,22,130,1,76,7,250,42\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,81,71,140,901,0,0,0,80,951,68568,1,1532892062,0,70,368,159,100,26,1970,18,4901,25,Definitions.IPS(161,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(360,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,true),4899,68570,31,86399)"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.382ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:15:23.404ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}