,{
  "2020-11-12T06:24:20.218ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "149",
                "sol": "149"
              },
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.219ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.220ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.220ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.221ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.221ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.222ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.224ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.227ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.233ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.234ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.234ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.235ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.236ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.239ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.239ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.239ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.240ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.240ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.241ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.241ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.242ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.242ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.243ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.243ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.244ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.244ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.244ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.245ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.245ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.246ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.246ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.246ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.247ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461001,
                "sol": 1461001
              },
              {
                "js": "1461000",
                "sol": "1461000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.248ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.248ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4002,
                "sol": 4002
              },
              {
                "js": "4001",
                "sol": "4001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.249ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68571,
                "sol": 68571
              },
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.250ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.250ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 92,
                "sol": 92
              },
              {
                "js": "91",
                "sol": "91"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.253ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.254ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "131",
                "sol": "131"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.256ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.261ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": 4900,
                "sol": 4900
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "121",
                "sol": "121"
              },
              {
                "js": 120,
                "sol": 120
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 30,
                "sol": 30
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": 68,
                "sol": 68
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": 10000,
                "sol": 10000
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T06:24:20.264ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.264ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.265ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.265ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.266ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{\"i\": 61,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(61,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 900,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(900,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{\"i\": 950,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(950,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.269ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.270ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.272ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.275ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.279ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.282ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.283ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.286ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 3999,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3999,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 1532892063,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 4899,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4899,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 359,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(359,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 8,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 30,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(30,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32076,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.290ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{\"i\": 9999,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(9999,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{\"i\": 4799,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4799,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{\"i\": 32074,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32074,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{\"i\": 111,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(111,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{\"i\": 65,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(65,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{\"i\": 69,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(69,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{\"i\": 96,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(96,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{\"i\": 59,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(59,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{\"i\": 2446,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2446,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.298ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 360,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(360,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 949,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(949,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 68569,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(68569,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 81,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(81,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 69,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(69,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.301ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 899,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 900,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 4,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 70,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 17},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 254,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 81,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 101,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 95,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 10},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 49,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 2440589,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 1970,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 149,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 71,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 11,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 8,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 146097,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 66,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 69,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 1460,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 151,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 141,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 1461001,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 32076,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 68568,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 91,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 9,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 360,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 950,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 367,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 20,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 4901,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 20},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 3,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 160,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 256,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 23,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 400,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 1969,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 6},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 139,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 361,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 11,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 1,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 119,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 151,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 86401,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 1971,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 8,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 1462,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 71,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 255,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 15,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 16,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 48,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 32075,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 2448,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 367,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 97,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 96,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 150,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 950,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 2014223714,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 399,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 86401,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(359,1461001,899,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(3,30,900,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(60,25,4,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(2440588,64,70,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MR),Definitions.ProtoEvent(139,63,254,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(359,146098,81,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(15,950,101,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(23,1461000,95,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.TD),Definitions.ProtoEvent(4000,1532892062,49,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(68570,950,2440589,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(99,10,1970,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(10001,1460,149,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(18,20,71,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(950,48,11,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(49,1461,8,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(39,146098,146097,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(101,401,66,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(1461000,81,69,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(68570,4799,1460,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(1532892063,2,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(49,32075,151,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,32075,141,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(399,96,1461001,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(365,68568,32076,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(4901,146097,68568,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(1969,91,91,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(364,14,9,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(139,95,360,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(399,9999,950,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(63,32075,367,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(111,1971,20,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(80,29,4901,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.Child),Definitions.ProtoEvent(2440588,2440589,3,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(4899,39,160,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(2014223714,0,256,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(150,146097,23,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(4900,1,400,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(11,109,1969,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP),Definitions.ProtoEvent(399,23,139,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(32076,32076,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(18,14,361,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(16,80,11,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(1970,10000,1,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(2440588,4001,119,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1460,18,151,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(16,150,86401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(1337,401,1971,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(5,20,8,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(1532892062,2014223715,1462,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(257,4799,71,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(146096,5,255,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(10001,141,15,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(109,8,16,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(364,6,48,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(65,96,32075,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(1461000,11,2448,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(401,12,367,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(4800,159,97,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(2448,9,96,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(401,23,150,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(131,30,950,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(366,2014223715,2014223714,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(80,399,399,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(100,159,86401,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD)]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.314ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 1532892064,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 2446,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 359,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 899,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 32076,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 146097,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 86400,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 8,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 51,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 1,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 130,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 7,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 10000,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 68570,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 101,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 2014223716,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 0,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 2014223715,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 95,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 4900,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2440588,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 3999,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 366,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 41,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 9,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 10,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 149,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 95,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 40,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 140,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 140,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 950,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 1460,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 4899,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 360,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 23,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 899,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 2448,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 4800,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 7,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 256,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 50,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 4001,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 59,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 68570,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 90,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 10001,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 28,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 26,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 48,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 256,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 30,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 4,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 32076,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 2014223714,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 16},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 32,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 96,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 79,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 20},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 13,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 1970,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1460,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 20},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 61,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 4799,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 3}]",
              "sol": "[Definitions.ProtoEvent(400,367,1532892064,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(48,2,2446,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(68568,3999,359,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(365,39,899,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(401,26,32076,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(2447,140,146097,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(121,141,86400,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(160,96,8,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(110,1,51,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(101,32074,1,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(1971,3,130,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(1971,2014223715,7,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(29,120,10000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(10,69,68570,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(140,2446,101,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(15,151,2014223716,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(41,50,0,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(2,19,2014223715,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(110,0,95,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(14,1461000,4900,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(11,10001,2440588,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(1971,70,3999,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(1338,1,366,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(161,9999,41,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(79,109,9,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(1461000,41,10,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(3,20,149,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(23,3,95,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(41,3999,40,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(146096,32074,140,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(28,68569,140,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(4899,359,950,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(97,11,1460,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(4001,1338,4899,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(1461002,79,360,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(1461000,24,23,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(1461000,32076,899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(361,150,2448,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(8,10001,4800,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(949,900,7,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(96,2446,256,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(68569,4800,50,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(9,31,4001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(1532892062,2440587,59,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(99,41,68570,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(257,8,90,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(69,25,10001,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(151,48,28,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(4899,130,26,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(1971,4001,48,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(10,11,256,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(91,61,30,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(49,146098,4,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(1971,146097,32076,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(4001,5,2014223714,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(1971,10,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.DV),Definitions.ProtoEvent(86401,146096,32,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(368,257,96,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(10,151,79,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child),Definitions.ProtoEvent(49,29,13,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(2014223715,366,1970,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(367,2447,1460,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.Child),Definitions.ProtoEvent(2440587,11,61,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(146097,950,4799,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED)]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.334ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.337ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [42,1,194,9,107,177,192,45,115,233,253,128,170,14,249,168,28,130,185,41,184,39,97,90,54,189,154,100,97,67,223,219],\"legalEntityIdCounterparty\": [85,36,3,152,99,102,154,253,183,110,252,49,237,100,129,46,190,93,214,50,89,124,163,95,237,146,212,75,123,60,114,210],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 41,\"statusDate\": 68569,\"initialExchangeDate\": 101,\"maturityDate\": 151,\"terminationDate\": 86399,\"purchaseDate\": 131,\"capitalizationEndDate\": 1532892064,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 18,\"cycleAnchorDateOfFee\": 19,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 66,\"feeAccrued\": 60,\"accruedInterest\": 17,\"rateMultiplier\": 2440589,\"rateSpread\": 81,\"feeRate\": 139,\"nextResetRate\": 4001,\"penaltyRate\": 81,\"premiumDiscountAtIED\": 121,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 1532892062,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461002,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1338,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 2014223714,\"periodCap\": 66,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"42,1,194,9,107,177,192,45,115,233,253,128,170,14,249,168,28,130,185,41,184,39,97,90,54,189,154,100,97,67,223,219\"),stringToBytes32(\"85,36,3,152,99,102,154,253,183,110,252,49,237,100,129,46,190,93,214,50,89,124,163,95,237,146,212,75,123,60,114,210\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,41,68569,101,151,86399,131,1532892064,160,65,18,19,146096,66,60,17,2440589,81,139,4001,81,121,15,Definitions.IPS(1532892062,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1461002,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,true),161,2014223714,66,1461000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.345ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [213,13,148,199,76,9,235,16,244,3,175,7,223,155,123,48,28,112,19,209,141,213,115,104,129,129,238,92,162,141,9,125],\"legalEntityIdCounterparty\": [55,133,167,123,238,164,107,166,182,7,30,46,55,33,26,100,215,29,146,204,202,94,250,218,201,156,140,13,132,233,56,238],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 129,\"statusDate\": 32,\"initialExchangeDate\": 59,\"maturityDate\": 4000,\"terminationDate\": 51,\"purchaseDate\": 40,\"capitalizationEndDate\": 1337,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 68568,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 32,\"nominalInterestRate\": 26,\"feeAccrued\": 255,\"accruedInterest\": 949,\"rateMultiplier\": 901,\"rateSpread\": 23,\"feeRate\": 9999,\"nextResetRate\": 401,\"penaltyRate\": 4801,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 3999,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 19,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 1337,\"lifeFloor\": 101,\"periodCap\": 1532892064,\"periodFloor\": 90}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"213,13,148,199,76,9,235,16,244,3,175,7,223,155,123,48,28,112,19,209,141,213,115,104,129,129,238,92,162,141,9,125\"),stringToBytes32(\"55,133,167,123,238,164,107,166,182,7,30,46,55,33,26,100,215,29,146,204,202,94,250,218,201,156,140,13,132,233,56,238\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,129,32,59,4000,51,40,1337,160,68568,4900,254,32,26,255,949,901,23,9999,401,4801,146096,146097,Definitions.IPS(3999,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4000,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(69,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.Q,Definitions.S.LONG,true),1337,101,1532892064,90)"
            },
            {
              "js": "{\"lastEventTime\": 1461000,\"contractStatus\": 3,\"timeFromLastEvent\": 1,\"nominalValue\": 899,\"nominalAccrued\": 146097,\"feeAccrued\": 59,\"nominalRate\": 140,\"interestScalingMultiplier\": 139,\"nominalScalingMultiplier\": 69,\"contractRoleSign\": 4}",
              "sol": "Definitions.ContractState(1461000,Definitions.ContractStatus.DF,1,899,146097,59,140,139,69,Definitions.ContractRole.RFL)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.350ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [47,172,217,142,81,193,206,9,206,255,54,251,55,202,140,76,225,79,77,226,20,43,33,213,7,19,220,82,211,210,242,144],\"legalEntityIdCounterparty\": [233,75,227,15,141,211,252,228,64,69,154,95,200,192,100,55,111,195,54,130,184,129,6,50,82,213,172,35,251,103,108,61],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2446,\"statusDate\": 1532892064,\"initialExchangeDate\": 2440588,\"maturityDate\": 19,\"terminationDate\": 1460,\"purchaseDate\": 129,\"capitalizationEndDate\": 1969,\"cycleAnchorDateOfInterestPayment\": 41,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 18,\"feeAccrued\": 400,\"accruedInterest\": 1460,\"rateMultiplier\": 80,\"rateSpread\": 10001,\"feeRate\": 366,\"nextResetRate\": 1,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 2447,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 146097,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 254,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 15,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 1,\"lifeFloor\": 401,\"periodCap\": 1461,\"periodFloor\": 4000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"47,172,217,142,81,193,206,9,206,255,54,251,55,202,140,76,225,79,77,226,20,43,33,213,7,19,220,82,211,210,242,144\"),stringToBytes32(\"233,75,227,15,141,211,252,228,64,69,154,95,200,192,100,55,111,195,54,130,184,129,6,50,82,213,172,35,251,103,108,61\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2446,1532892064,2440588,19,1460,129,1969,41,4001,141,1,146097,18,400,1460,80,10001,366,1,79,2447,59,Definitions.IPS(146097,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(254,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(15,Definitions.P.H,Definitions.S.LONG,false),1,401,1461,4000)"
            },
            {
              "js": "{\"lastEventTime\": 1461,\"contractStatus\": 1,\"timeFromLastEvent\": 68568,\"nominalValue\": 60,\"nominalAccrued\": 90,\"feeAccrued\": 139,\"nominalRate\": 950,\"interestScalingMultiplier\": 120,\"nominalScalingMultiplier\": 109,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(1461,Definitions.ContractStatus.DL,68568,60,90,139,950,120,109,Definitions.ContractRole.BUY)"
            },
            {
              "js": "{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 364,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 10}",
              "sol": "Definitions.ProtoEvent(129,257,364,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.TD)"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.359ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [229,41,193,241,21,210,193,22,248,254,145,65,243,230,213,63,171,117,122,1,174,91,88,173,102,98,141,213,250,233,183,201],\"legalEntityIdCounterparty\": [254,218,224,203,59,229,213,25,231,171,39,161,197,107,252,68,151,173,89,95,203,47,203,38,239,124,18,236,26,89,120,204],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 40,\"statusDate\": 32075,\"initialExchangeDate\": 364,\"maturityDate\": 4001,\"terminationDate\": 141,\"purchaseDate\": 0,\"capitalizationEndDate\": 91,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 146098,\"notionalPrincipal\": 10,\"nominalInterestRate\": 367,\"feeAccrued\": 4801,\"accruedInterest\": 1462,\"rateMultiplier\": 256,\"rateSpread\": 10,\"feeRate\": 4799,\"nextResetRate\": 151,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 2440589,\"cycleOfInterestPayment\": {\"i\": 4899,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 101,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 146098,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 366,\"lifeFloor\": 89,\"periodCap\": 7,\"periodFloor\": 12}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"229,41,193,241,21,210,193,22,248,254,145,65,243,230,213,63,171,117,122,1,174,91,88,173,102,98,141,213,250,233,183,201\"),stringToBytes32(\"254,218,224,203,59,229,213,25,231,171,39,161,197,107,252,68,151,173,89,95,203,47,203,38,239,124,18,236,26,89,120,204\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,40,32075,364,4001,141,0,91,18,3999,4900,146098,10,367,4801,1462,256,10,4799,151,0,1971,2440589,Definitions.IPS(4899,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(101,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(146098,Definitions.P.M,Definitions.S.SHORT,false),366,89,7,12)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [126,114,133,183,142,160,204,254,153,237,89,23,115,211,203,151,8,149,5,149,226,141,138,215,217,8,251,107,93,189,16,177],\"legalEntityIdCounterparty\": [65,2,155,33,61,94,57,41,241,112,64,41,154,86,228,124,13,138,32,121,95,129,128,50,182,226,217,215,144,254,164,222],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 7,\"initialExchangeDate\": 48,\"maturityDate\": 399,\"terminationDate\": 19,\"purchaseDate\": 99,\"capitalizationEndDate\": 1532892063,\"cycleAnchorDateOfInterestPayment\": 2447,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 254,\"nominalInterestRate\": 4899,\"feeAccrued\": 367,\"accruedInterest\": 951,\"rateMultiplier\": 141,\"rateSpread\": 18,\"feeRate\": 7,\"nextResetRate\": 367,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 121,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 90,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 255,\"lifeFloor\": 32076,\"periodCap\": 68570,\"periodFloor\": 110}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"126,114,133,183,142,160,204,254,153,237,89,23,115,211,203,151,8,149,5,149,226,141,138,215,217,8,251,107,93,189,16,177\"),stringToBytes32(\"65,2,155,33,61,94,57,41,241,112,64,41,154,86,228,124,13,138,32,121,95,129,128,50,182,226,217,215,144,254,164,222\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,68569,7,48,399,19,99,1532892063,2447,110,11,32075,254,4899,367,951,141,18,7,367,6,1337,4001,Definitions.IPS(10001,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(121,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(90,Definitions.P.D,Definitions.S.SHORT,true),255,32076,68570,110)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [96,129,237,219,102,14,35,251,41,224,4,136,79,155,186,133,137,180,201,16,189,60,151,200,34,35,132,57,4,231,76,120],\"legalEntityIdCounterparty\": [54,21,185,249,56,122,217,9,235,146,200,103,209,108,158,29,208,113,165,130,173,219,153,192,78,2,84,231,26,220,242,210],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 19,\"statusDate\": 100,\"initialExchangeDate\": 1461001,\"maturityDate\": 1532892064,\"terminationDate\": 18,\"purchaseDate\": 10000,\"capitalizationEndDate\": 146097,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 89,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 64,\"nominalInterestRate\": 949,\"feeAccrued\": 25,\"accruedInterest\": 28,\"rateMultiplier\": 71,\"rateSpread\": 60,\"feeRate\": 68569,\"nextResetRate\": 256,\"penaltyRate\": 4901,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 31,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 29,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 90,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 97,\"lifeFloor\": 360,\"periodCap\": 91,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"96,129,237,219,102,14,35,251,41,224,4,136,79,155,186,133,137,180,201,16,189,60,151,200,34,35,132,57,4,231,76,120\"),stringToBytes32(\"54,21,185,249,56,122,217,9,235,146,200,103,209,108,158,29,208,113,165,130,173,219,153,192,78,2,84,231,26,220,242,210\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,19,100,1461001,1532892064,18,10000,146097,257,27,89,1462,64,949,25,28,71,60,68569,256,4901,2,31,Definitions.IPS(4000,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1337,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(29,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.Y,Definitions.S.LONG,false),97,360,91,129)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [121,207,170,84,137,110,201,37,231,102,160,213,248,25,108,249,131,223,219,159,166,98,242,49,91,194,161,81,239,5,73,125],\"legalEntityIdCounterparty\": [157,239,136,53,84,228,78,76,128,37,44,242,102,117,139,51,133,64,232,60,227,129,131,227,158,240,38,136,180,56,12,66],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 111,\"statusDate\": 109,\"initialExchangeDate\": 949,\"maturityDate\": 2,\"terminationDate\": 90,\"purchaseDate\": 129,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 90,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 5,\"nominalInterestRate\": 81,\"feeAccrued\": 51,\"accruedInterest\": 91,\"rateMultiplier\": 120,\"rateSpread\": 2014223715,\"feeRate\": 61,\"nextResetRate\": 146098,\"penaltyRate\": 950,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 99,\"cycleOfInterestPayment\": {\"i\": 18,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 41,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 13,\"lifeFloor\": 4800,\"periodCap\": 49,\"periodFloor\": 131}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"121,207,170,84,137,110,201,37,231,102,160,213,248,25,108,249,131,223,219,159,166,98,242,49,91,194,161,81,239,5,73,125\"),stringToBytes32(\"157,239,136,53,84,228,78,76,128,37,44,242,102,117,139,51,133,64,232,60,227,129,131,227,158,240,38,136,180,56,12,66\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,111,109,949,2,90,129,1,146097,100,90,4901,5,81,51,91,120,2014223715,61,146098,950,89,99,Definitions.IPS(18,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1970,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461002,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(41,Definitions.P.W,Definitions.S.SHORT,true),13,4800,49,131)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [243,199,253,174,78,237,138,108,88,49,208,159,170,42,33,125,255,35,67,105,231,61,89,17,100,208,212,88,66,56,155,207],\"legalEntityIdCounterparty\": [26,136,177,165,132,98,135,63,185,96,71,98,75,255,71,101,102,182,15,167,1,114,161,84,106,118,180,242,151,209,190,59],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 31,\"statusDate\": 1462,\"initialExchangeDate\": 160,\"maturityDate\": 71,\"terminationDate\": 27,\"purchaseDate\": 0,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 2447,\"cycleAnchorDateOfScalingIndex\": 121,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 39,\"nominalInterestRate\": 66,\"feeAccrued\": 149,\"accruedInterest\": 1,\"rateMultiplier\": 1337,\"rateSpread\": 140,\"feeRate\": 110,\"nextResetRate\": 28,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 1969,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1338,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 68570,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 368,\"lifeFloor\": 129,\"periodCap\": 16,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"243,199,253,174,78,237,138,108,88,49,208,159,170,42,33,125,255,35,67,105,231,61,89,17,100,208,212,88,66,56,155,207\"),stringToBytes32(\"26,136,177,165,132,98,135,63,185,96,71,98,75,255,71,101,102,182,15,167,1,114,161,84,106,118,180,242,151,209,190,59\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,31,1462,160,71,27,0,1532892062,1532892062,2447,121,365,39,66,149,1,1337,140,110,28,4001,101,1969,Definitions.IPS(401,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1338,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.Q,Definitions.S.SHORT,false),368,129,16,1461002)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [78,162,107,48,116,249,23,222,144,207,79,9,165,196,71,170,97,19,158,63,133,90,191,16,19,85,28,133,198,14,148,47],\"legalEntityIdCounterparty\": [207,251,29,19,211,80,68,150,29,15,102,248,29,19,235,155,148,240,169,111,249,117,18,69,193,107,2,206,134,57,227,140],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 159,\"statusDate\": 69,\"initialExchangeDate\": 399,\"maturityDate\": 121,\"terminationDate\": 4901,\"purchaseDate\": 61,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 23,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 1971,\"notionalPrincipal\": 90,\"nominalInterestRate\": 361,\"feeAccrued\": 2440588,\"accruedInterest\": 901,\"rateMultiplier\": 4000,\"rateSpread\": 401,\"feeRate\": 96,\"nextResetRate\": 81,\"penaltyRate\": 10,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 129,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223714,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 16,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 131,\"lifeFloor\": 130,\"periodCap\": 366,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"78,162,107,48,116,249,23,222,144,207,79,9,165,196,71,170,97,19,158,63,133,90,191,16,19,85,28,133,198,14,148,47\"),stringToBytes32(\"207,251,29,19,211,80,68,150,29,15,102,248,29,19,235,155,148,240,169,111,249,117,18,69,193,107,2,206,134,57,227,140\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,159,69,399,121,4901,61,130,23,97,8,1971,90,361,2440588,901,4000,401,96,81,10,5,2,Definitions.IPS(129,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(2014223714,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(21,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.H,Definitions.S.LONG,false),131,130,366,2)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [215,198,19,90,204,49,28,164,78,23,71,175,6,254,40,255,46,31,233,132,89,88,225,65,35,52,134,211,119,221,176,5],\"legalEntityIdCounterparty\": [227,230,43,128,80,137,116,47,187,247,224,43,45,27,172,50,6,224,154,104,34,248,93,22,80,0,35,120,226,159,144,204],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 63,\"statusDate\": 28,\"initialExchangeDate\": 86399,\"maturityDate\": 86400,\"terminationDate\": 10001,\"purchaseDate\": 39,\"capitalizationEndDate\": 368,\"cycleAnchorDateOfInterestPayment\": 10,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 26,\"cycleAnchorDateOfFee\": 4000,\"notionalPrincipal\": 13,\"nominalInterestRate\": 365,\"feeAccrued\": 23,\"accruedInterest\": 86401,\"rateMultiplier\": 81,\"rateSpread\": 401,\"feeRate\": 68570,\"nextResetRate\": 32076,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 8,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 9,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 80,\"lifeFloor\": 1,\"periodCap\": 9999,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"215,198,19,90,204,49,28,164,78,23,71,175,6,254,40,255,46,31,233,132,89,88,225,65,35,52,134,211,119,221,176,5\"),stringToBytes32(\"227,230,43,128,80,137,116,47,187,247,224,43,45,27,172,50,6,224,154,104,34,248,93,22,80,0,35,120,226,159,144,204\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,63,28,86399,86400,10001,39,368,10,69,26,4000,13,365,23,86401,81,401,68570,32076,949,900,21,Definitions.IPS(256,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(8,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.M,Definitions.S.SHORT,false),80,1,9999,60)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [91,253,243,118,40,150,125,217,241,153,200,31,135,106,192,184,142,228,128,193,177,250,48,121,201,242,17,47,204,223,9,54],\"legalEntityIdCounterparty\": [209,41,220,232,38,16,103,246,146,90,136,25,207,142,17,254,95,248,217,135,228,246,48,130,239,12,163,214,191,173,132,230],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 150,\"statusDate\": 86400,\"initialExchangeDate\": 41,\"maturityDate\": 110,\"terminationDate\": 9,\"purchaseDate\": 9,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 1460,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 120,\"nominalInterestRate\": 150,\"feeAccrued\": 10,\"accruedInterest\": 2440587,\"rateMultiplier\": 99,\"rateSpread\": 8,\"feeRate\": 4000,\"nextResetRate\": 19,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 131,\"cycleOfInterestPayment\": {\"i\": 1462,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 101,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 400,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 0,\"lifeFloor\": 32074,\"periodCap\": 80,\"periodFloor\": 4901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"91,253,243,118,40,150,125,217,241,153,200,31,135,106,192,184,142,228,128,193,177,250,48,121,201,242,17,47,204,223,9,54\"),stringToBytes32(\"209,41,220,232,38,16,103,246,146,90,136,25,207,142,17,254,95,248,217,135,228,246,48,130,239,12,163,214,191,173,132,230\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,150,86400,41,110,9,9,0,10001,19,1460,70,120,150,10,2440587,99,8,4000,19,151,401,131,Definitions.IPS(1462,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(101,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(32074,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.M,Definitions.S.SHORT,true),0,32074,80,4901)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [208,1,84,237,242,22,7,33,149,114,203,205,231,50,27,119,59,54,104,99,167,234,190,176,30,86,242,10,105,123,48,164],\"legalEntityIdCounterparty\": [244,195,11,210,140,56,182,113,70,49,44,208,209,33,7,153,34,183,77,122,26,182,80,231,35,212,120,156,192,225,104,165],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4000,\"statusDate\": 32,\"initialExchangeDate\": 14,\"maturityDate\": 109,\"terminationDate\": 159,\"purchaseDate\": 4000,\"capitalizationEndDate\": 32,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 32076,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 1,\"nominalInterestRate\": 4801,\"feeAccrued\": 99,\"accruedInterest\": 68569,\"rateMultiplier\": 79,\"rateSpread\": 6,\"feeRate\": 70,\"nextResetRate\": 50,\"penaltyRate\": 24,\"premiumDiscountAtIED\": 32075,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 49,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1460,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 161,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1461002,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 150,\"lifeFloor\": 1338,\"periodCap\": 79,\"periodFloor\": 50}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"208,1,84,237,242,22,7,33,149,114,203,205,231,50,27,119,59,54,104,99,167,234,190,176,30,86,242,10,105,123,48,164\"),stringToBytes32(\"244,195,11,210,140,56,182,113,70,49,44,208,209,33,7,153,34,183,77,122,26,182,80,231,35,212,120,156,192,225,104,165\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4000,32,14,109,159,4000,32,27,32076,1337,400,1,4801,99,68569,79,6,70,50,24,32075,15,Definitions.IPS(49,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1460,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(161,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1461002,Definitions.P.D,Definitions.S.SHORT,false),150,1338,79,50)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [122,48,243,114,157,233,128,35,50,252,96,126,132,39,21,75,1,234,51,219,93,206,96,72,146,102,159,18,213,57,46,12],\"legalEntityIdCounterparty\": [105,58,57,76,229,30,158,242,73,135,224,183,180,80,71,70,192,63,196,95,184,191,236,239,74,47,7,212,189,185,130,146],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 949,\"statusDate\": 257,\"initialExchangeDate\": 2440587,\"maturityDate\": 32074,\"terminationDate\": 4799,\"purchaseDate\": 1461001,\"capitalizationEndDate\": 15,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 89,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 1461,\"feeAccrued\": 4,\"accruedInterest\": 1338,\"rateMultiplier\": 1462,\"rateSpread\": 59,\"feeRate\": 366,\"nextResetRate\": 59,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 400,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 256,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 368,\"lifeFloor\": 257,\"periodCap\": 63,\"periodFloor\": 26}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"122,48,243,114,157,233,128,35,50,252,96,126,132,39,21,75,1,234,51,219,93,206,96,72,146,102,159,18,213,57,46,12\"),stringToBytes32(\"105,58,57,76,229,30,158,242,73,135,224,183,180,80,71,70,192,63,196,95,184,191,236,239,74,47,7,212,189,185,130,146\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,949,257,2440587,32074,4799,1461001,15,100,151,950,89,1532892063,1461,4,1338,1462,59,366,59,146096,1337,400,Definitions.IPS(1970,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(10,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(366,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(256,Definitions.P.M,Definitions.S.LONG,true),368,257,63,26)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [10,9,75,190,73,255,109,73,80,66,134,205,251,175,72,44,190,201,4,239,134,92,172,131,100,17,90,100,91,241,225,112],\"legalEntityIdCounterparty\": [187,211,82,255,243,86,190,92,79,102,57,253,82,242,245,105,45,51,213,80,41,249,143,173,253,15,91,40,82,78,38,206],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 65,\"statusDate\": 70,\"initialExchangeDate\": 1336,\"maturityDate\": 368,\"terminationDate\": 4800,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 14,\"cycleAnchorDateOfFee\": 150,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 0,\"feeAccrued\": 95,\"accruedInterest\": 18,\"rateMultiplier\": 32076,\"rateSpread\": 366,\"feeRate\": 1971,\"nextResetRate\": 146098,\"penaltyRate\": 1461001,\"premiumDiscountAtIED\": 41,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 1338,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 4799,\"lifeFloor\": 90,\"periodCap\": 111,\"periodFloor\": 4900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"10,9,75,190,73,255,109,73,80,66,134,205,251,175,72,44,190,201,4,239,134,92,172,131,100,17,90,100,91,241,225,112\"),stringToBytes32(\"187,211,82,255,243,86,190,92,79,102,57,253,82,242,245,105,45,51,213,80,41,249,143,173,253,15,91,40,82,78,38,206\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,65,70,1336,368,4800,0,0,16,151,14,150,146097,0,95,18,32076,366,1971,146098,1461001,41,89,Definitions.IPS(1338,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(111,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false),4799,90,111,4900)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [113,125,49,183,185,155,80,225,216,17,174,175,122,5,47,50,190,10,252,255,95,118,227,75,33,159,165,119,202,5,134,30],\"legalEntityIdCounterparty\": [120,65,179,64,179,28,135,205,254,71,207,137,239,195,104,211,32,157,226,76,98,76,102,126,72,111,187,48,156,51,45,168],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4001,\"statusDate\": 15,\"initialExchangeDate\": 400,\"maturityDate\": 129,\"terminationDate\": 365,\"purchaseDate\": 146097,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 361,\"cycleAnchorDateOfRateReset\": 32,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 255,\"nominalInterestRate\": 901,\"feeAccrued\": 150,\"accruedInterest\": 111,\"rateMultiplier\": 140,\"rateSpread\": 949,\"feeRate\": 131,\"nextResetRate\": 15,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68569,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 30,\"lifeFloor\": 1336,\"periodCap\": 27,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"113,125,49,183,185,155,80,225,216,17,174,175,122,5,47,50,190,10,252,255,95,118,227,75,33,159,165,119,202,5,134,30\"),stringToBytes32(\"120,65,179,64,179,28,135,205,254,71,207,137,239,195,104,211,32,157,226,76,98,76,102,126,72,111,187,48,156,51,45,168\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4001,15,400,129,365,146097,101,361,32,68570,0,255,901,150,111,140,949,131,15,146096,146097,97,Definitions.IPS(949,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(68569,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(81,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(28,Definitions.P.H,Definitions.S.LONG,true),30,1336,27,949)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [1,179,42,103,69,240,83,230,228,137,210,114,19,19,185,251,110,20,66,235,181,205,149,54,123,199,33,219,208,72,111,20],\"legalEntityIdCounterparty\": [76,120,111,163,96,169,173,29,144,30,88,50,220,109,169,141,139,113,174,62,201,179,230,4,103,163,166,240,12,99,70,0],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 96,\"statusDate\": 146098,\"initialExchangeDate\": 359,\"maturityDate\": 70,\"terminationDate\": 51,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 59,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 13,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 4,\"nominalInterestRate\": 0,\"feeAccrued\": 1970,\"accruedInterest\": 360,\"rateMultiplier\": 18,\"rateSpread\": 110,\"feeRate\": 2440587,\"nextResetRate\": 4801,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 8,\"priceAtPurchaseDate\": 26,\"cycleOfInterestPayment\": {\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 7,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 900,\"lifeFloor\": 365,\"periodCap\": 3,\"periodFloor\": 3}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"1,179,42,103,69,240,83,230,228,137,210,114,19,19,185,251,110,20,66,235,181,205,149,54,123,199,33,219,208,72,111,20\"),stringToBytes32(\"76,120,111,163,96,169,173,29,144,30,88,50,220,109,169,141,139,113,174,62,201,179,230,4,103,163,166,240,12,99,70,0\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,96,146098,359,70,51,0,0,59,0,13,90,4,0,1970,360,18,110,2440587,4801,119,8,26,Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4799,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(7,Definitions.P.Q,Definitions.S.LONG,false),900,365,3,3)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [153,31,64,50,26,208,228,149,8,161,214,66,60,174,15,250,121,241,139,233,90,29,155,155,166,22,138,12,100,2,47,169],\"legalEntityIdCounterparty\": [154,118,129,244,108,106,36,4,205,199,36,252,184,86,214,196,174,209,196,76,223,184,183,239,202,227,1,194,172,67,81,60],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4800,\"statusDate\": 109,\"initialExchangeDate\": 1337,\"maturityDate\": 18,\"terminationDate\": 70,\"purchaseDate\": 161,\"capitalizationEndDate\": 1532892064,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 70,\"cycleAnchorDateOfScalingIndex\": 951,\"cycleAnchorDateOfFee\": 150,\"notionalPrincipal\": 360,\"nominalInterestRate\": 1971,\"feeAccrued\": 160,\"accruedInterest\": 24,\"rateMultiplier\": 25,\"rateSpread\": 32075,\"feeRate\": 79,\"nextResetRate\": 86400,\"penaltyRate\": 39,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 48,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 139,\"lifeFloor\": 254,\"periodCap\": 86399,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"153,31,64,50,26,208,228,149,8,161,214,66,60,174,15,250,121,241,139,233,90,29,155,155,166,22,138,12,100,2,47,169\"),stringToBytes32(\"154,118,129,244,108,106,36,4,205,199,36,252,184,86,214,196,174,209,196,76,223,184,183,239,202,227,1,194,172,67,81,60\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4800,109,1337,18,70,161,1532892064,11,70,951,150,360,1971,160,24,25,32075,79,86400,39,364,48,Definitions.IPS(367,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(901,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,true),139,254,86399,18)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [36,163,157,160,212,63,191,65,197,0,230,223,230,48,38,193,149,123,250,102,67,171,226,212,56,38,93,86,171,169,174,68],\"legalEntityIdCounterparty\": [250,82,29,8,145,177,229,62,31,178,241,109,87,159,25,77,58,181,180,35,156,79,181,15,175,99,138,234,143,207,49,168],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4800,\"statusDate\": 899,\"initialExchangeDate\": 18,\"maturityDate\": 7,\"terminationDate\": 26,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1970,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 139,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 86400,\"nominalInterestRate\": 0,\"feeAccrued\": 97,\"accruedInterest\": 96,\"rateMultiplier\": 17,\"rateSpread\": 32,\"feeRate\": 89,\"nextResetRate\": 900,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 96,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 99,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10001,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1461002,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 32075,\"lifeFloor\": 7,\"periodCap\": 149,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"36,163,157,160,212,63,191,65,197,0,230,223,230,48,38,193,149,123,250,102,67,171,226,212,56,38,93,86,171,169,174,68\"),stringToBytes32(\"250,82,29,8,145,177,229,62,31,178,241,109,87,159,25,77,58,181,180,35,156,79,181,15,175,99,138,234,143,207,49,168\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4800,899,18,7,26,0,0,1970,2446,139,0,86400,0,97,96,17,32,89,900,111,2,10,Definitions.IPS(96,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(10001,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1461002,Definitions.P.M,Definitions.S.LONG,false),32075,7,149,19)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [251,228,156,155,146,53,148,85,16,104,114,214,23,175,232,166,83,74,2,216,211,121,249,160,48,59,157,237,43,121,164,133],\"legalEntityIdCounterparty\": [142,20,242,161,147,23,132,188,10,42,176,33,108,31,66,142,89,198,186,204,37,44,166,0,194,90,58,122,6,38,160,30],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 1338,\"initialExchangeDate\": 149,\"maturityDate\": 48,\"terminationDate\": 16,\"purchaseDate\": 60,\"capitalizationEndDate\": 146096,\"cycleAnchorDateOfInterestPayment\": 2,\"cycleAnchorDateOfRateReset\": 95,\"cycleAnchorDateOfScalingIndex\": 12,\"cycleAnchorDateOfFee\": 4801,\"notionalPrincipal\": 59,\"nominalInterestRate\": 4001,\"feeAccrued\": 100,\"accruedInterest\": 2,\"rateMultiplier\": 257,\"rateSpread\": 361,\"feeRate\": 96,\"nextResetRate\": 366,\"penaltyRate\": 18,\"premiumDiscountAtIED\": 1461002,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 10,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 68568,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 146096,\"lifeFloor\": 2446,\"periodCap\": 150,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"251,228,156,155,146,53,148,85,16,104,114,214,23,175,232,166,83,74,2,216,211,121,249,160,48,59,157,237,43,121,164,133\"),stringToBytes32(\"142,20,242,161,147,23,132,188,10,42,176,33,108,31,66,142,89,198,186,204,37,44,166,0,194,90,58,122,6,38,160,30\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,101,1338,149,48,16,60,146096,2,95,12,4801,59,4001,100,2,257,361,96,366,18,1461002,64,Definitions.IPS(10,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1337,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(950,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.D,Definitions.S.SHORT,false),146096,2446,150,18)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [192,154,122,250,156,202,254,106,149,55,160,212,58,192,181,250,111,32,20,76,241,60,6,87,12,57,41,157,152,159,162,142],\"legalEntityIdCounterparty\": [89,192,150,170,125,54,134,57,197,226,32,25,21,235,251,178,0,131,13,118,47,112,96,12,65,195,137,148,74,207,30,121],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 86399,\"initialExchangeDate\": 10,\"maturityDate\": 359,\"terminationDate\": 111,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1970,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 1532892062,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 0,\"feeAccrued\": 359,\"accruedInterest\": 10,\"rateMultiplier\": 2447,\"rateSpread\": 12,\"feeRate\": 81,\"nextResetRate\": 146097,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 5,\"cycleOfInterestPayment\": {\"i\": 32076,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 64,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 68568,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 101,\"lifeFloor\": 257,\"periodCap\": 68568,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"192,154,122,250,156,202,254,106,149,55,160,212,58,192,181,250,111,32,20,76,241,60,6,87,12,57,41,157,152,159,162,142\"),stringToBytes32(\"89,192,150,170,125,54,134,57,197,226,32,25,21,235,251,178,0,131,13,118,47,112,96,12,65,195,137,148,74,207,30,121\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,32,86399,10,359,111,0,0,1970,365,0,1532892062,1532892063,0,359,10,2447,12,81,146097,9,21,5,Definitions.IPS(32076,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1461002,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.Q,Definitions.S.LONG,false),101,257,68568,14)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [51,11,79,190,166,52,185,220,64,105,50,204,209,18,255,48,42,191,208,52,203,147,39,89,198,110,48,147,226,157,36,41],\"legalEntityIdCounterparty\": [3,42,105,19,238,112,110,37,25,2,175,229,183,32,131,58,23,141,100,75,246,171,28,98,30,142,160,54,54,119,100,33],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 257,\"statusDate\": 2440588,\"initialExchangeDate\": 9,\"maturityDate\": 97,\"terminationDate\": 4901,\"purchaseDate\": 91,\"capitalizationEndDate\": 10,\"cycleAnchorDateOfInterestPayment\": 49,\"cycleAnchorDateOfRateReset\": 32076,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 368,\"notionalPrincipal\": 1336,\"nominalInterestRate\": 30,\"feeAccrued\": 12,\"accruedInterest\": 40,\"rateMultiplier\": 1460,\"rateSpread\": 139,\"feeRate\": 100,\"nextResetRate\": 60,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 151,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4801,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 146097,\"lifeFloor\": 30,\"periodCap\": 146097,\"periodFloor\": 20}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"51,11,79,190,166,52,185,220,64,105,50,204,209,18,255,48,42,191,208,52,203,147,39,89,198,110,48,147,226,157,36,41\"),stringToBytes32(\"3,42,105,19,238,112,110,37,25,2,175,229,183,32,131,58,23,141,100,75,246,171,28,98,30,142,160,54,54,119,100,33\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,257,2440588,9,97,4901,91,10,49,32076,68570,368,1336,30,12,40,1460,139,100,60,1532892064,86400,121,Definitions.IPS(1970,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(21,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.H,Definitions.S.SHORT,true),146097,30,146097,20)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [168,108,39,238,179,128,95,123,95,210,253,34,164,122,188,11,107,125,100,107,139,158,155,157,175,15,116,140,41,126,22,176],\"legalEntityIdCounterparty\": [7,40,101,52,21,67,93,158,57,118,5,122,110,2,56,188,162,174,128,49,44,132,151,252,108,217,213,113,145,110,175,179],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 68570,\"statusDate\": 368,\"initialExchangeDate\": 401,\"maturityDate\": 149,\"terminationDate\": 1337,\"purchaseDate\": 1970,\"capitalizationEndDate\": 1461002,\"cycleAnchorDateOfInterestPayment\": 51,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 6,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 257,\"nominalInterestRate\": 949,\"feeAccrued\": 90,\"accruedInterest\": 14,\"rateMultiplier\": 21,\"rateSpread\": 100,\"feeRate\": 81,\"nextResetRate\": 899,\"penaltyRate\": 254,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 129,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 130,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892062,\"lifeFloor\": 18,\"periodCap\": 4800,\"periodFloor\": 401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"168,108,39,238,179,128,95,123,95,210,253,34,164,122,188,11,107,125,100,107,139,158,155,157,175,15,116,140,41,126,22,176\"),stringToBytes32(\"7,40,101,52,21,67,93,158,57,118,5,122,110,2,56,188,162,174,128,49,44,132,151,252,108,217,213,113,145,110,175,179\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,68570,368,401,149,1337,1970,1461002,51,4000,6,140,257,949,90,14,21,100,81,899,254,950,30,Definitions.IPS(32074,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(129,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(130,Definitions.P.H,Definitions.S.LONG,false),1532892062,18,4800,401)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [121,41,129,121,61,56,180,43,116,177,114,56,2,252,194,87,20,151,39,217,56,152,62,175,0,88,122,162,207,211,199,113],\"legalEntityIdCounterparty\": [163,32,233,174,217,141,90,43,113,181,159,85,224,54,241,73,175,151,150,5,242,138,150,68,176,188,145,245,183,81,123,100],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 9,\"statusDate\": 99,\"initialExchangeDate\": 2440588,\"maturityDate\": 949,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 111,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 18,\"nominalInterestRate\": 0,\"feeAccrued\": 10001,\"accruedInterest\": 29,\"rateMultiplier\": 63,\"rateSpread\": 367,\"feeRate\": 32075,\"nextResetRate\": 401,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 10001,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2446,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4000,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440587,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 109,\"periodCap\": 161,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"121,41,129,121,61,56,180,43,116,177,114,56,2,252,194,87,20,151,39,217,56,152,62,175,0,88,122,162,207,211,199,113\"),stringToBytes32(\"163,32,233,174,217,141,90,43,113,181,159,85,224,54,241,73,175,151,150,5,242,138,150,68,176,188,145,245,183,81,123,100\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,9,99,2440588,949,0,0,0,257,20,111,254,18,0,10001,29,63,367,32075,401,1461002,86399,10001,Definitions.IPS(16,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2446,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4000,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.SHORT,false),41,109,161,10001)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [206,203,140,171,110,216,152,76,159,90,94,114,197,35,180,249,221,102,124,216,113,89,87,27,135,251,60,162,102,169,62,23],\"legalEntityIdCounterparty\": [249,130,227,137,47,233,154,172,61,87,238,124,234,45,237,113,149,1,216,201,208,187,108,14,208,31,150,18,108,137,80,13],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 89,\"statusDate\": 110,\"initialExchangeDate\": 131,\"maturityDate\": 65,\"terminationDate\": 2440589,\"purchaseDate\": 49,\"capitalizationEndDate\": 361,\"cycleAnchorDateOfInterestPayment\": 79,\"cycleAnchorDateOfRateReset\": 899,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 4800,\"nominalInterestRate\": 18,\"feeAccrued\": 360,\"accruedInterest\": 146096,\"rateMultiplier\": 19,\"rateSpread\": 66,\"feeRate\": 140,\"nextResetRate\": 899,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 68569,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 23,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1338,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 68569,\"lifeFloor\": 110,\"periodCap\": 149,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"206,203,140,171,110,216,152,76,159,90,94,114,197,35,180,249,221,102,124,216,113,89,87,27,135,251,60,162,102,169,62,23\"),stringToBytes32(\"249,130,227,137,47,233,154,172,61,87,238,124,234,45,237,113,149,1,216,201,208,187,108,14,208,31,150,18,108,137,80,13\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,89,110,131,65,2440589,49,361,79,899,66,139,4800,18,360,146096,19,66,140,899,69,100,68569,Definitions.IPS(110,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(23,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1338,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4,Definitions.P.Q,Definitions.S.SHORT,true),68569,110,149,89)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [132,85,171,238,127,147,135,88,221,108,217,51,65,73,169,228,96,245,42,181,222,240,112,129,184,168,36,109,114,5,90,9],\"legalEntityIdCounterparty\": [234,182,96,8,73,32,106,245,42,218,213,239,201,51,69,253,213,237,33,74,180,163,91,114,180,189,84,177,225,89,237,95],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 30,\"statusDate\": 4899,\"initialExchangeDate\": 951,\"maturityDate\": 14,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 59,\"notionalPrincipal\": 120,\"nominalInterestRate\": 0,\"feeAccrued\": 10,\"accruedInterest\": 10001,\"rateMultiplier\": 1532892062,\"rateSpread\": 359,\"feeRate\": 1338,\"nextResetRate\": 39,\"penaltyRate\": 39,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 111,\"cycleOfInterestPayment\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 16,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 5,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223714,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 121,\"lifeFloor\": 32076,\"periodCap\": -1,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"132,85,171,238,127,147,135,88,221,108,217,51,65,73,169,228,96,245,42,181,222,240,112,129,184,168,36,109,114,5,90,9\"),stringToBytes32(\"234,182,96,8,73,32,106,245,42,218,213,239,201,51,69,253,213,237,33,74,180,163,91,114,180,189,84,177,225,89,237,95\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,30,4899,951,14,0,0,0,1,49,1461001,59,120,0,10,10001,1532892062,359,1338,39,39,25,111,Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(5,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2014223714,Definitions.P.D,Definitions.S.SHORT,true),121,32076,-1,64)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.403ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T06:24:20.424ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}