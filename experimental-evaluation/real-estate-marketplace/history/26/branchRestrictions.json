,{
  "2020-11-12T20:17:44.921ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:18:00.091ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:18:15.250ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:18:30.274ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "\"sq85ic\"",
              "sol": "\"sq85ic\""
            },
            {
              "js": "\"zovzcfi\"",
              "sol": "\"zovzcfi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:18:45.295ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:01.223ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.445ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [199,126,48,242,160,13,90,195,217,96,14,140,110,35,254,99,226,93,226,28,172,242,92,197,46,54,16,186,23,209,131,168],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"199,126,48,242,160,13,90,195,217,96,14,140,110,35,254,99,226,93,226,28,172,242,92,197,46,54,16,186,23,209,131,168\"),70)"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.446ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [108,235,215,43,48,197,33,59,171,63,185,94,99,226,50,18,207,159,247,36,183,161,63,2,72,122,252,28,252,19,230,46],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"108,235,215,43,48,197,33,59,171,63,185,94,99,226,50,18,207,159,247,36,183,161,63,2,72,122,252,28,252,19,230,46\"),128)"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [127,24,25,134,125,1,89,245,114,115,111,200,9,145,52,114,239,97,21,234,96,36,137,48,25,6,34,173,172,30,132,168],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"127,24,25,134,125,1,89,245,114,115,111,200,9,145,52,114,239,97,21,234,96,36,137,48,25,6,34,173,172,30,132,168\"),200000)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.447ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [255,218,31,19,83,207,133,112,12,199,191,20,180,244,200,13,243,237,107,106,110,103,35,45,210,168,195,159,39,106,131,136],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"255,218,31,19,83,207,133,112,12,199,191,20,180,244,200,13,243,237,107,106,110,103,35,45,210,168,195,159,39,106,131,136\"),69)"
            },
            {
              "js": "[246,103,119,41,98,62,75,31,189,243,54,171,135,96,101,169,44,35,145,186,186,113,147,234,199,236,32,76,142,50,172,242]",
              "sol": "abi.encode(\"246,103,119,41,98,62,75,31,189,243,54,171,135,96,101,169,44,35,145,186,186,113,147,234,199,236,32,76,142,50,172,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.448ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [116,209,13,228,225,166,160,128,29,99,169,45,4,228,81,114,170,135,140,154,158,23,206,248,47,84,103,155,160,119,77,136],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"116,209,13,228,225,166,160,128,29,99,169,45,4,228,81,114,170,135,140,154,158,23,206,248,47,84,103,155,160,119,77,136\"),2014223716)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.448ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [217,253,193,201,194,227,241,119,253,145,42,208,93,110,167,248,29,84,239,226,55,39,120,7,250,201,250,150,243,137,194,150],\"capacity\": 45}",
              "sol": "Buffer.buffer(abi.encode(\"217,253,193,201,194,227,241,119,253,145,42,208,93,110,167,248,29,84,239,226,55,39,120,7,250,201,250,150,243,137,194,150\"),45)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.449ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [97,36,229,46,224,245,3,250,244,96,200,35,164,52,64,115,53,185,122,254,19,111,152,227,209,187,113,104,52,112,159,53],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"97,36,229,46,224,245,3,250,244,96,200,35,164,52,64,115,53,185,122,254,19,111,152,227,209,187,113,104,52,112,159,53\"),103)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.449ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [135,105,160,206,144,150,57,208,123,111,108,199,9,213,159,250,237,150,89,178,16,125,107,87,109,2,194,101,57,93,51,50],\"capacity\": 64}",
              "sol": "Buffer.buffer(abi.encode(\"135,105,160,206,144,150,57,208,123,111,108,199,9,213,159,250,237,150,89,178,16,125,107,87,109,2,194,101,57,93,51,50\"),64)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.456ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.456ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.457ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 160,\"Y\": 97}",
              "sol": "Pairing.G1Point(160,97)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.458ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 96,\"Y\": 61}",
              "sol": "Pairing.G1Point(96,61)"
            },
            {
              "js": "{\"X\": 200000,\"Y\": 48}",
              "sol": "Pairing.G1Point(200000,48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.458ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [27,31],\"Y\": [2014223714,59]}",
              "sol": "Pairing.G2Point([uint(27),uint(31)],[uint(2014223714),uint(59)])"
            },
            {
              "js": "{\"X\": [2014223716,54],\"Y\": [59,1532892062]}",
              "sol": "Pairing.G2Point([uint(2014223716),uint(54)],[uint(59),uint(1532892062)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.459ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 17,\"Y\": 2}",
              "sol": "Pairing.G1Point(17,2)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.460ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 6,\"Y\": 65},{\"X\": 20,\"Y\": 32},{\"X\": 26,\"Y\": 98},{\"X\": 0,\"Y\": 26},{\"X\": 96,\"Y\": 21},{\"X\": 161,\"Y\": 101},{\"X\": 27,\"Y\": 27},{\"X\": 129,\"Y\": 16},{\"X\": 18,\"Y\": 49},{\"X\": 27,\"Y\": 16}]",
              "sol": "[Pairing.G1Point(6,65),Pairing.G1Point(20,32),Pairing.G1Point(26,98),Pairing.G1Point(0,26),Pairing.G1Point(96,21),Pairing.G1Point(161,101),Pairing.G1Point(27,27),Pairing.G1Point(129,16),Pairing.G1Point(18,49),Pairing.G1Point(27,16)]"
            },
            {
              "js": "[{\"X\": [3,200000],\"Y\": [96,87]},{\"X\": [11,5],\"Y\": [25,1024]},{\"X\": [28,98],\"Y\": [22,129]},{\"X\": [96,63],\"Y\": [1,257]},{\"X\": [20,16],\"Y\": [55,18]},{\"X\": [60,31],\"Y\": [1024,1532892064]},{\"X\": [102,257],\"Y\": [21,95]},{\"X\": [1024,9],\"Y\": [2014223714,255]},{\"X\": [46,31],\"Y\": [6,86]},{\"X\": [61,160],\"Y\": [26,45]}]",
              "sol": "[Pairing.G2Point([uint(3),uint(200000)],[uint(96),uint(87)]),Pairing.G2Point([uint(11),uint(5)],[uint(25),uint(1024)]),Pairing.G2Point([uint(28),uint(98)],[uint(22),uint(129)]),Pairing.G2Point([uint(96),uint(63)],[uint(1),uint(257)]),Pairing.G2Point([uint(20),uint(16)],[uint(55),uint(18)]),Pairing.G2Point([uint(60),uint(31)],[uint(1024),uint(1532892064)]),Pairing.G2Point([uint(102),uint(257)],[uint(21),uint(95)]),Pairing.G2Point([uint(1024),uint(9)],[uint(2014223714),uint(255)]),Pairing.G2Point([uint(46),uint(31)],[uint(6),uint(86)]),Pairing.G2Point([uint(61),uint(160)],[uint(26),uint(45)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 0,\"Y\": 58},{\"X\": 1024,\"Y\": 55},{\"X\": 1532892063,\"Y\": 10},{\"X\": 55,\"Y\": 1532892063},{\"X\": 257,\"Y\": 32},{\"X\": 1023,\"Y\": 0},{\"X\": 26,\"Y\": 86},{\"X\": 27,\"Y\": 65},{\"X\": 29,\"Y\": 20},{\"X\": 200001,\"Y\": 1532892063},{\"X\": 10,\"Y\": 59}]",
                "sol": "[Pairing.G1Point(11,160),Pairing.G1Point(161,23),Pairing.G1Point(2014223714,46),Pairing.G1Point(24,27),Pairing.G1Point(97,9),Pairing.G1Point(96,200001),Pairing.G1Point(160,1),Pairing.G1Point(103,1024),Pairing.G1Point(66,16),Pairing.G1Point(55,96),Pairing.G1Point(21,2014223716)]"
              },
              {
                "js": "[{\"X\": [3,200000],\"Y\": [96,87]},{\"X\": [11,5],\"Y\": [25,1024]},{\"X\": [28,98],\"Y\": [22,129]},{\"X\": [96,63],\"Y\": [1,257]},{\"X\": [20,16],\"Y\": [55,18]},{\"X\": [60,31],\"Y\": [1024,1532892064]},{\"X\": [102,257],\"Y\": [21,95]},{\"X\": [1024,9],\"Y\": [2014223714,255]},{\"X\": [46,31],\"Y\": [6,86]},{\"X\": [61,160],\"Y\": [26,45]}]",
                "sol": "[Pairing.G2Point([uint(3),uint(200000)],[uint(96),uint(87)]),Pairing.G2Point([uint(11),uint(5)],[uint(25),uint(1024)]),Pairing.G2Point([uint(28),uint(98)],[uint(22),uint(129)]),Pairing.G2Point([uint(96),uint(63)],[uint(1),uint(257)]),Pairing.G2Point([uint(20),uint(16)],[uint(55),uint(18)]),Pairing.G2Point([uint(60),uint(31)],[uint(1024),uint(1532892064)]),Pairing.G2Point([uint(102),uint(257)],[uint(21),uint(95)]),Pairing.G2Point([uint(1024),uint(9)],[uint(2014223714),uint(255)]),Pairing.G2Point([uint(46),uint(31)],[uint(6),uint(86)]),Pairing.G2Point([uint(61),uint(160)],[uint(26),uint(45)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.469ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 55,\"Y\": 58}",
              "sol": "Pairing.G1Point(55,58)"
            },
            {
              "js": "{\"X\": [22,19],\"Y\": [257,15]}",
              "sol": "Pairing.G2Point([uint(22),uint(19)],[uint(257),uint(15)])"
            },
            {
              "js": "{\"X\": 7,\"Y\": 127}",
              "sol": "Pairing.G1Point(7,127)"
            },
            {
              "js": "{\"X\": [31,22],\"Y\": [1025,23]}",
              "sol": "Pairing.G2Point([uint(31),uint(22)],[uint(1025),uint(23)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.470ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 4,\"Y\": 161}",
              "sol": "Pairing.G1Point(4,161)"
            },
            {
              "js": "{\"X\": [10,1023],\"Y\": [30,65]}",
              "sol": "Pairing.G2Point([uint(10),uint(1023)],[uint(30),uint(65)])"
            },
            {
              "js": "{\"X\": 30,\"Y\": 87}",
              "sol": "Pairing.G1Point(30,87)"
            },
            {
              "js": "{\"X\": [8,20],\"Y\": [88,2014223714]}",
              "sol": "Pairing.G2Point([uint(8),uint(20)],[uint(88),uint(2014223714)])"
            },
            {
              "js": "{\"X\": 24,\"Y\": 19}",
              "sol": "Pairing.G1Point(24,19)"
            },
            {
              "js": "{\"X\": [66,25],\"Y\": [87,9]}",
              "sol": "Pairing.G2Point([uint(66),uint(25)],[uint(87),uint(9)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.476ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.477ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.477ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.478ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.479ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.479ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.480ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.480ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.481ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.481ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.482ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.485ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [34,27,135,205,91,222,9,120,43,108,57,65,80,145,112,50,178,234,235,60,129,186,168,153,231,78,19,97,50,244,102,110],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"34,27,135,205,91,222,9,120,43,108,57,65,80,145,112,50,178,234,235,60,129,186,168,153,231,78,19,97,50,244,102,110\"),19)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.486ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [44,39,80,213,55,207,116,155,222,82,69,91,140,20,210,15,105,82,128,204,160,101,83,56,121,32,150,184,233,152,186,64],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"44,39,80,213,55,207,116,155,222,82,69,91,140,20,210,15,105,82,128,204,160,101,83,56,121,32,150,184,233,152,186,64\"),257)"
            },
            {
              "js": "[219,200,124,99,181,193,48,90,101,23,119,121,107,121,168,8,141,145,123,45,119,108,3,160,132,168,152,176,101,9,250,145]",
              "sol": "abi.encode(\"219,200,124,99,181,193,48,90,101,23,119,121,107,121,168,8,141,145,123,45,119,108,3,160,132,168,152,176,101,9,250,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.486ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [63,96,28,36,167,130,155,7,255,227,203,124,141,169,75,9,254,103,208,235,66,237,239,242,163,214,204,138,99,220,189,177],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"63,96,28,36,167,130,155,7,255,227,203,124,141,169,75,9,254,103,208,235,66,237,239,242,163,214,204,138,99,220,189,177\"),257)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.487ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [145,2,175,202,102,179,64,160,208,109,111,225,125,181,231,21,228,78,178,234,235,112,189,113,82,206,138,77,175,10,7,130],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"145,2,175,202,102,179,64,160,208,109,111,225,125,181,231,21,228,78,178,234,235,112,189,113,82,206,138,77,175,10,7,130\"),1024)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.488ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[216,12,203,227,242,96,193,238,22,20,2,138,196,102,141,196,203,0,42,189,56,58,63,66,181,222,3,24,17,193,249,141]",
              "sol": "stringToBytes32(\"216,12,203,227,242,96,193,238,22,20,2,138,196,102,141,196,203,0,42,189,56,58,63,66,181,222,3,24,17,193,249,141\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.488ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[26,22,214,187,155,238,203,155,96,94,135,137,45,242,161,82,64,235,242,27,102,14,3,143,118,100,135,78,195,85,186,94]",
              "sol": "stringToBytes32(\"26,22,214,187,155,238,203,155,96,94,135,137,45,242,161,82,64,235,242,27,102,14,3,143,118,100,135,78,195,85,186,94\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[198,172,218,10,248,92,1,74,120,206,28,137,123,205,50,31,154,98,189,67,146,99,34,243,249,192,20,120,92,226,154,60]",
              "sol": "abi.encode(\"198,172,218,10,248,92,1,74,120,206,28,137,123,205,50,31,154,98,189,67,146,99,34,243,249,192,20,120,92,226,154,60\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.531ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.531ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.531ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.532ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.532ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.533ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"zovzcfi\"",
              "sol": "\"zovzcfi\""
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.533ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.534ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.534ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.536ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"nawo6m\"",
              "sol": "\"nawo6m\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.536ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"i2k8e\"",
              "sol": "\"i2k8e\""
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.537ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.537ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"sq85ic\"",
              "sol": "\"sq85ic\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.537ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.538ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"i2k8e\"",
              "sol": "\"i2k8e\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"nawo6m\",\"P\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"nawo6m\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.538ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"[\",\"sq85ic\",\"zovzcfi\",\"ge2l74\",\"zovzcfi\",\"P\"]",
              "sol": "[string(\"[\"),string(\"sq85ic\"),string(\"zovzcfi\"),string(\"ge2l74\"),string(\"zovzcfi\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.539ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"zovzcfi\"",
              "sol": "\"zovzcfi\""
            },
            {
              "js": "[\"nawo6m\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"u08v0j\",\"u79yhp\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\",\"ty4kz7\",\"6tu5rr\",\"u08v0j\"]",
              "sol": "[string(\"nawo6m\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"u08v0j\"),string(\"u79yhp\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ty4kz7\"),string(\"6tu5rr\"),string(\"u08v0j\")]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.539ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"i2k8e\"",
              "sol": "\"i2k8e\""
            },
            {
              "js": "[\"39qewm\",\"zovzcfi\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"6tu5rr\",\"h33qhw\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"i2k8e\"]",
              "sol": "[string(\"39qewm\"),string(\"zovzcfi\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"6tu5rr\"),string(\"h33qhw\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"i2k8e\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.540ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"gt5k2n\"",
              "sol": "\"gt5k2n\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.540ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ge2l74\"]",
              "sol": "[string(\"ge2l74\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.541ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"u79yhp\"",
              "sol": "\"u79yhp\""
            },
            {
              "js": "[\"u08v0j\"]",
              "sol": "[string(\"u08v0j\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.541ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"39qewm\"",
              "sol": "\"39qewm\""
            },
            {
              "js": "[\"u79yhp\"]",
              "sol": "[string(\"u79yhp\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.542ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"u79yhp\"",
              "sol": "\"u79yhp\""
            },
            {
              "js": "[\"0\",\"6tu5rr\"]",
              "sol": "[string(\"0\"),string(\"6tu5rr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.542ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"xdah\"",
              "sol": "\"xdah\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ge2l74\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ge2l74\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.543ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "[\"u79yhp\",\"39qewm\"]",
              "sol": "[string(\"u79yhp\"),string(\"39qewm\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.543ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"mw9pmh\"",
              "sol": "\"mw9pmh\""
            },
            {
              "js": "[\"6tu5rr\",\"[\"]",
              "sol": "[string(\"6tu5rr\"),string(\"[\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.544ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"ty4kz7\",\"ERC1820_ACCEPT_MAGIC\",\"L\"]",
              "sol": "[string(\"ty4kz7\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.544ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"nawo6m\"",
              "sol": "\"nawo6m\""
            },
            {
              "js": "[\"zovzcfi\",\"ERC1820_ACCEPT_MAGIC\",\"6tu5rr\"]",
              "sol": "[string(\"zovzcfi\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"6tu5rr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.545ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"mw9pmh\"",
              "sol": "\"mw9pmh\""
            },
            {
              "js": "[\"6tu5rr\",\"r95zk\",\"i2k8e\"]",
              "sol": "[string(\"6tu5rr\"),string(\"r95zk\"),string(\"i2k8e\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.546ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "[\"zovzcfi\",\"xdah\",\"h33qhw\"]",
              "sol": "[string(\"zovzcfi\"),string(\"xdah\"),string(\"h33qhw\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.547ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"0\",\"nawo6m\",\"ty4kz7\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"0\"),string(\"nawo6m\"),string(\"ty4kz7\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.547ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"mw9pmh\"",
              "sol": "\"mw9pmh\""
            },
            {
              "js": "[\"u79yhp\",\"zovzcfi\",\"ge2l74\",\"u79yhp\"]",
              "sol": "[string(\"u79yhp\"),string(\"zovzcfi\"),string(\"ge2l74\"),string(\"u79yhp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.548ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "[\"gt5k2n\",\"i2k8e\",\"nawo6m\",\"[\"]",
              "sol": "[string(\"gt5k2n\"),string(\"i2k8e\"),string(\"nawo6m\"),string(\"[\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.548ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"nawo6m\",\"ge2l74\",\"sq85ic\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"nawo6m\"),string(\"ge2l74\"),string(\"sq85ic\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.549ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"nawo6m\"",
              "sol": "\"nawo6m\""
            },
            {
              "js": "[\"Capstones\",\"xdah\",\"ERC1820_ACCEPT_MAGIC\",\"i2k8e\",\"0\"]",
              "sol": "[string(\"Capstones\"),string(\"xdah\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"i2k8e\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.549ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"sq85ic\"",
              "sol": "\"sq85ic\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\",\"P\",\"h33qhw\",\"P\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"P\"),string(\"h33qhw\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.550ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"L\",\"0\",\"i2k8e\",\"ge2l74\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"L\"),string(\"0\"),string(\"i2k8e\"),string(\"ge2l74\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.551ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"zovzcfi\"",
              "sol": "\"zovzcfi\""
            },
            {
              "js": "[\"39qewm\",\"6tu5rr\",\"sq85ic\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"gt5k2n\"]",
              "sol": "[string(\"39qewm\"),string(\"6tu5rr\"),string(\"sq85ic\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"gt5k2n\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.551ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"5n1vxs\"",
              "sol": "\"5n1vxs\""
            },
            {
              "js": "[[104,105,135,110,153,129,59,157,124,20,82,53,40,155,201,146,29,15,149,215,35,12,29,6,103,156,191,52,186,89,115,65],[188,104,100,172,66,131,100,188,67,52,137,37,249,115,226,26,200,254,106,51,237,186,60,54,20,111,173,226,124,47,227,29],[48,249,59,98,239,28,166,187,230,230,210,248,15,196,113,89,246,99,41,65,198,229,214,208,248,4,35,86,0,162,128,75],[85,129,14,2,152,169,240,205,0,253,189,86,231,237,146,111,101,217,159,201,88,19,18,0,63,167,210,95,184,227,79,36],[163,254,132,109,14,46,67,147,251,106,168,55,169,22,113,18,114,233,250,14,101,61,50,117,217,250,158,128,199,123,18,67],[30,47,38,37,238,135,76,4,236,135,39,22,98,136,111,185,27,100,33,134,163,73,184,250,239,12,118,254,241,191,210,209],[177,21,247,214,57,144,159,125,63,167,99,10,146,13,130,118,176,233,225,101,11,223,28,126,23,94,3,11,17,244,144,58],[5,106,208,251,4,239,138,62,193,169,140,107,0,166,148,43,60,28,233,20,93,127,50,253,11,62,234,72,83,240,35,225],[46,46,29,136,128,236,182,72,84,148,133,230,25,31,40,138,210,115,134,85,179,26,80,189,150,170,82,113,254,232,53,21],[193,179,67,52,239,64,248,195,170,250,110,44,90,184,59,114,204,105,119,230,82,132,6,44,246,117,41,221,45,116,3,48]]",
              "sol": "[bytes(abi.encode(\"104,105,135,110,153,129,59,157,124,20,82,53,40,155,201,146,29,15,149,215,35,12,29,6,103,156,191,52,186,89,115,65\")),bytes(abi.encode(\"188,104,100,172,66,131,100,188,67,52,137,37,249,115,226,26,200,254,106,51,237,186,60,54,20,111,173,226,124,47,227,29\")),bytes(abi.encode(\"48,249,59,98,239,28,166,187,230,230,210,248,15,196,113,89,246,99,41,65,198,229,214,208,248,4,35,86,0,162,128,75\")),bytes(abi.encode(\"85,129,14,2,152,169,240,205,0,253,189,86,231,237,146,111,101,217,159,201,88,19,18,0,63,167,210,95,184,227,79,36\")),bytes(abi.encode(\"163,254,132,109,14,46,67,147,251,106,168,55,169,22,113,18,114,233,250,14,101,61,50,117,217,250,158,128,199,123,18,67\")),bytes(abi.encode(\"30,47,38,37,238,135,76,4,236,135,39,22,98,136,111,185,27,100,33,134,163,73,184,250,239,12,118,254,241,191,210,209\")),bytes(abi.encode(\"177,21,247,214,57,144,159,125,63,167,99,10,146,13,130,118,176,233,225,101,11,223,28,126,23,94,3,11,17,244,144,58\")),bytes(abi.encode(\"5,106,208,251,4,239,138,62,193,169,140,107,0,166,148,43,60,28,233,20,93,127,50,253,11,62,234,72,83,240,35,225\")),bytes(abi.encode(\"46,46,29,136,128,236,182,72,84,148,133,230,25,31,40,138,210,115,134,85,179,26,80,189,150,170,82,113,254,232,53,21\")),bytes(abi.encode(\"193,179,67,52,239,64,248,195,170,250,110,44,90,184,59,114,204,105,119,230,82,132,6,44,246,117,41,221,45,116,3,48\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.552ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "[[176,49,4,170,52,19,112,139,132,243,203,240,164,23,186,100,180,224,21,147,116,47,78,107,78,225,43,251,6,105,63,1],[72,240,184,42,96,188,106,119,39,130,108,235,124,37,201,95,6,9,24,109,134,30,155,199,124,128,222,45,89,217,253,140],[12,204,143,64,60,60,209,143,73,176,198,242,201,48,86,162,129,248,41,143,74,162,27,100,234,105,146,69,142,122,138,21],[202,199,110,86,40,229,254,106,246,178,120,119,70,165,45,234,192,72,42,129,32,120,81,21,235,198,164,77,185,56,173,249]]",
              "sol": "[bytes(abi.encode(\"176,49,4,170,52,19,112,139,132,243,203,240,164,23,186,100,180,224,21,147,116,47,78,107,78,225,43,251,6,105,63,1\")),bytes(abi.encode(\"72,240,184,42,96,188,106,119,39,130,108,235,124,37,201,95,6,9,24,109,134,30,155,199,124,128,222,45,89,217,253,140\")),bytes(abi.encode(\"12,204,143,64,60,60,209,143,73,176,198,242,201,48,86,162,129,248,41,143,74,162,27,100,234,105,146,69,142,122,138,21\")),bytes(abi.encode(\"202,199,110,86,40,229,254,106,246,178,120,119,70,165,45,234,192,72,42,129,32,120,81,21,235,198,164,77,185,56,173,249\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.554ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"5n1vxs\"",
              "sol": "\"5n1vxs\""
            },
            {
              "js": "[[22,53,141,73,117,38,234,144,116,77,101,130,116,183,184,44,218,192,11,34,175,236,144,235,107,80,177,112,58,36,99,146],[119,42,78,240,52,99,25,237,47,44,179,53,58,35,63,119,5,234,26,101,107,171,33,88,127,213,60,234,21,4,133,118],[109,155,252,253,178,26,241,62,173,166,166,128,166,26,152,99,12,61,222,167,222,237,7,143,43,218,82,39,102,117,96,78],[185,39,155,64,150,105,237,71,168,212,110,30,250,229,253,35,113,35,157,145,238,175,98,63,115,20,62,194,118,163,199,238],[235,44,1,252,143,225,69,242,148,155,191,95,161,88,32,81,149,157,10,128,32,16,237,83,146,188,73,82,164,35,129,237],[112,166,160,52,35,195,172,232,155,154,206,73,19,236,151,99,254,229,194,57,7,73,160,165,67,125,244,112,125,0,40,59],[28,186,230,248,173,81,52,13,126,205,105,65,240,241,108,108,100,95,190,75,31,112,52,110,197,110,10,94,61,38,156,53],[244,148,146,88,166,81,45,103,71,87,49,234,64,88,177,175,253,36,52,52,81,233,141,56,131,45,73,194,217,137,150,50],[233,93,80,68,238,44,16,54,20,187,235,145,161,79,243,130,11,52,36,141,94,152,177,62,46,6,78,33,243,34,55,106]]",
              "sol": "[bytes(abi.encode(\"22,53,141,73,117,38,234,144,116,77,101,130,116,183,184,44,218,192,11,34,175,236,144,235,107,80,177,112,58,36,99,146\")),bytes(abi.encode(\"119,42,78,240,52,99,25,237,47,44,179,53,58,35,63,119,5,234,26,101,107,171,33,88,127,213,60,234,21,4,133,118\")),bytes(abi.encode(\"109,155,252,253,178,26,241,62,173,166,166,128,166,26,152,99,12,61,222,167,222,237,7,143,43,218,82,39,102,117,96,78\")),bytes(abi.encode(\"185,39,155,64,150,105,237,71,168,212,110,30,250,229,253,35,113,35,157,145,238,175,98,63,115,20,62,194,118,163,199,238\")),bytes(abi.encode(\"235,44,1,252,143,225,69,242,148,155,191,95,161,88,32,81,149,157,10,128,32,16,237,83,146,188,73,82,164,35,129,237\")),bytes(abi.encode(\"112,166,160,52,35,195,172,232,155,154,206,73,19,236,151,99,254,229,194,57,7,73,160,165,67,125,244,112,125,0,40,59\")),bytes(abi.encode(\"28,186,230,248,173,81,52,13,126,205,105,65,240,241,108,108,100,95,190,75,31,112,52,110,197,110,10,94,61,38,156,53\")),bytes(abi.encode(\"244,148,146,88,166,81,45,103,71,87,49,234,64,88,177,175,253,36,52,52,81,233,141,56,131,45,73,194,217,137,150,50\")),bytes(abi.encode(\"233,93,80,68,238,44,16,54,20,187,235,145,161,79,243,130,11,52,36,141,94,152,177,62,46,6,78,33,243,34,55,106\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.555ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ge2l74\"",
              "sol": "\"ge2l74\""
            },
            {
              "js": "[[124,149,205,125,24,221,105,120,122,147,220,69,54,69,172,240,107,202,80,190,73,209,69,221,53,39,162,43,205,118,177,251],[132,151,56,71,229,162,8,4,11,13,219,34,110,113,84,239,4,220,113,12,193,85,177,253,81,155,183,105,120,100,41,114],[89,196,202,53,18,62,104,135,85,81,7,71,128,175,202,245,6,40,109,100,195,46,167,22,129,12,46,121,166,73,109,208],[94,18,114,254,160,193,155,55,101,108,131,128,144,240,180,233,36,200,150,208,247,20,134,68,43,254,198,37,206,46,41,148],[54,19,169,179,104,203,2,18,120,130,27,90,177,59,37,141,13,184,60,216,14,8,138,203,247,239,187,218,8,37,21,228],[230,147,99,242,222,243,239,195,168,117,4,162,239,49,169,249,105,217,210,239,82,191,241,253,3,141,207,145,76,233,153,59]]",
              "sol": "[bytes(abi.encode(\"124,149,205,125,24,221,105,120,122,147,220,69,54,69,172,240,107,202,80,190,73,209,69,221,53,39,162,43,205,118,177,251\")),bytes(abi.encode(\"132,151,56,71,229,162,8,4,11,13,219,34,110,113,84,239,4,220,113,12,193,85,177,253,81,155,183,105,120,100,41,114\")),bytes(abi.encode(\"89,196,202,53,18,62,104,135,85,81,7,71,128,175,202,245,6,40,109,100,195,46,167,22,129,12,46,121,166,73,109,208\")),bytes(abi.encode(\"94,18,114,254,160,193,155,55,101,108,131,128,144,240,180,233,36,200,150,208,247,20,134,68,43,254,198,37,206,46,41,148\")),bytes(abi.encode(\"54,19,169,179,104,203,2,18,120,130,27,90,177,59,37,141,13,184,60,216,14,8,138,203,247,239,187,218,8,37,21,228\")),bytes(abi.encode(\"230,147,99,242,222,243,239,195,168,117,4,162,239,49,169,249,105,217,210,239,82,191,241,253,3,141,207,145,76,233,153,59\"))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.556ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"6tu5rr\"",
              "sol": "\"6tu5rr\""
            },
            {
              "js": "[[50,96,16,200,221,168,137,170,233,69,35,58,169,55,71,246,30,42,115,141,28,62,235,148,22,101,158,70,6,94,179,106]]",
              "sol": "[bytes(abi.encode(\"50,96,16,200,221,168,137,170,233,69,35,58,169,55,71,246,30,42,115,141,28,62,235,148,22,101,158,70,6,94,179,106\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.556ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"zovzcfi\"",
              "sol": "\"zovzcfi\""
            },
            {
              "js": "[[63,145,171,63,246,125,231,101,172,145,230,182,179,21,255,133,46,24,86,142,175,211,75,16,35,29,4,14,154,211,179,1]]",
              "sol": "[bytes(abi.encode(\"63,145,171,63,246,125,231,101,172,145,230,182,179,21,255,133,46,24,86,142,175,211,75,16,35,29,4,14,154,211,179,1\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.557ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "[[25,14,133,12,178,159,116,35,126,86,233,227,127,172,148,246,28,35,214,34,150,111,14,152,0,120,37,188,35,87,128,130]]",
              "sol": "[bytes(abi.encode(\"25,14,133,12,178,159,116,35,126,86,233,227,127,172,148,246,28,35,214,34,150,111,14,152,0,120,37,188,35,87,128,130\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.557ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[105,218,83,227,91,63,4,238,239,82,243,230,169,233,86,124,91,150,68,58,32,127,179,157,64,79,231,161,180,163,204,214]]",
              "sol": "[bytes(abi.encode(\"105,218,83,227,91,63,4,238,239,82,243,230,169,233,86,124,91,150,68,58,32,127,179,157,64,79,231,161,180,163,204,214\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.558ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ty4kz7\"",
              "sol": "\"ty4kz7\""
            },
            {
              "js": "[[17,30,113,42,107,59,135,93,209,75,230,236,165,15,125,98,194,189,132,78,226,225,224,105,97,165,251,57,177,40,177,139],[66,23,252,36,65,6,93,121,96,150,101,43,253,196,196,174,144,169,221,155,203,2,66,218,80,115,145,243,248,18,245,190]]",
              "sol": "[bytes(abi.encode(\"17,30,113,42,107,59,135,93,209,75,230,236,165,15,125,98,194,189,132,78,226,225,224,105,97,165,251,57,177,40,177,139\")),bytes(abi.encode(\"66,23,252,36,65,6,93,121,96,150,101,43,253,196,196,174,144,169,221,155,203,2,66,218,80,115,145,243,248,18,245,190\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.558ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"sq85ic\"",
              "sol": "\"sq85ic\""
            },
            {
              "js": "[[85,46,160,245,5,85,37,222,94,198,199,84,77,255,226,4,71,144,63,184,142,217,243,206,184,60,40,204,254,66,110,154],[236,18,141,178,157,68,221,246,88,59,6,86,180,161,239,75,255,122,61,197,82,23,71,48,162,0,64,69,250,254,123,221]]",
              "sol": "[bytes(abi.encode(\"85,46,160,245,5,85,37,222,94,198,199,84,77,255,226,4,71,144,63,184,142,217,243,206,184,60,40,204,254,66,110,154\")),bytes(abi.encode(\"236,18,141,178,157,68,221,246,88,59,6,86,180,161,239,75,255,122,61,197,82,23,71,48,162,0,64,69,250,254,123,221\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.559ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"5n1vxs\"",
              "sol": "\"5n1vxs\""
            },
            {
              "js": "[[43,148,104,80,156,162,93,221,247,211,93,23,201,162,113,108,152,206,214,9,5,220,130,131,15,222,127,223,43,213,181,232],[89,135,202,146,86,49,72,94,37,178,190,1,226,22,182,198,110,231,42,135,234,221,122,112,100,149,95,67,33,113,125,4]]",
              "sol": "[bytes(abi.encode(\"43,148,104,80,156,162,93,221,247,211,93,23,201,162,113,108,152,206,214,9,5,220,130,131,15,222,127,223,43,213,181,232\")),bytes(abi.encode(\"89,135,202,146,86,49,72,94,37,178,190,1,226,22,182,198,110,231,42,135,234,221,122,112,100,149,95,67,33,113,125,4\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.559ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"h33qhw\"",
              "sol": "\"h33qhw\""
            },
            {
              "js": "[[244,18,188,30,28,40,126,0,34,37,185,186,18,1,95,174,187,133,83,189,148,115,76,83,128,83,220,195,96,74,52,177],[9,107,121,43,108,193,17,248,191,165,109,7,199,171,143,121,16,8,206,38,105,118,62,224,180,63,107,180,74,82,45,57]]",
              "sol": "[bytes(abi.encode(\"244,18,188,30,28,40,126,0,34,37,185,186,18,1,95,174,187,133,83,189,148,115,76,83,128,83,220,195,96,74,52,177\")),bytes(abi.encode(\"9,107,121,43,108,193,17,248,191,165,109,7,199,171,143,121,16,8,206,38,105,118,62,224,180,63,107,180,74,82,45,57\"))]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.560ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"nawo6m\"",
              "sol": "\"nawo6m\""
            },
            {
              "js": "[[134,115,44,201,225,121,112,202,177,253,22,45,128,180,35,23,35,176,146,65,216,230,192,50,130,210,76,38,213,247,178,90],[128,11,76,45,231,236,64,45,19,60,111,193,122,124,208,71,238,70,138,27,230,165,185,63,245,18,41,157,229,39,123,156],[135,141,226,106,136,60,68,75,43,52,153,242,124,122,230,49,179,91,197,133,15,123,73,86,156,185,88,188,242,162,127,245]]",
              "sol": "[bytes(abi.encode(\"134,115,44,201,225,121,112,202,177,253,22,45,128,180,35,23,35,176,146,65,216,230,192,50,130,210,76,38,213,247,178,90\")),bytes(abi.encode(\"128,11,76,45,231,236,64,45,19,60,111,193,122,124,208,71,238,70,138,27,230,165,185,63,245,18,41,157,229,39,123,156\")),bytes(abi.encode(\"135,141,226,106,136,60,68,75,43,52,153,242,124,122,230,49,179,91,197,133,15,123,73,86,156,185,88,188,242,162,127,245\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.560ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[37,252,134,153,247,97,181,116,236,16,32,81,239,18,74,250,253,38,220,128,189,170,131,171,41,249,79,16,89,58,150,119],[0,11,70,150,35,178,118,199,237,218,150,159,113,27,23,211,236,202,201,217,147,229,189,151,240,59,86,211,27,63,249,232],[207,32,158,125,27,249,49,167,150,207,238,89,154,3,101,31,99,142,100,174,60,213,251,23,159,23,181,38,189,134,217,102]]",
              "sol": "[bytes(abi.encode(\"37,252,134,153,247,97,181,116,236,16,32,81,239,18,74,250,253,38,220,128,189,170,131,171,41,249,79,16,89,58,150,119\")),bytes(abi.encode(\"0,11,70,150,35,178,118,199,237,218,150,159,113,27,23,211,236,202,201,217,147,229,189,151,240,59,86,211,27,63,249,232\")),bytes(abi.encode(\"207,32,158,125,27,249,49,167,150,207,238,89,154,3,101,31,99,142,100,174,60,213,251,23,159,23,181,38,189,134,217,102\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.561ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "[[0,229,186,91,42,74,3,184,132,230,13,67,83,226,71,92,7,72,131,230,238,26,63,52,236,119,131,247,168,63,175,128],[134,213,202,235,207,162,162,114,183,221,215,186,91,172,86,11,80,107,99,163,180,243,95,171,203,62,216,247,111,53,252,110],[12,13,133,93,114,241,18,139,63,154,85,233,253,168,215,235,248,236,243,3,17,112,124,186,160,66,144,206,12,195,106,159]]",
              "sol": "[bytes(abi.encode(\"0,229,186,91,42,74,3,184,132,230,13,67,83,226,71,92,7,72,131,230,238,26,63,52,236,119,131,247,168,63,175,128\")),bytes(abi.encode(\"134,213,202,235,207,162,162,114,183,221,215,186,91,172,86,11,80,107,99,163,180,243,95,171,203,62,216,247,111,53,252,110\")),bytes(abi.encode(\"12,13,133,93,114,241,18,139,63,154,85,233,253,168,215,235,248,236,243,3,17,112,124,186,160,66,144,206,12,195,106,159\"))]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.562ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"gaxkqs\"",
              "sol": "\"gaxkqs\""
            },
            {
              "js": "[[253,133,25,123,6,234,228,137,229,251,241,66,141,195,140,6,9,77,231,59,78,230,8,66,205,204,58,176,136,170,42,115],[24,187,172,53,94,208,195,130,59,156,70,95,12,187,94,3,245,75,103,220,1,249,226,148,54,60,188,54,55,9,2,25],[85,116,29,24,143,164,34,71,135,202,179,21,240,254,137,167,119,75,234,182,78,11,39,235,59,122,38,182,204,182,148,18]]",
              "sol": "[bytes(abi.encode(\"253,133,25,123,6,234,228,137,229,251,241,66,141,195,140,6,9,77,231,59,78,230,8,66,205,204,58,176,136,170,42,115\")),bytes(abi.encode(\"24,187,172,53,94,208,195,130,59,156,70,95,12,187,94,3,245,75,103,220,1,249,226,148,54,60,188,54,55,9,2,25\")),bytes(abi.encode(\"85,116,29,24,143,164,34,71,135,202,179,21,240,254,137,167,119,75,234,182,78,11,39,235,59,122,38,182,204,182,148,18\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.562ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"ty4kz7\"",
              "sol": "\"ty4kz7\""
            },
            {
              "js": "[[16,131,204,236,188,149,22,98,41,57,34,132,47,192,64,4,167,72,234,45,107,105,111,135,167,8,72,123,221,153,236,238],[255,74,63,201,163,136,33,48,148,47,238,8,132,237,230,208,211,39,119,218,194,239,149,134,69,218,199,109,230,82,230,50],[249,129,69,228,181,107,210,237,111,159,45,110,91,185,90,66,86,72,49,137,230,102,57,96,76,101,237,213,239,71,85,160],[58,153,184,71,180,138,6,208,212,223,64,221,65,74,21,4,119,171,137,216,153,85,90,169,95,80,236,162,242,100,121,253]]",
              "sol": "[bytes(abi.encode(\"16,131,204,236,188,149,22,98,41,57,34,132,47,192,64,4,167,72,234,45,107,105,111,135,167,8,72,123,221,153,236,238\")),bytes(abi.encode(\"255,74,63,201,163,136,33,48,148,47,238,8,132,237,230,208,211,39,119,218,194,239,149,134,69,218,199,109,230,82,230,50\")),bytes(abi.encode(\"249,129,69,228,181,107,210,237,111,159,45,110,91,185,90,66,86,72,49,137,230,102,57,96,76,101,237,213,239,71,85,160\")),bytes(abi.encode(\"58,153,184,71,180,138,6,208,212,223,64,221,65,74,21,4,119,171,137,216,153,85,90,169,95,80,236,162,242,100,121,253\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.563ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[74,75,17,11,156,142,55,209,6,255,47,237,237,48,128,170,19,75,58,49,2,166,107,84,183,226,60,88,250,225,224,99],[1,140,81,209,88,60,127,240,225,199,240,217,195,39,189,94,109,143,232,62,196,17,222,215,71,219,221,233,213,83,228,215],[64,253,63,22,233,203,7,195,230,196,201,244,26,124,25,195,166,220,102,89,217,110,161,213,214,8,138,53,5,54,199,48],[206,151,222,63,213,192,224,67,96,128,253,57,107,239,190,161,118,152,86,162,75,115,252,70,94,87,66,254,234,88,48,18]]",
              "sol": "[bytes(abi.encode(\"74,75,17,11,156,142,55,209,6,255,47,237,237,48,128,170,19,75,58,49,2,166,107,84,183,226,60,88,250,225,224,99\")),bytes(abi.encode(\"1,140,81,209,88,60,127,240,225,199,240,217,195,39,189,94,109,143,232,62,196,17,222,215,71,219,221,233,213,83,228,215\")),bytes(abi.encode(\"64,253,63,22,233,203,7,195,230,196,201,244,26,124,25,195,166,220,102,89,217,110,161,213,214,8,138,53,5,54,199,48\")),bytes(abi.encode(\"206,151,222,63,213,192,224,67,96,128,253,57,107,239,190,161,118,152,86,162,75,115,252,70,94,87,66,254,234,88,48,18\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.564ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"6tu5rr\"",
              "sol": "\"6tu5rr\""
            },
            {
              "js": "[[62,181,111,23,191,15,175,216,30,211,176,167,48,99,102,240,218,174,254,110,159,135,87,48,15,239,115,163,145,209,31,115],[219,11,14,194,106,213,153,105,162,81,123,0,136,238,132,49,199,244,151,49,157,12,165,64,54,237,66,194,182,22,7,202],[50,162,128,99,43,238,142,10,96,181,244,18,58,79,235,122,54,176,111,197,122,134,200,49,125,45,237,232,231,119,164,1],[111,9,124,205,243,124,239,154,97,231,243,67,249,40,202,67,70,140,253,169,27,186,97,145,7,104,176,64,204,91,126,141]]",
              "sol": "[bytes(abi.encode(\"62,181,111,23,191,15,175,216,30,211,176,167,48,99,102,240,218,174,254,110,159,135,87,48,15,239,115,163,145,209,31,115\")),bytes(abi.encode(\"219,11,14,194,106,213,153,105,162,81,123,0,136,238,132,49,199,244,151,49,157,12,165,64,54,237,66,194,182,22,7,202\")),bytes(abi.encode(\"50,162,128,99,43,238,142,10,96,181,244,18,58,79,235,122,54,176,111,197,122,134,200,49,125,45,237,232,231,119,164,1\")),bytes(abi.encode(\"111,9,124,205,243,124,239,154,97,231,243,67,249,40,202,67,70,140,253,169,27,186,97,145,7,104,176,64,204,91,126,141\"))]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.564ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"5n1vxs\"",
              "sol": "\"5n1vxs\""
            },
            {
              "js": "[[37,74,251,210,142,25,158,250,166,147,3,105,72,232,252,90,251,158,135,228,247,187,127,148,21,204,141,146,114,20,38,238],[200,249,180,65,245,177,3,217,84,34,198,8,215,67,253,184,221,132,7,154,183,36,90,234,138,65,169,241,124,253,102,198],[186,155,184,71,177,18,98,100,0,178,74,218,56,119,226,226,128,62,122,50,72,68,79,184,200,46,103,202,28,143,129,157],[214,4,72,59,247,247,8,191,177,38,142,163,171,191,22,207,98,108,114,184,13,19,39,232,145,110,2,230,183,69,157,103]]",
              "sol": "[bytes(abi.encode(\"37,74,251,210,142,25,158,250,166,147,3,105,72,232,252,90,251,158,135,228,247,187,127,148,21,204,141,146,114,20,38,238\")),bytes(abi.encode(\"200,249,180,65,245,177,3,217,84,34,198,8,215,67,253,184,221,132,7,154,183,36,90,234,138,65,169,241,124,253,102,198\")),bytes(abi.encode(\"186,155,184,71,177,18,98,100,0,178,74,218,56,119,226,226,128,62,122,50,72,68,79,184,200,46,103,202,28,143,129,157\")),bytes(abi.encode(\"214,4,72,59,247,247,8,191,177,38,142,163,171,191,22,207,98,108,114,184,13,19,39,232,145,110,2,230,183,69,157,103\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.565ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ty4kz7\"",
              "sol": "\"ty4kz7\""
            },
            {
              "js": "[[161,149,225,34,198,227,161,203,183,161,62,233,16,139,72,60,163,191,110,206,69,155,122,4,197,36,146,15,111,135,44,214],[65,242,94,208,2,215,86,226,207,248,192,62,105,17,93,227,79,85,181,158,127,5,250,74,172,96,238,61,9,143,50,182],[246,31,239,41,63,189,217,229,98,5,112,10,76,89,255,140,139,66,110,99,98,50,93,249,204,30,191,1,221,9,27,135],[60,221,135,61,95,200,229,101,64,150,199,23,244,224,114,184,230,214,123,97,50,188,95,205,223,0,15,62,187,41,97,70],[179,174,98,201,159,113,151,38,167,201,3,47,94,12,228,246,40,91,18,59,108,91,187,231,210,42,46,201,22,17,255,128]]",
              "sol": "[bytes(abi.encode(\"161,149,225,34,198,227,161,203,183,161,62,233,16,139,72,60,163,191,110,206,69,155,122,4,197,36,146,15,111,135,44,214\")),bytes(abi.encode(\"65,242,94,208,2,215,86,226,207,248,192,62,105,17,93,227,79,85,181,158,127,5,250,74,172,96,238,61,9,143,50,182\")),bytes(abi.encode(\"246,31,239,41,63,189,217,229,98,5,112,10,76,89,255,140,139,66,110,99,98,50,93,249,204,30,191,1,221,9,27,135\")),bytes(abi.encode(\"60,221,135,61,95,200,229,101,64,150,199,23,244,224,114,184,230,214,123,97,50,188,95,205,223,0,15,62,187,41,97,70\")),bytes(abi.encode(\"179,174,98,201,159,113,151,38,167,201,3,47,94,12,228,246,40,91,18,59,108,91,187,231,210,42,46,201,22,17,255,128\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.566ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"i2k8e\"",
              "sol": "\"i2k8e\""
            },
            {
              "js": "[[76,53,42,117,168,220,235,77,221,47,243,89,165,77,162,183,158,199,60,211,245,97,123,198,64,76,2,171,148,113,118,79],[31,225,15,38,220,228,100,44,66,242,223,253,206,225,67,214,3,44,8,224,168,183,49,227,132,2,140,212,21,222,157,101],[229,219,24,252,58,129,210,70,97,97,188,173,115,28,198,96,31,118,62,234,58,77,248,244,95,92,37,141,95,25,32,31],[223,102,22,184,97,8,224,38,138,231,12,3,34,156,181,155,111,253,217,31,115,13,113,85,62,227,131,38,89,168,70,89],[56,237,190,210,251,9,118,198,220,214,209,115,101,248,30,44,231,22,82,128,145,254,20,152,123,53,151,157,192,170,32,201]]",
              "sol": "[bytes(abi.encode(\"76,53,42,117,168,220,235,77,221,47,243,89,165,77,162,183,158,199,60,211,245,97,123,198,64,76,2,171,148,113,118,79\")),bytes(abi.encode(\"31,225,15,38,220,228,100,44,66,242,223,253,206,225,67,214,3,44,8,224,168,183,49,227,132,2,140,212,21,222,157,101\")),bytes(abi.encode(\"229,219,24,252,58,129,210,70,97,97,188,173,115,28,198,96,31,118,62,234,58,77,248,244,95,92,37,141,95,25,32,31\")),bytes(abi.encode(\"223,102,22,184,97,8,224,38,138,231,12,3,34,156,181,155,111,253,217,31,115,13,113,85,62,227,131,38,89,168,70,89\")),bytes(abi.encode(\"56,237,190,210,251,9,118,198,220,214,209,115,101,248,30,44,231,22,82,128,145,254,20,152,123,53,151,157,192,170,32,201\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.566ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[230,65,251,94,249,126,102,145,96,127,126,25,192,37,31,174,5,17,37,11,204,7,117,179,244,12,15,71,3,231,119,79],[128,227,111,68,174,185,215,211,205,54,47,230,157,177,105,244,50,234,30,142,191,36,56,253,12,42,30,52,232,31,154,168],[159,43,34,130,153,66,185,156,148,143,108,84,51,102,37,141,85,200,243,160,142,131,214,145,161,88,173,40,204,180,39,180],[140,72,9,92,75,181,70,13,111,19,105,44,234,168,136,202,42,28,74,230,90,126,37,190,236,135,0,14,70,133,60,218],[36,140,179,169,91,46,182,128,186,25,187,188,84,239,142,210,21,94,129,112,46,29,173,103,195,129,250,44,126,146,198,193]]",
              "sol": "[bytes(abi.encode(\"230,65,251,94,249,126,102,145,96,127,126,25,192,37,31,174,5,17,37,11,204,7,117,179,244,12,15,71,3,231,119,79\")),bytes(abi.encode(\"128,227,111,68,174,185,215,211,205,54,47,230,157,177,105,244,50,234,30,142,191,36,56,253,12,42,30,52,232,31,154,168\")),bytes(abi.encode(\"159,43,34,130,153,66,185,156,148,143,108,84,51,102,37,141,85,200,243,160,142,131,214,145,161,88,173,40,204,180,39,180\")),bytes(abi.encode(\"140,72,9,92,75,181,70,13,111,19,105,44,234,168,136,202,42,28,74,230,90,126,37,190,236,135,0,14,70,133,60,218\")),bytes(abi.encode(\"36,140,179,169,91,46,182,128,186,25,187,188,84,239,142,210,21,94,129,112,46,29,173,103,195,129,250,44,126,146,198,193\"))]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.567ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[115,81,57,100,134,245,36,249,109,70,213,84,213,33,180,208,113,242,161,63,187,86,110,91,249,141,219,234,167,144,180,37],[105,252,228,137,227,60,179,183,149,165,105,71,86,158,193,1,154,107,68,230,203,175,131,240,14,68,6,204,105,254,150,64],[86,172,154,157,169,170,237,5,175,186,117,142,236,147,162,232,98,0,137,173,241,122,46,142,188,133,189,57,114,84,44,25],[153,29,2,192,140,219,225,104,0,215,239,114,229,89,131,80,39,162,96,153,91,31,139,143,62,252,183,207,11,27,210,213],[200,199,147,70,45,208,102,214,16,137,209,169,154,34,116,248,168,96,104,249,123,250,85,38,118,2,51,134,134,206,176,73]]",
              "sol": "[bytes(abi.encode(\"115,81,57,100,134,245,36,249,109,70,213,84,213,33,180,208,113,242,161,63,187,86,110,91,249,141,219,234,167,144,180,37\")),bytes(abi.encode(\"105,252,228,137,227,60,179,183,149,165,105,71,86,158,193,1,154,107,68,230,203,175,131,240,14,68,6,204,105,254,150,64\")),bytes(abi.encode(\"86,172,154,157,169,170,237,5,175,186,117,142,236,147,162,232,98,0,137,173,241,122,46,142,188,133,189,57,114,84,44,25\")),bytes(abi.encode(\"153,29,2,192,140,219,225,104,0,215,239,114,229,89,131,80,39,162,96,153,91,31,139,143,62,252,183,207,11,27,210,213\")),bytes(abi.encode(\"200,199,147,70,45,208,102,214,16,137,209,169,154,34,116,248,168,96,104,249,123,250,85,38,118,2,51,134,134,206,176,73\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.568ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[94]",
              "sol": "bytes1(\"94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.568ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.568ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.569ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.570ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.570ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.571ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "\"iso3kl\"",
              "sol": "\"iso3kl\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.571ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"sq85ic\"",
              "sol": "\"sq85ic\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.571ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.572ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"h33qhw\"",
              "sol": "\"h33qhw\""
            },
            {
              "js": "\"u79yhp\"",
              "sol": "\"u79yhp\""
            },
            {
              "js": "\"ty4kz7\"",
              "sol": "\"ty4kz7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.572ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"gaxkqs\"",
              "sol": "\"gaxkqs\""
            },
            {
              "js": "\"h33qhw\"",
              "sol": "\"h33qhw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.572ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "\"gt5k2n\"",
              "sol": "\"gt5k2n\""
            },
            {
              "js": "\"u79yhp\"",
              "sol": "\"u79yhp\""
            },
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "\"6tu5rr\"",
              "sol": "\"6tu5rr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.573ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"i2k8e\"",
              "sol": "\"i2k8e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.573ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"mw9pmh\"",
              "sol": "\"mw9pmh\""
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.574ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"gaxkqs\"",
              "sol": "\"gaxkqs\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.574ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"gaxkqs\"",
              "sol": "\"gaxkqs\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.575ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.575ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"iso3kl\"]",
              "sol": "[string(\"iso3kl\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.576ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[233,214,210,46,72,170,230,150,114,172,23,190,245,229,42,86,101,208,156,168,214,185,85,239,7,166,99,205,56,161,7,107],[28,82,113,155,40,87,250,7,128,23,5,82,252,196,38,232,37,179,67,55,150,110,231,65,110,239,153,8,57,45,155,80]]",
              "sol": "[bytes(abi.encode(\"233,214,210,46,72,170,230,150,114,172,23,190,245,229,42,86,101,208,156,168,214,185,85,239,7,166,99,205,56,161,7,107\")),bytes(abi.encode(\"28,82,113,155,40,87,250,7,128,23,5,82,252,196,38,232,37,179,67,55,150,110,231,65,110,239,153,8,57,45,155,80\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.576ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.577ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[112,100,196,129,163,232,156,81,79,186,144,213,28,6,154,175,50,76,78,174,177,117,11,226,200,157,214,152,201,153,215,88]",
              "sol": "stringToBytes32(\"112,100,196,129,163,232,156,81,79,186,144,213,28,6,154,175,50,76,78,174,177,117,11,226,200,157,214,152,201,153,215,88\")"
            },
            {
              "js": "[3,168,12,42,229,135,65,236,45,139,135,206,66,242,144,150,31,18,111,95,139,144,16,69,102,215,69,93,16,48,117,16]",
              "sol": "stringToBytes32(\"3,168,12,42,229,135,65,236,45,139,135,206,66,242,144,150,31,18,111,95,139,144,16,69,102,215,69,93,16,48,117,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.577ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[60,140,167,221,226,197,216,154,194,88,226,18,85,98,200,11,61,225,251,73,146,101,16,35,111,237,136,133,19,163,92,92]",
              "sol": "stringToBytes32(\"60,140,167,221,226,197,216,154,194,88,226,18,85,98,200,11,61,225,251,73,146,101,16,35,111,237,136,133,19,163,92,92\")"
            },
            {
              "js": "[1,189,154,194,186,147,2,218,169,236,144,139,172,219,144,86,188,248,24,99,87,210,6,100,226,50,42,118,147,246,202,145]",
              "sol": "abi.encode(\"1,189,154,194,186,147,2,218,169,236,144,139,172,219,144,86,188,248,24,99,87,210,6,100,226,50,42,118,147,246,202,145\")"
            },
            {
              "js": "[106,167,234,217,82,210,29,162,102,166,190,255,48,81,234,10,114,44,38,56,201,213,122,1,52,217,187,204,156,33,120,69]",
              "sol": "abi.encode(\"106,167,234,217,82,210,29,162,102,166,190,255,48,81,234,10,114,44,38,56,201,213,122,1,52,217,187,204,156,33,120,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.578ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[132,248,206,78,235,200,58,12,72,82,8,138,243,192,239,45,184,219,5,214,167,90,132,208,240,78,239,73,91,113,43,40]",
              "sol": "abi.encode(\"132,248,206,78,235,200,58,12,72,82,8,138,243,192,239,45,184,219,5,214,167,90,132,208,240,78,239,73,91,113,43,40\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[56,71,29,183,200,155,73,25,78,195,142,140,44,39,229,219,171,22,81,93,63,112,217,86,231,40,138,104,92,184,30,55]",
              "sol": "abi.encode(\"56,71,29,183,200,155,73,25,78,195,142,140,44,39,229,219,171,22,81,93,63,112,217,86,231,40,138,104,92,184,30,55\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.579ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[247,173,36,109,232,77,84,166,140,27,145,156,61,1,16,71,230,79,92,37,249,27,203,207,244,166,94,229,92,87,91,88]",
              "sol": "stringToBytes32(\"247,173,36,109,232,77,84,166,140,27,145,156,61,1,16,71,230,79,92,37,249,27,203,207,244,166,94,229,92,87,91,88\")"
            },
            {
              "js": "\"u08v0j\"",
              "sol": "\"u08v0j\""
            },
            {
              "js": "[41,147,178,184,133,111,17,47,150,180,98,152,50,231,245,186,52,209,65,34,35,88,53,78,198,98,134,225,64,26,136,122]",
              "sol": "abi.encode(\"41,147,178,184,133,111,17,47,150,180,98,152,50,231,245,186,52,209,65,34,35,88,53,78,198,98,134,225,64,26,136,122\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[79,50,0,142,9,212,75,204,192,126,71,139,82,46,142,211,38,193,36,32,160,55,33,31,230,167,230,78,108,138,115,129]",
              "sol": "stringToBytes32(\"79,50,0,142,9,212,75,204,192,126,71,139,82,46,142,211,38,193,36,32,160,55,33,31,230,167,230,78,108,138,115,129\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[114,8,34,59,165,170,215,82,102,86,139,212,23,122,34,179,16,13,186,43,228,85,185,183,114,115,96,127,110,187,162,214]",
              "sol": "abi.encode(\"114,8,34,59,165,170,215,82,102,86,139,212,23,122,34,179,16,13,186,43,228,85,185,183,114,115,96,127,110,187,162,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.580ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[39,76,155,85,141,166,2,121,210,67,49,50,125,114,78,200,16,138,210,222,148,87,130,79,32,206,49,205,49,97,223,193]",
              "sol": "stringToBytes32(\"39,76,155,85,141,166,2,121,210,67,49,50,125,114,78,200,16,138,210,222,148,87,130,79,32,206,49,205,49,97,223,193\")"
            },
            {
              "js": "[134,114,173,35,165,251,82,28,24,53,33,73,223,127,162,151,253,181,34,199,83,89,252,98,242,37,173,149,26,69,196,254]",
              "sol": "abi.encode(\"134,114,173,35,165,251,82,28,24,53,33,73,223,127,162,151,253,181,34,199,83,89,252,98,242,37,173,149,26,69,196,254\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[39,76,155,85,141,166,2,121,210,67,49,50,125,114,78,200,16,138,210,222,148,87,130,79,32,206,49,205,49,97,223,193]",
                "sol": "stringToBytes32(\"39,76,155,85,141,166,2,121,210,67,49,50,125,114,78,200,16,138,210,222,148,87,130,79,32,206,49,205,49,97,223,193\")"
              },
              {
                "js": "[199,148,11,43,2,245,191,63,140,211,78,62,210,54,106,42,252,92,45,204,243,37,206,246,58,140,81,84,233,169,141,55,102]",
                "sol": "bytes33(\"199,148,11,43,2,245,191,63,140,211,78,62,210,54,106,42,252,92,45,204,243,37,206,246,58,140,81,84,233,169,141,55,102\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.581ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[86,12,29,18,205,123,198,247,133,189,171,77,101,218,13,227,101,20,149,249,33,149,179,37,72,117,81,151,204,242,171,51]",
              "sol": "abi.encode(\"86,12,29,18,205,123,198,247,133,189,171,77,101,218,13,227,101,20,149,249,33,149,179,37,72,117,81,151,204,242,171,51\")"
            },
            {
              "js": "[23,89,248,3,65,77,87,35,152,130,185,244,144,159,152,102,216,177,71,215,117,180,153,162,124,139,253,253,82,255,125,180]",
              "sol": "stringToBytes32(\"23,89,248,3,65,77,87,35,152,130,185,244,144,159,152,102,216,177,71,215,117,180,153,162,124,139,253,253,82,255,125,180\")"
            },
            {
              "js": "[103,250,240,161,166,251,28,159,22,200,94,175,134,134,40,221,67,178,91,186,115,156,147,197,10,127,90,244,197,115,244,94]",
              "sol": "abi.encode(\"103,250,240,161,166,251,28,159,22,200,94,175,134,134,40,221,67,178,91,186,115,156,147,197,10,127,90,244,197,115,244,94\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[118,93,185,108,11,24,6,77,121,89,17,10,149,212,41,64,125,237,103,252,133,47,195,181,92,190,147,243,161,59,238,254]",
              "sol": "abi.encode(\"118,93,185,108,11,24,6,77,121,89,17,10,149,212,41,64,125,237,103,252,133,47,195,181,92,190,147,243,161,59,238,254\")"
            },
            {
              "js": "[142,184,134,237,140,225,233,196,93,23,106,98,150,178,132,3,203,83,213,35,199,247,105,250,115,152,248,90,61,235,103,179]",
              "sol": "stringToBytes32(\"142,184,134,237,140,225,233,196,93,23,106,98,150,178,132,3,203,83,213,35,199,247,105,250,115,152,248,90,61,235,103,179\")"
            },
            {
              "js": "[145,70,77,186,190,225,31,221,238,97,121,215,123,60,203,56,15,68,73,162,191,193,141,22,232,101,66,252,203,28,131,180]",
              "sol": "abi.encode(\"145,70,77,186,190,225,31,221,238,97,121,215,123,60,203,56,15,68,73,162,191,193,141,22,232,101,66,252,203,28,131,180\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[26,137,6,18,213,198,20,179,168,250,145,230,27,193,173,1,75,95,221,237,80,90,24,147,60,73,136,146,209,65,21,26]",
              "sol": "abi.encode(\"26,137,6,18,213,198,20,179,168,250,145,230,27,193,173,1,75,95,221,237,80,90,24,147,60,73,136,146,209,65,21,26\")"
            },
            {
              "js": "[85,5,125,52,203,66,162,130,38,9,226,209,17,36,120,5,238,22,24,203,37,10,164,251,8,149,97,202,132,126,66,135]",
              "sol": "stringToBytes32(\"85,5,125,52,203,66,162,130,38,9,226,209,17,36,120,5,238,22,24,203,37,10,164,251,8,149,97,202,132,126,66,135\")"
            },
            {
              "js": "[50,218,225,130,163,250,237,173,216,91,45,34,212,169,169,39,204,170,157,65,14,105,190,65,129,210,191,96,85,143,75,252]",
              "sol": "abi.encode(\"50,218,225,130,163,250,237,173,216,91,45,34,212,169,169,39,204,170,157,65,14,105,190,65,129,210,191,96,85,143,75,252\")"
            },
            {
              "js": "\"xdah\"",
              "sol": "\"xdah\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[50,150,116,91,165,0,221,209,3,193,74,63,22,92,67,41,114,220,33,133,235,174,173,82,198,195,144,98,115,103,152,108]",
              "sol": "abi.encode(\"50,150,116,91,165,0,221,209,3,193,74,63,22,92,67,41,114,220,33,133,235,174,173,82,198,195,144,98,115,103,152,108\")"
            },
            {
              "js": "[247,148,66,20,183,105,146,160,143,83,54,54,91,200,114,245,59,80,249,169,113,2,94,42,33,168,80,147,58,61,51,217]",
              "sol": "stringToBytes32(\"247,148,66,20,183,105,146,160,143,83,54,54,91,200,114,245,59,80,249,169,113,2,94,42,33,168,80,147,58,61,51,217\")"
            },
            {
              "js": "[112,55,35,192,241,233,173,19,194,11,91,177,203,75,206,245,251,80,202,187,108,31,143,176,167,38,199,8,6,79,115,73]",
              "sol": "abi.encode(\"112,55,35,192,241,233,173,19,194,11,91,177,203,75,206,245,251,80,202,187,108,31,143,176,167,38,199,8,6,79,115,73\")"
            },
            {
              "js": "\"6tu5rr\"",
              "sol": "\"6tu5rr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[241,36,19,229,221,196,127,230,2,205,121,49,52,73,67,48,197,251,228,49,65,65,22,232,31,63,52,80,108,59,51,228]",
              "sol": "abi.encode(\"241,36,19,229,221,196,127,230,2,205,121,49,52,73,67,48,197,251,228,49,65,65,22,232,31,63,52,80,108,59,51,228\")"
            },
            {
              "js": "[135,133,116,254,141,77,115,129,47,190,180,5,80,215,241,69,237,127,197,222,235,157,49,40,93,157,178,99,38,254,109,137]",
              "sol": "stringToBytes32(\"135,133,116,254,141,77,115,129,47,190,180,5,80,215,241,69,237,127,197,222,235,157,49,40,93,157,178,99,38,254,109,137\")"
            },
            {
              "js": "[180,248,205,173,92,208,18,179,16,231,220,40,116,250,167,234,73,183,169,81,13,182,177,187,22,229,131,233,160,127,125,247]",
              "sol": "abi.encode(\"180,248,205,173,92,208,18,179,16,231,220,40,116,250,167,234,73,183,169,81,13,182,177,187,22,229,131,233,160,127,125,247\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[69,92,47,233,68,88,171,66,65,232,5,170,241,247,177,6,126,47,226,187,150,79,65,8,247,188,241,222,201,190,75,146]",
              "sol": "abi.encode(\"69,92,47,233,68,88,171,66,65,232,5,170,241,247,177,6,126,47,226,187,150,79,65,8,247,188,241,222,201,190,75,146\")"
            },
            {
              "js": "[142,38,44,74,125,1,27,104,185,168,241,107,45,18,169,43,211,67,107,141,142,124,229,189,192,87,27,90,79,95,10,16]",
              "sol": "stringToBytes32(\"142,38,44,74,125,1,27,104,185,168,241,107,45,18,169,43,211,67,107,141,142,124,229,189,192,87,27,90,79,95,10,16\")"
            },
            {
              "js": "[26,221,18,189,123,227,185,137,193,139,255,7,27,49,93,99,141,43,221,188,185,225,220,107,135,247,121,92,73,163,213,206]",
              "sol": "abi.encode(\"26,221,18,189,123,227,185,137,193,139,255,7,27,49,93,99,141,43,221,188,185,225,220,107,135,247,121,92,73,163,213,206\")"
            },
            {
              "js": "\"r95zk\"",
              "sol": "\"r95zk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[28,196,197,170,198,32,9,213,77,38,192,161,201,67,232,92,87,101,14,228,43,4,204,199,137,192,12,190,8,63,48,204]",
              "sol": "abi.encode(\"28,196,197,170,198,32,9,213,77,38,192,161,201,67,232,92,87,101,14,228,43,4,204,199,137,192,12,190,8,63,48,204\")"
            },
            {
              "js": "[8,255,58,54,163,177,200,116,178,253,197,129,36,153,240,220,60,130,78,242,119,22,23,190,173,163,43,140,62,232,236,54]",
              "sol": "stringToBytes32(\"8,255,58,54,163,177,200,116,178,253,197,129,36,153,240,220,60,130,78,242,119,22,23,190,173,163,43,140,62,232,236,54\")"
            },
            {
              "js": "[68,110,63,63,50,159,139,128,254,255,235,107,43,34,176,199,99,130,119,83,53,201,102,41,241,154,141,255,230,55,47,79]",
              "sol": "abi.encode(\"68,110,63,63,50,159,139,128,254,255,235,107,43,34,176,199,99,130,119,83,53,201,102,41,241,154,141,255,230,55,47,79\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[0,170,177,170,244,137,92,237,201,190,251,84,115,36,93,91,177,47,113,87,61,156,38,170,70,95,87,2,228,185,188,150]",
              "sol": "abi.encode(\"0,170,177,170,244,137,92,237,201,190,251,84,115,36,93,91,177,47,113,87,61,156,38,170,70,95,87,2,228,185,188,150\")"
            },
            {
              "js": "[84,82,102,212,190,233,92,31,206,145,37,83,83,100,113,7,168,114,102,67,74,96,90,161,231,136,58,207,99,92,5,198]",
              "sol": "stringToBytes32(\"84,82,102,212,190,233,92,31,206,145,37,83,83,100,113,7,168,114,102,67,74,96,90,161,231,136,58,207,99,92,5,198\")"
            },
            {
              "js": "[99,214,62,227,172,169,191,6,119,23,225,74,9,160,211,88,148,11,1,210,39,47,44,112,207,246,102,157,196,208,140,146]",
              "sol": "abi.encode(\"99,214,62,227,172,169,191,6,119,23,225,74,9,160,211,88,148,11,1,210,39,47,44,112,207,246,102,157,196,208,140,146\")"
            },
            {
              "js": "\"xdah\"",
              "sol": "\"xdah\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.587ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[110,145,2,252,167,146,128,148,5,24,222,245,254,95,32,218,79,147,241,62,15,232,140,75,45,75,119,125,57,11,196,248]",
              "sol": "abi.encode(\"110,145,2,252,167,146,128,148,5,24,222,245,254,95,32,218,79,147,241,62,15,232,140,75,45,75,119,125,57,11,196,248\")"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[218,102,4,86,21,206,47,47,40,173,252,110,109,96,153,44,206,181,197,167,252,185,183,47,180,59,180,210,9,63,128,9]",
              "sol": "abi.encode(\"218,102,4,86,21,206,47,47,40,173,252,110,109,96,153,44,206,181,197,167,252,185,183,47,180,59,180,210,9,63,128,9\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.587ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[188,81,123,134,100,166,93,244,60,119,207,119,142,229,142,67,48,197,165,19,46,112,231,3,4,222,253,74,171,90,130,211]",
              "sol": "stringToBytes32(\"188,81,123,134,100,166,93,244,60,119,207,119,142,229,142,67,48,197,165,19,46,112,231,3,4,222,253,74,171,90,130,211\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[145,82,177,222,167,25,193,162,56,119,52,209,197,71,116,40,152,199,11,229,99,88,229,249,151,67,143,125,30,122,1,112]",
              "sol": "stringToBytes32(\"145,82,177,222,167,25,193,162,56,119,52,209,197,71,116,40,152,199,11,229,99,88,229,249,151,67,143,125,30,122,1,112\")"
            },
            {
              "js": "[156,206,247,210,250,74,125,128,127,108,55,216,200,189,162,155,40,37,55,200,109,252,102,171,117,158,139,103,99,184,176,254]",
              "sol": "stringToBytes32(\"156,206,247,210,250,74,125,128,127,108,55,216,200,189,162,155,40,37,55,200,109,252,102,171,117,158,139,103,99,184,176,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.588ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[75,248,169,36,11,209,231,78,177,162,71,142,129,120,129,229,139,220,235,76,0,154,236,126,98,32,173,208,164,202,176,243]",
              "sol": "stringToBytes32(\"75,248,169,36,11,209,231,78,177,162,71,142,129,120,129,229,139,220,235,76,0,154,236,126,98,32,173,208,164,202,176,243\")"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[167,124,124,237,100,20,70,141,19,84,88,218,27,122,123,139,117,212,86,96,165,71,6,103,20,249,229,235,211,10,172,194]",
              "sol": "stringToBytes32(\"167,124,124,237,100,20,70,141,19,84,88,218,27,122,123,139,117,212,86,96,165,71,6,103,20,249,229,235,211,10,172,194\")"
            },
            {
              "js": "[178,90,130,19,225,57,88,245,39,55,104,175,249,179,251,28,189,23,142,154,124,82,140,56,230,198,76,39,130,29,13,208,151,135,41,116,2,37,238,162,196,107,126,163,65,197,144,0,148,229,254,179,139,241,253,99,139,33,31,142,44,207,19,136,210]",
              "sol": "abi.encode(\"178,90,130,19,225,57,88,245,39,55,104,175,249,179,251,28,189,23,142,154,124,82,140,56,230,198,76,39,130,29,13,208,151,135,41,116,2,37,238,162,196,107,126,163,65,197,144,0,148,229,254,179,139,241,253,99,139,33,31,142,44,207,19,136,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.593ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.594ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[33,86]",
              "sol": "[uint(33),uint(86)]"
            },
            {
              "js": "[[58,46],[8,200000]]",
              "sol": "[[uint(58),uint(46)],[uint(8),uint(200000)]]"
            },
            {
              "js": "[6,48]",
              "sol": "[uint(6),uint(48)]"
            },
            {
              "js": "[161,200001]",
              "sol": "[uint(161),uint(200001)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.597ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.597ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[54]",
              "sol": "[uint(54)]"
            },
            {
              "js": "{\"A\": {\"X\": 128,\"Y\": 96},\"B\": {\"X\": [2014223715,1023],\"Y\": [1532892063,5]},\"C\": {\"X\": 257,\"Y\": 61}}",
              "sol": "Verifier.Proof(Pairing.G1Point(128,96),Pairing.G2Point([uint(2014223715),uint(1023)],[uint(1532892063),uint(5)]),Pairing.G1Point(257,61))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[257]",
              "sol": "[uint(257)]"
            },
            {
              "js": "{\"A\": {\"X\": 21,\"Y\": 95},\"B\": {\"X\": [61,22],\"Y\": [24,102]},\"C\": {\"X\": 256,\"Y\": 22}}",
              "sol": "Verifier.Proof(Pairing.G1Point(21,95),Pairing.G2Point([uint(61),uint(22)],[uint(24),uint(102)]),Pairing.G1Point(256,22))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.600ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.600ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.600ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "8",
                "sol": "8"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"accounts[7]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.602ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.603ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.603ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.603ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.606ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.607ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "[71,105,80,185,5,6,172,30,53,156,137,158,6,39,171,2,92,150,206,204,136,149,58,132,248,161,205,232,61,246,248,193]",
              "sol": "abi.encode(\"71,105,80,185,5,6,172,30,53,156,137,158,6,39,171,2,92,150,206,204,136,149,58,132,248,161,205,232,61,246,248,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "8",
                "sol": "8"
              },
              {
                "js": "[71,105,80,185,5,6,172,30,53,156,137,158,6,39,171,2,92,150,206,204,136,149,58,132,248,161,205,232,61,246,248,193]",
                "sol": "abi.encode(\"71,105,80,185,5,6,172,30,53,156,137,158,6,39,171,2,92,150,206,204,136,149,58,132,248,161,205,232,61,246,248,193\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.609ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.611ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[158,4,165,75]",
              "sol": "bytes4(\"158,4,165,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.613ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.613ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.613ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "61",
                "sol": "61"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.614ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.615ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "[17,51,172,181,68,57,40,115,33,46,57,120,108,144,41,76,219,128,93,81,187,19,156,28,72,252,186,238,101,35,179,132]",
              "sol": "abi.encode(\"17,51,172,181,68,57,40,115,33,46,57,120,108,144,41,76,219,128,93,81,187,19,156,28,72,252,186,238,101,35,179,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[214,246,225,216,17,253,168,22,209,130,161,48,215,231,66,190,95,135,118,171,69,5,28,138,132,148,8,91,33,211,105,232]",
              "sol": "abi.encode(\"214,246,225,216,17,253,168,22,209,130,161,48,215,231,66,190,95,135,118,171,69,5,28,138,132,148,8,91,33,211,105,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.617ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.619ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[49,1532892062]",
              "sol": "[uint(49),uint(1532892062)]"
            },
            {
              "js": "[[256,9],[255,25]]",
              "sol": "[[uint(256),uint(9)],[uint(255),uint(25)]]"
            },
            {
              "js": "[5,200000]",
              "sol": "[uint(5),uint(200000)]"
            },
            {
              "js": "[162,24]",
              "sol": "[uint(162),uint(24)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.620ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.622ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.624ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.624ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.625ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.627ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.628ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.629ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.629ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.631ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "200001",
                "sol": "200001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.632ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:19:17.633ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.634ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:19:17.634ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}