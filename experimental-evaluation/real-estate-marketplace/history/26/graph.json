{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace',
  contracts:
   { Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           getOwner:
            [ { name: 'getOwner',
                signature: 'getOwner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: { constructor: [Array], transferOwnership: [Array] },
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getOwner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     Pausable:
      { projectGraph: [Circular],
        name: 'Pausable',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setPaused:
            [ { name: 'setPaused',
                signature: 'setPaused(bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _paused:
            { functionsWrite: { setPaused: [Array] },
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setPaused',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'paused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Paused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Unpaused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 43, column: 0 }, end: { line: 71, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     ERC165:
      { projectGraph: [Circular],
        name: 'ERC165',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(bytes4)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterface:
            [ { name: '_registerInterface',
                signature: '_registerInterface(bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterface',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 73, column: 0 },
              end: { line: 107, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     ERC721:
      { projectGraph: [Circular],
        name: 'ERC721',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _exists:
            [ { name: '_exists',
                signature: '_exists(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isApprovedOrOwner:
            [ { name: '_isApprovedOrOwner',
                signature: '_isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transferFrom:
            [ { name: '_transferFrom',
                signature: '_transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _checkOnERC721Received:
            [ { name: '_checkOnERC721Received',
                signature: '_checkOnERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _clearApproval:
            [ { name: '_clearApproval',
                signature: '_clearApproval(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom:
         { Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Counters',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkOnERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 109, column: 0 },
              end: { line: 311, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     ERC721Enumerable:
      { projectGraph: [Circular],
        name: 'ERC721Enumerable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transferFrom:
            [ { name: '_transferFrom',
                signature: '_transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _tokensOfOwner:
            [ { name: '_tokensOfOwner',
                signature: '_tokensOfOwner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenToOwnerEnumeration:
            [ { name: '_addTokenToOwnerEnumeration',
                signature: '_addTokenToOwnerEnumeration(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenToAllTokensEnumeration:
            [ { name: '_addTokenToAllTokensEnumeration',
                signature: '_addTokenToAllTokensEnumeration(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFromOwnerEnumeration:
            [ { name: '_removeTokenFromOwnerEnumeration',
                signature: '_removeTokenFromOwnerEnumeration(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFromAllTokensEnumeration:
            [ { name: '_removeTokenFromAllTokensEnumeration',
                signature: '_removeTokenFromAllTokensEnumeration(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: { _addTokenToAllTokensEnumeration: [Array] },
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_tokensOfOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenToOwnerEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenToAllTokensEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFromOwnerEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFromAllTokensEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 313, column: 0 },
              end: { line: 483, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     ERC721Metadata:
      { projectGraph: [Circular],
        name: 'ERC721Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           getName:
            [ { name: 'getName',
                signature: 'getName()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getSymbol:
            [ { name: 'getSymbol',
                signature: 'getSymbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBaseTokenURI:
            [ { name: 'getBaseTokenURI',
                signature: 'getBaseTokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setTokenURI:
            [ { name: 'setTokenURI',
                signature: 'setTokenURI(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _baseTokenURI:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_baseTokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom:
         { ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           usingOraclize:
            { contract:
               { projectGraph: [Circular],
                 name: 'usingOraclize',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getName',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getSymbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBaseTokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 485, column: 0 },
              end: { line: 540, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     ERC721MintableComplete:
      { projectGraph: [Circular],
        name: 'ERC721MintableComplete',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        stateVariables:
         { _baseTokenURI:
            { functionsWrite: {},
              contract: [Circular],
              name: '_baseTokenURI',
              isArray: false,
              initialValue:
               'https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           solcChecker:
            { projectGraph: [Circular],
              name: 'solcChecker',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'solcChecker',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeI:
            { projectGraph: [Circular],
              name: 'OraclizeI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { cbAddress: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           OraclizeAddrResolverI:
            { projectGraph: [Circular],
              name: 'OraclizeAddrResolverI',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OraclizeAddrResolverI',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           Buffer:
            { projectGraph: [Circular],
              name: 'Buffer',
              kind: 'library',
              isAbstract: false,
              functions:
               { init: [Array],
                 resize: [Array],
                 max: [Array],
                 append: [Array],
                 appendInt: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { buffer: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Buffer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           CBOR:
            { projectGraph: [Circular],
              name: 'CBOR',
              kind: 'library',
              isAbstract: false,
              functions:
               { encodeType: [Array],
                 encodeIndefiniteLengthType: [Array],
                 encodeUInt: [Array],
                 encodeInt: [Array],
                 encodeBytes: [Array],
                 encodeString: [Array],
                 startArray: [Array],
                 startMap: [Array],
                 endSequence: [Array] },
              modifiers: {},
              stateVariables:
               { MAJOR_TYPE_INT: [Object],
                 MAJOR_TYPE_MAP: [Object],
                 MAJOR_TYPE_BYTES: [Object],
                 MAJOR_TYPE_ARRAY: [Object],
                 MAJOR_TYPE_STRING: [Object],
                 MAJOR_TYPE_NEGATIVE_INT: [Object],
                 MAJOR_TYPE_CONTENT_FREE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CBOR',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
           usingOraclize:
            { projectGraph: [Circular],
              name: 'usingOraclize',
              kind: 'contract',
              isAbstract: false,
              functions:
               { oraclize_setNetwork: [Array],
                 oraclize_setNetworkName: [Array],
                 oraclize_getNetworkName: [Array],
                 __callback: [Array],
                 oraclize_getPrice: [Array],
                 oraclize_query: [Array],
                 oraclize_setProof: [Array],
                 oraclize_cbAddress: [Array],
                 getCodeSize: [Array],
                 oraclize_setCustomGasPrice: [Array],
                 oraclize_randomDS_getSessionPubKeyHash: [Array],
                 parseAddr: [Array],
                 strCompare: [Array],
                 indexOf: [Array],
                 strConcat: [Array],
                 safeParseInt: [Array],
                 parseInt: [Array],
                 uint2str: [Array],
                 stra2cbor: [Array],
                 ba2cbor: [Array],
                 oraclize_newRandomDSQuery: [Array],
                 oraclize_randomDS_setCommitment: [Array],
                 verifySig: [Array],
                 oraclize_randomDS_proofVerify__sessionKeyValidity: [Array],
                 oraclize_randomDS_proofVerify__returnCode: [Array],
                 matchBytes32Prefix: [Array],
                 oraclize_randomDS_proofVerify__main: [Array],
                 copyBytes: [Array],
                 safer_ecrecover: [Array],
                 ecrecovery: [Array],
                 safeMemoryCleaner: [Array] },
              modifiers:
               { oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'usingOraclize',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' } },
        inheritsFrom:
         { ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 4 },
           usingOraclize:
            { contract:
               { projectGraph: [Circular],
                 name: 'usingOraclize',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721MintableComplete',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 543, column: 0 },
              end: { line: 561, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
     solcChecker:
      { projectGraph: [Circular],
        name: 'solcChecker',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'solcChecker',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'f',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 30, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     OraclizeI:
      { projectGraph: [Circular],
        name: 'OraclizeI',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { cbAddress:
            { functionsWrite: {},
              contract: [Circular],
              name: 'cbAddress',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OraclizeI',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setProofType',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setCustomGasPrice',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'randomDS_getSessionPubKeyHash',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'queryN',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'query',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'query2',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'query_withGasLimit',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'queryN_withGasLimit',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'query2_withGasLimit',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 34, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     OraclizeAddrResolverI:
      { projectGraph: [Circular],
        name: 'OraclizeAddrResolverI',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OraclizeAddrResolverI',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'getAddress',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 51, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     Buffer:
      { projectGraph: [Circular],
        name: 'Buffer',
        kind: 'library',
        isAbstract: false,
        functions:
         { init:
            [ { name: 'init',
                signature: 'init(Buffer.buffer,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           resize:
            [ { name: 'resize',
                signature: 'resize(Buffer.buffer,uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           max:
            [ { name: 'max',
                signature: 'max(uint,uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           append:
            [ { name: 'append',
                signature: 'append(Buffer.buffer,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} },
              { name: 'append',
                signature: 'append(Buffer.buffer,uint8)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           appendInt:
            [ { name: 'appendInt',
                signature: 'appendInt(Buffer.buffer,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { buffer:
            { name: 'buffer',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Buffer',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'buffer',
                members: [Array],
                loc: [Object],
                parentName: 'Buffer' },
              { type: 'FunctionDefinition',
                name: 'init',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'resize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'max',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'append',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'append',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'appendInt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 83, column: 0 },
              end: { line: 197, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     CBOR:
      { projectGraph: [Circular],
        name: 'CBOR',
        kind: 'library',
        isAbstract: false,
        functions:
         { encodeType:
            [ { name: 'encodeType',
                signature: 'encodeType(Buffer.buffer,uint8,uint)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           encodeIndefiniteLengthType:
            [ { name: 'encodeIndefiniteLengthType',
                signature: 'encodeIndefiniteLengthType(Buffer.buffer,uint8)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           encodeUInt:
            [ { name: 'encodeUInt',
                signature: 'encodeUInt(Buffer.buffer,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           encodeInt:
            [ { name: 'encodeInt',
                signature: 'encodeInt(Buffer.buffer,int)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           encodeBytes:
            [ { name: 'encodeBytes',
                signature: 'encodeBytes(Buffer.buffer,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           encodeString:
            [ { name: 'encodeString',
                signature: 'encodeString(Buffer.buffer,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           startArray:
            [ { name: 'startArray',
                signature: 'startArray(Buffer.buffer)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           startMap:
            [ { name: 'startMap',
                signature: 'startMap(Buffer.buffer)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           endSequence:
            [ { name: 'endSequence',
                signature: 'endSequence(Buffer.buffer)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { MAJOR_TYPE_INT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_INT',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_MAP:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_MAP',
              isArray: false,
              initialValue: 5,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_BYTES:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_BYTES',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_ARRAY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_ARRAY',
              isArray: false,
              initialValue: 4,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_STRING:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_STRING',
              isArray: false,
              initialValue: 3,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_NEGATIVE_INT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_NEGATIVE_INT',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAJOR_TYPE_CONTENT_FREE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAJOR_TYPE_CONTENT_FREE',
              isArray: false,
              initialValue: 7,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CBOR',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Buffer',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeType',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeIndefiniteLengthType',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeUInt',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeInt',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeBytes',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'encodeString',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'startArray',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'startMap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'endSequence',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 199, column: 0 },
              end: { line: 266, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     usingOraclize:
      { projectGraph: [Circular],
        name: 'usingOraclize',
        kind: 'contract',
        isAbstract: false,
        functions:
         { oraclize_setNetwork:
            [ { name: 'oraclize_setNetwork',
                signature: 'oraclize_setNetwork(uint8)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_setNetwork',
                signature: 'oraclize_setNetwork()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: {} } ],
           oraclize_setNetworkName:
            [ { name: 'oraclize_setNetworkName',
                signature: 'oraclize_setNetworkName(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_getNetworkName:
            [ { name: 'oraclize_getNetworkName',
                signature: 'oraclize_getNetworkName()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           __callback:
            [ { name: '__callback',
                signature: '__callback(bytes32,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: '__callback',
                signature: '__callback(bytes32,string,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_getPrice:
            [ { name: 'oraclize_getPrice',
                signature: 'oraclize_getPrice(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_getPrice',
                signature: 'oraclize_getPrice(string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_query:
            [ { name: 'oraclize_query',
                signature: 'oraclize_query(string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string,string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string,string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[1])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[1])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[1],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[1],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[2])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[2])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[2],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[2],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[3],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[3],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[4])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[4])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[4],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[4],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[5])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[5])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,string[5],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,string[5],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[1])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[1])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[1],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[1],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[2])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[2])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[2],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[2],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[3],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[3],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[4])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[4])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[4],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[4],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[5])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[5])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(uint,string,bytes[5],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'oraclize_query',
                signature: 'oraclize_query(string,bytes[5],uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           oraclize_setProof:
            [ { name: 'oraclize_setProof',
                signature: 'oraclize_setProof(byte)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_cbAddress:
            [ { name: 'oraclize_cbAddress',
                signature: 'oraclize_cbAddress()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCodeSize:
            [ { name: 'getCodeSize',
                signature: 'getCodeSize(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_setCustomGasPrice:
            [ { name: 'oraclize_setCustomGasPrice',
                signature: 'oraclize_setCustomGasPrice(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_randomDS_getSessionPubKeyHash:
            [ { name: 'oraclize_randomDS_getSessionPubKeyHash',
                signature: 'oraclize_randomDS_getSessionPubKeyHash()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           parseAddr:
            [ { name: 'parseAddr',
                signature: 'parseAddr(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           strCompare:
            [ { name: 'strCompare',
                signature: 'strCompare(string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           indexOf:
            [ { name: 'indexOf',
                signature: 'indexOf(string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           strConcat:
            [ { name: 'strConcat',
                signature: 'strConcat(string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'strConcat',
                signature: 'strConcat(string,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'strConcat',
                signature: 'strConcat(string,string,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'strConcat',
                signature: 'strConcat(string,string,string,string,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeParseInt:
            [ { name: 'safeParseInt',
                signature: 'safeParseInt(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeParseInt',
                signature: 'safeParseInt(string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           parseInt:
            [ { name: 'parseInt',
                signature: 'parseInt(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'parseInt',
                signature: 'parseInt(string,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           uint2str:
            [ { name: 'uint2str',
                signature: 'uint2str(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           stra2cbor:
            [ { name: 'stra2cbor',
                signature: 'stra2cbor(string[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           ba2cbor:
            [ { name: 'ba2cbor',
                signature: 'ba2cbor(bytes[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           oraclize_newRandomDSQuery:
            [ { name: 'oraclize_newRandomDSQuery',
                signature: 'oraclize_newRandomDSQuery(uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           oraclize_randomDS_setCommitment:
            [ { name: 'oraclize_randomDS_setCommitment',
                signature: 'oraclize_randomDS_setCommitment(bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           verifySig:
            [ { name: 'verifySig',
                signature: 'verifySig(bytes32,bytes,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_randomDS_proofVerify__sessionKeyValidity:
            [ { name: 'oraclize_randomDS_proofVerify__sessionKeyValidity',
                signature:
                 'oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           oraclize_randomDS_proofVerify__returnCode:
            [ { name: 'oraclize_randomDS_proofVerify__returnCode',
                signature:
                 'oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           matchBytes32Prefix:
            [ { name: 'matchBytes32Prefix',
                signature: 'matchBytes32Prefix(bytes32,bytes,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           oraclize_randomDS_proofVerify__main:
            [ { name: 'oraclize_randomDS_proofVerify__main',
                signature:
                 'oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           copyBytes:
            [ { name: 'copyBytes',
                signature: 'copyBytes(bytes,uint,uint,bytes,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safer_ecrecover:
            [ { name: 'safer_ecrecover',
                signature: 'safer_ecrecover(bytes32,uint8,bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ecrecovery:
            [ { name: 'ecrecovery',
                signature: 'ecrecovery(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeMemoryCleaner:
            [ { name: 'safeMemoryCleaner',
                signature: 'safeMemoryCleaner()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        stateVariables:
         { oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: { oraclize_setNetwork: [Array] },
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: { oraclize_setNetworkName: [Array] },
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'usingOraclize',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'CBOR',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'oraclizeAPI',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'oraclize_randomDS_proofVerify',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_setNetwork',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_setNetworkName',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_getNetworkName',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_setNetwork',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '__callback',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '__callback',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_getPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_getPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_query',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_setProof',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_cbAddress',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCodeSize',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_setCustomGasPrice',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'oraclize_randomDS_getSessionPubKeyHash',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'parseAddr',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'strCompare',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'indexOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'strConcat',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'strConcat',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'strConcat',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'strConcat',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeParseInt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeParseInt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              ... 16 more items ],
           kind: 'contract',
           loc:
            { start: { line: 272, column: 0 },
              end: { line: 1333, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
     SolnSquareVerifier:
      { projectGraph: [Circular],
        name: 'SolnSquareVerifier',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSolution:
            [ { name: 'addSolution',
                signature:
                 'addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        stateVariables:
         { solutions:
            { functionsWrite: { addSolution: [Array] },
              contract: [Circular],
              name: 'solutions',
              isArray: true,
              initialValue: [],
              type: 'SolnSquareVerifier.Solution[]',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           solutionKeyToSubmissionStatus:
            { functionsWrite: {},
              contract: [Circular],
              name: 'solutionKeyToSubmissionStatus',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenIdToSolution:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenIdToSolution',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>SolnSquareVerifier.Solution)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _baseTokenURI:
            { functionsWrite: {},
              contract: [Circular],
              name: '_baseTokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getOwner: [Array],
                 transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], setPaused: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Pausable: [Object], Ownable: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _transferFrom: [Array],
                 _mint: [Array],
                 _tokensOfOwner: [Array],
                 _addTokenToOwnerEnumeration: [Array],
                 _addTokenToAllTokensEnumeration: [Array],
                 _removeTokenFromOwnerEnumeration: [Array],
                 _removeTokenFromAllTokensEnumeration: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getSymbol: [Array],
                 getBaseTokenURI: [Array],
                 tokenURI: [Array],
                 setTokenURI: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object],
                 oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _baseTokenURI: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC721Enumerable: [Object],
                 ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object],
                 usingOraclize: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721MintableComplete:
            { projectGraph: [Circular],
              name: 'ERC721MintableComplete',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array], mint: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object],
                 oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { _baseTokenURI: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC721Metadata: [Object],
                 ERC721Enumerable: [Object],
                 ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object],
                 usingOraclize: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721MintableComplete',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           BN256G2:
            { projectGraph: [Circular],
              name: 'BN256G2',
              kind: 'library',
              isAbstract: false,
              functions:
               { ECTwistAdd: [Array],
                 ECTwistMul: [Array],
                 GetFieldModulus: [Array],
                 submod: [Array],
                 _FQ2Mul: [Array],
                 _FQ2Muc: [Array],
                 _FQ2Add: [Array],
                 _FQ2Sub: [Array],
                 _FQ2Div: [Array],
                 _FQ2Inv: [Array],
                 _isOnCurve: [Array],
                 _modInv: [Array],
                 _fromJacobian: [Array],
                 _ECTwistAddJacobian: [Array],
                 _ECTwistDoubleJacobian: [Array],
                 _ECTwistMulJacobian: [Array] },
              modifiers: {},
              stateVariables:
               { FIELD_MODULUS: [Object],
                 TWISTBX: [Object],
                 TWISTBY: [Object],
                 PTXX: [Object],
                 PTXY: [Object],
                 PTYX: [Object],
                 PTYY: [Object],
                 PTZX: [Object],
                 PTZY: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BN256G2',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
           Pairing:
            { projectGraph: [Circular],
              name: 'Pairing',
              kind: 'library',
              isAbstract: false,
              functions:
               { P1: [Array],
                 P2: [Array],
                 negate: [Array],
                 addition: [Array],
                 scalar_mul: [Array],
                 pairing: [Array],
                 pairingProd2: [Array],
                 pairingProd3: [Array],
                 pairingProd4: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { G1Point: [Object], G2Point: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pairing',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
           Verifier:
            { projectGraph: [Circular],
              name: 'Verifier',
              kind: 'contract',
              isAbstract: false,
              functions:
               { verifyingKey: [Array], verify: [Array], verifyTx: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { VerifyingKey: [Object], Proof: [Object] },
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Verifier',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' } },
        inheritsFrom:
         { Verifier:
            { contract:
               { projectGraph: [Circular],
                 name: 'Verifier',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
              parameters: [],
              level: 0 },
           ERC721MintableComplete:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721MintableComplete',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [ [Object], [Object] ],
              level: 0 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 4 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 4 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 5 },
           usingOraclize:
            { contract:
               { projectGraph: [Circular],
                 name: 'usingOraclize',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
              parameters: [],
              level: 2 } },
        structs:
         { Solution:
            { name: 'Solution',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SolnSquareVerifier',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [Array],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Solution',
                members: [Array],
                loc: [Object],
                parentName: 'SolnSquareVerifier' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SolutionAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSolution',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/SolnSquareVerifier.sol' },
     BN256G2:
      { projectGraph: [Circular],
        name: 'BN256G2',
        kind: 'library',
        isAbstract: false,
        functions:
         { ECTwistAdd:
            [ { name: 'ECTwistAdd',
                signature:
                 'ECTwistAdd(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           ECTwistMul:
            [ { name: 'ECTwistMul',
                signature: 'ECTwistMul(uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           GetFieldModulus:
            [ { name: 'GetFieldModulus',
                signature: 'GetFieldModulus()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           submod:
            [ { name: 'submod',
                signature: 'submod(uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _FQ2Mul:
            [ { name: '_FQ2Mul',
                signature: '_FQ2Mul(uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _FQ2Muc:
            [ { name: '_FQ2Muc',
                signature: '_FQ2Muc(uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _FQ2Add:
            [ { name: '_FQ2Add',
                signature: '_FQ2Add(uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _FQ2Sub:
            [ { name: '_FQ2Sub',
                signature: '_FQ2Sub(uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _FQ2Div:
            [ { name: '_FQ2Div',
                signature: '_FQ2Div(uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _FQ2Inv:
            [ { name: '_FQ2Inv',
                signature: '_FQ2Inv(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isOnCurve:
            [ { name: '_isOnCurve',
                signature: '_isOnCurve(uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _modInv:
            [ { name: '_modInv',
                signature: '_modInv(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _fromJacobian:
            [ { name: '_fromJacobian',
                signature:
                 '_fromJacobian(uint256,uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _ECTwistAddJacobian:
            [ { name: '_ECTwistAddJacobian',
                signature:
                 '_ECTwistAddJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _ECTwistDoubleJacobian:
            [ { name: '_ECTwistDoubleJacobian',
                signature:
                 '_ECTwistDoubleJacobian(uint256,uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _ECTwistMulJacobian:
            [ { name: '_ECTwistMulJacobian',
                signature:
                 '_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { FIELD_MODULUS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'FIELD_MODULUS',
              isArray: false,
              initialValue:
               21888242871839274960365879161692293417541007897083299644943589776713637167104n,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           TWISTBX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TWISTBX',
              isArray: false,
              initialValue:
               19485874751759353675627258919609332873587335530194223940292077161673301950464n,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           TWISTBY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TWISTBY',
              isArray: false,
              initialValue:
               266929791119991181324448862429795678336841372587974270000727376753416208384n,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTXX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTXX',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTXY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTXY',
              isArray: false,
              initialValue: 1,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTYX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTYX',
              isArray: false,
              initialValue: 2,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTYY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTYY',
              isArray: false,
              initialValue: 3,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTZX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTZX',
              isArray: false,
              initialValue: 4,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PTZY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PTZY',
              isArray: false,
              initialValue: 5,
              type: 'uint',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BN256G2',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ECTwistAdd',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ECTwistMul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'GetFieldModulus',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'submod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Muc',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_FQ2Inv',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isOnCurve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_modInv',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_fromJacobian',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_ECTwistAddJacobian',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_ECTwistDoubleJacobian',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_ECTwistMulJacobian',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 389, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
     Pairing:
      { projectGraph: [Circular],
        name: 'Pairing',
        kind: 'library',
        isAbstract: false,
        functions:
         { P1:
            [ { name: 'P1',
                signature: 'P1()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           P2:
            [ { name: 'P2',
                signature: 'P2()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           negate:
            [ { name: 'negate',
                signature: 'negate(Pairing.G1Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           addition:
            [ { name: 'addition',
                signature: 'addition(Pairing.G1Point,Pairing.G1Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} },
              { name: 'addition',
                signature: 'addition(Pairing.G2Point,Pairing.G2Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           scalar_mul:
            [ { name: 'scalar_mul',
                signature: 'scalar_mul(Pairing.G1Point,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           pairing:
            [ { name: 'pairing',
                signature: 'pairing(Pairing.G1Point[],Pairing.G2Point[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           pairingProd2:
            [ { name: 'pairingProd2',
                signature:
                 'pairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           pairingProd3:
            [ { name: 'pairingProd3',
                signature:
                 'pairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           pairingProd4:
            [ { name: 'pairingProd4',
                signature:
                 'pairingProd4(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { G1Point:
            { name: 'G1Point',
              contract: [Circular],
              parameters: [ [Object], [Object] ] },
           G2Point:
            { name: 'G2Point',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pairing',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'G1Point',
                members: [Array],
                loc: [Object],
                parentName: 'Pairing' },
              { type: 'StructDefinition',
                name: 'G2Point',
                members: [Array],
                loc: [Object],
                parentName: 'Pairing' },
              { type: 'FunctionDefinition',
                name: 'P1',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'P2',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'negate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addition',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addition',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'scalar_mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pairing',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pairingProd2',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pairingProd3',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pairingProd4',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 400, column: 0 },
              end: { line: 538, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
     Verifier:
      { projectGraph: [Circular],
        name: 'Verifier',
        kind: 'contract',
        isAbstract: false,
        functions:
         { verifyingKey:
            [ { name: 'verifyingKey',
                signature: 'verifyingKey()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           verify:
            [ { name: 'verify',
                signature: 'verify(uint[],Verifier.Proof)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           verifyTx:
            [ { name: 'verifyTx',
                signature: 'verifyTx(uint[2],uint[2][2],uint[2],uint[2])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { VerifyingKey:
            { name: 'VerifyingKey',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object], [Object] ] },
           Proof:
            { name: 'Proof',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Verifier',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: null,
                libraryName: 'Pairing',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'VerifyingKey',
                members: [Array],
                loc: [Object],
                parentName: 'Verifier' },
              { type: 'StructDefinition',
                name: 'Proof',
                members: [Array],
                loc: [Object],
                parentName: 'Verifier' },
              { type: 'FunctionDefinition',
                name: 'verifyingKey',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verify',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Verified',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyTx',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 540, column: 0 },
              end: { line: 601, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
     Roles:
      { projectGraph: [Circular],
        name: 'Roles',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remove:
            [ { name: 'remove',
                signature: 'remove(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           has:
            [ { name: 'has',
                signature: 'has(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Role:
            { name: 'Role', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Roles',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Role',
                members: [Array],
                loc: [Object],
                parentName: 'Roles' },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'has',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
     CapperRole:
      { projectGraph: [Circular],
        name: 'CapperRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isCapper:
            [ { name: 'isCapper',
                signature: 'isCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addCapper:
            [ { name: 'addCapper',
                signature: 'addCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceCapper:
            [ { name: 'renounceCapper',
                signature: 'renounceCapper()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addCapper:
            [ { name: '_addCapper',
                signature: '_addCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeCapper:
            [ { name: '_removeCapper',
                signature: '_removeCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CapperRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCapper',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCapper',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceCapper',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
     MinterRole:
      { projectGraph: [Circular],
        name: 'MinterRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isMinter:
            [ { name: 'isMinter',
                signature: 'isMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceMinter:
            [ { name: 'renounceMinter',
                signature: 'renounceMinter()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addMinter:
            [ { name: '_addMinter',
                signature: '_addMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeMinter:
            [ { name: '_removeMinter',
                signature: '_removeMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MinterRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyMinter',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isMinter',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceMinter',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
     PauserRole:
      { projectGraph: [Circular],
        name: 'PauserRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isPauser:
            [ { name: 'isPauser',
                signature: 'isPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addPauser:
            [ { name: 'addPauser',
                signature: 'addPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renouncePauser:
            [ { name: 'renouncePauser',
                signature: 'renouncePauser()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addPauser:
            [ { name: '_addPauser',
                signature: '_addPauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removePauser:
            [ { name: '_removePauser',
                signature: '_removePauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PauserRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPauser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isPauser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renouncePauser',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removePauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
     SignerRole:
      { projectGraph: [Circular],
        name: 'SignerRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isSigner:
            [ { name: 'isSigner',
                signature: 'isSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSigner:
            [ { name: 'addSigner',
                signature: 'addSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceSigner:
            [ { name: 'renounceSigner',
                signature: 'renounceSigner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addSigner:
            [ { name: '_addSigner',
                signature: '_addSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeSigner:
            [ { name: '_removeSigner',
                signature: '_removeSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _signers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_signers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignerRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySigner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSigner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceSigner',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
     WhitelistAdminRole:
      { projectGraph: [Circular],
        name: 'WhitelistAdminRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isWhitelistAdmin:
            [ { name: 'isWhitelistAdmin',
                signature: 'isWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addWhitelistAdmin:
            [ { name: 'addWhitelistAdmin',
                signature: 'addWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceWhitelistAdmin:
            [ { name: 'renounceWhitelistAdmin',
                signature: 'renounceWhitelistAdmin()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addWhitelistAdmin:
            [ { name: '_addWhitelistAdmin',
                signature: '_addWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeWhitelistAdmin:
            [ { name: '_removeWhitelistAdmin',
                signature: '_removeWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistAdminRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistAdminAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistAdminRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhitelistAdmin',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWhitelistAdmin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceWhitelistAdmin',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 47, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
     WhitelistedRole:
      { projectGraph: [Circular],
        name: 'WhitelistedRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isWhitelisted:
            [ { name: 'isWhitelisted',
                signature: 'isWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addWhitelisted:
            [ { name: 'addWhitelisted',
                signature: 'addWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeWhitelisted:
            [ { name: 'removeWhitelisted',
                signature: 'removeWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceWhitelisted:
            [ { name: 'renounceWhitelisted',
                signature: 'renounceWhitelisted()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addWhitelisted:
            [ { name: '_addWhitelisted',
                signature: '_addWhitelisted(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeWhitelisted:
            [ { name: '_removeWhitelisted',
                signature: '_removeWhitelisted(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelisted:
            { name: 'onlyWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelisted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelisteds:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelisteds',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
           WhitelistAdminRole:
            { projectGraph: [Circular],
              name: 'WhitelistAdminRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isWhitelistAdmin: [Array],
                 addWhitelistAdmin: [Array],
                 renounceWhitelistAdmin: [Array],
                 _addWhitelistAdmin: [Array],
                 _removeWhitelistAdmin: [Array] },
              modifiers: { onlyWhitelistAdmin: [Object] },
              stateVariables: { _whitelistAdmins: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'WhitelistAdminRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' } },
        inheritsFrom:
         { WhitelistAdminRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistAdminRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistedRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistedAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistedRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhitelisted',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWhitelisted',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceWhitelisted',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' },
     Crowdsale:
      { projectGraph: [Circular],
        name: 'Crowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,address,IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           wallet:
            [ { name: 'wallet',
                signature: 'wallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           weiRaised:
            [ { name: 'weiRaised',
                signature: 'weiRaised()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _postValidatePurchase:
            [ { name: '_postValidatePurchase',
                signature: '_postValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           ReentrancyGuard:
            { projectGraph: [Circular],
              name: 'ReentrancyGuard',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables: { _guardCounter: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ReentrancyGuard',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' } },
        inheritsFrom:
         { ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Crowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensPurchased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'wallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'weiRaised',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_postValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 },
              end: { line: 198, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
     FinalizableCrowdsale:
      { projectGraph: [Circular],
        name: 'FinalizableCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           finalized:
            [ { name: 'finalized',
                signature: 'finalized()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalize:
            [ { name: 'finalize',
                signature: 'finalize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _finalized:
            { functionsWrite: { constructor: [Array], finalize: [Array] },
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FinalizableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CrowdsaleFinalized',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
     PostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'PostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _vault:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_vault',
              isArray: false,
              initialValue: null,
              type: '__unstable__TokenVault',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     __unstable__TokenVault:
      { projectGraph: [Circular],
        name: '__unstable__TokenVault',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: '__unstable__TokenVault',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 61, column: 0 }, end: { line: 65, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     RefundableCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           goal:
            [ { name: 'goal',
                signature: 'goal()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claimRefund:
            [ { name: 'claimRefund',
                signature: 'claimRefund(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           goalReached:
            [ { name: 'goalReached',
                signature: 'goalReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _goal:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalized:
            { functionsWrite: {},
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           FinalizableCrowdsale:
            { projectGraph: [Circular],
              name: 'FinalizableCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 finalized: [Array],
                 finalize: [Array],
                 _finalization: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _finalized: [Object] },
              dependencies: { SafeMath: [Object], TimedCrowdsale: [Object] },
              inheritsFrom:
               { TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FinalizableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
           RefundEscrow:
            { projectGraph: [Circular],
              name: 'RefundEscrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 state: [Array],
                 beneficiary: [Array],
                 deposit: [Array],
                 close: [Array],
                 enableRefunds: [Array],
                 beneficiaryWithdraw: [Array],
                 withdrawalAllowed: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables:
               { _state: [Object],
                 _beneficiary: [Object],
                 _primary: [Object],
                 _deposits: [Object] },
              dependencies: { ConditionalEscrow: [Object] },
              inheritsFrom:
               { ConditionalEscrow: [Object],
                 Escrow: [Object],
                 Secondary: [Object] },
              structs: {},
              enums: { State: [Object] },
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' } },
        inheritsFrom:
         { FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goal',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimRefund',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goalReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 }, end: { line: 82, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
     RefundablePostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundablePostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalized:
            { functionsWrite: {},
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _vault:
            { functionsWrite: {},
              contract: [Circular],
              name: '_vault',
              isArray: false,
              initialValue: null,
              type: '__unstable__TokenVault',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _goal:
            { functionsWrite: {},
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: {},
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { RefundableCrowdsale:
            { projectGraph: [Circular],
              name: 'RefundableCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 goal: [Array],
                 claimRefund: [Array],
                 goalReached: [Array],
                 _finalization: [Array],
                 _forwardFunds: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables:
               { _goal: [Object],
                 _escrow: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _finalized: [Object],
                 _openingTime: [Object],
                 _closingTime: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { SafeMath: [Object],
                 FinalizableCrowdsale: [Object],
                 RefundEscrow: [Object] },
              inheritsFrom:
               { FinalizableCrowdsale: [Object],
                 TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
           PostDeliveryCrowdsale:
            { projectGraph: [Circular],
              name: 'PostDeliveryCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 withdrawTokens: [Array],
                 balanceOf: [Array],
                 _processPurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _balances: [Object], _vault: [Object] },
              dependencies:
               { TimedCrowdsale: [Object],
                 SafeMath: [Object],
                 Secondary: [Object],
                 IERC20: [Object] },
              inheritsFrom:
               { TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PostDeliveryCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
           __unstable__TokenVault:
            { projectGraph: [Circular],
              name: '__unstable__TokenVault',
              kind: 'contract',
              isAbstract: false,
              functions: { transfer: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies:
               { TimedCrowdsale: [Object],
                 SafeMath: [Object],
                 Secondary: [Object],
                 IERC20: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: '__unstable__TokenVault',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' } },
        inheritsFrom:
         { RefundableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'RefundableCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 1 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 3 },
           PostDeliveryCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'PostDeliveryCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundablePostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 20, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol' },
     AllowanceCrowdsale:
      { projectGraph: [Circular],
        name: 'AllowanceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenWallet:
            [ { name: 'tokenWallet',
                signature: 'tokenWallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remainingTokens:
            [ { name: 'remainingTokens',
                signature: 'remainingTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _tokenWallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_tokenWallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AllowanceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenWallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remainingTokens',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol' },
     MintedCrowdsale:
      { projectGraph: [Circular],
        name: 'MintedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol' },
     IncreasingPriceCrowdsale:
      { projectGraph: [Circular],
        name: 'IncreasingPriceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initialRate:
            [ { name: 'initialRate',
                signature: 'initialRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalRate:
            [ { name: 'finalRate',
                signature: 'finalRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentRate:
            [ { name: 'getCurrentRate',
                signature: 'getCurrentRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _initialRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_initialRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_finalRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IncreasingPriceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 79, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol' },
     CappedCrowdsale:
      { projectGraph: [Circular],
        name: 'CappedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           capReached:
            [ { name: 'capReached',
                signature: 'capReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'capReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol' },
     IndividuallyCappedCrowdsale:
      { projectGraph: [Circular],
        name: 'IndividuallyCappedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setCap:
            [ { name: 'setCap',
                signature: 'setCap(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCap:
            [ { name: 'getCap',
                signature: 'getCap(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getContribution:
            [ { name: 'getContribution',
                signature: 'getContribution(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: '_contributions',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _caps:
            { functionsWrite: {},
              contract: [Circular],
              name: '_caps',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           CapperRole:
            { projectGraph: [Circular],
              name: 'CapperRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isCapper: [Array],
                 addCapper: [Array],
                 renounceCapper: [Array],
                 _addCapper: [Array],
                 _removeCapper: [Array] },
              modifiers: { onlyCapper: [Object] },
              stateVariables: { _cappers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CapperRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 },
           CapperRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'CapperRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IndividuallyCappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCap',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getContribution',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 64, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol' },
     PausableCrowdsale:
      { projectGraph: [Circular],
        name: 'PausableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], setPaused: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PausableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/PausableCrowdsale.sol' },
     TimedCrowdsale:
      { projectGraph: [Circular],
        name: 'TimedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           openingTime:
            [ { name: 'openingTime',
                signature: 'openingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           closingTime:
            [ { name: 'closingTime',
                signature: 'closingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOpen:
            [ { name: 'isOpen',
                signature: 'isOpen()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasClosed:
            [ { name: 'hasClosed',
                signature: 'hasClosed()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _extendTime:
            [ { name: '_extendTime',
                signature: '_extendTime(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _openingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: { constructor: [Array], _extendTime: [Array] },
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TimedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TimedCrowdsaleExtended',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhileOpen',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'openingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'closingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOpen',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasClosed',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_extendTime',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 98, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
     WhitelistCrowdsale:
      { projectGraph: [Circular],
        name: 'WhitelistCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelisted:
            { name: 'onlyWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelisted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _whitelisteds:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelisteds',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           WhitelistedRole:
            { projectGraph: [Circular],
              name: 'WhitelistedRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isWhitelisted: [Array],
                 addWhitelisted: [Array],
                 removeWhitelisted: [Array],
                 renounceWhitelisted: [Array],
                 _addWhitelisted: [Array],
                 _removeWhitelisted: [Array] },
              modifiers: { onlyWhitelisted: [Object], onlyWhitelistAdmin: [Object] },
              stateVariables: { _whitelisteds: [Object], _whitelistAdmins: [Object] },
              dependencies: { Roles: [Object], WhitelistAdminRole: [Object] },
              inheritsFrom: { WhitelistAdminRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'WhitelistedRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' } },
        inheritsFrom:
         { WhitelistedRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistedRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' },
              parameters: [],
              level: 0 },
           WhitelistAdminRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistAdminRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol' },
     ECDSA:
      { projectGraph: [Circular],
        name: 'ECDSA',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECDSA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 82, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' },
     MerkleProof:
      { projectGraph: [Circular],
        name: 'MerkleProof',
        kind: 'library',
        isAbstract: false,
        functions:
         { verify:
            [ { name: 'verify',
                signature: 'verify(bytes32[],bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleProof',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'verify',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/cryptography/MerkleProof.sol' },
     Counters:
      { projectGraph: [Circular],
        name: 'Counters',
        kind: 'library',
        isAbstract: false,
        functions:
         { current:
            [ { name: 'current',
                signature: 'current(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increment:
            [ { name: 'increment',
                signature: 'increment(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decrement:
            [ { name: 'decrement',
                signature: 'decrement(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs:
         { Counter:
            { name: 'Counter',
              contract: [Circular],
              parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Counters',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Counter',
                members: [Array],
                loc: [Object],
                parentName: 'Counters' },
              { type: 'FunctionDefinition',
                name: 'current',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increment',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decrement',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 37, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
     ERC20Metadata:
      { projectGraph: [Circular],
        name: 'ERC20Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _tokenURI:
            { functionsWrite: { _setTokenURI: [Array] },
              contract: [Circular],
              name: '_tokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Metadata',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/ERC1046/ERC20Metadata.sol' },
     ERC20Migrator:
      { projectGraph: [Circular],
        name: 'ERC20Migrator',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           legacyToken:
            [ { name: 'legacyToken',
                signature: 'legacyToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           newToken:
            [ { name: 'newToken',
                signature: 'newToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beginMigration:
            [ { name: 'beginMigration',
                signature: 'beginMigration(ERC20Mintable)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           migrate:
            [ { name: 'migrate',
                signature: 'migrate(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           migrateAll:
            [ { name: 'migrateAll',
                signature: 'migrateAll(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _legacyToken:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_legacyToken',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _newToken:
            { functionsWrite: { beginMigration: [Array] },
              contract: [Circular],
              name: '_newToken',
              isArray: false,
              initialValue: null,
              type: 'ERC20Mintable',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Migrator',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'legacyToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'newToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beginMigration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrateAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 34, column: 0 },
              end: { line: 102, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Migrator.sol' },
     ERC20Snapshot:
      { projectGraph: [Circular],
        name: 'ERC20Snapshot',
        kind: 'contract',
        isAbstract: false,
        functions:
         { snapshot:
            [ { name: 'snapshot',
                signature: 'snapshot()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOfAt:
            [ { name: 'balanceOfAt',
                signature: 'balanceOfAt(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupplyAt:
            [ { name: 'totalSupplyAt',
                signature: 'totalSupplyAt(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _valueAt:
            [ { name: '_valueAt',
                signature: '_valueAt(uint256,ERC20Snapshot.Snapshots)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updateAccountSnapshot:
            [ { name: '_updateAccountSnapshot',
                signature: '_updateAccountSnapshot(address)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updateTotalSupplySnapshot:
            [ { name: '_updateTotalSupplySnapshot',
                signature: '_updateTotalSupplySnapshot()',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updateSnapshot:
            [ { name: '_updateSnapshot',
                signature: '_updateSnapshot(ERC20Snapshot.Snapshots,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _lastSnapshotId:
            [ { name: '_lastSnapshotId',
                signature: '_lastSnapshotId(uint256[])',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _accountBalanceSnapshots:
            { functionsWrite: {},
              contract: [Circular],
              name: '_accountBalanceSnapshots',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupplySnapshots:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupplySnapshots',
              isArray: false,
              initialValue: null,
              type: 'ERC20Snapshot.Snapshots',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _currentSnapshotId:
            { functionsWrite: {},
              contract: [Circular],
              name: '_currentSnapshotId',
              isArray: false,
              initialValue: null,
              type: 'Counters.Counter',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Arrays:
            { projectGraph: [Circular],
              name: 'Arrays',
              kind: 'library',
              isAbstract: false,
              functions: { findUpperBound: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { Math: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Arrays',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { Snapshots:
            { name: 'Snapshots',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Snapshot',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Arrays',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Counters',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Snapshots',
                members: [Array],
                loc: [Object],
                parentName: 'ERC20Snapshot' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Snapshot',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'snapshot',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOfAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupplyAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_valueAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateAccountSnapshot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateTotalSupplySnapshot',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateSnapshot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_lastSnapshotId',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 21, column: 0 },
              end: { line: 140, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
     SignatureBouncer:
      { projectGraph: [Circular],
        name: 'SignatureBouncer',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isValidSignature:
            [ { name: '_isValidSignature',
                signature: '_isValidSignature(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndMethod:
            [ { name: '_isValidSignatureAndMethod',
                signature: '_isValidSignatureAndMethod(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndData:
            [ { name: '_isValidSignatureAndData',
                signature: '_isValidSignatureAndData(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidDataHash:
            [ { name: '_isValidDataHash',
                signature: '_isValidDataHash(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyValidSignature:
            { name: 'onlyValidSignature',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignature',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndMethod:
            { name: 'onlyValidSignatureAndMethod',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndMethod',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndData:
            { name: 'onlyValidSignatureAndData',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndData',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _METHOD_ID_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_METHOD_ID_SIZE',
              isArray: false,
              initialValue: 4,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _SIGNATURE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_SIGNATURE_SIZE',
              isArray: false,
              initialValue: 96,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { SignerRole:
            { projectGraph: [Circular],
              name: 'SignerRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isSigner: [Array],
                 addSigner: [Array],
                 renounceSigner: [Array],
                 _addSigner: [Array],
                 _removeSigner: [Array] },
              modifiers: { onlySigner: [Object] },
              stateVariables: { _signers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignerRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
           ECDSA:
            { projectGraph: [Circular],
              name: 'ECDSA',
              kind: 'library',
              isAbstract: false,
              functions: { recover: [Array], toEthSignedMessageHash: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ECDSA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' } },
        inheritsFrom:
         { SignerRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'SignerRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureBouncer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'ECDSA',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignature',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndMethod',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndData',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndMethod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndData',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidDataHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 37, column: 0 },
              end: { line: 122, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/SignatureBouncer.sol' },
     SignedSafeMath:
      { projectGraph: [Circular],
        name: 'SignedSafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           add:
            [ { name: 'add',
                signature: 'add(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignedSafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 60, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/SignedSafeMath.sol' },
     TokenVesting:
      { projectGraph: [Circular],
        name: 'TokenVesting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,uint256,uint256,uint256,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           cliff:
            [ { name: 'cliff',
                signature: 'cliff()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           start:
            [ { name: 'start',
                signature: 'start()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           duration:
            [ { name: 'duration',
                signature: 'duration()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revocable:
            [ { name: 'revocable',
                signature: 'revocable()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoked:
            [ { name: 'revoked',
                signature: 'revoked(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoke:
            [ { name: 'revoke',
                signature: 'revoke(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _releasableAmount:
            [ { name: '_releasableAmount',
                signature: '_releasableAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _vestedAmount:
            [ { name: '_vestedAmount',
                signature: '_vestedAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cliff:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cliff',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _start:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _duration:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_duration',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revocable:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_revocable',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revoked:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revoked',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getOwner: [Array],
                 transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenVesting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokenVestingRevoked',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cliff',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'start',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'duration',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revocable',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoked',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_releasableAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_vestedAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 174, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/TokenVesting.sol' },
     ERC165Checker:
      { projectGraph: [Circular],
        name: 'ERC165Checker',
        kind: 'library',
        isAbstract: false,
        functions:
         { _supportsERC165:
            [ { name: '_supportsERC165',
                signature: '_supportsERC165(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsInterface:
            [ { name: '_supportsInterface',
                signature: '_supportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsAllInterfaces:
            [ { name: '_supportsAllInterfaces',
                signature: '_supportsAllInterfaces(address,bytes4[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsERC165Interface:
            [ { name: '_supportsERC165Interface',
                signature: '_supportsERC165Interface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callERC165SupportsInterface:
            [ { name: '_callERC165SupportsInterface',
                signature: '_callERC165SupportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_INVALID:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_INVALID',
              isArray: false,
              initialValue: 4294967295,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165Checker',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsAllInterfaces',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callERC165SupportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 10, column: 0 },
              end: { line: 121, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol' },
     ERC1820Implementer:
      { projectGraph: [Circular],
        name: 'ERC1820Implementer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { canImplementInterfaceForAddress:
            [ { name: 'canImplementInterfaceForAddress',
                signature: 'canImplementInterfaceForAddress(bytes32,address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterfaceForAddress:
            [ { name: '_registerInterfaceForAddress',
                signature: '_registerInterfaceForAddress(bytes32,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { ERC1820_ACCEPT_MAGIC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC1820_ACCEPT_MAGIC',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC1820Implementer:
            { projectGraph: [Circular],
              name: 'IERC1820Implementer',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1820Implementer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' } },
        inheritsFrom:
         { IERC1820Implementer:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1820Implementer',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC1820Implementer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canImplementInterfaceForAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterfaceForAddress',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 35, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/ERC1820Implementer.sol' },
     IERC165:
      { projectGraph: [Circular],
        name: 'IERC165',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
     IERC1820Implementer:
      { projectGraph: [Circular],
        name: 'IERC1820Implementer',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1820Implementer',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'canImplementInterfaceForAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' },
     IERC1820Registry:
      { projectGraph: [Circular],
        name: 'IERC1820Registry',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1820Registry',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'setManager',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getManager',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setInterfaceImplementer',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getInterfaceImplementer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'interfaceHash',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'updateERC165Cache',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'implementsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'implementsERC165InterfaceNoCache',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'InterfaceImplementerSet',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ManagerChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 17, column: 0 },
              end: { line: 109, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Registry.sol' },
     Math:
      { projectGraph: [Circular],
        name: 'Math',
        kind: 'library',
        isAbstract: false,
        functions:
         { max:
            [ { name: 'max',
                signature: 'max(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min:
            [ { name: 'min',
                signature: 'min(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           average:
            [ { name: 'average',
                signature: 'average(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Math',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'max',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'average',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/Math.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mod:
            [ { name: 'mod',
                signature: 'mod(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 },
              end: { line: 107, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
     Secondary:
      { projectGraph: [Circular],
        name: 'Secondary',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           primary:
            [ { name: 'primary',
                signature: 'primary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferPrimary:
            [ { name: 'transferPrimary',
                signature: 'transferPrimary(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: { constructor: [Array], transferPrimary: [Array] },
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Secondary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PrimaryTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPrimary',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'primary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferPrimary',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
     ConditionalEscrow:
      { projectGraph: [Circular],
        name: 'ConditionalEscrow',
        kind: 'contract',
        isAbstract: true,
        functions:
         { withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom:
         { Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 0 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConditionalEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
     Escrow:
      { projectGraph: [Circular],
        name: 'Escrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { depositsOf:
            [ { name: 'depositsOf',
                signature: 'depositsOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' } },
        inheritsFrom:
         { Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Escrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Deposited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Withdrawn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'depositsOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
     RefundEscrow:
      { projectGraph: [Circular],
        name: 'RefundEscrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           state:
            [ { name: 'state',
                signature: 'state()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiaryWithdraw:
            [ { name: 'beneficiaryWithdraw',
                signature: 'beneficiaryWithdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawalAllowed:
            [ { name: 'withdrawalAllowed',
                signature: 'withdrawalAllowed(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _state:
            { functionsWrite:
               { constructor: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: '_state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConditionalEscrow:
            { projectGraph: [Circular],
              name: 'ConditionalEscrow',
              kind: 'contract',
              isAbstract: true,
              functions: { withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: {},
              dependencies: { Escrow: [Object] },
              inheritsFrom: { Escrow: [Object], Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConditionalEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
        inheritsFrom:
         { ConditionalEscrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
              parameters: [],
              level: 0 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 1 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsClosed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'state',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiaryWithdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 92, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
     PaymentSplitter:
      { projectGraph: [Circular],
        name: 'PaymentSplitter',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address[],uint256[])',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalShares:
            [ { name: 'totalShares',
                signature: 'totalShares()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalReleased:
            [ { name: 'totalReleased',
                signature: 'totalReleased()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           shares:
            [ { name: 'shares',
                signature: 'shares(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payee:
            [ { name: 'payee',
                signature: 'payee(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _addPayee:
            [ { name: '_addPayee',
                signature: '_addPayee(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _totalShares:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_totalShares',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalReleased:
            { functionsWrite: { release: [Array] },
              contract: [Circular],
              name: '_totalReleased',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _shares:
            { functionsWrite: {},
              contract: [Circular],
              name: '_shares',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _payees:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_payees',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PaymentSplitter',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PayeeAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReceived',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalShares',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalReleased',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shares',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payee',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPayee',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 },
              end: { line: 131, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/PaymentSplitter.sol' },
     PullPayment:
      { projectGraph: [Circular],
        name: 'PullPayment',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawPayments:
            [ { name: 'withdrawPayments',
                signature: 'withdrawPayments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payments:
            [ { name: 'payments',
                signature: 'payments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _asyncTransfer:
            [ { name: '_asyncTransfer',
                signature: '_asyncTransfer(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'Escrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PullPayment',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawPayments',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payments',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_asyncTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/PullPayment.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _approve:
            [ { name: '_approve',
                signature: '_approve(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burnFrom:
            [ { name: '_burnFrom',
                signature: '_burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 29, column: 0 },
              end: { line: 228, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
     ERC20Burnable:
      { projectGraph: [Circular],
        name: 'ERC20Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 26, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol' },
     ERC20Capped:
      { projectGraph: [Circular],
        name: 'ERC20Capped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { ERC20Mintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Mintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Capped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol' },
     ERC20Detailed:
      { projectGraph: [Circular],
        name: 'ERC20Detailed',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Detailed',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol' },
     ERC20Mintable:
      { projectGraph: [Circular],
        name: 'ERC20Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
     ERC20Pausable:
      { projectGraph: [Circular],
        name: 'ERC20Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], setPaused: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 30, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol' },
     IERC20:
      { projectGraph: [Circular],
        name: 'IERC20',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 76, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
     SafeERC20:
      { projectGraph: [Circular],
        name: 'SafeERC20',
        kind: 'library',
        isAbstract: false,
        functions:
         { safeTransfer:
            [ { name: 'safeTransfer',
                signature: 'safeTransfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(IERC20,address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeApprove:
            [ { name: 'safeApprove',
                signature: 'safeApprove(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeIncreaseAllowance:
            [ { name: 'safeIncreaseAllowance',
                signature: 'safeIncreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeDecreaseAllowance:
            [ { name: 'safeDecreaseAllowance',
                signature: 'safeDecreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           callOptionalReturn:
            [ { name: 'callOptionalReturn',
                signature: 'callOptionalReturn(IERC20,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeApprove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeIncreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeDecreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'callOptionalReturn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
     TokenTimelock:
      { projectGraph: [Circular],
        name: 'TokenTimelock',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releaseTime:
            [ { name: 'releaseTime',
                signature: 'releaseTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _releaseTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_releaseTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenTimelock',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releaseTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 63, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol' },
     ERC721Burnable:
      { projectGraph: [Circular],
        name: 'ERC721Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Pausable: [Object], Ownable: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 19, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Burnable.sol' },
     ERC721Full:
      { projectGraph: [Circular],
        name: 'ERC721Full',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _baseTokenURI:
            { functionsWrite: {},
              contract: [Circular],
              name: '_baseTokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Pausable: [Object], Ownable: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _transferFrom: [Array],
                 _mint: [Array],
                 _tokensOfOwner: [Array],
                 _addTokenToOwnerEnumeration: [Array],
                 _addTokenToAllTokensEnumeration: [Array],
                 _removeTokenFromOwnerEnumeration: [Array],
                 _removeTokenFromAllTokensEnumeration: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getSymbol: [Array],
                 getBaseTokenURI: [Array],
                 tokenURI: [Array],
                 setTokenURI: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object],
                 oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _baseTokenURI: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC721Enumerable: [Object],
                 ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object],
                 usingOraclize: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 4 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           usingOraclize:
            { contract:
               { projectGraph: [Circular],
                 name: 'usingOraclize',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol' },
     ERC721Holder:
      { projectGraph: [Circular],
        name: 'ERC721Holder',
        kind: 'contract',
        isAbstract: false,
        functions:
         { onERC721Received:
            [ { name: 'onERC721Received',
                signature: 'onERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' } },
        inheritsFrom:
         { IERC721Receiver:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Receiver',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Holder',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol' },
     ERC721MetadataMintable:
      { projectGraph: [Circular],
        name: 'ERC721MetadataMintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mintWithTokenURI:
            [ { name: 'mintWithTokenURI',
                signature: 'mintWithTokenURI(address,uint256,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclizeAPI:
            { name: 'oraclizeAPI',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclizeAPI',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           oraclize_randomDS_proofVerify:
            { name: 'oraclize_randomDS_proofVerify',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'oraclize_randomDS_proofVerify',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _baseTokenURI:
            { functionsWrite: {},
              contract: [Circular],
              name: '_baseTokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize',
              isArray: false,
              initialValue: null,
              type: 'OraclizeI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           OAR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OAR',
              isArray: false,
              initialValue: null,
              type: 'OraclizeAddrResolverI',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           day:
            { functionsWrite: {},
              contract: [Circular],
              name: 'day',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           week:
            { functionsWrite: {},
              contract: [Circular],
              name: 'week',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           month:
            { functionsWrite: {},
              contract: [Circular],
              name: 'month',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_NONE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_NONE',
              isArray: false,
              initialValue: 0,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Ledger:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Ledger',
              isArray: false,
              initialValue: 48,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Native:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Native',
              isArray: false,
              initialValue: 240,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofStorage_IPFS:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofStorage_IPFS',
              isArray: false,
              initialValue: 1,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_Android:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_Android',
              isArray: false,
              initialValue: 64,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           proofType_TLSNotary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proofType_TLSNotary',
              isArray: false,
              initialValue: 16,
              type: 'byte',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_network_name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_network_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           networkID_auto:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_auto',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_morden:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_morden',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_mainnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_mainnet',
              isArray: false,
              initialValue: 1,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_testnet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_testnet',
              isArray: false,
              initialValue: 2,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           networkID_consensys:
            { functionsWrite: {},
              contract: [Circular],
              name: 'networkID_consensys',
              isArray: false,
              initialValue: 161,
              type: 'uint8',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           oraclize_randomDS_args:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_args',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bytes32)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           oraclize_randomDS_sessionKeysHashVerified:
            { functionsWrite: {},
              contract: [Circular],
              name: 'oraclize_randomDS_sessionKeysHashVerified',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>bool)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getSymbol: [Array],
                 getBaseTokenURI: [Array],
                 tokenURI: [Array],
                 setTokenURI: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object],
                 oraclizeAPI: [Object],
                 oraclize_randomDS_proofVerify: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _baseTokenURI: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 oraclize: [Object],
                 OAR: [Object],
                 day: [Object],
                 week: [Object],
                 month: [Object],
                 proofType_NONE: [Object],
                 proofType_Ledger: [Object],
                 proofType_Native: [Object],
                 proofStorage_IPFS: [Object],
                 proofType_Android: [Object],
                 proofType_TLSNotary: [Object],
                 oraclize_network_name: [Object],
                 networkID_auto: [Object],
                 networkID_morden: [Object],
                 networkID_mainnet: [Object],
                 networkID_testnet: [Object],
                 networkID_consensys: [Object],
                 oraclize_randomDS_args: [Object],
                 oraclize_randomDS_sessionKeysHashVerified: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom:
               { ERC721Enumerable: [Object],
                 ERC165: [Object],
                 ERC721: [Object],
                 Pausable: [Object],
                 Ownable: [Object],
                 usingOraclize: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 4 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 3 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           usingOraclize:
            { contract:
               { projectGraph: [Circular],
                 name: 'usingOraclize',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721MetadataMintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mintWithTokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721MetadataMintable.sol' },
     ERC721Mintable:
      { projectGraph: [Circular],
        name: 'ERC721Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Pausable: [Object], Ownable: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol' },
     ERC721Pausable:
      { projectGraph: [Circular],
        name: 'ERC721Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           paused:
            { name: 'paused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'paused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _owner: [Object],
                 _paused: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Pausable: [Object], Ownable: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], setPaused: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 paused: [Object],
                 onlyOwner: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies:
               { Address: [Object],
                 Counters: [Object],
                 SafeMath: [Object],
                 IERC721Receiver: [Object],
                 solcChecker: [Object],
                 OraclizeI: [Object],
                 OraclizeAddrResolverI: [Object],
                 Buffer: [Object],
                 CBOR: [Object],
                 usingOraclize: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol' },
     IERC721:
      { projectGraph: [Circular],
        name: 'IERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
     IERC721Enumerable:
      { projectGraph: [Circular],
        name: 'IERC721Enumerable',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
     IERC721Full:
      { projectGraph: [Circular],
        name: 'IERC721Full',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
           IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol' },
     IERC721Metadata:
      { projectGraph: [Circular],
        name: 'IERC721Metadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
     IERC721Receiver:
      { projectGraph: [Circular],
        name: 'IERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
     ERC777:
      { projectGraph: [Circular],
        name: 'ERC777',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           granularity:
            [ { name: 'granularity',
                signature: 'granularity()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           send:
            [ { name: 'send',
                signature: 'send(address,uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burn:
            [ { name: 'burn',
                signature: 'burn(uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isOperatorFor:
            [ { name: 'isOperatorFor',
                signature: 'isOperatorFor(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           authorizeOperator:
            [ { name: 'authorizeOperator',
                signature: 'authorizeOperator(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeOperator:
            [ { name: 'revokeOperator',
                signature: 'revokeOperator(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           defaultOperators:
            [ { name: 'defaultOperators',
                signature: 'defaultOperators()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           operatorSend:
            [ { name: 'operatorSend',
                signature: 'operatorSend(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           operatorBurn:
            [ { name: 'operatorBurn',
                signature: 'operatorBurn(address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _send:
            [ { name: '_send',
                signature: '_send(address,address,address,uint256,bytes,bytes,bool)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _move:
            [ { name: '_move',
                signature: '_move(address,address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _approve:
            [ { name: '_approve',
                signature: '_approve(address,address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callTokensToSend:
            [ { name: '_callTokensToSend',
                signature:
                 '_callTokensToSend(address,address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callTokensReceived:
            [ { name: '_callTokensReceived',
                signature:
                 '_callTokensReceived(address,address,address,uint256,bytes,bytes,bool)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _erc1820:
            { functionsWrite: {},
              contract: [Circular],
              name: '_erc1820',
              isArray: false,
              initialValue: undefined,
              type: 'IERC1820Registry',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           TOKENS_SENDER_INTERFACE_HASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TOKENS_SENDER_INTERFACE_HASH',
              isArray: false,
              initialValue:
               18936552921575092654186153463397164041995445878070697795167270963882475126784n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           TOKENS_RECIPIENT_INTERFACE_HASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TOKENS_RECIPIENT_INTERFACE_HASH',
              isArray: false,
              initialValue:
               80741353335606798181969735708163393868254560005245286026819324366992835608576n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _defaultOperatorsArray:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_defaultOperatorsArray',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _defaultOperators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_defaultOperators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revokedDefaultOperators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revokedDefaultOperators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC777:
            { projectGraph: [Circular],
              name: 'IERC777',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
           IERC777Recipient:
            { projectGraph: [Circular],
              name: 'IERC777Recipient',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777Recipient',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol' },
           IERC777Sender:
            { projectGraph: [Circular],
              name: 'IERC777Sender',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777Sender',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           IERC1820Registry:
            { projectGraph: [Circular],
              name: 'IERC1820Registry',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1820Registry',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Registry.sol' } },
        inheritsFrom:
         { IERC777:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC777',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC777',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'granularity',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'send',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOperatorFor',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'authorizeOperator',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeOperator',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'defaultOperators',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorBurn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_send',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_move',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callTokensToSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callTokensReceived',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 26, column: 0 },
              end: { line: 474, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/ERC777.sol' },
     IERC777:
      { projectGraph: [Circular],
        name: 'IERC777',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'granularity',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'send',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOperatorFor',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'authorizeOperator',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeOperator',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'defaultOperators',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorSend',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorBurn',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Sent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Minted',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Burned',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'AuthorizedOperator',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RevokedOperator',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 12, column: 0 },
              end: { line: 186, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
     IERC777Recipient:
      { projectGraph: [Circular],
        name: 'IERC777Recipient',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777Recipient',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokensReceived',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol' },
     IERC777Sender:
      { projectGraph: [Circular],
        name: 'IERC777Sender',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777Sender',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokensToSend',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol' },
     Address:
      { projectGraph: [Circular],
        name: 'Address',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Address',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 27, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
     Arrays:
      { projectGraph: [Circular],
        name: 'Arrays',
        kind: 'library',
        isAbstract: false,
        functions:
         { findUpperBound:
            [ { name: 'findUpperBound',
                signature: 'findUpperBound(uint256[],uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Arrays',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'findUpperBound',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 45, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
     ReentrancyGuard:
      { projectGraph: [Circular],
        name: 'ReentrancyGuard',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _guardCounter:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ReentrancyGuard',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'nonReentrant',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' } },
  structs:
   { buffer:
      { name: 'buffer',
        contract:
         { projectGraph: [Circular],
           name: 'Buffer',
           kind: 'library',
           isAbstract: false,
           functions:
            { init: [ [Object] ],
              resize: [ [Object] ],
              max: [ [Object] ],
              append: [ [Object], [Object] ],
              appendInt: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { buffer: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Buffer',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
        parameters:
         [ { name: 'buf',
             isUserDefinedType: false,
             type: 'bytes',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'capacity',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Buffer.buffer':
      { name: 'buffer',
        contract:
         { projectGraph: [Circular],
           name: 'Buffer',
           kind: 'library',
           isAbstract: false,
           functions:
            { init: [ [Object] ],
              resize: [ [Object] ],
              max: [ [Object] ],
              append: [ [Object], [Object] ],
              appendInt: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { buffer: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Buffer',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Oraclize.sol' },
        parameters:
         [ { name: 'buf',
             isUserDefinedType: false,
             type: 'bytes',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'capacity',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Solution:
      { name: 'Solution',
        contract:
         { projectGraph: [Circular],
           name: 'SolnSquareVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              addSolution: [ [Object] ],
              mint: [ [Object] ] },
           modifiers:
            { whenNotPaused:
               { name: 'whenNotPaused',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              paused:
               { name: 'paused',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              oraclizeAPI:
               { name: 'oraclizeAPI',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              oraclize_randomDS_proofVerify:
               { name: 'oraclize_randomDS_proofVerify',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] } },
           stateVariables:
            { solutions:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'solutions',
                 isArray: true,
                 initialValue: [],
                 type: 'SolnSquareVerifier.Solution[]',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              solutionKeyToSubmissionStatus:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'solutionKeyToSubmissionStatus',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bool)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              tokenIdToSolution:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'tokenIdToSolution',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>SolnSquareVerifier.Solution)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _paused:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_paused',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ERC721_RECEIVED:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ERC721_RECEIVED',
                 isArray: false,
                 initialValue: 353073666,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _tokenOwner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenOwner',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>address)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _tokenApprovals:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenApprovals',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>address)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ownedTokensCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokensCount',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>Counters.Counter)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _operatorApprovals:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_operatorApprovals',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>bool)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721',
                 isArray: false,
                 initialValue: 2158778573,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _ownedTokens:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokens',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256[])})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ownedTokensIndex:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokensIndex',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allTokens:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allTokens',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allTokensIndex:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allTokensIndex',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721_ENUMERABLE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721_ENUMERABLE',
                 isArray: false,
                 initialValue: 2014223715,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _name:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_name',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _symbol:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_symbol',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _baseTokenURI:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_baseTokenURI',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _tokenURIs:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenURIs',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>string)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721_METADATA:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721_METADATA',
                 isArray: false,
                 initialValue: 1532892063,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize',
                 isArray: false,
                 initialValue: null,
                 type: 'OraclizeI',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              OAR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'OAR',
                 isArray: false,
                 initialValue: null,
                 type: 'OraclizeAddrResolverI',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              day:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'day',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              week:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'week',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              month:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'month',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_NONE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_NONE',
                 isArray: false,
                 initialValue: 0,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Ledger:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Ledger',
                 isArray: false,
                 initialValue: 48,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Native:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Native',
                 isArray: false,
                 initialValue: 240,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofStorage_IPFS:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofStorage_IPFS',
                 isArray: false,
                 initialValue: 1,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Android:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Android',
                 isArray: false,
                 initialValue: 64,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_TLSNotary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_TLSNotary',
                 isArray: false,
                 initialValue: 16,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize_network_name:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_network_name',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              networkID_auto:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_auto',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_morden:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_morden',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_mainnet:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_mainnet',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_testnet:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_testnet',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_consensys:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_consensys',
                 isArray: false,
                 initialValue: 161,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize_randomDS_args:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_randomDS_args',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bytes32)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              oraclize_randomDS_sessionKeysHashVerified:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_randomDS_sessionKeysHashVerified',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bool)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              Pausable:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721Enumerable:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721Metadata:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721MintableComplete:
               { projectGraph: [Circular],
                 name: 'ERC721MintableComplete',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              BN256G2:
               { projectGraph: [Circular],
                 name: 'BN256G2',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
              Pairing:
               { projectGraph: [Circular],
                 name: 'Pairing',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
              Verifier:
               { projectGraph: [Circular],
                 name: 'Verifier',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' } },
           inheritsFrom:
            { Verifier: { contract: [Object], parameters: [], level: 0 },
              ERC721MintableComplete: { contract: [Object], parameters: [Array], level: 0 },
              ERC721Metadata: { contract: [Object], parameters: [], level: 1 },
              ERC721Enumerable: { contract: [Object], parameters: [], level: 2 },
              ERC165: { contract: [Object], parameters: [], level: 4 },
              ERC721: { contract: [Object], parameters: [], level: 3 },
              Pausable: { contract: [Object], parameters: [], level: 4 },
              Ownable: { contract: [Object], parameters: [], level: 5 },
              usingOraclize: { contract: [Object], parameters: [], level: 2 } },
           structs: { Solution: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SolnSquareVerifier',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/SolnSquareVerifier.sol' },
        parameters:
         [ { name: 'index',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'sender',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'solutionKey',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'exists',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'SolnSquareVerifier.Solution':
      { name: 'Solution',
        contract:
         { projectGraph: [Circular],
           name: 'SolnSquareVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              addSolution: [ [Object] ],
              mint: [ [Object] ] },
           modifiers:
            { whenNotPaused:
               { name: 'whenNotPaused',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              paused:
               { name: 'paused',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              oraclizeAPI:
               { name: 'oraclizeAPI',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              oraclize_randomDS_proofVerify:
               { name: 'oraclize_randomDS_proofVerify',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] } },
           stateVariables:
            { solutions:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'solutions',
                 isArray: true,
                 initialValue: [],
                 type: 'SolnSquareVerifier.Solution[]',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              solutionKeyToSubmissionStatus:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'solutionKeyToSubmissionStatus',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bool)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              tokenIdToSolution:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'tokenIdToSolution',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>SolnSquareVerifier.Solution)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _paused:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_paused',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ERC721_RECEIVED:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ERC721_RECEIVED',
                 isArray: false,
                 initialValue: 353073666,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _tokenOwner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenOwner',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>address)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _tokenApprovals:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenApprovals',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>address)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ownedTokensCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokensCount',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>Counters.Counter)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _operatorApprovals:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_operatorApprovals',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>bool)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721',
                 isArray: false,
                 initialValue: 2158778573,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _ownedTokens:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokens',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256[])})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _ownedTokensIndex:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_ownedTokensIndex',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allTokens:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allTokens',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allTokensIndex:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allTokensIndex',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721_ENUMERABLE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721_ENUMERABLE',
                 isArray: false,
                 initialValue: 2014223715,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _name:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_name',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _symbol:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_symbol',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _baseTokenURI:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_baseTokenURI',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _tokenURIs:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_tokenURIs',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint256=>string)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _INTERFACE_ID_ERC721_METADATA:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_INTERFACE_ID_ERC721_METADATA',
                 isArray: false,
                 initialValue: 1532892063,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize',
                 isArray: false,
                 initialValue: null,
                 type: 'OraclizeI',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              OAR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'OAR',
                 isArray: false,
                 initialValue: null,
                 type: 'OraclizeAddrResolverI',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              day:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'day',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              week:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'week',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              month:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'month',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_NONE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_NONE',
                 isArray: false,
                 initialValue: 0,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Ledger:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Ledger',
                 isArray: false,
                 initialValue: 48,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Native:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Native',
                 isArray: false,
                 initialValue: 240,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofStorage_IPFS:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofStorage_IPFS',
                 isArray: false,
                 initialValue: 1,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_Android:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_Android',
                 isArray: false,
                 initialValue: 64,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              proofType_TLSNotary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'proofType_TLSNotary',
                 isArray: false,
                 initialValue: 16,
                 type: 'byte',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize_network_name:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_network_name',
                 isArray: false,
                 initialValue: null,
                 type: 'string',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              networkID_auto:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_auto',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_morden:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_morden',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_mainnet:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_mainnet',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_testnet:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_testnet',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              networkID_consensys:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'networkID_consensys',
                 isArray: false,
                 initialValue: 161,
                 type: 'uint8',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              oraclize_randomDS_args:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_randomDS_args',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bytes32)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              oraclize_randomDS_sessionKeysHashVerified:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'oraclize_randomDS_sessionKeysHashVerified',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>bool)})',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              Pausable:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721Enumerable:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721Metadata:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              ERC721MintableComplete:
               { projectGraph: [Circular],
                 name: 'ERC721MintableComplete',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/ERC721Mintable.sol' },
              BN256G2:
               { projectGraph: [Circular],
                 name: 'BN256G2',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
              Pairing:
               { projectGraph: [Circular],
                 name: 'Pairing',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
              Verifier:
               { projectGraph: [Circular],
                 name: 'Verifier',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' } },
           inheritsFrom:
            { Verifier: { contract: [Object], parameters: [], level: 0 },
              ERC721MintableComplete: { contract: [Object], parameters: [Array], level: 0 },
              ERC721Metadata: { contract: [Object], parameters: [], level: 1 },
              ERC721Enumerable: { contract: [Object], parameters: [], level: 2 },
              ERC165: { contract: [Object], parameters: [], level: 4 },
              ERC721: { contract: [Object], parameters: [], level: 3 },
              Pausable: { contract: [Object], parameters: [], level: 4 },
              Ownable: { contract: [Object], parameters: [], level: 5 },
              usingOraclize: { contract: [Object], parameters: [], level: 2 } },
           structs: { Solution: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SolnSquareVerifier',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/SolnSquareVerifier.sol' },
        parameters:
         [ { name: 'index',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'sender',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'solutionKey',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'exists',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     G1Point:
      { name: 'G1Point',
        contract:
         { projectGraph: [Circular],
           name: 'Pairing',
           kind: 'library',
           isAbstract: false,
           functions:
            { P1: [ [Object] ],
              P2: [ [Object] ],
              negate: [ [Object] ],
              addition: [ [Object], [Object] ],
              scalar_mul: [ [Object] ],
              pairing: [ [Object] ],
              pairingProd2: [ [Object] ],
              pairingProd3: [ [Object] ],
              pairingProd4: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { G1Point: [Circular],
              G2Point:
               { name: 'G2Point', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Pairing',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'X',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'Y',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Pairing.G1Point':
      { name: 'G1Point',
        contract:
         { projectGraph: [Circular],
           name: 'Pairing',
           kind: 'library',
           isAbstract: false,
           functions:
            { P1: [ [Object] ],
              P2: [ [Object] ],
              negate: [ [Object] ],
              addition: [ [Object], [Object] ],
              scalar_mul: [ [Object] ],
              pairing: [ [Object] ],
              pairingProd2: [ [Object] ],
              pairingProd3: [ [Object] ],
              pairingProd4: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { G1Point: [Circular],
              G2Point:
               { name: 'G2Point', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Pairing',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'X',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'Y',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     G2Point:
      { name: 'G2Point',
        contract:
         { projectGraph: [Circular],
           name: 'Pairing',
           kind: 'library',
           isAbstract: false,
           functions:
            { P1: [ [Object] ],
              P2: [ [Object] ],
              negate: [ [Object] ],
              addition: [ [Object], [Object] ],
              scalar_mul: [ [Object] ],
              pairing: [ [Object] ],
              pairingProd2: [ [Object] ],
              pairingProd3: [ [Object] ],
              pairingProd4: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { G1Point:
               { name: 'G1Point', contract: [Circular], parameters: [Array] },
              G2Point: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Pairing',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'X',
             isUserDefinedType: false,
             type: 'uint[2]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'Y',
             isUserDefinedType: false,
             type: 'uint[2]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Pairing.G2Point':
      { name: 'G2Point',
        contract:
         { projectGraph: [Circular],
           name: 'Pairing',
           kind: 'library',
           isAbstract: false,
           functions:
            { P1: [ [Object] ],
              P2: [ [Object] ],
              negate: [ [Object] ],
              addition: [ [Object], [Object] ],
              scalar_mul: [ [Object] ],
              pairing: [ [Object] ],
              pairingProd2: [ [Object] ],
              pairingProd3: [ [Object] ],
              pairingProd4: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { G1Point:
               { name: 'G1Point', contract: [Circular], parameters: [Array] },
              G2Point: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Pairing',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'X',
             isUserDefinedType: false,
             type: 'uint[2]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'Y',
             isUserDefinedType: false,
             type: 'uint[2]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     VerifyingKey:
      { name: 'VerifyingKey',
        contract:
         { projectGraph: [Circular],
           name: 'Verifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { verifyingKey: [ [Object] ],
              verify: [ [Object] ],
              verifyTx: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { VerifyingKey: [Circular],
              Proof: { name: 'Proof', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Verifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'a',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'b',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'gamma',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'delta',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'gammaABC',
             isUserDefinedType: false,
             type: 'Pairing.G1Point[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Verifier.VerifyingKey':
      { name: 'VerifyingKey',
        contract:
         { projectGraph: [Circular],
           name: 'Verifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { verifyingKey: [ [Object] ],
              verify: [ [Object] ],
              verifyTx: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { VerifyingKey: [Circular],
              Proof: { name: 'Proof', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Verifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'a',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'b',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'gamma',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'delta',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'gammaABC',
             isUserDefinedType: false,
             type: 'Pairing.G1Point[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Proof:
      { name: 'Proof',
        contract:
         { projectGraph: [Circular],
           name: 'Verifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { verifyingKey: [ [Object] ],
              verify: [ [Object] ],
              verifyTx: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { VerifyingKey:
               { name: 'VerifyingKey',
                 contract: [Circular],
                 parameters: [Array] },
              Proof: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Verifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'A',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'B',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'C',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false } ] },
     'Verifier.Proof':
      { name: 'Proof',
        contract:
         { projectGraph: [Circular],
           name: 'Verifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { verifyingKey: [ [Object] ],
              verify: [ [Object] ],
              verifyTx: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs:
            { VerifyingKey:
               { name: 'VerifyingKey',
                 contract: [Circular],
                 parameters: [Array] },
              Proof: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Verifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/contracts/Verifier.sol' },
        parameters:
         [ { name: 'A',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'B',
             isUserDefinedType: true,
             type: 'Pairing.G2Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'C',
             isUserDefinedType: true,
             type: 'Pairing.G1Point',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false } ] },
     Role:
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Roles.Role':
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Counter:
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counters',
           kind: 'library',
           isAbstract: false,
           functions:
            { current: [ [Object] ],
              increment: [ [Object] ],
              decrement: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counters',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
        parameters:
         [ { name: '_value',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Counters.Counter':
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counters',
           kind: 'library',
           isAbstract: false,
           functions:
            { current: [ [Object] ],
              increment: [ [Object] ],
              decrement: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counters',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
        parameters:
         [ { name: '_value',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Snapshots:
      { name: 'Snapshots',
        contract:
         { projectGraph: [Circular],
           name: 'ERC20Snapshot',
           kind: 'contract',
           isAbstract: false,
           functions:
            { snapshot: [ [Object] ],
              balanceOfAt: [ [Object] ],
              totalSupplyAt: [ [Object] ],
              _transfer: [ [Object] ],
              _mint: [ [Object] ],
              _burn: [ [Object] ],
              _valueAt: [ [Object] ],
              _updateAccountSnapshot: [ [Object] ],
              _updateTotalSupplySnapshot: [ [Object] ],
              _updateSnapshot: [ [Object] ],
              _lastSnapshotId: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { _accountBalanceSnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_accountBalanceSnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupplySnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupplySnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20Snapshot.Snapshots',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _currentSnapshotId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_currentSnapshotId',
                 isArray: false,
                 initialValue: null,
                 type: 'Counters.Counter',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
              Arrays:
               { projectGraph: [Circular],
                 name: 'Arrays',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
              Counters:
               { projectGraph: [Circular],
                 name: 'Counters',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 } },
           structs: { Snapshots: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'ERC20Snapshot',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
        parameters:
         [ { name: 'ids',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'values',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'ERC20Snapshot.Snapshots':
      { name: 'Snapshots',
        contract:
         { projectGraph: [Circular],
           name: 'ERC20Snapshot',
           kind: 'contract',
           isAbstract: false,
           functions:
            { snapshot: [ [Object] ],
              balanceOfAt: [ [Object] ],
              totalSupplyAt: [ [Object] ],
              _transfer: [ [Object] ],
              _mint: [ [Object] ],
              _burn: [ [Object] ],
              _valueAt: [ [Object] ],
              _updateAccountSnapshot: [ [Object] ],
              _updateTotalSupplySnapshot: [ [Object] ],
              _updateSnapshot: [ [Object] ],
              _lastSnapshotId: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { _accountBalanceSnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_accountBalanceSnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupplySnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupplySnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20Snapshot.Snapshots',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _currentSnapshotId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_currentSnapshotId',
                 isArray: false,
                 initialValue: null,
                 type: 'Counters.Counter',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
              Arrays:
               { projectGraph: [Circular],
                 name: 'Arrays',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
              Counters:
               { projectGraph: [Circular],
                 name: 'Counters',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 } },
           structs: { Snapshots: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'ERC20Snapshot',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
        parameters:
         [ { name: 'ids',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'values',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { State:
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundEscrow.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/real-estate-marketplace/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] } } }