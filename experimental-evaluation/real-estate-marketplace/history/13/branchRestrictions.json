,{
  "2020-11-11T08:11:43.866ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:11:59.348ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:12:14.602ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:12:30.144ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:12:45.949ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:01.715ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.313ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [15,31,213,219,173,86,4,68,155,213,97,145,179,81,242,225,220,117,218,40,59,161,145,242,159,90,33,124,147,71,187,143],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"15,31,213,219,173,86,4,68,155,213,97,145,179,81,242,225,220,117,218,40,59,161,145,242,159,90,33,124,147,71,187,143\"),101)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.314ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [146,240,19,117,89,163,220,35,240,241,127,239,34,181,221,111,250,69,69,174,36,237,196,199,14,132,56,131,68,37,28,114],\"capacity\": 2014223715}",
              "sol": "Buffer.buffer(abi.encode(\"146,240,19,117,89,163,220,35,240,241,127,239,34,181,221,111,250,69,69,174,36,237,196,199,14,132,56,131,68,37,28,114\"),2014223715)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [140,248,43,129,201,184,153,173,160,103,48,150,51,42,18,1,137,144,123,127,180,104,246,254,172,139,120,205,183,126,107,229],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"140,248,43,129,201,184,153,173,160,103,48,150,51,42,18,1,137,144,123,127,180,104,246,254,172,139,120,205,183,126,107,229\"),1)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.316ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [33,134,253,222,251,116,157,226,2,155,48,26,46,137,181,56,111,238,85,249,13,58,163,18,240,220,155,65,85,1,111,158],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"33,134,253,222,251,116,157,226,2,155,48,26,46,137,181,56,111,238,85,249,13,58,163,18,240,220,155,65,85,1,111,158\"),97)"
            },
            {
              "js": "[67,101,194,129,165,228,54,82,108,66,24,175,27,170,7,227,148,216,103,115,15,86,212,16,227,104,146,125,244,235,72,71]",
              "sol": "abi.encode(\"67,101,194,129,165,228,54,82,108,66,24,175,27,170,7,227,148,216,103,115,15,86,212,16,227,104,146,125,244,235,72,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.316ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [75,206,226,85,132,56,218,49,211,252,166,66,133,242,145,117,228,220,155,202,40,208,244,92,104,63,137,80,59,192,149,161],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"75,206,226,85,132,56,218,49,211,252,166,66,133,242,145,117,228,220,155,202,40,208,244,92,104,63,137,80,59,192,149,161\"),60)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.317ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [163,65,231,97,75,7,233,226,180,40,216,91,117,177,72,67,38,18,133,46,75,2,216,92,104,246,22,195,155,47,127,22],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"163,65,231,97,75,7,233,226,180,40,216,91,117,177,72,67,38,18,133,46,75,2,216,92,104,246,22,195,155,47,127,22\"),57)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.317ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [75,202,114,231,28,139,146,7,11,61,139,78,144,146,101,78,60,189,128,42,202,254,134,109,244,14,7,122,60,80,162,75],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"75,202,114,231,28,139,146,7,11,61,139,78,144,146,101,78,60,189,128,42,202,254,134,109,244,14,7,122,60,80,162,75\"),1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.318ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [52,174,43,168,182,107,248,241,118,206,40,34,2,116,183,13,137,45,109,228,200,75,154,189,187,39,153,172,176,204,186,16],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"52,174,43,168,182,107,248,241,118,206,40,34,2,116,183,13,137,45,109,228,200,75,154,189,187,39,153,172,176,204,186,16\"),7)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.324ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.324ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.324ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 47,\"Y\": 59}",
              "sol": "Pairing.G1Point(47,59)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.325ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 162,\"Y\": 59}",
              "sol": "Pairing.G1Point(162,59)"
            },
            {
              "js": "{\"X\": 56,\"Y\": 254}",
              "sol": "Pairing.G1Point(56,254)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.326ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [24,54],\"Y\": [160,18]}",
              "sol": "Pairing.G2Point([uint(24),uint(54)],[uint(160),uint(18)])"
            },
            {
              "js": "{\"X\": [256,46],\"Y\": [18,63]}",
              "sol": "Pairing.G2Point([uint(256),uint(46)],[uint(18),uint(63)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.326ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 1532892062,\"Y\": 2014223716}",
              "sol": "Pairing.G1Point(1532892062,2014223716)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.327ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 7,\"Y\": 47},{\"X\": 59,\"Y\": 49},{\"X\": 97,\"Y\": 17},{\"X\": 63,\"Y\": 2014223714},{\"X\": 256,\"Y\": 1},{\"X\": 2014223716,\"Y\": 200000},{\"X\": 5,\"Y\": 1025},{\"X\": 32,\"Y\": 46},{\"X\": 88,\"Y\": 1025},{\"X\": 64,\"Y\": 5}]",
              "sol": "[Pairing.G1Point(7,47),Pairing.G1Point(59,49),Pairing.G1Point(97,17),Pairing.G1Point(63,2014223714),Pairing.G1Point(256,1),Pairing.G1Point(2014223716,200000),Pairing.G1Point(5,1025),Pairing.G1Point(32,46),Pairing.G1Point(88,1025),Pairing.G1Point(64,5)]"
            },
            {
              "js": "[{\"X\": [1532892062,1532892063],\"Y\": [1023,1532892062]},{\"X\": [9,65],\"Y\": [1024,58]},{\"X\": [57,103],\"Y\": [29,55]},{\"X\": [26,2014223716],\"Y\": [255,128]},{\"X\": [59,48],\"Y\": [64,61]},{\"X\": [1532892062,47],\"Y\": [103,16]},{\"X\": [66,21],\"Y\": [64,96]},{\"X\": [57,63],\"Y\": [23,6]},{\"X\": [1024,97],\"Y\": [3,31]},{\"X\": [61,60],\"Y\": [3,2014223716]}]",
              "sol": "[Pairing.G2Point([uint(1532892062),uint(1532892063)],[uint(1023),uint(1532892062)]),Pairing.G2Point([uint(9),uint(65)],[uint(1024),uint(58)]),Pairing.G2Point([uint(57),uint(103)],[uint(29),uint(55)]),Pairing.G2Point([uint(26),uint(2014223716)],[uint(255),uint(128)]),Pairing.G2Point([uint(59),uint(48)],[uint(64),uint(61)]),Pairing.G2Point([uint(1532892062),uint(47)],[uint(103),uint(16)]),Pairing.G2Point([uint(66),uint(21)],[uint(64),uint(96)]),Pairing.G2Point([uint(57),uint(63)],[uint(23),uint(6)]),Pairing.G2Point([uint(1024),uint(97)],[uint(3),uint(31)]),Pairing.G2Point([uint(61),uint(60)],[uint(3),uint(2014223716)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 1532892062,\"Y\": 57},{\"X\": 61,\"Y\": 2014223714},{\"X\": 30,\"Y\": 66},{\"X\": 15,\"Y\": 95},{\"X\": 199999,\"Y\": 30},{\"X\": 1023,\"Y\": 1024},{\"X\": 1532892062,\"Y\": 61},{\"X\": 19,\"Y\": 70},{\"X\": 27,\"Y\": 2},{\"X\": 257,\"Y\": 23},{\"X\": 1532892063,\"Y\": 61}]",
                "sol": "[Pairing.G1Point(7,66),Pairing.G1Point(200001,8),Pairing.G1Point(16,16),Pairing.G1Point(49,27),Pairing.G1Point(3,54),Pairing.G1Point(200001,55),Pairing.G1Point(255,18),Pairing.G1Point(30,57),Pairing.G1Point(22,18),Pairing.G1Point(88,64),Pairing.G1Point(48,47)]"
              },
              {
                "js": "[{\"X\": [1532892062,1532892063],\"Y\": [1023,1532892062]},{\"X\": [9,65],\"Y\": [1024,58]},{\"X\": [57,103],\"Y\": [29,55]},{\"X\": [26,2014223716],\"Y\": [255,128]},{\"X\": [59,48],\"Y\": [64,61]},{\"X\": [1532892062,47],\"Y\": [103,16]},{\"X\": [66,21],\"Y\": [64,96]},{\"X\": [57,63],\"Y\": [23,6]},{\"X\": [1024,97],\"Y\": [3,31]},{\"X\": [61,60],\"Y\": [3,2014223716]}]",
                "sol": "[Pairing.G2Point([uint(1532892062),uint(1532892063)],[uint(1023),uint(1532892062)]),Pairing.G2Point([uint(9),uint(65)],[uint(1024),uint(58)]),Pairing.G2Point([uint(57),uint(103)],[uint(29),uint(55)]),Pairing.G2Point([uint(26),uint(2014223716)],[uint(255),uint(128)]),Pairing.G2Point([uint(59),uint(48)],[uint(64),uint(61)]),Pairing.G2Point([uint(1532892062),uint(47)],[uint(103),uint(16)]),Pairing.G2Point([uint(66),uint(21)],[uint(64),uint(96)]),Pairing.G2Point([uint(57),uint(63)],[uint(23),uint(6)]),Pairing.G2Point([uint(1024),uint(97)],[uint(3),uint(31)]),Pairing.G2Point([uint(61),uint(60)],[uint(3),uint(2014223716)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.334ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 2,\"Y\": 2014223715}",
              "sol": "Pairing.G1Point(2,2014223715)"
            },
            {
              "js": "{\"X\": [71,2],\"Y\": [1023,45]}",
              "sol": "Pairing.G2Point([uint(71),uint(2)],[uint(1023),uint(45)])"
            },
            {
              "js": "{\"X\": 63,\"Y\": 86}",
              "sol": "Pairing.G1Point(63,86)"
            },
            {
              "js": "{\"X\": [25,257],\"Y\": [27,5]}",
              "sol": "Pairing.G2Point([uint(25),uint(257)],[uint(27),uint(5)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.336ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 88,\"Y\": 0}",
              "sol": "Pairing.G1Point(88,0)"
            },
            {
              "js": "{\"X\": [17,199999],\"Y\": [64,256]}",
              "sol": "Pairing.G2Point([uint(17),uint(199999)],[uint(64),uint(256)])"
            },
            {
              "js": "{\"X\": 71,\"Y\": 0}",
              "sol": "Pairing.G1Point(71,0)"
            },
            {
              "js": "{\"X\": [2014223714,86],\"Y\": [256,200001]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(86)],[uint(256),uint(200001)])"
            },
            {
              "js": "{\"X\": 23,\"Y\": 18}",
              "sol": "Pairing.G1Point(23,18)"
            },
            {
              "js": "{\"X\": [47,128],\"Y\": [256,3]}",
              "sol": "Pairing.G2Point([uint(47),uint(128)],[uint(256),uint(3)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.341ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.342ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.342ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.343ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.344ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.344ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.346ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.346ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.347ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.347ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.348ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.351ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [40,219,49,182,101,228,169,34,151,40,74,168,74,22,112,211,76,149,204,136,247,105,111,12,250,191,2,203,165,122,241,27],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"40,219,49,182,101,228,169,34,151,40,74,168,74,22,112,211,76,149,204,136,247,105,111,12,250,191,2,203,165,122,241,27\"),3)"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.351ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [188,205,104,124,86,99,93,31,238,52,11,96,37,127,115,215,26,189,248,120,104,29,222,173,199,19,248,81,10,100,231,31],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"188,205,104,124,86,99,93,31,238,52,11,96,37,127,115,215,26,189,248,120,104,29,222,173,199,19,248,81,10,100,231,31\"),23)"
            },
            {
              "js": "[237,225,76,113,171,187,177,102,45,12,251,128,75,215,10,31,206,30,126,100,192,41,44,58,191,41,2,230,248,161,145,123]",
              "sol": "abi.encode(\"237,225,76,113,171,187,177,102,45,12,251,128,75,215,10,31,206,30,126,100,192,41,44,58,191,41,2,230,248,161,145,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.351ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [141,8,10,46,32,44,210,44,49,89,135,199,96,161,69,197,48,61,224,242,58,18,22,82,195,95,189,196,5,99,248,27],\"capacity\": 6}",
              "sol": "Buffer.buffer(abi.encode(\"141,8,10,46,32,44,210,44,49,89,135,199,96,161,69,197,48,61,224,242,58,18,22,82,195,95,189,196,5,99,248,27\"),6)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.353ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [205,9,156,107,56,14,20,136,244,161,224,35,105,160,224,29,216,125,173,216,12,18,10,51,248,189,74,89,164,227,225,98],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"205,9,156,107,56,14,20,136,244,161,224,35,105,160,224,29,216,125,173,216,12,18,10,51,248,189,74,89,164,227,225,98\"),19)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.354ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[194,140,96,117,163,176,67,217,5,94,70,160,177,4,36,245,123,173,240,152,129,180,98,66,35,156,77,81,42,137,99,245]",
              "sol": "stringToBytes32(\"194,140,96,117,163,176,67,217,5,94,70,160,177,4,36,245,123,173,240,152,129,180,98,66,35,156,77,81,42,137,99,245\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.356ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[38,18,77,163,135,224,244,176,221,156,140,1,118,172,213,129,169,103,169,67,154,253,64,254,205,25,32,146,165,22,31,203]",
              "sol": "stringToBytes32(\"38,18,77,163,135,224,244,176,221,156,140,1,118,172,213,129,169,103,169,67,154,253,64,254,205,25,32,146,165,22,31,203\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[158,49,24,26,166,173,178,217,181,58,40,110,42,179,248,200,202,66,3,63,149,211,137,103,194,200,0,151,203,125,87,16]",
              "sol": "abi.encode(\"158,49,24,26,166,173,178,217,181,58,40,110,42,179,248,200,202,66,3,63,149,211,137,103,194,200,0,151,203,125,87,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.401ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.401ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.402ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.402ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.402ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.403ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.403ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.403ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.404ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.404ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.405ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.405ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.405ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.406ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.406ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "[\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"Capstones\",\"vwib7i\",\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"c69zji\",\"Capstones\",\"ERC1820_ACCEPT_MAGIC\",\"c69zji\"]",
              "sol": "[string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Capstones\"),string(\"vwib7i\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"c69zji\"),string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"c69zji\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.407ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"P\",\"P\",\"lnnbxm\",\"ERC1820_ACCEPT_MAGIC\",\"P\",\"c69zji\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"P\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"P\"),string(\"P\"),string(\"lnnbxm\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"P\"),string(\"c69zji\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.407ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"P\",\"[\",\"0\",\"c69zji\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"P\"),string(\"[\"),string(\"0\"),string(\"c69zji\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.408ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"c69zji\"",
              "sol": "\"c69zji\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.408ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.409ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"5di08\"]",
              "sol": "[string(\"5di08\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.409ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"[\"]",
              "sol": "[string(\"[\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.410ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.410ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.411ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"vwib7i\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"vwib7i\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.411ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "[\"Capstones\",\"1wmgh\"]",
              "sol": "[string(\"Capstones\"),string(\"1wmgh\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.412ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"1wmgh\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"1wmgh\")]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.412ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"lnnbxm\"",
              "sol": "\"lnnbxm\""
            },
            {
              "js": "[\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\"]",
              "sol": "[string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.413ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"vwib7i\",\"c69zji\",\"Capstones\"]",
              "sol": "[string(\"vwib7i\"),string(\"c69zji\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.413ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"i2p5oj\",\"Capstones\",\"5di08\"]",
              "sol": "[string(\"i2p5oj\"),string(\"Capstones\"),string(\"5di08\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.414ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"lnnbxm\",\"c69zji\",\"0\"]",
              "sol": "[string(\"lnnbxm\"),string(\"c69zji\"),string(\"0\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.414ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0\",\"1wmgh\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"0\"),string(\"1wmgh\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.415ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"lnnbxm\"",
              "sol": "\"lnnbxm\""
            },
            {
              "js": "[\"L\",\"71o1qh\",\"i2p5oj\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"L\"),string(\"71o1qh\"),string(\"i2p5oj\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.417ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"vwib7i\",\"vwib7i\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"i2p5oj\"]",
              "sol": "[string(\"vwib7i\"),string(\"vwib7i\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"i2p5oj\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.418ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"lnnbxm\",\"lnnbxm\",\"lnnbxm\",\"lnnbxm\"]",
              "sol": "[string(\"lnnbxm\"),string(\"lnnbxm\"),string(\"lnnbxm\"),string(\"lnnbxm\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.418ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"i2p5oj\"",
              "sol": "\"i2p5oj\""
            },
            {
              "js": "[\"ol7y9n\",\"i2p5oj\",\"L\",\"P\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ol7y9n\"),string(\"i2p5oj\"),string(\"L\"),string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.419ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"vwib7i\",\"Transaction successfully verified.\",\"78mr36\",\"c69zji\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"vwib7i\"),string(\"Transaction successfully verified.\"),string(\"78mr36\"),string(\"c69zji\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.419ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"78mr36\"",
              "sol": "\"78mr36\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"78mr36\",\"5di08\",\"5di08\",\"ol7y9n\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"78mr36\"),string(\"5di08\"),string(\"5di08\"),string(\"ol7y9n\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.420ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"lnnbxm\"",
              "sol": "\"lnnbxm\""
            },
            {
              "js": "[\"5di08\",\"ERC1820_ACCEPT_MAGIC\",\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"lnnbxm\"]",
              "sol": "[string(\"5di08\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"lnnbxm\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.421ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"78mr36\"",
              "sol": "\"78mr36\""
            },
            {
              "js": "[[89,238,17,207,28,32,67,184,191,185,184,243,12,215,97,43,237,189,31,125,103,182,27,20,33,234,24,25,202,192,64,34],[230,88,136,83,223,242,229,58,64,187,177,151,153,45,64,111,116,22,213,211,185,77,25,201,227,63,129,174,38,57,30,15],[71,202,202,0,198,210,42,134,67,194,49,101,58,108,192,51,109,66,16,236,130,25,108,183,161,17,88,143,184,209,79,203],[61,226,247,123,245,138,134,104,37,227,190,145,244,198,173,63,87,0,97,249,45,153,12,74,132,201,82,65,100,163,131,62]]",
              "sol": "[bytes(abi.encode(\"89,238,17,207,28,32,67,184,191,185,184,243,12,215,97,43,237,189,31,125,103,182,27,20,33,234,24,25,202,192,64,34\")),bytes(abi.encode(\"230,88,136,83,223,242,229,58,64,187,177,151,153,45,64,111,116,22,213,211,185,77,25,201,227,63,129,174,38,57,30,15\")),bytes(abi.encode(\"71,202,202,0,198,210,42,134,67,194,49,101,58,108,192,51,109,66,16,236,130,25,108,183,161,17,88,143,184,209,79,203\")),bytes(abi.encode(\"61,226,247,123,245,138,134,104,37,227,190,145,244,198,173,63,87,0,97,249,45,153,12,74,132,201,82,65,100,163,131,62\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.421ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[144,179,82,90,138,107,176,33,81,212,179,40,205,253,128,205,40,115,109,92,215,248,162,26,98,244,191,89,114,94,30,31],[142,40,9,146,110,14,251,4,165,93,227,23,104,51,141,59,112,249,83,96,28,43,175,201,241,171,29,85,204,53,87,4],[162,248,251,115,129,158,246,107,155,44,223,201,255,133,110,129,173,69,91,199,63,184,64,252,234,124,239,245,175,47,1,171],[173,193,133,167,163,50,202,32,214,120,245,63,49,210,150,50,65,204,34,163,139,119,69,182,148,203,146,249,107,215,110,149],[186,137,218,67,186,201,174,70,0,219,216,74,71,199,77,185,95,106,193,104,112,54,2,150,223,122,32,212,66,14,150,91],[111,18,207,55,238,30,51,205,165,78,192,238,70,134,227,245,22,234,66,199,68,159,157,121,2,1,16,45,173,98,189,213],[152,34,85,51,49,168,95,77,207,206,108,131,35,172,217,42,206,206,175,71,142,86,143,12,16,56,192,225,160,171,4,54],[28,84,155,179,184,113,66,215,60,155,91,224,236,54,111,45,82,43,108,229,119,181,195,109,50,237,226,235,116,129,230,1],[115,25,133,253,191,142,65,171,209,93,226,143,200,62,102,67,55,3,231,104,55,196,240,159,105,123,1,181,11,220,28,179],[175,115,247,74,145,227,141,51,97,134,14,77,4,206,169,71,65,237,156,255,85,189,121,29,173,109,241,252,219,120,38,140]]",
              "sol": "[bytes(abi.encode(\"144,179,82,90,138,107,176,33,81,212,179,40,205,253,128,205,40,115,109,92,215,248,162,26,98,244,191,89,114,94,30,31\")),bytes(abi.encode(\"142,40,9,146,110,14,251,4,165,93,227,23,104,51,141,59,112,249,83,96,28,43,175,201,241,171,29,85,204,53,87,4\")),bytes(abi.encode(\"162,248,251,115,129,158,246,107,155,44,223,201,255,133,110,129,173,69,91,199,63,184,64,252,234,124,239,245,175,47,1,171\")),bytes(abi.encode(\"173,193,133,167,163,50,202,32,214,120,245,63,49,210,150,50,65,204,34,163,139,119,69,182,148,203,146,249,107,215,110,149\")),bytes(abi.encode(\"186,137,218,67,186,201,174,70,0,219,216,74,71,199,77,185,95,106,193,104,112,54,2,150,223,122,32,212,66,14,150,91\")),bytes(abi.encode(\"111,18,207,55,238,30,51,205,165,78,192,238,70,134,227,245,22,234,66,199,68,159,157,121,2,1,16,45,173,98,189,213\")),bytes(abi.encode(\"152,34,85,51,49,168,95,77,207,206,108,131,35,172,217,42,206,206,175,71,142,86,143,12,16,56,192,225,160,171,4,54\")),bytes(abi.encode(\"28,84,155,179,184,113,66,215,60,155,91,224,236,54,111,45,82,43,108,229,119,181,195,109,50,237,226,235,116,129,230,1\")),bytes(abi.encode(\"115,25,133,253,191,142,65,171,209,93,226,143,200,62,102,67,55,3,231,104,55,196,240,159,105,123,1,181,11,220,28,179\")),bytes(abi.encode(\"175,115,247,74,145,227,141,51,97,134,14,77,4,206,169,71,65,237,156,255,85,189,121,29,173,109,241,252,219,120,38,140\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.422ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"71o1qh\"",
              "sol": "\"71o1qh\""
            },
            {
              "js": "[[230,213,74,154,46,107,32,10,186,88,108,201,3,82,57,94,134,26,198,54,32,86,6,70,119,139,212,149,149,248,243,237],[125,234,226,146,220,68,201,94,249,118,195,48,52,70,27,226,58,188,207,129,226,160,56,179,72,227,169,87,184,166,122,203],[189,168,173,204,24,159,10,166,64,96,82,103,234,229,246,21,86,161,216,205,186,99,8,16,210,236,158,156,140,54,199,242],[25,47,222,223,155,139,243,197,85,88,245,14,22,72,247,31,22,74,90,5,64,190,87,162,14,158,255,81,50,21,110,54],[179,18,124,195,148,124,118,5,238,145,16,130,108,230,66,27,167,233,252,40,25,230,143,229,7,105,170,47,29,123,117,222],[229,2,8,149,36,188,216,119,105,182,106,135,20,54,5,237,44,235,172,149,219,104,15,145,220,213,44,121,90,108,32,151]]",
              "sol": "[bytes(abi.encode(\"230,213,74,154,46,107,32,10,186,88,108,201,3,82,57,94,134,26,198,54,32,86,6,70,119,139,212,149,149,248,243,237\")),bytes(abi.encode(\"125,234,226,146,220,68,201,94,249,118,195,48,52,70,27,226,58,188,207,129,226,160,56,179,72,227,169,87,184,166,122,203\")),bytes(abi.encode(\"189,168,173,204,24,159,10,166,64,96,82,103,234,229,246,21,86,161,216,205,186,99,8,16,210,236,158,156,140,54,199,242\")),bytes(abi.encode(\"25,47,222,223,155,139,243,197,85,88,245,14,22,72,247,31,22,74,90,5,64,190,87,162,14,158,255,81,50,21,110,54\")),bytes(abi.encode(\"179,18,124,195,148,124,118,5,238,145,16,130,108,230,66,27,167,233,252,40,25,230,143,229,7,105,170,47,29,123,117,222\")),bytes(abi.encode(\"229,2,8,149,36,188,216,119,105,182,106,135,20,54,5,237,44,235,172,149,219,104,15,145,220,213,44,121,90,108,32,151\"))]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.423ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "[[226,87,148,154,130,90,200,28,100,170,74,37,160,26,19,114,70,99,170,210,166,203,89,68,103,100,145,21,123,13,86,37]]",
              "sol": "[bytes(abi.encode(\"226,87,148,154,130,90,200,28,100,170,74,37,160,26,19,114,70,99,170,210,166,203,89,68,103,100,145,21,123,13,86,37\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.424ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "[[179,26,148,168,68,224,104,167,52,115,24,163,197,167,18,235,103,171,142,91,205,146,122,214,172,11,184,151,166,218,22,118]]",
              "sol": "[bytes(abi.encode(\"179,26,148,168,68,224,104,167,52,115,24,163,197,167,18,235,103,171,142,91,205,146,122,214,172,11,184,151,166,218,22,118\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.424ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[119,247,246,144,107,147,15,202,81,252,0,193,184,95,134,28,123,192,11,169,157,233,126,150,200,202,119,45,25,213,104,83]]",
              "sol": "[bytes(abi.encode(\"119,247,246,144,107,147,15,202,81,252,0,193,184,95,134,28,123,192,11,169,157,233,126,150,200,202,119,45,25,213,104,83\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.425ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"c69zji\"",
              "sol": "\"c69zji\""
            },
            {
              "js": "[[92,143,103,73,141,60,160,12,31,34,138,155,181,100,170,39,189,167,144,43,53,55,229,182,172,211,18,250,179,224,9,245]]",
              "sol": "[bytes(abi.encode(\"92,143,103,73,141,60,160,12,31,34,138,155,181,100,170,39,189,167,144,43,53,55,229,182,172,211,18,250,179,224,9,245\"))]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.426ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "[[219,82,18,127,110,178,113,50,165,188,1,126,160,50,88,142,32,245,33,8,216,19,108,53,185,61,13,87,145,77,61,115]]",
              "sol": "[bytes(abi.encode(\"219,82,18,127,110,178,113,50,165,188,1,126,160,50,88,142,32,245,33,8,216,19,108,53,185,61,13,87,145,77,61,115\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.426ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "[[111,183,26,146,231,211,88,118,138,229,150,125,144,124,118,212,90,180,42,60,193,183,148,199,184,46,28,31,255,242,151,32],[64,15,252,169,189,25,48,226,111,46,116,38,61,249,212,158,53,171,219,199,47,55,204,29,7,134,51,105,141,50,169,202]]",
              "sol": "[bytes(abi.encode(\"111,183,26,146,231,211,88,118,138,229,150,125,144,124,118,212,90,180,42,60,193,183,148,199,184,46,28,31,255,242,151,32\")),bytes(abi.encode(\"64,15,252,169,189,25,48,226,111,46,116,38,61,249,212,158,53,171,219,199,47,55,204,29,7,134,51,105,141,50,169,202\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.427ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[67,236,106,252,85,75,0,179,166,202,39,70,51,225,7,79,10,250,156,194,234,219,132,6,35,115,90,253,195,155,44,54],[127,135,68,230,130,41,178,137,183,254,233,198,219,189,100,87,223,40,190,130,69,225,144,124,255,70,120,212,159,147,226,187]]",
              "sol": "[bytes(abi.encode(\"67,236,106,252,85,75,0,179,166,202,39,70,51,225,7,79,10,250,156,194,234,219,132,6,35,115,90,253,195,155,44,54\")),bytes(abi.encode(\"127,135,68,230,130,41,178,137,183,254,233,198,219,189,100,87,223,40,190,130,69,225,144,124,255,70,120,212,159,147,226,187\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.427ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[79,102,227,226,200,23,132,36,138,43,141,16,198,167,159,64,121,58,159,184,74,78,179,31,58,180,233,165,233,240,55,224],[107,141,117,55,60,169,24,123,206,55,82,107,19,93,26,101,15,222,171,134,207,222,135,15,187,114,112,27,219,228,226,69]]",
              "sol": "[bytes(abi.encode(\"79,102,227,226,200,23,132,36,138,43,141,16,198,167,159,64,121,58,159,184,74,78,179,31,58,180,233,165,233,240,55,224\")),bytes(abi.encode(\"107,141,117,55,60,169,24,123,206,55,82,107,19,93,26,101,15,222,171,134,207,222,135,15,187,114,112,27,219,228,226,69\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.428ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"78mr36\"",
              "sol": "\"78mr36\""
            },
            {
              "js": "[[170,229,110,89,10,34,155,5,172,136,182,105,245,91,65,53,248,56,218,62,25,23,209,27,254,110,50,121,164,112,183,84],[240,2,76,190,166,248,211,231,233,251,80,50,89,145,41,182,15,239,211,35,201,127,189,110,96,197,80,6,126,194,196,94]]",
              "sol": "[bytes(abi.encode(\"170,229,110,89,10,34,155,5,172,136,182,105,245,91,65,53,248,56,218,62,25,23,209,27,254,110,50,121,164,112,183,84\")),bytes(abi.encode(\"240,2,76,190,166,248,211,231,233,251,80,50,89,145,41,182,15,239,211,35,201,127,189,110,96,197,80,6,126,194,196,94\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.429ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "[[18,223,152,66,72,89,219,19,98,114,38,160,205,152,169,25,215,103,31,98,62,188,99,142,142,67,140,143,155,163,83,49],[104,235,16,235,58,115,197,171,48,120,12,29,243,36,11,24,167,202,21,184,110,99,69,65,136,253,111,174,147,33,9,63],[239,229,29,60,11,53,78,213,0,112,128,241,160,169,178,106,92,115,78,203,173,50,33,98,29,200,69,223,31,155,251,39]]",
              "sol": "[bytes(abi.encode(\"18,223,152,66,72,89,219,19,98,114,38,160,205,152,169,25,215,103,31,98,62,188,99,142,142,67,140,143,155,163,83,49\")),bytes(abi.encode(\"104,235,16,235,58,115,197,171,48,120,12,29,243,36,11,24,167,202,21,184,110,99,69,65,136,253,111,174,147,33,9,63\")),bytes(abi.encode(\"239,229,29,60,11,53,78,213,0,112,128,241,160,169,178,106,92,115,78,203,173,50,33,98,29,200,69,223,31,155,251,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.429ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[238,7,63,149,42,200,18,245,0,43,239,161,155,24,229,210,100,61,56,204,9,94,241,158,221,114,106,114,164,233,193,70],[114,83,139,74,16,246,185,136,52,76,105,136,143,117,4,77,45,42,100,217,231,234,52,243,78,94,111,191,24,155,246,125],[197,192,30,75,195,246,158,99,243,243,238,247,108,204,70,127,205,199,210,103,60,138,196,129,108,243,14,200,14,225,78,220]]",
              "sol": "[bytes(abi.encode(\"238,7,63,149,42,200,18,245,0,43,239,161,155,24,229,210,100,61,56,204,9,94,241,158,221,114,106,114,164,233,193,70\")),bytes(abi.encode(\"114,83,139,74,16,246,185,136,52,76,105,136,143,117,4,77,45,42,100,217,231,234,52,243,78,94,111,191,24,155,246,125\")),bytes(abi.encode(\"197,192,30,75,195,246,158,99,243,243,238,247,108,204,70,127,205,199,210,103,60,138,196,129,108,243,14,200,14,225,78,220\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.430ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[239,160,63,183,208,50,183,118,247,63,209,219,123,79,17,7,33,64,101,160,85,55,82,172,32,242,61,175,142,141,166,16],[109,31,206,187,71,154,57,100,69,224,34,178,245,78,72,171,17,154,176,93,149,94,97,188,193,229,121,200,143,223,12,87],[225,205,186,225,37,174,213,187,255,84,106,66,111,2,71,135,173,3,24,127,123,233,154,205,65,160,3,63,87,209,65,102]]",
              "sol": "[bytes(abi.encode(\"239,160,63,183,208,50,183,118,247,63,209,219,123,79,17,7,33,64,101,160,85,55,82,172,32,242,61,175,142,141,166,16\")),bytes(abi.encode(\"109,31,206,187,71,154,57,100,69,224,34,178,245,78,72,171,17,154,176,93,149,94,97,188,193,229,121,200,143,223,12,87\")),bytes(abi.encode(\"225,205,186,225,37,174,213,187,255,84,106,66,111,2,71,135,173,3,24,127,123,233,154,205,65,160,3,63,87,209,65,102\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.430ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"i2p5oj\"",
              "sol": "\"i2p5oj\""
            },
            {
              "js": "[[43,213,105,180,82,179,57,54,50,15,184,189,168,179,180,117,226,101,192,20,46,33,111,131,36,151,9,175,208,120,181,179],[45,244,64,210,205,30,191,88,226,58,27,41,230,60,210,102,236,93,119,195,168,12,114,39,236,20,250,253,221,138,154,17],[150,221,174,143,48,125,25,155,168,69,244,202,190,185,181,45,45,15,47,241,20,95,94,65,237,116,59,187,64,55,161,190]]",
              "sol": "[bytes(abi.encode(\"43,213,105,180,82,179,57,54,50,15,184,189,168,179,180,117,226,101,192,20,46,33,111,131,36,151,9,175,208,120,181,179\")),bytes(abi.encode(\"45,244,64,210,205,30,191,88,226,58,27,41,230,60,210,102,236,93,119,195,168,12,114,39,236,20,250,253,221,138,154,17\")),bytes(abi.encode(\"150,221,174,143,48,125,25,155,168,69,244,202,190,185,181,45,45,15,47,241,20,95,94,65,237,116,59,187,64,55,161,190\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.431ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "[[172,143,7,64,250,238,131,59,155,188,48,57,197,138,33,40,64,137,155,22,1,147,129,224,193,47,112,254,222,248,194,133],[79,45,205,103,31,249,201,1,192,4,77,240,227,45,130,43,192,22,254,122,44,2,44,218,212,64,180,139,125,119,37,174],[9,235,70,47,215,218,151,186,253,219,110,252,139,117,15,212,27,191,207,16,117,72,182,242,3,225,215,220,5,191,245,91],[222,223,141,127,73,91,13,135,22,88,52,206,34,46,139,95,109,119,71,75,146,202,174,98,145,45,164,69,171,94,18,149]]",
              "sol": "[bytes(abi.encode(\"172,143,7,64,250,238,131,59,155,188,48,57,197,138,33,40,64,137,155,22,1,147,129,224,193,47,112,254,222,248,194,133\")),bytes(abi.encode(\"79,45,205,103,31,249,201,1,192,4,77,240,227,45,130,43,192,22,254,122,44,2,44,218,212,64,180,139,125,119,37,174\")),bytes(abi.encode(\"9,235,70,47,215,218,151,186,253,219,110,252,139,117,15,212,27,191,207,16,117,72,182,242,3,225,215,220,5,191,245,91\")),bytes(abi.encode(\"222,223,141,127,73,91,13,135,22,88,52,206,34,46,139,95,109,119,71,75,146,202,174,98,145,45,164,69,171,94,18,149\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.431ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"i2p5oj\"",
              "sol": "\"i2p5oj\""
            },
            {
              "js": "[[122,251,57,6,189,186,48,2,198,134,91,195,100,58,53,129,95,28,188,247,150,224,76,53,69,15,187,59,178,153,173,51],[206,144,22,1,62,93,253,206,89,113,232,116,249,174,225,118,184,43,62,205,100,241,110,157,157,121,242,25,28,244,120,167],[35,11,73,13,79,229,51,104,56,252,142,161,195,146,224,101,197,91,208,216,63,104,9,111,67,188,240,38,3,135,239,22],[204,144,52,232,4,77,96,107,182,104,234,29,155,144,217,146,113,64,4,58,135,230,244,141,68,145,21,83,239,63,70,171]]",
              "sol": "[bytes(abi.encode(\"122,251,57,6,189,186,48,2,198,134,91,195,100,58,53,129,95,28,188,247,150,224,76,53,69,15,187,59,178,153,173,51\")),bytes(abi.encode(\"206,144,22,1,62,93,253,206,89,113,232,116,249,174,225,118,184,43,62,205,100,241,110,157,157,121,242,25,28,244,120,167\")),bytes(abi.encode(\"35,11,73,13,79,229,51,104,56,252,142,161,195,146,224,101,197,91,208,216,63,104,9,111,67,188,240,38,3,135,239,22\")),bytes(abi.encode(\"204,144,52,232,4,77,96,107,182,104,234,29,155,144,217,146,113,64,4,58,135,230,244,141,68,145,21,83,239,63,70,171\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.432ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "[[235,166,219,75,233,113,109,137,217,120,217,78,75,0,189,248,108,173,138,89,218,197,15,214,183,20,72,252,12,88,186,175],[34,213,86,167,5,221,206,19,248,62,98,88,131,184,111,40,74,167,214,216,115,129,229,173,200,103,157,231,112,127,57,67],[3,27,103,145,37,188,126,222,2,132,50,68,0,223,51,45,147,180,14,243,235,31,101,160,128,12,23,103,219,35,120,246],[15,83,62,32,229,234,108,84,69,89,221,23,104,185,224,213,171,208,248,206,138,167,234,27,35,4,199,126,194,75,242,125]]",
              "sol": "[bytes(abi.encode(\"235,166,219,75,233,113,109,137,217,120,217,78,75,0,189,248,108,173,138,89,218,197,15,214,183,20,72,252,12,88,186,175\")),bytes(abi.encode(\"34,213,86,167,5,221,206,19,248,62,98,88,131,184,111,40,74,167,214,216,115,129,229,173,200,103,157,231,112,127,57,67\")),bytes(abi.encode(\"3,27,103,145,37,188,126,222,2,132,50,68,0,223,51,45,147,180,14,243,235,31,101,160,128,12,23,103,219,35,120,246\")),bytes(abi.encode(\"15,83,62,32,229,234,108,84,69,89,221,23,104,185,224,213,171,208,248,206,138,167,234,27,35,4,199,126,194,75,242,125\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.433ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[166,6,167,25,87,253,97,21,235,89,52,95,37,79,65,114,57,92,0,82,169,185,175,192,26,67,236,131,187,32,127,236],[180,36,17,61,103,32,99,211,0,135,39,213,117,109,159,80,254,252,131,78,219,35,18,10,137,34,84,127,77,99,211,34],[141,34,5,80,2,175,68,57,113,207,26,76,221,208,178,61,76,115,199,32,198,170,228,15,7,230,62,20,170,11,35,127],[250,174,195,1,131,218,94,96,74,238,14,35,120,169,237,46,171,84,82,148,60,204,238,176,120,90,108,190,193,235,237,115]]",
              "sol": "[bytes(abi.encode(\"166,6,167,25,87,253,97,21,235,89,52,95,37,79,65,114,57,92,0,82,169,185,175,192,26,67,236,131,187,32,127,236\")),bytes(abi.encode(\"180,36,17,61,103,32,99,211,0,135,39,213,117,109,159,80,254,252,131,78,219,35,18,10,137,34,84,127,77,99,211,34\")),bytes(abi.encode(\"141,34,5,80,2,175,68,57,113,207,26,76,221,208,178,61,76,115,199,32,198,170,228,15,7,230,62,20,170,11,35,127\")),bytes(abi.encode(\"250,174,195,1,131,218,94,96,74,238,14,35,120,169,237,46,171,84,82,148,60,204,238,176,120,90,108,190,193,235,237,115\"))]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.433ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[84,36,145,230,81,157,123,253,156,219,9,201,240,130,46,103,23,25,238,155,79,64,4,72,152,50,65,43,27,88,249,70],[236,66,6,46,113,111,165,208,176,135,166,199,160,154,73,217,47,231,96,119,216,140,138,162,166,42,28,21,238,26,131,61],[203,161,196,65,40,4,175,137,160,72,0,46,177,25,143,216,31,118,48,110,17,131,199,4,236,196,166,29,29,243,136,21],[95,226,248,101,178,10,23,77,241,198,245,176,143,15,242,113,65,110,167,112,131,209,4,121,56,17,183,4,55,27,84,128],[201,217,38,46,230,183,101,50,69,152,48,102,196,200,178,132,175,26,81,199,139,47,133,1,68,171,98,245,206,107,69,1]]",
              "sol": "[bytes(abi.encode(\"84,36,145,230,81,157,123,253,156,219,9,201,240,130,46,103,23,25,238,155,79,64,4,72,152,50,65,43,27,88,249,70\")),bytes(abi.encode(\"236,66,6,46,113,111,165,208,176,135,166,199,160,154,73,217,47,231,96,119,216,140,138,162,166,42,28,21,238,26,131,61\")),bytes(abi.encode(\"203,161,196,65,40,4,175,137,160,72,0,46,177,25,143,216,31,118,48,110,17,131,199,4,236,196,166,29,29,243,136,21\")),bytes(abi.encode(\"95,226,248,101,178,10,23,77,241,198,245,176,143,15,242,113,65,110,167,112,131,209,4,121,56,17,183,4,55,27,84,128\")),bytes(abi.encode(\"201,217,38,46,230,183,101,50,69,152,48,102,196,200,178,132,175,26,81,199,139,47,133,1,68,171,98,245,206,107,69,1\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.435ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"vwib7i\"",
              "sol": "\"vwib7i\""
            },
            {
              "js": "[[169,110,174,33,249,186,203,136,22,107,2,82,69,249,58,195,254,233,151,163,1,94,232,169,56,180,152,85,72,238,191,90],[199,203,149,155,185,233,119,38,87,194,179,99,9,47,99,138,253,128,100,2,26,202,6,123,188,236,232,155,22,108,185,231],[49,97,238,40,59,131,186,0,102,84,120,155,134,102,6,215,175,141,230,11,183,86,123,51,25,78,168,242,243,56,245,146],[108,14,133,40,109,135,83,143,59,163,105,34,81,209,216,195,7,137,228,174,129,132,3,189,79,172,178,97,176,25,154,193],[14,61,233,142,81,109,224,225,3,96,98,39,221,146,47,23,72,243,56,241,202,146,219,92,216,174,223,197,61,75,82,41]]",
              "sol": "[bytes(abi.encode(\"169,110,174,33,249,186,203,136,22,107,2,82,69,249,58,195,254,233,151,163,1,94,232,169,56,180,152,85,72,238,191,90\")),bytes(abi.encode(\"199,203,149,155,185,233,119,38,87,194,179,99,9,47,99,138,253,128,100,2,26,202,6,123,188,236,232,155,22,108,185,231\")),bytes(abi.encode(\"49,97,238,40,59,131,186,0,102,84,120,155,134,102,6,215,175,141,230,11,183,86,123,51,25,78,168,242,243,56,245,146\")),bytes(abi.encode(\"108,14,133,40,109,135,83,143,59,163,105,34,81,209,216,195,7,137,228,174,129,132,3,189,79,172,178,97,176,25,154,193\")),bytes(abi.encode(\"14,61,233,142,81,109,224,225,3,96,98,39,221,146,47,23,72,243,56,241,202,146,219,92,216,174,223,197,61,75,82,41\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.436ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "[[204,182,221,209,150,197,104,219,199,116,58,6,121,130,148,239,56,100,199,17,15,26,149,157,33,186,102,138,191,10,176,22],[6,241,71,219,36,99,128,147,108,157,222,107,11,96,139,115,148,180,252,30,220,117,215,243,212,169,179,239,24,0,179,26],[163,31,103,24,94,70,55,218,47,236,242,138,174,124,30,216,253,70,234,13,94,3,35,148,94,119,130,208,162,208,183,21],[2,153,77,140,200,13,24,24,196,243,105,219,203,241,187,77,81,51,12,144,85,152,254,108,251,215,88,197,104,163,80,196],[100,230,98,122,123,73,246,112,126,193,154,191,201,122,82,235,175,124,160,213,247,156,199,84,174,177,15,254,243,235,58,213]]",
              "sol": "[bytes(abi.encode(\"204,182,221,209,150,197,104,219,199,116,58,6,121,130,148,239,56,100,199,17,15,26,149,157,33,186,102,138,191,10,176,22\")),bytes(abi.encode(\"6,241,71,219,36,99,128,147,108,157,222,107,11,96,139,115,148,180,252,30,220,117,215,243,212,169,179,239,24,0,179,26\")),bytes(abi.encode(\"163,31,103,24,94,70,55,218,47,236,242,138,174,124,30,216,253,70,234,13,94,3,35,148,94,119,130,208,162,208,183,21\")),bytes(abi.encode(\"2,153,77,140,200,13,24,24,196,243,105,219,203,241,187,77,81,51,12,144,85,152,254,108,251,215,88,197,104,163,80,196\")),bytes(abi.encode(\"100,230,98,122,123,73,246,112,126,193,154,191,201,122,82,235,175,124,160,213,247,156,199,84,174,177,15,254,243,235,58,213\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.437ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"78mr36\"",
              "sol": "\"78mr36\""
            },
            {
              "js": "[[35,170,104,114,172,221,184,151,95,122,234,101,178,246,179,105,71,59,181,118,255,205,80,115,234,74,85,179,188,249,77,157],[235,117,153,6,153,70,128,222,10,92,244,8,191,123,151,131,224,121,202,121,248,148,104,93,170,78,220,150,220,221,120,49],[199,100,59,114,201,146,127,162,148,51,103,79,2,78,102,74,83,223,166,41,246,5,92,97,16,106,39,85,120,249,130,236],[243,32,28,78,133,246,221,182,61,61,10,162,206,237,130,30,40,163,244,45,180,234,190,96,199,14,53,115,121,96,165,115],[70,172,235,109,139,210,92,76,14,194,125,33,36,151,53,192,141,237,20,228,149,143,254,113,197,166,59,95,163,229,233,219]]",
              "sol": "[bytes(abi.encode(\"35,170,104,114,172,221,184,151,95,122,234,101,178,246,179,105,71,59,181,118,255,205,80,115,234,74,85,179,188,249,77,157\")),bytes(abi.encode(\"235,117,153,6,153,70,128,222,10,92,244,8,191,123,151,131,224,121,202,121,248,148,104,93,170,78,220,150,220,221,120,49\")),bytes(abi.encode(\"199,100,59,114,201,146,127,162,148,51,103,79,2,78,102,74,83,223,166,41,246,5,92,97,16,106,39,85,120,249,130,236\")),bytes(abi.encode(\"243,32,28,78,133,246,221,182,61,61,10,162,206,237,130,30,40,163,244,45,180,234,190,96,199,14,53,115,121,96,165,115\")),bytes(abi.encode(\"70,172,235,109,139,210,92,76,14,194,125,33,36,151,53,192,141,237,20,228,149,143,254,113,197,166,59,95,163,229,233,219\"))]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.437ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[137]",
              "sol": "bytes1(\"137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.438ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.438ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.438ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.439ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.439ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.439ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.440ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"ol7y9n\"",
              "sol": "\"ol7y9n\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.440ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"vwib7i\"",
              "sol": "\"vwib7i\""
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.440ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "\"c69zji\"",
              "sol": "\"c69zji\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.440ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"5di08\"",
              "sol": "\"5di08\""
            },
            {
              "js": "\"71o1qh\"",
              "sol": "\"71o1qh\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.441ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"s5089\"",
              "sol": "\"s5089\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"lnnbxm\"",
              "sol": "\"lnnbxm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.441ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.441ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.442ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"i2p5oj\"",
              "sol": "\"i2p5oj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.443ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.443ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.444ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"s5089\",\"P\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"s5089\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.444ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[85,15,234,109,49,124,60,41,128,215,104,238,220,56,255,22,71,2,38,202,248,21,165,196,224,78,237,163,94,160,141,43],[59,239,217,140,118,83,36,205,165,229,129,93,103,177,191,224,129,86,179,152,236,191,237,32,243,214,91,22,58,99,171,49],[155,81,136,22,34,230,25,215,83,54,223,13,208,47,57,131,142,217,194,130,169,239,130,24,205,85,34,141,162,11,109,50],[210,193,128,79,63,2,54,229,78,227,48,181,50,131,218,245,62,147,33,173,71,53,131,246,254,118,244,197,50,30,178,59]]",
              "sol": "[bytes(abi.encode(\"85,15,234,109,49,124,60,41,128,215,104,238,220,56,255,22,71,2,38,202,248,21,165,196,224,78,237,163,94,160,141,43\")),bytes(abi.encode(\"59,239,217,140,118,83,36,205,165,229,129,93,103,177,191,224,129,86,179,152,236,191,237,32,243,214,91,22,58,99,171,49\")),bytes(abi.encode(\"155,81,136,22,34,230,25,215,83,54,223,13,208,47,57,131,142,217,194,130,169,239,130,24,205,85,34,141,162,11,109,50\")),bytes(abi.encode(\"210,193,128,79,63,2,54,229,78,227,48,181,50,131,218,245,62,147,33,173,71,53,131,246,254,118,244,197,50,30,178,59\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.445ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.445ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[205,15,5,73,91,57,110,15,13,101,115,232,156,153,68,179,233,231,113,86,157,132,207,63,99,7,2,137,212,212,239,0]",
              "sol": "stringToBytes32(\"205,15,5,73,91,57,110,15,13,101,115,232,156,153,68,179,233,231,113,86,157,132,207,63,99,7,2,137,212,212,239,0\")"
            },
            {
              "js": "[85,151,127,22,52,217,187,99,178,120,98,127,143,29,212,45,139,52,243,12,66,66,243,60,208,113,68,89,22,161,188,69]",
              "sol": "stringToBytes32(\"85,151,127,22,52,217,187,99,178,120,98,127,143,29,212,45,139,52,243,12,66,66,243,60,208,113,68,89,22,161,188,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.446ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[64,53,173,166,0,48,164,146,87,142,231,148,32,20,253,147,47,170,232,35,92,188,236,116,7,53,115,248,117,2,109,102]",
              "sol": "stringToBytes32(\"64,53,173,166,0,48,164,146,87,142,231,148,32,20,253,147,47,170,232,35,92,188,236,116,7,53,115,248,117,2,109,102\")"
            },
            {
              "js": "[8,29,75,28,122,169,166,130,230,17,245,86,222,197,161,13,175,127,22,121,41,149,203,3,47,238,176,124,177,191,177,106]",
              "sol": "abi.encode(\"8,29,75,28,122,169,166,130,230,17,245,86,222,197,161,13,175,127,22,121,41,149,203,3,47,238,176,124,177,191,177,106\")"
            },
            {
              "js": "[180,15,60,66,165,174,255,8,94,123,203,19,215,165,83,220,134,234,62,20,60,54,28,13,247,62,56,107,13,84,226,54]",
              "sol": "abi.encode(\"180,15,60,66,165,174,255,8,94,123,203,19,215,165,83,220,134,234,62,20,60,54,28,13,247,62,56,107,13,84,226,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.446ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[107,176,193,51,75,44,3,135,208,39,77,1,168,49,98,249,236,208,189,84,73,184,44,197,254,41,19,153,83,67,196,93]",
              "sol": "abi.encode(\"107,176,193,51,75,44,3,135,208,39,77,1,168,49,98,249,236,208,189,84,73,184,44,197,254,41,19,153,83,67,196,93\")"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[142,138,189,245,255,128,79,246,128,79,169,15,58,127,166,53,18,189,89,21,21,65,141,175,76,232,177,169,213,25,156,136]",
              "sol": "abi.encode(\"142,138,189,245,255,128,79,246,128,79,169,15,58,127,166,53,18,189,89,21,21,65,141,175,76,232,177,169,213,25,156,136\")"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.448ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[255,67,72,214,168,120,218,91,106,176,141,143,124,229,225,171,197,17,62,6,208,194,111,160,157,31,163,249,143,147,203,57]",
              "sol": "stringToBytes32(\"255,67,72,214,168,120,218,91,106,176,141,143,124,229,225,171,197,17,62,6,208,194,111,160,157,31,163,249,143,147,203,57\")"
            },
            {
              "js": "\"s5089\"",
              "sol": "\"s5089\""
            },
            {
              "js": "[200,229,71,126,76,48,31,197,192,51,73,61,201,45,90,132,175,245,18,198,204,39,176,131,200,179,41,102,114,134,10,104]",
              "sol": "abi.encode(\"200,229,71,126,76,48,31,197,192,51,73,61,201,45,90,132,175,245,18,198,204,39,176,131,200,179,41,102,114,134,10,104\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[128,110,117,248,194,28,135,136,113,95,152,187,231,79,251,255,133,52,181,70,42,48,135,248,83,2,150,92,158,19,212,139]",
              "sol": "stringToBytes32(\"128,110,117,248,194,28,135,136,113,95,152,187,231,79,251,255,133,52,181,70,42,48,135,248,83,2,150,92,158,19,212,139\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[126,246,93,206,88,98,156,200,54,156,135,242,85,73,84,225,25,135,117,215,236,235,186,180,150,247,85,86,237,9,115,49]",
              "sol": "abi.encode(\"126,246,93,206,88,98,156,200,54,156,135,242,85,73,84,225,25,135,117,215,236,235,186,180,150,247,85,86,237,9,115,49\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.448ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[159,218,198,0,61,87,194,251,226,224,97,164,229,13,112,98,202,130,212,171,193,59,95,231,61,229,27,103,140,28,175,191]",
              "sol": "stringToBytes32(\"159,218,198,0,61,87,194,251,226,224,97,164,229,13,112,98,202,130,212,171,193,59,95,231,61,229,27,103,140,28,175,191\")"
            },
            {
              "js": "[54,120,123,80,202,243,3,81,180,172,69,121,61,87,135,59,234,18,243,207,1,0,207,47,211,187,186,141,17,235,47,218]",
              "sol": "abi.encode(\"54,120,123,80,202,243,3,81,180,172,69,121,61,87,135,59,234,18,243,207,1,0,207,47,211,187,186,141,17,235,47,218\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[159,218,198,0,61,87,194,251,226,224,97,164,229,13,112,98,202,130,212,171,193,59,95,231,61,229,27,103,140,28,175,191]",
                "sol": "stringToBytes32(\"159,218,198,0,61,87,194,251,226,224,97,164,229,13,112,98,202,130,212,171,193,59,95,231,61,229,27,103,140,28,175,191\")"
              },
              {
                "js": "[168,201,166,19,94,144,112,241,103,25,226,176,185,134,51,183,9,84,204,117,239,249,129,161,229,43,75,210,229,144,159,120,101]",
                "sol": "bytes33(\"168,201,166,19,94,144,112,241,103,25,226,176,185,134,51,183,9,84,204,117,239,249,129,161,229,43,75,210,229,144,159,120,101\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.450ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[194,65,219,138,222,134,61,123,192,169,141,238,172,197,166,179,179,200,155,31,231,174,54,131,190,87,244,240,225,219,45,216]",
              "sol": "abi.encode(\"194,65,219,138,222,134,61,123,192,169,141,238,172,197,166,179,179,200,155,31,231,174,54,131,190,87,244,240,225,219,45,216\")"
            },
            {
              "js": "[215,252,160,122,1,75,29,18,210,104,173,212,108,214,188,105,48,50,200,201,172,48,193,231,204,16,65,198,98,92,232,121]",
              "sol": "stringToBytes32(\"215,252,160,122,1,75,29,18,210,104,173,212,108,214,188,105,48,50,200,201,172,48,193,231,204,16,65,198,98,92,232,121\")"
            },
            {
              "js": "[63,37,254,75,3,95,91,207,84,247,148,84,181,125,236,103,81,109,51,31,87,185,4,30,106,237,39,13,197,199,114,209]",
              "sol": "abi.encode(\"63,37,254,75,3,95,91,207,84,247,148,84,181,125,236,103,81,109,51,31,87,185,4,30,106,237,39,13,197,199,114,209\")"
            },
            {
              "js": "\"vwib7i\"",
              "sol": "\"vwib7i\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[176,217,13,60,232,145,27,221,16,209,121,56,72,41,247,54,3,110,79,246,98,65,186,192,107,64,107,234,124,139,84,181]",
              "sol": "abi.encode(\"176,217,13,60,232,145,27,221,16,209,121,56,72,41,247,54,3,110,79,246,98,65,186,192,107,64,107,234,124,139,84,181\")"
            },
            {
              "js": "[30,162,186,10,152,118,27,194,115,16,150,30,254,39,101,184,65,30,61,178,34,99,126,124,220,178,202,180,83,209,9,46]",
              "sol": "stringToBytes32(\"30,162,186,10,152,118,27,194,115,16,150,30,254,39,101,184,65,30,61,178,34,99,126,124,220,178,202,180,83,209,9,46\")"
            },
            {
              "js": "[90,143,110,119,132,35,110,214,75,104,5,180,216,247,43,68,89,224,69,94,230,100,221,196,189,10,120,55,74,120,180,182]",
              "sol": "abi.encode(\"90,143,110,119,132,35,110,214,75,104,5,180,216,247,43,68,89,224,69,94,230,100,221,196,189,10,120,55,74,120,180,182\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[186,243,215,139,208,74,74,91,73,90,249,10,215,2,196,96,184,82,226,6,225,239,81,119,13,164,231,214,53,45,147,241]",
              "sol": "abi.encode(\"186,243,215,139,208,74,74,91,73,90,249,10,215,2,196,96,184,82,226,6,225,239,81,119,13,164,231,214,53,45,147,241\")"
            },
            {
              "js": "[143,93,2,149,53,43,7,254,60,124,216,171,40,138,128,188,222,79,81,4,125,102,82,96,227,35,118,110,80,97,173,61]",
              "sol": "stringToBytes32(\"143,93,2,149,53,43,7,254,60,124,216,171,40,138,128,188,222,79,81,4,125,102,82,96,227,35,118,110,80,97,173,61\")"
            },
            {
              "js": "[227,199,4,164,0,61,143,224,88,128,182,218,115,189,45,220,246,205,117,131,193,23,231,137,108,147,111,89,13,136,67,36]",
              "sol": "abi.encode(\"227,199,4,164,0,61,143,224,88,128,182,218,115,189,45,220,246,205,117,131,193,23,231,137,108,147,111,89,13,136,67,36\")"
            },
            {
              "js": "\"lnnbxm\"",
              "sol": "\"lnnbxm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[86,29,136,16,167,242,207,131,162,222,218,11,253,230,54,47,73,172,149,173,249,70,14,150,105,187,176,220,89,56,86,231]",
              "sol": "abi.encode(\"86,29,136,16,167,242,207,131,162,222,218,11,253,230,54,47,73,172,149,173,249,70,14,150,105,187,176,220,89,56,86,231\")"
            },
            {
              "js": "[111,54,36,113,237,54,152,75,62,158,150,104,14,14,29,23,93,103,172,231,235,254,76,202,82,169,240,205,253,141,57,248]",
              "sol": "stringToBytes32(\"111,54,36,113,237,54,152,75,62,158,150,104,14,14,29,23,93,103,172,231,235,254,76,202,82,169,240,205,253,141,57,248\")"
            },
            {
              "js": "[139,166,193,32,76,85,215,76,138,218,194,152,185,161,58,68,57,30,83,96,62,170,111,91,176,69,37,179,228,129,217,57]",
              "sol": "abi.encode(\"139,166,193,32,76,85,215,76,138,218,194,152,185,161,58,68,57,30,83,96,62,170,111,91,176,69,37,179,228,129,217,57\")"
            },
            {
              "js": "\"1wmgh\"",
              "sol": "\"1wmgh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[16,151,175,50,178,198,161,29,190,91,167,133,132,196,79,53,227,1,64,118,231,117,35,17,127,166,120,146,154,82,88,249]",
              "sol": "abi.encode(\"16,151,175,50,178,198,161,29,190,91,167,133,132,196,79,53,227,1,64,118,231,117,35,17,127,166,120,146,154,82,88,249\")"
            },
            {
              "js": "[4,194,196,186,226,29,110,28,24,123,66,77,247,6,205,94,23,77,113,195,129,159,195,205,205,209,154,151,122,63,191,44]",
              "sol": "stringToBytes32(\"4,194,196,186,226,29,110,28,24,123,66,77,247,6,205,94,23,77,113,195,129,159,195,205,205,209,154,151,122,63,191,44\")"
            },
            {
              "js": "[13,10,60,126,79,0,71,225,40,56,3,217,124,228,88,136,154,121,215,121,244,207,98,65,105,51,232,91,185,41,80,22]",
              "sol": "abi.encode(\"13,10,60,126,79,0,71,225,40,56,3,217,124,228,88,136,154,121,215,121,244,207,98,65,105,51,232,91,185,41,80,22\")"
            },
            {
              "js": "\"s5089\"",
              "sol": "\"s5089\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[215,187,26,88,238,38,89,210,144,38,30,143,55,57,15,245,152,139,190,152,163,67,55,77,61,217,46,15,40,110,20,67]",
              "sol": "abi.encode(\"215,187,26,88,238,38,89,210,144,38,30,143,55,57,15,245,152,139,190,152,163,67,55,77,61,217,46,15,40,110,20,67\")"
            },
            {
              "js": "[183,163,177,242,208,242,152,171,26,151,220,132,183,128,22,86,19,248,155,238,14,7,202,77,219,43,116,134,81,70,184,172]",
              "sol": "stringToBytes32(\"183,163,177,242,208,242,152,171,26,151,220,132,183,128,22,86,19,248,155,238,14,7,202,77,219,43,116,134,81,70,184,172\")"
            },
            {
              "js": "[50,180,130,80,255,8,91,197,170,253,57,34,28,106,100,43,104,55,199,12,192,153,156,85,3,169,11,211,23,103,228,235]",
              "sol": "abi.encode(\"50,180,130,80,255,8,91,197,170,253,57,34,28,106,100,43,104,55,199,12,192,153,156,85,3,169,11,211,23,103,228,235\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[77,165,114,250,137,117,201,94,115,8,163,228,221,157,174,0,58,92,202,231,244,41,240,31,35,99,49,192,100,205,68,66]",
              "sol": "abi.encode(\"77,165,114,250,137,117,201,94,115,8,163,228,221,157,174,0,58,92,202,231,244,41,240,31,35,99,49,192,100,205,68,66\")"
            },
            {
              "js": "[80,26,148,97,87,216,137,13,156,198,83,171,176,61,42,175,255,158,130,111,3,28,238,128,15,145,240,11,141,8,220,36]",
              "sol": "stringToBytes32(\"80,26,148,97,87,216,137,13,156,198,83,171,176,61,42,175,255,158,130,111,3,28,238,128,15,145,240,11,141,8,220,36\")"
            },
            {
              "js": "[176,141,38,252,79,0,242,121,86,115,74,250,170,75,104,173,64,182,233,200,125,118,124,71,53,29,170,208,211,232,79,118]",
              "sol": "abi.encode(\"176,141,38,252,79,0,242,121,86,115,74,250,170,75,104,173,64,182,233,200,125,118,124,71,53,29,170,208,211,232,79,118\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[30,250,17,80,0,239,224,3,194,198,192,8,21,196,205,61,29,113,197,75,196,203,39,48,85,143,206,223,216,238,112,60]",
              "sol": "abi.encode(\"30,250,17,80,0,239,224,3,194,198,192,8,21,196,205,61,29,113,197,75,196,203,39,48,85,143,206,223,216,238,112,60\")"
            },
            {
              "js": "[227,205,22,208,101,195,20,97,182,198,61,228,49,200,61,171,159,85,174,213,56,178,164,168,174,75,27,206,123,19,164,81]",
              "sol": "stringToBytes32(\"227,205,22,208,101,195,20,97,182,198,61,228,49,200,61,171,159,85,174,213,56,178,164,168,174,75,27,206,123,19,164,81\")"
            },
            {
              "js": "[113,182,79,133,107,172,26,47,125,68,41,219,146,152,35,107,125,208,207,159,136,138,199,136,161,127,2,101,54,23,111,96]",
              "sol": "abi.encode(\"113,182,79,133,107,172,26,47,125,68,41,219,146,152,35,107,125,208,207,159,136,138,199,136,161,127,2,101,54,23,111,96\")"
            },
            {
              "js": "\"s5089\"",
              "sol": "\"s5089\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.456ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[19,33,182,109,50,241,219,16,99,175,44,6,120,167,24,47,102,27,213,175,15,97,108,148,0,45,222,181,249,73,178,10]",
              "sol": "abi.encode(\"19,33,182,109,50,241,219,16,99,175,44,6,120,167,24,47,102,27,213,175,15,97,108,148,0,45,222,181,249,73,178,10\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[202,131,119,157,174,129,45,126,164,252,90,236,132,131,168,87,3,225,48,114,202,131,99,240,1,136,156,2,129,16,242,217]",
              "sol": "abi.encode(\"202,131,119,157,174,129,45,126,164,252,90,236,132,131,168,87,3,225,48,114,202,131,99,240,1,136,156,2,129,16,242,217\")"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.461ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[64,76,238,47,253,210,95,67,121,130,118,83,174,72,218,98,36,35,225,140,80,128,198,220,219,196,96,56,225,39,114,238]",
              "sol": "stringToBytes32(\"64,76,238,47,253,210,95,67,121,130,118,83,174,72,218,98,36,35,225,140,80,128,198,220,219,196,96,56,225,39,114,238\")"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "[213,212,176,100,199,173,42,144,2,168,93,150,79,118,46,52,133,237,135,196,150,95,0,108,89,228,176,123,244,24,180,163]",
              "sol": "stringToBytes32(\"213,212,176,100,199,173,42,144,2,168,93,150,79,118,46,52,133,237,135,196,150,95,0,108,89,228,176,123,244,24,180,163\")"
            },
            {
              "js": "[147,169,217,41,39,58,187,16,243,202,236,79,185,163,1,115,98,38,66,8,32,76,16,34,244,82,119,105,207,173,12,87]",
              "sol": "stringToBytes32(\"147,169,217,41,39,58,187,16,243,202,236,79,185,163,1,115,98,38,66,8,32,76,16,34,244,82,119,105,207,173,12,87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.461ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[232,227,135,176,60,179,244,50,97,247,196,43,3,80,11,228,19,144,67,240,224,111,247,77,130,32,244,19,91,180,224,126]",
              "sol": "stringToBytes32(\"232,227,135,176,60,179,244,50,97,247,196,43,3,80,11,228,19,144,67,240,224,111,247,77,130,32,244,19,91,180,224,126\")"
            },
            {
              "js": "[232,179,46,204,50,240,215,18,124,68,239,20,109,133,228,136,63,142,226,184,94,179,24,16,24,65,3,82,162,29,197,51,57,213,107,199,94,114,11,49,248,197,63,111,196,71,14,141]",
              "sol": "abi.encode(\"232,179,46,204,50,240,215,18,124,68,239,20,109,133,228,136,63,142,226,184,94,179,24,16,24,65,3,82,162,29,197,51,57,213,107,199,94,114,11,49,248,197,63,111,196,71,14,141\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[136,211,88,123,37,185,240,211,17,2,127,245,149,100,79,29,67,176,84,106,134,50,230,39,205,167,45,169,204,148,236,64]",
              "sol": "stringToBytes32(\"136,211,88,123,37,185,240,211,17,2,127,245,149,100,79,29,67,176,84,106,134,50,230,39,205,167,45,169,204,148,236,64\")"
            },
            {
              "js": "[83,16,10,214,115,250,71,81,198,252,8,237,134,131,196,201,90,148,24,78,188,15,141,80,30,204,1,38,29,157,126,152,145,193,123,238,96,104,224,113,58,90,227,131,27,70,201,80,225,80,224,172,76,203,245,234,51,127,32,168,241,231,142,58,34]",
              "sol": "abi.encode(\"83,16,10,214,115,250,71,81,198,252,8,237,134,131,196,201,90,148,24,78,188,15,141,80,30,204,1,38,29,157,126,152,145,193,123,238,96,104,224,113,58,90,227,131,27,70,201,80,225,80,224,172,76,203,245,234,51,127,32,168,241,231,142,58,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.462ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.463ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[161,2014223714]",
              "sol": "[uint(161),uint(2014223714)]"
            },
            {
              "js": "[[2014223715,59],[31,256]]",
              "sol": "[[uint(2014223715),uint(59)],[uint(31),uint(256)]]"
            },
            {
              "js": "[33,88]",
              "sol": "[uint(33),uint(88)]"
            },
            {
              "js": "[31,199999]",
              "sol": "[uint(31),uint(199999)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.466ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.466ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[11,32]",
              "sol": "[uint(11),uint(32)]"
            },
            {
              "js": "{\"A\": {\"X\": 101,\"Y\": 30},\"B\": {\"X\": [22,5],\"Y\": [1,27]},\"C\": {\"X\": 98,\"Y\": 200001}}",
              "sol": "Verifier.Proof(Pairing.G1Point(101,30),Pairing.G2Point([uint(22),uint(5)],[uint(1),uint(27)]),Pairing.G1Point(98,200001))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[48,56,3,9,1024,8,200001,2014223715,257]",
              "sol": "[uint(48),uint(56),uint(3),uint(9),uint(1024),uint(8),uint(200001),uint(2014223715),uint(257)]"
            },
            {
              "js": "{\"A\": {\"X\": 56,\"Y\": 58},\"B\": {\"X\": [49,1025],\"Y\": [200000,64]},\"C\": {\"X\": 10,\"Y\": 256}}",
              "sol": "Verifier.Proof(Pairing.G1Point(56,58),Pairing.G2Point([uint(49),uint(1025)],[uint(200000),uint(64)]),Pairing.G1Point(10,256))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.470ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.470ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.470ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"accounts[6]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.473ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.474ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.474ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.475ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "24",
                "sol": "24"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.476ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.477ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[89,246,62,60,81,16,54,173,92,95,69,242,240,216,71,225,159,191,83,196,50,145,206,127,243,211,125,208,210,235,152,242]",
              "sol": "abi.encode(\"89,246,62,60,81,16,54,173,92,95,69,242,240,216,71,225,159,191,83,196,50,145,206,127,243,211,125,208,210,235,152,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "[89,246,62,60,81,16,54,173,92,95,69,242,240,216,71,225,159,191,83,196,50,145,206,127,243,211,125,208,210,235,152,242]",
                "sol": "abi.encode(\"89,246,62,60,81,16,54,173,92,95,69,242,240,216,71,225,159,191,83,196,50,145,206,127,243,211,125,208,210,235,152,242\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.478ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.479ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[61,143,92,242]",
              "sol": "bytes4(\"61,143,92,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.481ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.482ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.482ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.483ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.483ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[51,169,146,182,157,176,17,79,48,30,238,16,147,81,139,186,222,36,13,121,191,177,156,73,206,21,114,46,150,205,86,135]",
              "sol": "abi.encode(\"51,169,146,182,157,176,17,79,48,30,238,16,147,81,139,186,222,36,13,121,191,177,156,73,206,21,114,46,150,205,86,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "[235,174,122,63,153,29,114,238,130,56,185,24,85,75,240,176,125,93,155,77,205,44,67,56,132,49,77,77,89,208,178,231]",
              "sol": "abi.encode(\"235,174,122,63,153,29,114,238,130,56,185,24,85,75,240,176,125,93,155,77,205,44,67,56,132,49,77,77,89,208,178,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.485ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.488ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[58,1025]",
              "sol": "[uint(58),uint(1025)]"
            },
            {
              "js": "[[2014223716,1023],[65,55]]",
              "sol": "[[uint(2014223716),uint(1023)],[uint(65),uint(55)]]"
            },
            {
              "js": "[7,256]",
              "sol": "[uint(7),uint(256)]"
            },
            {
              "js": "[160,48]",
              "sol": "[uint(160),uint(48)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.490ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.491ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.491ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.492ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.492ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.494ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.495ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.495ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.496ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.497ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.498ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T08:13:17.499ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.500ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T08:13:17.500ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}