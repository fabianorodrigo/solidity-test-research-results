,{
  "2020-11-12T10:55:10.589ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:55:25.563ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:55:40.435ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:55:55.509ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:10.901ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:26.247ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.454ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [102,126,8,187,30,107,200,34,25,172,245,98,227,69,84,123,63,81,196,187,126,171,170,255,218,222,16,156,92,117,100,245],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"102,126,8,187,30,107,200,34,25,172,245,98,227,69,84,123,63,81,196,187,126,171,170,255,218,222,16,156,92,117,100,245\"),49)"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.455ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [147,234,126,219,166,227,16,61,244,185,177,126,139,131,33,170,5,45,72,136,233,201,216,205,103,180,25,82,63,51,207,121],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"147,234,126,219,166,227,16,61,244,185,177,126,139,131,33,170,5,45,72,136,233,201,216,205,103,180,25,82,63,51,207,121\"),256)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [237,210,150,120,245,132,136,63,132,33,60,153,226,181,230,140,227,48,4,147,223,177,75,247,193,189,150,214,98,86,188,248],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"237,210,150,120,245,132,136,63,132,33,60,153,226,181,230,140,227,48,4,147,223,177,75,247,193,189,150,214,98,86,188,248\"),16)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.456ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [117,116,32,67,241,76,185,58,235,136,167,197,237,135,205,104,57,224,16,45,213,166,132,167,211,73,143,84,104,1,149,93],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"117,116,32,67,241,76,185,58,235,136,167,197,237,135,205,104,57,224,16,45,213,166,132,167,211,73,143,84,104,1,149,93\"),60)"
            },
            {
              "js": "[97,164,138,158,203,146,159,130,212,115,164,126,189,63,211,244,46,184,191,111,3,29,145,126,35,152,78,157,189,186,65,91]",
              "sol": "abi.encode(\"97,164,138,158,203,146,159,130,212,115,164,126,189,63,211,244,46,184,191,111,3,29,145,126,35,152,78,157,189,186,65,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.457ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [147,40,211,141,178,98,8,103,123,88,89,141,97,224,137,223,161,29,47,54,114,133,49,8,25,61,164,156,161,103,51,118],\"capacity\": 15}",
              "sol": "Buffer.buffer(abi.encode(\"147,40,211,141,178,98,8,103,123,88,89,141,97,224,137,223,161,29,47,54,114,133,49,8,25,61,164,156,161,103,51,118\"),15)"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.457ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [83,40,124,205,100,213,113,59,242,231,93,11,9,40,187,141,205,43,249,177,179,185,142,142,11,215,182,234,5,12,25,105],\"capacity\": 1532892064}",
              "sol": "Buffer.buffer(abi.encode(\"83,40,124,205,100,213,113,59,242,231,93,11,9,40,187,141,205,43,249,177,179,185,142,142,11,215,182,234,5,12,25,105\"),1532892064)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.458ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [41,156,167,46,218,216,104,211,211,55,82,253,20,200,88,220,210,210,99,244,4,219,105,246,124,85,164,111,57,172,17,121],\"capacity\": 1023}",
              "sol": "Buffer.buffer(abi.encode(\"41,156,167,46,218,216,104,211,211,55,82,253,20,200,88,220,210,210,99,244,4,219,105,246,124,85,164,111,57,172,17,121\"),1023)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.458ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [66,56,52,157,107,109,151,48,133,6,146,12,121,129,113,104,63,92,218,55,238,160,61,165,122,43,73,69,89,228,76,53],\"capacity\": 25}",
              "sol": "Buffer.buffer(abi.encode(\"66,56,52,157,107,109,151,48,133,6,146,12,121,129,113,104,63,92,218,55,238,160,61,165,122,43,73,69,89,228,76,53\"),25)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.466ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.466ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.466ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 103,\"Y\": 58}",
              "sol": "Pairing.G1Point(103,58)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.467ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 11,\"Y\": 19}",
              "sol": "Pairing.G1Point(11,19)"
            },
            {
              "js": "{\"X\": 1023,\"Y\": 127}",
              "sol": "Pairing.G1Point(1023,127)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.468ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [1,86],\"Y\": [7,200000]}",
              "sol": "Pairing.G2Point([uint(1),uint(86)],[uint(7),uint(200000)])"
            },
            {
              "js": "{\"X\": [2014223716,1024],\"Y\": [97,45]}",
              "sol": "Pairing.G2Point([uint(2014223716),uint(1024)],[uint(97),uint(45)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.469ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 87,\"Y\": 95}",
              "sol": "Pairing.G1Point(87,95)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.471ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 256,\"Y\": 58},{\"X\": 88,\"Y\": 69},{\"X\": 24,\"Y\": 27},{\"X\": 257,\"Y\": 6}]",
              "sol": "[Pairing.G1Point(256,58),Pairing.G1Point(88,69),Pairing.G1Point(24,27),Pairing.G1Point(257,6)]"
            },
            {
              "js": "[{\"X\": [8,17],\"Y\": [70,1023]},{\"X\": [1023,128],\"Y\": [28,61]},{\"X\": [69,46],\"Y\": [48,10]},{\"X\": [20,29],\"Y\": [101,2014223715]}]",
              "sol": "[Pairing.G2Point([uint(8),uint(17)],[uint(70),uint(1023)]),Pairing.G2Point([uint(1023),uint(128)],[uint(28),uint(61)]),Pairing.G2Point([uint(69),uint(46)],[uint(48),uint(10)]),Pairing.G2Point([uint(20),uint(29)],[uint(101),uint(2014223715)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 70,\"Y\": 71},{\"X\": 48,\"Y\": 32},{\"X\": 47,\"Y\": 4},{\"X\": 103,\"Y\": 59},{\"X\": 25,\"Y\": 1532892062}]",
                "sol": "[Pairing.G1Point(58,64),Pairing.G1Point(255,25),Pairing.G1Point(23,10),Pairing.G1Point(3,18),Pairing.G1Point(11,5)]"
              },
              {
                "js": "[{\"X\": [8,17],\"Y\": [70,1023]},{\"X\": [1023,128],\"Y\": [28,61]},{\"X\": [69,46],\"Y\": [48,10]},{\"X\": [20,29],\"Y\": [101,2014223715]}]",
                "sol": "[Pairing.G2Point([uint(8),uint(17)],[uint(70),uint(1023)]),Pairing.G2Point([uint(1023),uint(128)],[uint(28),uint(61)]),Pairing.G2Point([uint(69),uint(46)],[uint(48),uint(10)]),Pairing.G2Point([uint(20),uint(29)],[uint(101),uint(2014223715)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.474ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 60,\"Y\": 10}",
              "sol": "Pairing.G1Point(60,10)"
            },
            {
              "js": "{\"X\": [65,57],\"Y\": [3,1]}",
              "sol": "Pairing.G2Point([uint(65),uint(57)],[uint(3),uint(1)])"
            },
            {
              "js": "{\"X\": 32,\"Y\": 6}",
              "sol": "Pairing.G1Point(32,6)"
            },
            {
              "js": "{\"X\": [31,88],\"Y\": [47,10]}",
              "sol": "Pairing.G2Point([uint(31),uint(88)],[uint(47),uint(10)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.477ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 69,\"Y\": 1}",
              "sol": "Pairing.G1Point(69,1)"
            },
            {
              "js": "{\"X\": [88,21],\"Y\": [32,88]}",
              "sol": "Pairing.G2Point([uint(88),uint(21)],[uint(32),uint(88)])"
            },
            {
              "js": "{\"X\": 102,\"Y\": 102}",
              "sol": "Pairing.G1Point(102,102)"
            },
            {
              "js": "{\"X\": [30,18],\"Y\": [20,86]}",
              "sol": "Pairing.G2Point([uint(30),uint(18)],[uint(20),uint(86)])"
            },
            {
              "js": "{\"X\": 87,\"Y\": 19}",
              "sol": "Pairing.G1Point(87,19)"
            },
            {
              "js": "{\"X\": [57,57],\"Y\": [69,16]}",
              "sol": "Pairing.G2Point([uint(57),uint(57)],[uint(69),uint(16)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.485ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.486ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.486ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.487ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.488ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.488ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.489ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.489ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.490ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.492ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.492ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.496ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [79,201,38,26,153,84,147,73,36,104,186,56,201,230,19,202,3,232,27,142,49,92,24,87,153,65,63,215,186,254,193,41],\"capacity\": 46}",
              "sol": "Buffer.buffer(abi.encode(\"79,201,38,26,153,84,147,73,36,104,186,56,201,230,19,202,3,232,27,142,49,92,24,87,153,65,63,215,186,254,193,41\"),46)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.497ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [168,156,186,169,73,244,109,214,220,185,206,178,236,88,110,134,111,114,250,86,226,31,218,185,169,216,82,223,138,175,23,81],\"capacity\": 18}",
              "sol": "Buffer.buffer(abi.encode(\"168,156,186,169,73,244,109,214,220,185,206,178,236,88,110,134,111,114,250,86,226,31,218,185,169,216,82,223,138,175,23,81\"),18)"
            },
            {
              "js": "[106,233,138,160,79,191,122,27,174,170,95,66,165,207,190,71,222,165,199,101,239,63,151,191,55,242,5,69,138,134,25,82]",
              "sol": "abi.encode(\"106,233,138,160,79,191,122,27,174,170,95,66,165,207,190,71,222,165,199,101,239,63,151,191,55,242,5,69,138,134,25,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.497ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [20,248,86,73,46,115,16,233,108,91,189,28,9,212,213,93,26,129,18,76,180,34,50,75,59,210,9,176,139,225,232,193],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"20,248,86,73,46,115,16,233,108,91,189,28,9,212,213,93,26,129,18,76,180,34,50,75,59,210,9,176,139,225,232,193\"),2)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.497ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [87,254,126,94,11,70,5,114,212,75,78,145,42,139,200,198,172,50,180,37,8,130,209,97,117,87,195,91,53,88,24,4],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"87,254,126,94,11,70,5,114,212,75,78,145,42,139,200,198,172,50,180,37,8,130,209,97,117,87,195,91,53,88,24,4\"),27)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.500ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[232,155,27,237,82,118,7,35,225,218,112,195,86,8,186,6,171,132,106,13,49,16,229,80,79,8,74,31,230,183,50,164]",
              "sol": "stringToBytes32(\"232,155,27,237,82,118,7,35,225,218,112,195,86,8,186,6,171,132,106,13,49,16,229,80,79,8,74,31,230,183,50,164\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.500ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[22,180,187,136,251,237,216,182,35,140,41,91,179,124,63,90,189,144,216,226,12,188,210,40,170,55,5,41,30,14,65,103]",
              "sol": "stringToBytes32(\"22,180,187,136,251,237,216,182,35,140,41,91,179,124,63,90,189,144,216,226,12,188,210,40,170,55,5,41,30,14,65,103\")"
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "[111,88,196,85,206,228,164,240,23,101,19,169,60,63,100,154,190,195,23,3,44,56,228,130,159,225,23,115,17,9,115,50]",
              "sol": "abi.encode(\"111,88,196,85,206,228,164,240,23,101,19,169,60,63,100,154,190,195,23,3,44,56,228,130,159,225,23,115,17,9,115,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.570ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.571ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"64huaw\"",
              "sol": "\"64huaw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.571ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.572ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.574ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.575ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.575ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.576ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.576ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.577ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"64huaw\"",
              "sol": "\"64huaw\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.577ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.577ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"2apd5h\"",
              "sol": "\"2apd5h\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.578ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"2apd5h\"",
              "sol": "\"2apd5h\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.579ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "\"2apd5h\"",
              "sol": "\"2apd5h\""
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.579ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Capstones\",\"64huaw\",\"dhfvts\",\"2apd5h\",\"dhfvts\",\"Transaction successfully verified.\",\"L\"]",
              "sol": "[string(\"Capstones\"),string(\"64huaw\"),string(\"dhfvts\"),string(\"2apd5h\"),string(\"dhfvts\"),string(\"Transaction successfully verified.\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.580ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"64huaw\",\"dhfvts\",\"P\",\"6dbesi\",\"6dbesi\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Transaction successfully verified.\",\"6dbesi\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"64huaw\"),string(\"dhfvts\"),string(\"P\"),string(\"6dbesi\"),string(\"6dbesi\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Transaction successfully verified.\"),string(\"6dbesi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.580ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0c3ilt\",\"dhfvts\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"xz6f0g\",\"xz6f0g\",\"P\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"0c3ilt\"),string(\"dhfvts\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"xz6f0g\"),string(\"xz6f0g\"),string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.581ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"dhfvts\",\"0c3ilt\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"xz6f0g\",\"0\",\"Capstones\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"dhfvts\"),string(\"0c3ilt\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"xz6f0g\"),string(\"0\"),string(\"Capstones\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.581ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.582ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"6dbesi\"]",
              "sol": "[string(\"6dbesi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.582ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"xz6f0g\"",
              "sol": "\"xz6f0g\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.583ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"oxcnb\"]",
              "sol": "[string(\"oxcnb\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.584ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"dhfvts\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"dhfvts\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.584ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"xz6f0g\"",
              "sol": "\"xz6f0g\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"64huaw\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"64huaw\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.585ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"xz6f0g\"",
              "sol": "\"xz6f0g\""
            },
            {
              "js": "[\"64huaw\",\"0c3ilt\"]",
              "sol": "[string(\"64huaw\"),string(\"0c3ilt\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.585ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"xz6f0g\"",
              "sol": "\"xz6f0g\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"0c3ilt\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"0c3ilt\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.586ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "[\"6dbesi\",\"dhfvts\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"6dbesi\"),string(\"dhfvts\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.586ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "[\"6dbesi\",\"L\",\"6dbesi\"]",
              "sol": "[string(\"6dbesi\"),string(\"L\"),string(\"6dbesi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.587ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"6dbesi\",\"dhfvts\",\"dhfvts\"]",
              "sol": "[string(\"6dbesi\"),string(\"dhfvts\"),string(\"dhfvts\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.588ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"xz6f0g\",\"ERC1820_ACCEPT_MAGIC\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"xz6f0g\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.588ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"dhfvts\",\"oxcnb\",\"dhfvts\",\"2apd5h\"]",
              "sol": "[string(\"dhfvts\"),string(\"oxcnb\"),string(\"dhfvts\"),string(\"2apd5h\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.589ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "[\"0\",\"xz6f0g\",\"0c3ilt\",\"dhfvts\"]",
              "sol": "[string(\"0\"),string(\"xz6f0g\"),string(\"0c3ilt\"),string(\"dhfvts\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.589ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"64huaw\"",
              "sol": "\"64huaw\""
            },
            {
              "js": "[\"[\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"L\"]",
              "sol": "[string(\"[\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"L\")]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.590ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"xz6f0g\"",
              "sol": "\"xz6f0g\""
            },
            {
              "js": "[\"64huaw\",\"P\",\"0\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"64huaw\"),string(\"P\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.590ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"oxcnb\",\"L\",\"64huaw\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"oxcnb\"),string(\"L\"),string(\"64huaw\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.591ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"0c3ilt\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"0c3ilt\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.592ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"2apd5h\"",
              "sol": "\"2apd5h\""
            },
            {
              "js": "[\"oxcnb\",\"6dbesi\",\"ERC1820_ACCEPT_MAGIC\",\"Capstones\",\"P\"]",
              "sol": "[string(\"oxcnb\"),string(\"6dbesi\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\"),string(\"P\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.592ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"0c3ilt\",\"2apd5h\",\"L\",\"[\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0c3ilt\"),string(\"2apd5h\"),string(\"L\"),string(\"[\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.593ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[153,146,55,121,36,237,59,182,54,51,183,169,144,144,46,156,111,232,75,69,11,169,142,32,239,230,155,161,100,168,75,118],[31,70,188,156,228,79,205,135,196,190,12,68,58,6,26,149,179,139,194,124,199,128,200,220,71,130,27,123,176,98,128,96],[109,73,77,244,234,49,25,14,12,89,23,160,233,253,63,100,77,33,222,158,103,203,186,153,181,75,117,63,220,208,142,92],[32,249,179,127,47,102,115,132,160,204,127,241,20,24,208,200,125,179,254,248,178,48,148,253,225,183,239,165,1,20,100,99]]",
              "sol": "[bytes(abi.encode(\"153,146,55,121,36,237,59,182,54,51,183,169,144,144,46,156,111,232,75,69,11,169,142,32,239,230,155,161,100,168,75,118\")),bytes(abi.encode(\"31,70,188,156,228,79,205,135,196,190,12,68,58,6,26,149,179,139,194,124,199,128,200,220,71,130,27,123,176,98,128,96\")),bytes(abi.encode(\"109,73,77,244,234,49,25,14,12,89,23,160,233,253,63,100,77,33,222,158,103,203,186,153,181,75,117,63,220,208,142,92\")),bytes(abi.encode(\"32,249,179,127,47,102,115,132,160,204,127,241,20,24,208,200,125,179,254,248,178,48,148,253,225,183,239,165,1,20,100,99\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.594ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[207,101,194,130,142,153,219,252,39,234,135,16,1,184,251,3,214,216,62,171,227,86,208,175,44,186,129,82,117,214,109,179]]",
              "sol": "[bytes(abi.encode(\"207,101,194,130,142,153,219,252,39,234,135,16,1,184,251,3,214,216,62,171,227,86,208,175,44,186,129,82,117,214,109,179\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.594ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "[[245,143,0,35,103,167,235,74,57,131,6,18,112,231,58,143,155,228,21,165,109,144,37,135,90,150,226,144,224,135,206,199],[208,153,100,246,85,248,7,105,223,119,23,139,102,192,76,163,74,13,81,49,2,98,226,105,97,58,104,127,194,228,38,158],[171,204,254,250,23,36,173,138,5,234,63,168,190,145,251,6,68,136,66,204,75,191,143,44,66,148,133,133,128,53,17,78],[14,175,177,123,139,140,212,220,21,252,60,63,56,7,237,229,79,30,63,26,29,134,92,109,32,2,232,28,38,235,167,113],[165,5,180,93,26,41,33,120,203,253,130,150,155,89,71,29,141,72,0,50,209,55,159,118,18,219,166,63,59,86,181,105]]",
              "sol": "[bytes(abi.encode(\"245,143,0,35,103,167,235,74,57,131,6,18,112,231,58,143,155,228,21,165,109,144,37,135,90,150,226,144,224,135,206,199\")),bytes(abi.encode(\"208,153,100,246,85,248,7,105,223,119,23,139,102,192,76,163,74,13,81,49,2,98,226,105,97,58,104,127,194,228,38,158\")),bytes(abi.encode(\"171,204,254,250,23,36,173,138,5,234,63,168,190,145,251,6,68,136,66,204,75,191,143,44,66,148,133,133,128,53,17,78\")),bytes(abi.encode(\"14,175,177,123,139,140,212,220,21,252,60,63,56,7,237,229,79,30,63,26,29,134,92,109,32,2,232,28,38,235,167,113\")),bytes(abi.encode(\"165,5,180,93,26,41,33,120,203,253,130,150,155,89,71,29,141,72,0,50,209,55,159,118,18,219,166,63,59,86,181,105\"))]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.595ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[38,205,10,131,190,65,57,76,118,240,90,46,105,250,52,229,92,197,63,24,241,109,76,69,62,69,104,118,185,158,126,94],[97,146,50,255,246,97,4,168,255,191,90,246,41,7,181,184,108,215,52,76,88,153,202,192,220,229,61,218,56,95,14,147],[26,232,167,96,14,125,241,178,74,10,195,237,252,131,107,128,92,151,30,168,28,126,152,24,240,63,113,179,131,213,26,192],[225,26,113,117,45,111,178,227,17,227,210,25,234,133,118,202,160,190,154,127,152,139,150,186,92,191,99,165,54,50,12,1],[9,82,45,54,56,255,141,68,158,254,91,224,149,145,7,210,168,169,175,89,21,239,197,226,231,178,151,101,228,191,154,87],[144,71,187,228,32,18,200,74,203,68,134,254,98,138,46,179,75,71,189,19,206,208,216,244,202,84,11,6,82,46,133,203],[168,30,22,163,83,116,30,183,162,174,9,116,88,187,20,149,96,251,6,103,92,35,233,149,159,80,228,152,138,147,28,100],[85,109,188,227,168,146,86,236,82,145,19,65,215,199,202,234,55,38,9,74,48,156,76,250,145,39,248,93,51,172,7,38]]",
              "sol": "[bytes(abi.encode(\"38,205,10,131,190,65,57,76,118,240,90,46,105,250,52,229,92,197,63,24,241,109,76,69,62,69,104,118,185,158,126,94\")),bytes(abi.encode(\"97,146,50,255,246,97,4,168,255,191,90,246,41,7,181,184,108,215,52,76,88,153,202,192,220,229,61,218,56,95,14,147\")),bytes(abi.encode(\"26,232,167,96,14,125,241,178,74,10,195,237,252,131,107,128,92,151,30,168,28,126,152,24,240,63,113,179,131,213,26,192\")),bytes(abi.encode(\"225,26,113,117,45,111,178,227,17,227,210,25,234,133,118,202,160,190,154,127,152,139,150,186,92,191,99,165,54,50,12,1\")),bytes(abi.encode(\"9,82,45,54,56,255,141,68,158,254,91,224,149,145,7,210,168,169,175,89,21,239,197,226,231,178,151,101,228,191,154,87\")),bytes(abi.encode(\"144,71,187,228,32,18,200,74,203,68,134,254,98,138,46,179,75,71,189,19,206,208,216,244,202,84,11,6,82,46,133,203\")),bytes(abi.encode(\"168,30,22,163,83,116,30,183,162,174,9,116,88,187,20,149,96,251,6,103,92,35,233,149,159,80,228,152,138,147,28,100\")),bytes(abi.encode(\"85,109,188,227,168,146,86,236,82,145,19,65,215,199,202,234,55,38,9,74,48,156,76,250,145,39,248,93,51,172,7,38\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.596ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "[[77,57,47,154,47,224,222,53,61,248,171,139,70,146,226,211,111,80,170,6,16,126,33,74,79,76,209,183,27,212,107,115]]",
              "sol": "[bytes(abi.encode(\"77,57,47,154,47,224,222,53,61,248,171,139,70,146,226,211,111,80,170,6,16,126,33,74,79,76,209,183,27,212,107,115\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.597ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[222,242,25,77,71,6,94,129,166,49,22,186,122,7,10,49,204,174,148,26,247,68,201,21,156,10,56,124,53,73,201,31]]",
              "sol": "[bytes(abi.encode(\"222,242,25,77,71,6,94,129,166,49,22,186,122,7,10,49,204,174,148,26,247,68,201,21,156,10,56,124,53,73,201,31\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.597ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "[[201,177,18,16,72,144,219,231,13,121,175,234,172,139,59,248,162,67,209,8,8,145,177,128,233,173,66,142,142,3,73,201]]",
              "sol": "[bytes(abi.encode(\"201,177,18,16,72,144,219,231,13,121,175,234,172,139,59,248,162,67,209,8,8,145,177,128,233,173,66,142,142,3,73,201\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.598ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[98,47,125,209,21,78,124,129,29,132,186,2,131,9,236,162,181,240,96,18,138,177,193,83,98,254,119,17,139,202,208,187]]",
              "sol": "[bytes(abi.encode(\"98,47,125,209,21,78,124,129,29,132,186,2,131,9,236,162,181,240,96,18,138,177,193,83,98,254,119,17,139,202,208,187\"))]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.599ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[10,140,49,193,128,7,135,192,100,106,30,90,24,27,44,238,185,60,191,114,146,207,240,242,237,231,15,163,30,252,121,173],[161,147,200,34,158,152,88,209,18,233,25,217,192,191,67,105,192,61,88,77,120,75,117,54,44,198,139,243,106,185,42,75]]",
              "sol": "[bytes(abi.encode(\"10,140,49,193,128,7,135,192,100,106,30,90,24,27,44,238,185,60,191,114,146,207,240,242,237,231,15,163,30,252,121,173\")),bytes(abi.encode(\"161,147,200,34,158,152,88,209,18,233,25,217,192,191,67,105,192,61,88,77,120,75,117,54,44,198,139,243,106,185,42,75\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.599ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "[[21,244,23,28,212,24,163,252,134,167,154,60,153,24,233,195,20,73,141,88,105,237,73,99,162,174,225,14,124,131,145,31],[236,235,32,81,225,98,176,252,72,213,100,233,105,60,239,247,94,102,49,250,244,244,237,32,96,249,34,167,105,244,4,35]]",
              "sol": "[bytes(abi.encode(\"21,244,23,28,212,24,163,252,134,167,154,60,153,24,233,195,20,73,141,88,105,237,73,99,162,174,225,14,124,131,145,31\")),bytes(abi.encode(\"236,235,32,81,225,98,176,252,72,213,100,233,105,60,239,247,94,102,49,250,244,244,237,32,96,249,34,167,105,244,4,35\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.600ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[85,149,102,64,10,92,86,21,128,102,216,159,105,60,10,49,200,128,172,35,228,49,233,187,64,99,6,10,187,80,87,219],[177,79,67,220,50,167,103,188,12,47,58,110,174,214,46,180,83,228,179,7,228,163,167,247,240,31,139,28,99,210,116,24]]",
              "sol": "[bytes(abi.encode(\"85,149,102,64,10,92,86,21,128,102,216,159,105,60,10,49,200,128,172,35,228,49,233,187,64,99,6,10,187,80,87,219\")),bytes(abi.encode(\"177,79,67,220,50,167,103,188,12,47,58,110,174,214,46,180,83,228,179,7,228,163,167,247,240,31,139,28,99,210,116,24\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.601ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "[[23,19,244,225,40,212,192,32,183,165,254,142,210,222,236,88,200,187,9,77,180,220,28,172,14,107,179,51,11,169,174,24],[41,250,153,210,35,121,68,101,16,127,1,18,183,19,234,14,132,48,111,195,141,239,5,218,146,34,106,245,13,175,166,93]]",
              "sol": "[bytes(abi.encode(\"23,19,244,225,40,212,192,32,183,165,254,142,210,222,236,88,200,187,9,77,180,220,28,172,14,107,179,51,11,169,174,24\")),bytes(abi.encode(\"41,250,153,210,35,121,68,101,16,127,1,18,183,19,234,14,132,48,111,195,141,239,5,218,146,34,106,245,13,175,166,93\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.601ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "[[121,57,162,113,155,104,146,250,27,188,135,94,184,249,248,242,202,93,164,120,211,226,170,219,164,85,244,7,180,119,88,37],[169,238,220,22,108,153,126,246,43,86,136,157,159,188,244,54,196,20,234,190,215,217,32,220,27,162,76,113,199,192,236,58],[41,13,238,221,1,204,62,180,114,178,208,73,14,145,47,143,230,245,165,149,63,56,43,52,148,8,104,248,124,175,162,72]]",
              "sol": "[bytes(abi.encode(\"121,57,162,113,155,104,146,250,27,188,135,94,184,249,248,242,202,93,164,120,211,226,170,219,164,85,244,7,180,119,88,37\")),bytes(abi.encode(\"169,238,220,22,108,153,126,246,43,86,136,157,159,188,244,54,196,20,234,190,215,217,32,220,27,162,76,113,199,192,236,58\")),bytes(abi.encode(\"41,13,238,221,1,204,62,180,114,178,208,73,14,145,47,143,230,245,165,149,63,56,43,52,148,8,104,248,124,175,162,72\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.604ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"jkwf5p\"",
              "sol": "\"jkwf5p\""
            },
            {
              "js": "[[228,23,50,6,41,136,80,223,16,133,40,143,10,163,32,165,183,203,158,250,104,173,188,79,27,84,93,9,5,195,105,222],[83,82,58,111,199,106,220,197,200,181,111,20,20,92,210,45,200,129,30,65,215,150,133,234,61,32,206,75,179,68,49,49],[45,74,2,217,2,54,194,54,248,41,144,229,236,10,102,204,90,158,146,192,106,146,85,193,6,119,169,182,141,186,102,35]]",
              "sol": "[bytes(abi.encode(\"228,23,50,6,41,136,80,223,16,133,40,143,10,163,32,165,183,203,158,250,104,173,188,79,27,84,93,9,5,195,105,222\")),bytes(abi.encode(\"83,82,58,111,199,106,220,197,200,181,111,20,20,92,210,45,200,129,30,65,215,150,133,234,61,32,206,75,179,68,49,49\")),bytes(abi.encode(\"45,74,2,217,2,54,194,54,248,41,144,229,236,10,102,204,90,158,146,192,106,146,85,193,6,119,169,182,141,186,102,35\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.605ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[121,79,125,179,160,194,141,170,62,141,74,95,82,80,232,196,75,66,87,60,132,106,138,197,200,163,96,4,134,75,9,147],[182,88,238,224,219,163,249,88,135,186,40,14,146,119,94,126,86,188,62,200,192,18,36,108,148,187,37,232,31,104,83,253],[13,98,47,61,70,97,4,21,163,77,188,42,224,166,57,171,240,70,122,101,27,224,208,42,230,214,131,231,243,213,69,206]]",
              "sol": "[bytes(abi.encode(\"121,79,125,179,160,194,141,170,62,141,74,95,82,80,232,196,75,66,87,60,132,106,138,197,200,163,96,4,134,75,9,147\")),bytes(abi.encode(\"182,88,238,224,219,163,249,88,135,186,40,14,146,119,94,126,86,188,62,200,192,18,36,108,148,187,37,232,31,104,83,253\")),bytes(abi.encode(\"13,98,47,61,70,97,4,21,163,77,188,42,224,166,57,171,240,70,122,101,27,224,208,42,230,214,131,231,243,213,69,206\"))]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.605ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "[[226,176,2,165,113,119,0,145,11,54,23,26,146,71,151,91,36,93,125,247,254,238,13,204,104,132,108,77,58,178,224,1],[202,111,185,63,57,42,178,134,232,167,150,209,212,76,208,180,8,83,105,173,109,92,244,84,236,68,77,76,193,90,63,255],[224,114,74,234,97,90,173,64,84,217,73,127,229,230,173,53,188,164,241,132,182,46,176,96,169,244,226,169,94,54,197,187]]",
              "sol": "[bytes(abi.encode(\"226,176,2,165,113,119,0,145,11,54,23,26,146,71,151,91,36,93,125,247,254,238,13,204,104,132,108,77,58,178,224,1\")),bytes(abi.encode(\"202,111,185,63,57,42,178,134,232,167,150,209,212,76,208,180,8,83,105,173,109,92,244,84,236,68,77,76,193,90,63,255\")),bytes(abi.encode(\"224,114,74,234,97,90,173,64,84,217,73,127,229,230,173,53,188,164,241,132,182,46,176,96,169,244,226,169,94,54,197,187\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.606ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[218,209,179,14,90,114,180,252,168,156,9,58,20,229,201,132,86,41,194,77,218,243,110,67,191,242,167,73,76,219,106,75],[92,44,196,34,156,85,175,141,223,4,163,127,88,239,242,115,104,208,30,146,77,220,131,182,27,7,206,232,145,27,97,207],[59,82,247,103,37,202,227,185,95,44,59,145,170,199,15,119,216,195,48,186,207,54,228,48,170,109,139,43,110,120,112,77],[68,139,135,126,52,68,56,45,134,122,88,105,165,179,188,83,105,209,148,149,91,56,86,62,57,5,7,244,168,126,169,96]]",
              "sol": "[bytes(abi.encode(\"218,209,179,14,90,114,180,252,168,156,9,58,20,229,201,132,86,41,194,77,218,243,110,67,191,242,167,73,76,219,106,75\")),bytes(abi.encode(\"92,44,196,34,156,85,175,141,223,4,163,127,88,239,242,115,104,208,30,146,77,220,131,182,27,7,206,232,145,27,97,207\")),bytes(abi.encode(\"59,82,247,103,37,202,227,185,95,44,59,145,170,199,15,119,216,195,48,186,207,54,228,48,170,109,139,43,110,120,112,77\")),bytes(abi.encode(\"68,139,135,126,52,68,56,45,134,122,88,105,165,179,188,83,105,209,148,149,91,56,86,62,57,5,7,244,168,126,169,96\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.607ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[205,151,104,244,122,101,177,139,166,166,17,244,11,37,250,31,105,237,63,15,165,67,155,235,27,19,209,171,20,12,247,35],[127,74,192,208,85,75,118,43,162,221,107,250,220,231,43,44,120,204,3,208,127,104,143,67,211,73,52,170,150,130,43,117],[87,72,218,157,29,117,227,38,138,103,60,247,25,249,116,129,197,94,209,191,147,197,130,200,211,111,109,127,33,111,45,15],[194,186,188,65,68,244,203,49,112,48,119,18,244,121,173,164,84,145,69,96,246,148,51,186,165,21,219,196,39,27,103,114]]",
              "sol": "[bytes(abi.encode(\"205,151,104,244,122,101,177,139,166,166,17,244,11,37,250,31,105,237,63,15,165,67,155,235,27,19,209,171,20,12,247,35\")),bytes(abi.encode(\"127,74,192,208,85,75,118,43,162,221,107,250,220,231,43,44,120,204,3,208,127,104,143,67,211,73,52,170,150,130,43,117\")),bytes(abi.encode(\"87,72,218,157,29,117,227,38,138,103,60,247,25,249,116,129,197,94,209,191,147,197,130,200,211,111,109,127,33,111,45,15\")),bytes(abi.encode(\"194,186,188,65,68,244,203,49,112,48,119,18,244,121,173,164,84,145,69,96,246,148,51,186,165,21,219,196,39,27,103,114\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.608ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "[[110,8,253,94,73,170,94,45,137,31,10,211,112,12,212,178,148,180,51,206,3,190,184,10,52,231,142,87,90,94,208,215],[25,62,62,206,130,137,246,78,14,223,114,192,13,146,92,189,248,215,59,136,67,209,227,43,48,130,172,179,176,109,131,173],[151,8,238,205,50,174,174,79,20,94,185,54,238,227,187,251,207,57,15,2,195,148,34,26,220,194,133,21,45,193,166,13],[34,77,168,108,53,123,43,164,210,79,233,203,37,41,233,120,152,116,23,113,170,211,6,1,245,187,53,191,69,231,94,7]]",
              "sol": "[bytes(abi.encode(\"110,8,253,94,73,170,94,45,137,31,10,211,112,12,212,178,148,180,51,206,3,190,184,10,52,231,142,87,90,94,208,215\")),bytes(abi.encode(\"25,62,62,206,130,137,246,78,14,223,114,192,13,146,92,189,248,215,59,136,67,209,227,43,48,130,172,179,176,109,131,173\")),bytes(abi.encode(\"151,8,238,205,50,174,174,79,20,94,185,54,238,227,187,251,207,57,15,2,195,148,34,26,220,194,133,21,45,193,166,13\")),bytes(abi.encode(\"34,77,168,108,53,123,43,164,210,79,233,203,37,41,233,120,152,116,23,113,170,211,6,1,245,187,53,191,69,231,94,7\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.609ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"64huaw\"",
              "sol": "\"64huaw\""
            },
            {
              "js": "[[32,68,64,200,201,226,131,30,86,151,73,155,33,210,80,24,117,227,125,61,236,130,9,149,11,53,110,85,49,49,139,135],[139,158,254,23,138,93,100,176,204,54,208,134,76,131,45,55,167,83,22,155,30,142,127,35,195,227,174,239,114,238,197,20],[184,142,152,130,31,151,66,204,199,7,150,160,36,227,16,218,75,177,12,133,0,175,138,162,31,58,254,247,74,242,171,140],[124,82,210,71,60,102,39,162,138,16,214,115,111,173,196,172,120,90,0,18,28,71,50,82,90,218,1,144,82,35,228,159]]",
              "sol": "[bytes(abi.encode(\"32,68,64,200,201,226,131,30,86,151,73,155,33,210,80,24,117,227,125,61,236,130,9,149,11,53,110,85,49,49,139,135\")),bytes(abi.encode(\"139,158,254,23,138,93,100,176,204,54,208,134,76,131,45,55,167,83,22,155,30,142,127,35,195,227,174,239,114,238,197,20\")),bytes(abi.encode(\"184,142,152,130,31,151,66,204,199,7,150,160,36,227,16,218,75,177,12,133,0,175,138,162,31,58,254,247,74,242,171,140\")),bytes(abi.encode(\"124,82,210,71,60,102,39,162,138,16,214,115,111,173,196,172,120,90,0,18,28,71,50,82,90,218,1,144,82,35,228,159\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.610ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "[[149,244,89,128,78,176,163,12,14,84,46,34,102,241,139,228,119,10,163,57,104,164,15,240,158,225,58,193,20,141,47,71],[129,139,221,79,137,112,229,158,26,11,35,58,37,51,13,57,70,111,58,217,244,162,204,239,142,129,141,158,236,115,251,233],[253,24,15,137,157,67,204,27,58,81,103,217,9,80,141,229,66,54,189,188,173,67,253,190,189,11,96,161,220,52,58,229],[230,103,105,82,138,163,75,252,137,116,253,86,244,208,125,175,37,4,14,137,44,178,180,156,140,80,177,248,68,115,207,114],[118,216,141,201,26,148,81,62,165,75,1,43,87,65,17,41,0,180,217,24,176,198,12,231,166,47,247,21,73,44,2,220]]",
              "sol": "[bytes(abi.encode(\"149,244,89,128,78,176,163,12,14,84,46,34,102,241,139,228,119,10,163,57,104,164,15,240,158,225,58,193,20,141,47,71\")),bytes(abi.encode(\"129,139,221,79,137,112,229,158,26,11,35,58,37,51,13,57,70,111,58,217,244,162,204,239,142,129,141,158,236,115,251,233\")),bytes(abi.encode(\"253,24,15,137,157,67,204,27,58,81,103,217,9,80,141,229,66,54,189,188,173,67,253,190,189,11,96,161,220,52,58,229\")),bytes(abi.encode(\"230,103,105,82,138,163,75,252,137,116,253,86,244,208,125,175,37,4,14,137,44,178,180,156,140,80,177,248,68,115,207,114\")),bytes(abi.encode(\"118,216,141,201,26,148,81,62,165,75,1,43,87,65,17,41,0,180,217,24,176,198,12,231,166,47,247,21,73,44,2,220\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.611ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"bk2jp\"",
              "sol": "\"bk2jp\""
            },
            {
              "js": "[[150,100,109,106,89,118,236,83,42,212,146,46,125,142,137,95,103,161,107,18,81,11,97,230,150,29,99,194,110,223,126,52],[89,175,57,196,78,9,82,106,247,183,215,215,44,101,125,214,88,68,84,87,130,83,73,18,220,217,113,202,61,100,157,51],[34,255,146,182,188,151,122,174,195,212,69,13,240,33,194,249,166,181,240,233,219,211,172,166,214,19,121,117,112,158,135,138],[209,128,229,84,94,49,116,171,104,123,111,128,58,203,119,69,202,92,122,23,66,239,200,137,38,180,155,15,248,6,100,10],[26,13,234,15,82,139,249,25,12,206,254,209,57,36,146,8,238,143,108,45,116,100,44,224,210,82,253,209,71,137,123,80]]",
              "sol": "[bytes(abi.encode(\"150,100,109,106,89,118,236,83,42,212,146,46,125,142,137,95,103,161,107,18,81,11,97,230,150,29,99,194,110,223,126,52\")),bytes(abi.encode(\"89,175,57,196,78,9,82,106,247,183,215,215,44,101,125,214,88,68,84,87,130,83,73,18,220,217,113,202,61,100,157,51\")),bytes(abi.encode(\"34,255,146,182,188,151,122,174,195,212,69,13,240,33,194,249,166,181,240,233,219,211,172,166,214,19,121,117,112,158,135,138\")),bytes(abi.encode(\"209,128,229,84,94,49,116,171,104,123,111,128,58,203,119,69,202,92,122,23,66,239,200,137,38,180,155,15,248,6,100,10\")),bytes(abi.encode(\"26,13,234,15,82,139,249,25,12,206,254,209,57,36,146,8,238,143,108,45,116,100,44,224,210,82,253,209,71,137,123,80\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.611ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[228,80,134,166,195,196,39,127,209,139,186,93,166,28,8,104,205,250,239,232,20,108,46,89,152,232,113,25,31,51,114,86],[241,22,199,131,91,155,155,13,107,77,184,216,67,119,41,123,199,242,184,87,52,68,26,182,229,105,135,32,174,48,146,108],[111,239,231,14,19,47,242,215,140,175,200,254,52,93,77,130,59,47,222,83,128,65,131,220,191,121,93,230,115,244,168,201],[85,174,20,94,1,2,221,43,90,79,19,182,235,211,24,83,160,172,236,84,34,62,15,60,156,18,2,241,12,200,185,135],[185,3,5,196,206,30,105,91,163,197,212,17,249,12,234,54,254,128,118,247,228,36,0,170,6,166,49,147,239,15,42,34]]",
              "sol": "[bytes(abi.encode(\"228,80,134,166,195,196,39,127,209,139,186,93,166,28,8,104,205,250,239,232,20,108,46,89,152,232,113,25,31,51,114,86\")),bytes(abi.encode(\"241,22,199,131,91,155,155,13,107,77,184,216,67,119,41,123,199,242,184,87,52,68,26,182,229,105,135,32,174,48,146,108\")),bytes(abi.encode(\"111,239,231,14,19,47,242,215,140,175,200,254,52,93,77,130,59,47,222,83,128,65,131,220,191,121,93,230,115,244,168,201\")),bytes(abi.encode(\"85,174,20,94,1,2,221,43,90,79,19,182,235,211,24,83,160,172,236,84,34,62,15,60,156,18,2,241,12,200,185,135\")),bytes(abi.encode(\"185,3,5,196,206,30,105,91,163,197,212,17,249,12,234,54,254,128,118,247,228,36,0,170,6,166,49,147,239,15,42,34\"))]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.612ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[173,227,229,64,152,252,79,174,69,139,116,61,208,14,221,109,17,104,233,165,122,72,56,211,21,127,216,133,40,11,133,133],[213,79,199,159,211,52,204,146,230,254,135,77,60,171,104,44,72,34,13,10,211,94,130,224,151,140,146,138,8,254,21,176],[171,251,219,190,27,67,215,230,24,236,23,111,4,164,12,211,86,223,95,49,73,13,161,236,249,16,8,100,122,233,117,78],[222,162,233,186,250,161,70,182,39,199,96,236,103,249,20,127,245,22,94,219,15,197,186,249,136,245,181,177,239,86,146,226],[252,115,169,102,242,76,221,157,252,128,216,109,138,5,35,68,235,151,30,47,6,34,206,52,4,72,144,243,71,174,106,227]]",
              "sol": "[bytes(abi.encode(\"173,227,229,64,152,252,79,174,69,139,116,61,208,14,221,109,17,104,233,165,122,72,56,211,21,127,216,133,40,11,133,133\")),bytes(abi.encode(\"213,79,199,159,211,52,204,146,230,254,135,77,60,171,104,44,72,34,13,10,211,94,130,224,151,140,146,138,8,254,21,176\")),bytes(abi.encode(\"171,251,219,190,27,67,215,230,24,236,23,111,4,164,12,211,86,223,95,49,73,13,161,236,249,16,8,100,122,233,117,78\")),bytes(abi.encode(\"222,162,233,186,250,161,70,182,39,199,96,236,103,249,20,127,245,22,94,219,15,197,186,249,136,245,181,177,239,86,146,226\")),bytes(abi.encode(\"252,115,169,102,242,76,221,157,252,128,216,109,138,5,35,68,235,151,30,47,6,34,206,52,4,72,144,243,71,174,106,227\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.613ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[40]",
              "sol": "bytes1(\"40\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.613ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.614ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.614ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.614ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.615ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.615ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"jkwf5p\"",
              "sol": "\"jkwf5p\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.616ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.616ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.616ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.617ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"bk2jp\"",
              "sol": "\"bk2jp\""
            },
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.617ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0c3ilt\"",
              "sol": "\"0c3ilt\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.618ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.618ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"dhfvts\"",
              "sol": "\"dhfvts\""
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"64huaw\"",
              "sol": "\"64huaw\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.619ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.620ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"6dbesi\"",
              "sol": "\"6dbesi\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.621ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.622ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"oxcnb\",\"xz6f0g\",\"L\",\"L\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"oxcnb\"),string(\"xz6f0g\"),string(\"L\"),string(\"L\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.622ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[12,109,145,205,99,150,190,57,189,221,35,27,139,81,215,203,61,84,111,148,186,66,111,215,95,99,10,123,72,51,53,30],[159,198,167,167,102,166,6,103,235,219,16,197,240,7,17,14,168,153,86,113,191,106,148,63,179,180,65,225,42,0,16,34],[212,94,179,214,229,22,22,207,102,163,7,147,36,134,98,6,242,109,147,246,243,34,155,249,250,60,45,5,217,67,191,15],[129,73,106,179,232,234,194,6,169,78,196,224,96,129,76,240,118,69,143,73,167,240,122,16,7,173,144,141,138,106,174,48],[17,172,22,96,248,74,13,127,184,154,176,254,220,230,105,108,57,210,218,176,88,255,188,246,242,8,113,243,51,75,158,242],[142,206,191,223,104,32,243,21,127,115,221,61,16,227,33,205,77,78,219,123,194,198,38,101,179,146,1,59,157,120,91,229],[104,151,225,221,0,40,78,139,30,231,254,65,47,164,81,125,105,84,12,186,98,76,20,232,176,73,120,140,231,13,63,246],[49,235,178,159,107,212,104,148,181,64,229,18,87,44,102,188,128,7,160,19,4,70,212,248,71,34,225,175,76,138,173,199]]",
              "sol": "[bytes(abi.encode(\"12,109,145,205,99,150,190,57,189,221,35,27,139,81,215,203,61,84,111,148,186,66,111,215,95,99,10,123,72,51,53,30\")),bytes(abi.encode(\"159,198,167,167,102,166,6,103,235,219,16,197,240,7,17,14,168,153,86,113,191,106,148,63,179,180,65,225,42,0,16,34\")),bytes(abi.encode(\"212,94,179,214,229,22,22,207,102,163,7,147,36,134,98,6,242,109,147,246,243,34,155,249,250,60,45,5,217,67,191,15\")),bytes(abi.encode(\"129,73,106,179,232,234,194,6,169,78,196,224,96,129,76,240,118,69,143,73,167,240,122,16,7,173,144,141,138,106,174,48\")),bytes(abi.encode(\"17,172,22,96,248,74,13,127,184,154,176,254,220,230,105,108,57,210,218,176,88,255,188,246,242,8,113,243,51,75,158,242\")),bytes(abi.encode(\"142,206,191,223,104,32,243,21,127,115,221,61,16,227,33,205,77,78,219,123,194,198,38,101,179,146,1,59,157,120,91,229\")),bytes(abi.encode(\"104,151,225,221,0,40,78,139,30,231,254,65,47,164,81,125,105,84,12,186,98,76,20,232,176,73,120,140,231,13,63,246\")),bytes(abi.encode(\"49,235,178,159,107,212,104,148,181,64,229,18,87,44,102,188,128,7,160,19,4,70,212,248,71,34,225,175,76,138,173,199\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.623ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.624ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[115,103,192,195,39,178,1,163,163,155,92,20,90,130,18,144,111,246,74,239,101,130,68,53,29,87,96,35,124,119,51,15]",
              "sol": "stringToBytes32(\"115,103,192,195,39,178,1,163,163,155,92,20,90,130,18,144,111,246,74,239,101,130,68,53,29,87,96,35,124,119,51,15\")"
            },
            {
              "js": "[195,78,149,183,237,126,216,63,100,231,171,59,231,216,97,188,104,159,87,211,0,180,214,199,9,233,193,148,39,222,172,210]",
              "sol": "stringToBytes32(\"195,78,149,183,237,126,216,63,100,231,171,59,231,216,97,188,104,159,87,211,0,180,214,199,9,233,193,148,39,222,172,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.624ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[128,14,33,57,54,107,205,201,111,142,245,126,126,27,200,64,101,115,85,70,162,173,75,181,76,249,164,111,2,183,133,74]",
              "sol": "stringToBytes32(\"128,14,33,57,54,107,205,201,111,142,245,126,126,27,200,64,101,115,85,70,162,173,75,181,76,249,164,111,2,183,133,74\")"
            },
            {
              "js": "[46,237,148,29,84,8,1,123,57,243,184,136,78,23,1,21,54,235,252,26,65,26,201,19,110,239,45,45,55,134,151,242]",
              "sol": "abi.encode(\"46,237,148,29,84,8,1,123,57,243,184,136,78,23,1,21,54,235,252,26,65,26,201,19,110,239,45,45,55,134,151,242\")"
            },
            {
              "js": "[113,143,51,57,181,125,20,99,134,108,152,34,73,127,27,221,199,199,143,190,131,114,106,59,92,63,207,191,82,219,32,247]",
              "sol": "abi.encode(\"113,143,51,57,181,125,20,99,134,108,152,34,73,127,27,221,199,199,143,190,131,114,106,59,92,63,207,191,82,219,32,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.625ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[4,199,58,78,58,73,194,214,15,90,147,193,35,71,77,200,245,54,247,123,167,235,9,101,16,134,50,205,31,42,34,16]",
              "sol": "abi.encode(\"4,199,58,78,58,73,194,214,15,90,147,193,35,71,77,200,245,54,247,123,167,235,9,101,16,134,50,205,31,42,34,16\")"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[187,178,41,132,2,80,112,234,55,28,202,32,137,102,105,87,83,224,95,72,213,96,176,84,211,44,243,222,188,86,130,131]",
              "sol": "abi.encode(\"187,178,41,132,2,80,112,234,55,28,202,32,137,102,105,87,83,224,95,72,213,96,176,84,211,44,243,222,188,86,130,131\")"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.627ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[186,131,134,84,67,61,196,24,64,146,0,8,208,208,76,252,24,45,187,225,138,209,69,179,211,133,240,156,40,164,63,59]",
              "sol": "stringToBytes32(\"186,131,134,84,67,61,196,24,64,146,0,8,208,208,76,252,24,45,187,225,138,209,69,179,211,133,240,156,40,164,63,59\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[178,182,168,47,42,244,207,186,94,183,22,112,214,122,50,220,65,172,229,152,163,185,26,19,171,189,132,179,119,117,174,244]",
              "sol": "abi.encode(\"178,182,168,47,42,244,207,186,94,183,22,112,214,122,50,220,65,172,229,152,163,185,26,19,171,189,132,179,119,117,174,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[185,195,189,183,236,142,138,175,89,1,114,33,127,107,138,166,127,112,158,218,53,53,149,44,19,50,40,73,177,124,6,252]",
              "sol": "stringToBytes32(\"185,195,189,183,236,142,138,175,89,1,114,33,127,107,138,166,127,112,158,218,53,53,149,44,19,50,40,73,177,124,6,252\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[189,16,5,182,227,208,110,60,14,116,45,216,44,81,136,69,177,143,121,155,193,90,240,214,171,83,5,102,54,149,167,2]",
              "sol": "abi.encode(\"189,16,5,182,227,208,110,60,14,116,45,216,44,81,136,69,177,143,121,155,193,90,240,214,171,83,5,102,54,149,167,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.628ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[86,149,36,106,156,61,2,68,232,9,98,150,240,84,144,12,224,29,227,88,249,52,89,226,224,197,109,175,108,42,203,218]",
              "sol": "stringToBytes32(\"86,149,36,106,156,61,2,68,232,9,98,150,240,84,144,12,224,29,227,88,249,52,89,226,224,197,109,175,108,42,203,218\")"
            },
            {
              "js": "[50,250,205,39,47,163,152,197,129,75,31,232,195,162,214,159,67,171,144,23,184,39,186,84,120,163,13,204,108,118,85,158]",
              "sol": "abi.encode(\"50,250,205,39,47,163,152,197,129,75,31,232,195,162,214,159,67,171,144,23,184,39,186,84,120,163,13,204,108,118,85,158\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[86,149,36,106,156,61,2,68,232,9,98,150,240,84,144,12,224,29,227,88,249,52,89,226,224,197,109,175,108,42,203,218]",
                "sol": "stringToBytes32(\"86,149,36,106,156,61,2,68,232,9,98,150,240,84,144,12,224,29,227,88,249,52,89,226,224,197,109,175,108,42,203,218\")"
              },
              {
                "js": "[181,3,252,36,182,64,141,99,115,41,250,174,191,8,176,99,126,12,190,138,188,164,47,77,252,78,250,134,221,89,113,167,28]",
                "sol": "bytes33(\"181,3,252,36,182,64,141,99,115,41,250,174,191,8,176,99,126,12,190,138,188,164,47,77,252,78,250,134,221,89,113,167,28\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.630ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[101,206,243,72,54,219,80,136,53,253,151,11,234,0,68,87,172,102,27,114,244,16,93,208,148,47,248,199,29,22,82,232]",
              "sol": "abi.encode(\"101,206,243,72,54,219,80,136,53,253,151,11,234,0,68,87,172,102,27,114,244,16,93,208,148,47,248,199,29,22,82,232\")"
            },
            {
              "js": "[117,191,154,232,27,2,83,69,134,4,84,33,14,251,239,214,234,23,188,208,22,144,252,192,187,119,193,47,74,160,77,169]",
              "sol": "stringToBytes32(\"117,191,154,232,27,2,83,69,134,4,84,33,14,251,239,214,234,23,188,208,22,144,252,192,187,119,193,47,74,160,77,169\")"
            },
            {
              "js": "[60,55,34,15,164,3,112,3,21,125,231,74,158,121,249,95,189,129,104,228,153,239,29,165,159,73,63,49,231,58,21,43]",
              "sol": "abi.encode(\"60,55,34,15,164,3,112,3,21,125,231,74,158,121,249,95,189,129,104,228,153,239,29,165,159,73,63,49,231,58,21,43\")"
            },
            {
              "js": "\"jkwf5p\"",
              "sol": "\"jkwf5p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[65,223,187,69,132,97,252,52,249,40,155,82,165,254,7,14,255,240,72,197,69,64,186,32,34,129,220,63,38,56,60,161]",
              "sol": "abi.encode(\"65,223,187,69,132,97,252,52,249,40,155,82,165,254,7,14,255,240,72,197,69,64,186,32,34,129,220,63,38,56,60,161\")"
            },
            {
              "js": "[101,62,102,11,187,19,157,28,227,209,79,118,78,197,46,186,241,233,73,129,63,135,108,237,241,209,76,249,87,24,158,150]",
              "sol": "stringToBytes32(\"101,62,102,11,187,19,157,28,227,209,79,118,78,197,46,186,241,233,73,129,63,135,108,237,241,209,76,249,87,24,158,150\")"
            },
            {
              "js": "[28,43,164,47,25,198,232,238,136,228,79,38,125,86,73,48,59,160,163,7,133,225,80,98,8,14,145,236,81,213,141,97]",
              "sol": "abi.encode(\"28,43,164,47,25,198,232,238,136,228,79,38,125,86,73,48,59,160,163,7,133,225,80,98,8,14,145,236,81,213,141,97\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[90,217,97,200,60,16,151,176,219,17,62,233,157,161,40,75,159,239,49,211,34,115,217,153,131,152,19,162,75,125,78,177]",
              "sol": "abi.encode(\"90,217,97,200,60,16,151,176,219,17,62,233,157,161,40,75,159,239,49,211,34,115,217,153,131,152,19,162,75,125,78,177\")"
            },
            {
              "js": "[181,112,10,137,151,25,29,88,29,201,165,129,222,105,142,213,241,60,199,71,201,54,103,62,185,26,106,125,95,30,242,217]",
              "sol": "stringToBytes32(\"181,112,10,137,151,25,29,88,29,201,165,129,222,105,142,213,241,60,199,71,201,54,103,62,185,26,106,125,95,30,242,217\")"
            },
            {
              "js": "[196,165,143,190,137,117,125,219,18,15,179,206,190,130,112,127,20,85,186,53,148,187,199,69,15,106,5,231,117,217,190,163]",
              "sol": "abi.encode(\"196,165,143,190,137,117,125,219,18,15,179,206,190,130,112,127,20,85,186,53,148,187,199,69,15,106,5,231,117,217,190,163\")"
            },
            {
              "js": "\"saj9a7\"",
              "sol": "\"saj9a7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[208,228,70,110,81,203,113,209,68,159,147,41,124,9,242,40,46,26,40,144,129,40,11,207,231,238,142,159,153,32,111,81]",
              "sol": "abi.encode(\"208,228,70,110,81,203,113,209,68,159,147,41,124,9,242,40,46,26,40,144,129,40,11,207,231,238,142,159,153,32,111,81\")"
            },
            {
              "js": "[255,51,31,123,236,49,96,171,30,59,0,181,38,148,74,39,109,231,161,193,70,211,221,29,120,45,171,220,216,38,56,209]",
              "sol": "stringToBytes32(\"255,51,31,123,236,49,96,171,30,59,0,181,38,148,74,39,109,231,161,193,70,211,221,29,120,45,171,220,216,38,56,209\")"
            },
            {
              "js": "[40,17,99,97,120,193,31,193,252,99,33,214,237,207,73,130,179,192,109,226,45,236,237,132,77,163,33,147,27,158,125,63]",
              "sol": "abi.encode(\"40,17,99,97,120,193,31,193,252,99,33,214,237,207,73,130,179,192,109,226,45,236,237,132,77,163,33,147,27,158,125,63\")"
            },
            {
              "js": "\"saj9a7\"",
              "sol": "\"saj9a7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[216,148,23,193,40,205,137,242,126,219,71,33,4,184,41,215,147,145,33,241,233,209,164,18,172,100,159,203,56,45,148,19]",
              "sol": "abi.encode(\"216,148,23,193,40,205,137,242,126,219,71,33,4,184,41,215,147,145,33,241,233,209,164,18,172,100,159,203,56,45,148,19\")"
            },
            {
              "js": "[10,47,133,27,106,181,10,211,64,135,87,93,162,79,176,102,116,206,148,72,22,90,56,183,205,83,116,178,55,43,236,147]",
              "sol": "stringToBytes32(\"10,47,133,27,106,181,10,211,64,135,87,93,162,79,176,102,116,206,148,72,22,90,56,183,205,83,116,178,55,43,236,147\")"
            },
            {
              "js": "[22,168,88,74,165,137,174,51,16,61,79,156,58,143,226,96,118,9,83,48,188,137,174,52,73,138,47,50,44,1,156,234]",
              "sol": "abi.encode(\"22,168,88,74,165,137,174,51,16,61,79,156,58,143,226,96,118,9,83,48,188,137,174,52,73,138,47,50,44,1,156,234\")"
            },
            {
              "js": "\"oxcnb\"",
              "sol": "\"oxcnb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[141,224,138,250,139,7,223,120,102,232,234,205,137,224,26,236,216,240,69,214,10,189,195,253,107,91,65,64,170,47,69,114]",
              "sol": "abi.encode(\"141,224,138,250,139,7,223,120,102,232,234,205,137,224,26,236,216,240,69,214,10,189,195,253,107,91,65,64,170,47,69,114\")"
            },
            {
              "js": "[131,142,135,186,136,76,35,56,111,1,243,97,20,168,139,195,7,6,198,148,38,214,203,173,1,56,213,12,100,204,107,171]",
              "sol": "stringToBytes32(\"131,142,135,186,136,76,35,56,111,1,243,97,20,168,139,195,7,6,198,148,38,214,203,173,1,56,213,12,100,204,107,171\")"
            },
            {
              "js": "[144,11,114,193,245,230,4,168,61,148,189,64,138,245,80,186,82,152,191,156,88,101,158,183,34,150,0,112,206,254,129,247]",
              "sol": "abi.encode(\"144,11,114,193,245,230,4,168,61,148,189,64,138,245,80,186,82,152,191,156,88,101,158,183,34,150,0,112,206,254,129,247\")"
            },
            {
              "js": "\"8d7gda\"",
              "sol": "\"8d7gda\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[5,253,43,75,62,97,234,44,94,123,192,226,89,248,61,187,67,13,74,87,43,21,192,13,197,151,23,48,247,105,66,126]",
              "sol": "abi.encode(\"5,253,43,75,62,97,234,44,94,123,192,226,89,248,61,187,67,13,74,87,43,21,192,13,197,151,23,48,247,105,66,126\")"
            },
            {
              "js": "[244,179,117,230,43,30,219,23,247,21,224,47,151,239,177,244,73,196,183,179,203,240,197,129,110,69,217,194,194,27,30,116]",
              "sol": "stringToBytes32(\"244,179,117,230,43,30,219,23,247,21,224,47,151,239,177,244,73,196,183,179,203,240,197,129,110,69,217,194,194,27,30,116\")"
            },
            {
              "js": "[143,152,87,72,25,127,225,220,143,46,182,15,134,250,163,228,88,59,78,194,40,87,234,240,183,200,154,252,110,40,75,115]",
              "sol": "abi.encode(\"143,152,87,72,25,127,225,220,143,46,182,15,134,250,163,228,88,59,78,194,40,87,234,240,183,200,154,252,110,40,75,115\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[116,173,33,88,5,79,96,186,86,238,135,119,220,236,72,86,214,100,69,61,6,56,91,119,8,59,85,186,36,155,140,86]",
              "sol": "abi.encode(\"116,173,33,88,5,79,96,186,86,238,135,119,220,236,72,86,214,100,69,61,6,56,91,119,8,59,85,186,36,155,140,86\")"
            },
            {
              "js": "[101,179,237,148,201,16,62,143,216,110,183,224,122,128,231,25,156,9,7,255,74,126,74,107,230,172,70,53,226,10,144,118]",
              "sol": "stringToBytes32(\"101,179,237,148,201,16,62,143,216,110,183,224,122,128,231,25,156,9,7,255,74,126,74,107,230,172,70,53,226,10,144,118\")"
            },
            {
              "js": "[86,195,6,88,121,52,224,30,73,43,195,227,11,54,80,197,210,182,149,233,39,137,248,17,205,160,167,234,242,106,61,146]",
              "sol": "abi.encode(\"86,195,6,88,121,52,224,30,73,43,195,227,11,54,80,197,210,182,149,233,39,137,248,17,205,160,167,234,242,106,61,146\")"
            },
            {
              "js": "\"jkwf5p\"",
              "sol": "\"jkwf5p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.639ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[43,157,75,129,238,214,158,218,16,227,223,255,217,37,152,70,251,29,241,119,81,235,128,85,77,115,106,81,49,253,247,144]",
              "sol": "abi.encode(\"43,157,75,129,238,214,158,218,16,227,223,255,217,37,152,70,251,29,241,119,81,235,128,85,77,115,106,81,49,253,247,144\")"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "[137,42,171,82,124,203,133,135,142,195,33,46,1,177,145,225,147,53,252,145,122,230,22,240,223,79,74,130,210,177,115,35]",
              "sol": "abi.encode(\"137,42,171,82,124,203,133,135,142,195,33,46,1,177,145,225,147,53,252,145,122,230,22,240,223,79,74,130,210,177,115,35\")"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.639ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[161,197,198,182,238,130,167,109,203,152,98,133,25,57,141,94,34,203,68,123,210,199,99,78,91,98,61,187,197,91,221,176]",
              "sol": "stringToBytes32(\"161,197,198,182,238,130,167,109,203,152,98,133,25,57,141,94,34,203,68,123,210,199,99,78,91,98,61,187,197,91,221,176\")"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "[150,115,95,155,165,85,144,104,148,131,207,223,67,106,101,95,243,44,106,216,112,25,138,38,27,108,36,40,251,216,144,124]",
              "sol": "stringToBytes32(\"150,115,95,155,165,85,144,104,148,131,207,223,67,106,101,95,243,44,106,216,112,25,138,38,27,108,36,40,251,216,144,124\")"
            },
            {
              "js": "[178,59,212,108,235,113,66,127,172,251,2,179,172,60,102,127,5,230,71,213,65,242,229,66,236,87,117,81,94,174,25,187]",
              "sol": "stringToBytes32(\"178,59,212,108,235,113,66,127,172,251,2,179,172,60,102,127,5,230,71,213,65,242,229,66,236,87,117,81,94,174,25,187\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.640ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[34,161,133,29,113,62,63,152,52,152,122,196,13,130,48,138,250,101,144,153,98,71,211,120,90,137,69,132,90,18,102,111]",
              "sol": "stringToBytes32(\"34,161,133,29,113,62,63,152,52,152,122,196,13,130,48,138,250,101,144,153,98,71,211,120,90,137,69,132,90,18,102,111\")"
            },
            {
              "js": "[51,83,200,51,244,88,181,9,195,190,74,123,183,116,77,53,248,20,51,245,255,183]",
              "sol": "abi.encode(\"51,83,200,51,244,88,181,9,195,190,74,123,183,116,77,53,248,20,51,245,255,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[0,146,59,22,57,229,63,254,76,171,254,113,49,232,251,98,165,207,108,82,118,82,98,220,166,89,65,93,75,43,1,206]",
              "sol": "stringToBytes32(\"0,146,59,22,57,229,63,254,76,171,254,113,49,232,251,98,165,207,108,82,118,82,98,220,166,89,65,93,75,43,1,206\")"
            },
            {
              "js": "[117,64,155,249,35,0,127,192,21,50,17,85,149,249,159,11,147,22,40,89,76,223,249,110,79,77,184,207,254,47,92,116,124,42,82,205,155,139,9,14,134,51,39,113,28,176,32,160,214,151,183,149,242,119,137,72,109,61,158,235,179,12,235,106,254]",
              "sol": "abi.encode(\"117,64,155,249,35,0,127,192,21,50,17,85,149,249,159,11,147,22,40,89,76,223,249,110,79,77,184,207,254,47,92,116,124,42,82,205,155,139,9,14,134,51,39,113,28,176,32,160,214,151,183,149,242,119,137,72,109,61,158,235,179,12,235,106,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.641ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.642ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[57,96]",
              "sol": "[uint(57),uint(96)]"
            },
            {
              "js": "[[46,22],[254,1532892063]]",
              "sol": "[[uint(46),uint(22)],[uint(254),uint(1532892063)]]"
            },
            {
              "js": "[1532892063,70]",
              "sol": "[uint(1532892063),uint(70)]"
            },
            {
              "js": "[69,5]",
              "sol": "[uint(69),uint(5)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.645ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.646ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[3,128,97,26,1]",
              "sol": "[uint(3),uint(128),uint(97),uint(26),uint(1)]"
            },
            {
              "js": "{\"A\": {\"X\": 32,\"Y\": 97},\"B\": {\"X\": [21,30],\"Y\": [45,0]},\"C\": {\"X\": 161,\"Y\": 17}}",
              "sol": "Verifier.Proof(Pairing.G1Point(32,97),Pairing.G2Point([uint(21),uint(30)],[uint(45),uint(0)]),Pairing.G1Point(161,17))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[200000,0,0]",
              "sol": "[uint(200000),uint(0),uint(0)]"
            },
            {
              "js": "{\"A\": {\"X\": 127,\"Y\": 22},\"B\": {\"X\": [101,3],\"Y\": [63,88]},\"C\": {\"X\": 1023,\"Y\": 200001}}",
              "sol": "Verifier.Proof(Pairing.G1Point(127,22),Pairing.G2Point([uint(101),uint(3)],[uint(63),uint(88)]),Pairing.G1Point(1023,200001))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.648ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.649ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.649ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"accounts[7]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.651ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.652ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.652ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.653ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.654ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1023",
                "sol": "1023"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.655ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "[209,240,201,41,106,66,109,156,110,127,207,42,81,180,36,4,234,187,200,16,15,77,98,156,22,60,192,151,231,179,49,124]",
              "sol": "abi.encode(\"209,240,201,41,106,66,109,156,110,127,207,42,81,180,36,4,234,187,200,16,15,77,98,156,22,60,192,151,231,179,49,124\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "[209,240,201,41,106,66,109,156,110,127,207,42,81,180,36,4,234,187,200,16,15,77,98,156,22,60,192,151,231,179,49,124]",
                "sol": "abi.encode(\"209,240,201,41,106,66,109,156,110,127,207,42,81,180,36,4,234,187,200,16,15,77,98,156,22,60,192,151,231,179,49,124\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.657ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.658ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[243,183,29,202]",
              "sol": "bytes4(\"243,183,29,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.660ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.660ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.661ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.662ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.665ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[240,249,105,20,182,10,188,151,59,185,245,60,89,194,148,236,214,54,69,194,79,120,28,24,169,201,7,123,96,35,0,175]",
              "sol": "abi.encode(\"240,249,105,20,182,10,188,151,59,185,245,60,89,194,148,236,214,54,69,194,79,120,28,24,169,201,7,123,96,35,0,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[25,141,159,107,84,215,89,203,49,122,49,252,191,195,146,172,20,103,149,6,97,228,136,49,81,189,83,67,195,77,40,150]",
              "sol": "abi.encode(\"25,141,159,107,84,215,89,203,49,122,49,252,191,195,146,172,20,103,149,6,97,228,136,49,81,189,83,67,195,77,40,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.668ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.673ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[46,102]",
              "sol": "[uint(46),uint(102)]"
            },
            {
              "js": "[[18,1532892063],[16,17]]",
              "sol": "[[uint(18),uint(1532892063)],[uint(16),uint(17)]]"
            },
            {
              "js": "[33,22]",
              "sol": "[uint(33),uint(22)]"
            },
            {
              "js": "[58,101]",
              "sol": "[uint(58),uint(101)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.677ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.680ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.681ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.683ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.684ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.688ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.691ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.693ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.693ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.699ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.703ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "86",
                "sol": "86"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:56:41.705ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.706ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:56:41.707ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}