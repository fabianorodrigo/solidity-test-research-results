,{
  "2020-11-11T20:31:45.887ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:32:00.789ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:32:15.995ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:32:31.040ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:32:46.111ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:01.451ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.641ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [5,237,32,41,69,173,154,21,127,50,217,35,194,127,31,52,190,50,244,111,192,134,20,247,205,60,74,152,50,32,218,182],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"5,237,32,41,69,173,154,21,127,50,217,35,194,127,31,52,190,50,244,111,192,134,20,247,205,60,74,152,50,32,218,182\"),9)"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.642ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [100,39,204,63,133,159,19,232,201,21,0,191,192,229,200,237,22,70,3,143,16,65,72,191,213,85,24,13,91,82,119,133],\"capacity\": 25}",
              "sol": "Buffer.buffer(abi.encode(\"100,39,204,63,133,159,19,232,201,21,0,191,192,229,200,237,22,70,3,143,16,65,72,191,213,85,24,13,91,82,119,133\"),25)"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [204,172,242,89,208,161,19,185,79,126,91,43,50,230,230,133,164,237,194,76,221,103,83,28,153,166,187,51,229,3,35,93],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"204,172,242,89,208,161,19,185,79,126,91,43,50,230,230,133,164,237,194,76,221,103,83,28,153,166,187,51,229,3,35,93\"),61)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.643ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [77,121,175,83,100,201,141,48,30,105,87,165,170,102,44,227,37,92,207,187,192,120,34,112,195,13,5,147,226,63,6,99],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"77,121,175,83,100,201,141,48,30,105,87,165,170,102,44,227,37,92,207,187,192,120,34,112,195,13,5,147,226,63,6,99\"),257)"
            },
            {
              "js": "[183,171,61,95,39,106,14,112,4,179,120,34,160,173,150,179,104,146,125,197,155,48,255,224,96,221,196,104,169,158,68,120]",
              "sol": "abi.encode(\"183,171,61,95,39,106,14,112,4,179,120,34,160,173,150,179,104,146,125,197,155,48,255,224,96,221,196,104,169,158,68,120\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.644ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [37,2,27,229,92,126,163,47,24,186,108,0,129,188,162,219,212,185,194,29,167,171,14,0,237,192,3,244,246,25,68,148],\"capacity\": 15}",
              "sol": "Buffer.buffer(abi.encode(\"37,2,27,229,92,126,163,47,24,186,108,0,129,188,162,219,212,185,194,29,167,171,14,0,237,192,3,244,246,25,68,148\"),15)"
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.644ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [67,181,206,251,9,250,49,254,151,224,159,149,151,232,143,182,181,25,245,138,252,57,203,239,236,65,226,166,166,55,12,226],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"67,181,206,251,9,250,49,254,151,224,159,149,151,232,143,182,181,25,245,138,252,57,203,239,236,65,226,166,166,55,12,226\"),60)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.645ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [103,35,219,120,142,12,65,216,41,41,16,211,17,222,238,28,40,137,79,207,192,47,154,246,136,83,136,147,150,175,94,201],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"103,35,219,120,142,12,65,216,41,41,16,211,17,222,238,28,40,137,79,207,192,47,154,246,136,83,136,147,150,175,94,201\"),19)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.645ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [90,216,221,49,12,99,63,9,43,177,145,248,48,230,79,170,215,129,152,30,15,69,198,108,6,208,203,195,103,94,220,233],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"90,216,221,49,12,99,63,9,43,177,145,248,48,230,79,170,215,129,152,30,15,69,198,108,6,208,203,195,103,94,220,233\"),9)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.650ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.650ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.651ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 161,\"Y\": 56}",
              "sol": "Pairing.G1Point(161,56)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.652ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 58,\"Y\": 97}",
              "sol": "Pairing.G1Point(58,97)"
            },
            {
              "js": "{\"X\": 70,\"Y\": 48}",
              "sol": "Pairing.G1Point(70,48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.653ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [129,31],\"Y\": [97,256]}",
              "sol": "Pairing.G2Point([uint(129),uint(31)],[uint(97),uint(256)])"
            },
            {
              "js": "{\"X\": [18,101],\"Y\": [71,200000]}",
              "sol": "Pairing.G2Point([uint(18),uint(101)],[uint(71),uint(200000)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.654ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 1023,\"Y\": 31}",
              "sol": "Pairing.G1Point(1023,31)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.655ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 97,\"Y\": 0},{\"X\": 27,\"Y\": 22},{\"X\": 45,\"Y\": 49},{\"X\": 64,\"Y\": 96},{\"X\": 20,\"Y\": 1024},{\"X\": 103,\"Y\": 255},{\"X\": 1024,\"Y\": 1},{\"X\": 26,\"Y\": 16},{\"X\": 1532892063,\"Y\": 48},{\"X\": 95,\"Y\": 46}]",
              "sol": "[Pairing.G1Point(97,0),Pairing.G1Point(27,22),Pairing.G1Point(45,49),Pairing.G1Point(64,96),Pairing.G1Point(20,1024),Pairing.G1Point(103,255),Pairing.G1Point(1024,1),Pairing.G1Point(26,16),Pairing.G1Point(1532892063,48),Pairing.G1Point(95,46)]"
            },
            {
              "js": "[{\"X\": [63,2014223714],\"Y\": [16,71]},{\"X\": [2014223715,0],\"Y\": [25,200001]},{\"X\": [98,15],\"Y\": [199999,1023]},{\"X\": [88,103],\"Y\": [61,200001]},{\"X\": [257,1532892062],\"Y\": [255,98]},{\"X\": [16,1024],\"Y\": [98,27]},{\"X\": [21,102],\"Y\": [55,29]},{\"X\": [59,33],\"Y\": [1,29]},{\"X\": [1025,63],\"Y\": [1532892064,61]},{\"X\": [49,1],\"Y\": [24,200001]}]",
              "sol": "[Pairing.G2Point([uint(63),uint(2014223714)],[uint(16),uint(71)]),Pairing.G2Point([uint(2014223715),uint(0)],[uint(25),uint(200001)]),Pairing.G2Point([uint(98),uint(15)],[uint(199999),uint(1023)]),Pairing.G2Point([uint(88),uint(103)],[uint(61),uint(200001)]),Pairing.G2Point([uint(257),uint(1532892062)],[uint(255),uint(98)]),Pairing.G2Point([uint(16),uint(1024)],[uint(98),uint(27)]),Pairing.G2Point([uint(21),uint(102)],[uint(55),uint(29)]),Pairing.G2Point([uint(59),uint(33)],[uint(1),uint(29)]),Pairing.G2Point([uint(1025),uint(63)],[uint(1532892064),uint(61)]),Pairing.G2Point([uint(49),uint(1)],[uint(24),uint(200001)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 103,\"Y\": 1},{\"X\": 98,\"Y\": 129},{\"X\": 29,\"Y\": 128},{\"X\": 98,\"Y\": 1532892062},{\"X\": 57,\"Y\": 15},{\"X\": 101,\"Y\": 49},{\"X\": 255,\"Y\": 60},{\"X\": 255,\"Y\": 9},{\"X\": 58,\"Y\": 9},{\"X\": 254,\"Y\": 61},{\"X\": 60,\"Y\": 47}]",
                "sol": "[Pairing.G1Point(4,98),Pairing.G1Point(22,59),Pairing.G1Point(56,86),Pairing.G1Point(129,3),Pairing.G1Point(33,200001),Pairing.G1Point(58,18),Pairing.G1Point(56,66),Pairing.G1Point(16,9),Pairing.G1Point(1,31),Pairing.G1Point(17,30),Pairing.G1Point(11,88)]"
              },
              {
                "js": "[{\"X\": [63,2014223714],\"Y\": [16,71]},{\"X\": [2014223715,0],\"Y\": [25,200001]},{\"X\": [98,15],\"Y\": [199999,1023]},{\"X\": [88,103],\"Y\": [61,200001]},{\"X\": [257,1532892062],\"Y\": [255,98]},{\"X\": [16,1024],\"Y\": [98,27]},{\"X\": [21,102],\"Y\": [55,29]},{\"X\": [59,33],\"Y\": [1,29]},{\"X\": [1025,63],\"Y\": [1532892064,61]},{\"X\": [49,1],\"Y\": [24,200001]}]",
                "sol": "[Pairing.G2Point([uint(63),uint(2014223714)],[uint(16),uint(71)]),Pairing.G2Point([uint(2014223715),uint(0)],[uint(25),uint(200001)]),Pairing.G2Point([uint(98),uint(15)],[uint(199999),uint(1023)]),Pairing.G2Point([uint(88),uint(103)],[uint(61),uint(200001)]),Pairing.G2Point([uint(257),uint(1532892062)],[uint(255),uint(98)]),Pairing.G2Point([uint(16),uint(1024)],[uint(98),uint(27)]),Pairing.G2Point([uint(21),uint(102)],[uint(55),uint(29)]),Pairing.G2Point([uint(59),uint(33)],[uint(1),uint(29)]),Pairing.G2Point([uint(1025),uint(63)],[uint(1532892064),uint(61)]),Pairing.G2Point([uint(49),uint(1)],[uint(24),uint(200001)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.663ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 59,\"Y\": 30}",
              "sol": "Pairing.G1Point(59,30)"
            },
            {
              "js": "{\"X\": [1,46],\"Y\": [20,1]}",
              "sol": "Pairing.G2Point([uint(1),uint(46)],[uint(20),uint(1)])"
            },
            {
              "js": "{\"X\": 63,\"Y\": 69}",
              "sol": "Pairing.G1Point(63,69)"
            },
            {
              "js": "{\"X\": [6,58],\"Y\": [24,33]}",
              "sol": "Pairing.G2Point([uint(6),uint(58)],[uint(24),uint(33)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.664ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 86,\"Y\": 32}",
              "sol": "Pairing.G1Point(86,32)"
            },
            {
              "js": "{\"X\": [1,1532892063],\"Y\": [95,57]}",
              "sol": "Pairing.G2Point([uint(1),uint(1532892063)],[uint(95),uint(57)])"
            },
            {
              "js": "{\"X\": 16,\"Y\": 15}",
              "sol": "Pairing.G1Point(16,15)"
            },
            {
              "js": "{\"X\": [7,71],\"Y\": [127,28]}",
              "sol": "Pairing.G2Point([uint(7),uint(71)],[uint(127),uint(28)])"
            },
            {
              "js": "{\"X\": 2014223714,\"Y\": 49}",
              "sol": "Pairing.G1Point(2014223714,49)"
            },
            {
              "js": "{\"X\": [6,60],\"Y\": [161,97]}",
              "sol": "Pairing.G2Point([uint(6),uint(60)],[uint(161),uint(97)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.669ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.671ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.672ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.672ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.673ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.674ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.674ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.675ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.675ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.676ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.676ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.681ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [229,122,22,86,182,151,87,14,149,163,38,237,12,75,195,250,100,52,242,53,148,175,112,111,27,61,73,148,154,44,223,85],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"229,122,22,86,182,151,87,14,149,163,38,237,12,75,195,250,100,52,242,53,148,175,112,111,27,61,73,148,154,44,223,85\"),19)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.681ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [208,168,255,62,168,74,175,165,240,78,74,94,197,134,38,150,8,16,97,110,238,65,198,80,9,222,33,106,164,1,46,67],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"208,168,255,62,168,74,175,165,240,78,74,94,197,134,38,150,8,16,97,110,238,65,198,80,9,222,33,106,164,1,46,67\"),128)"
            },
            {
              "js": "[141,134,83,73,102,248,165,79,235,77,225,41,198,231,8,5,199,45,216,114,18,146,6,92,149,249,157,102,241,209,169,114]",
              "sol": "abi.encode(\"141,134,83,73,102,248,165,79,235,77,225,41,198,231,8,5,199,45,216,114,18,146,6,92,149,249,157,102,241,209,169,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.682ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [230,53,248,223,153,203,149,166,152,7,54,129,149,86,146,134,74,80,163,200,49,197,187,80,38,196,238,83,234,166,126,97],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"230,53,248,223,153,203,149,166,152,7,54,129,149,86,146,134,74,80,163,200,49,197,187,80,38,196,238,83,234,166,126,97\"),21)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.682ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [228,169,133,208,246,65,158,16,209,146,224,153,254,150,72,32,53,145,169,154,104,218,247,200,174,34,244,74,158,13,211,43],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"228,169,133,208,246,65,158,16,209,146,224,153,254,150,72,32,53,145,169,154,104,218,247,200,174,34,244,74,158,13,211,43\"),28)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.683ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[176,250,23,29,111,56,99,140,163,47,87,81,48,80,243,200,133,6,187,233,47,70,42,198,189,176,51,219,119,76,59,133]",
              "sol": "stringToBytes32(\"176,250,23,29,111,56,99,140,163,47,87,81,48,80,243,200,133,6,187,233,47,70,42,198,189,176,51,219,119,76,59,133\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.684ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[239,187,57,115,29,132,233,141,206,82,103,24,97,165,78,238,122,28,234,149,35,5,202,139,89,214,224,103,2,66,55,66]",
              "sol": "stringToBytes32(\"239,187,57,115,29,132,233,141,206,82,103,24,97,165,78,238,122,28,234,149,35,5,202,139,89,214,224,103,2,66,55,66\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[189,9,222,101,3,153,32,105,82,255,161,222,130,137,210,72,61,20,187,163,84,210,216,152,156,14,95,95,58,165,213,219]",
              "sol": "abi.encode(\"189,9,222,101,3,153,32,105,82,255,161,222,130,137,210,72,61,20,187,163,84,210,216,152,156,14,95,95,58,165,213,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.726ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.726ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.727ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.728ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.728ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.728ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.729ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.729ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.731ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"p1z7xb\"",
              "sol": "\"p1z7xb\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.731ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.732ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"p1z7xb\"",
              "sol": "\"p1z7xb\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.732ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.733ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.733ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"p1z7xb\"",
              "sol": "\"p1z7xb\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.734ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"cdz7fo\",\"cdz7fo\",\"Capstones\",\"ng66ct\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"P\"),string(\"cdz7fo\"),string(\"cdz7fo\"),string(\"Capstones\"),string(\"ng66ct\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.734ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"P\",\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\",\"cdz7fo\",\"p1z7xb\"]",
              "sol": "[string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"cdz7fo\"),string(\"p1z7xb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.735ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"cdz7fo\",\"0\",\"p1z7xb\",\"L\",\"Transaction successfully verified.\",\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\",\"0\"]",
              "sol": "[string(\"cdz7fo\"),string(\"0\"),string(\"p1z7xb\"),string(\"L\"),string(\"Transaction successfully verified.\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0\")]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.735ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"cdz7fo\"",
              "sol": "\"cdz7fo\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"Capstones\",\"p1z7xb\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"Capstones\"),string(\"p1z7xb\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.736ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.736ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.736ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.737ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.737ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"Capstones\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.738ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"[\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.738ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"6eh0m\"",
              "sol": "\"6eh0m\""
            },
            {
              "js": "[\"L\",\"ng66ct\"]",
              "sol": "[string(\"L\"),string(\"ng66ct\")]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.739ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"6eh0m\"",
              "sol": "\"6eh0m\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"0\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.739ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"cdz7fo\",\"Transaction successfully verified.\",\"P\"]",
              "sol": "[string(\"cdz7fo\"),string(\"Transaction successfully verified.\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.740ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"ng66ct\",\"\\x19Ethereum Signed Message:\\n32\",\"6eh0m\"]",
              "sol": "[string(\"ng66ct\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"6eh0m\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.740ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"0\",\"jv6jqj\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\"),string(\"jv6jqj\")]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.741ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"cdz7fo\"",
              "sol": "\"cdz7fo\""
            },
            {
              "js": "[\"P\",\"L\",\"[\"]",
              "sol": "[string(\"P\"),string(\"L\"),string(\"[\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.742ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"6eh0m\",\"kbdqae\",\"kbdqae\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"6eh0m\"),string(\"kbdqae\"),string(\"kbdqae\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.742ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"\\x19Ethereum Signed Message:\\n32\",\"6eh0m\",\"cdz7fo\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"6eh0m\"),string(\"cdz7fo\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.743ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"1tfqi\",\"ng66ct\",\"Capstones\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"1tfqi\"),string(\"ng66ct\"),string(\"Capstones\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.743ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "[\"P\",\"Transaction successfully verified.\",\"6eh0m\",\"1tfqi\"]",
              "sol": "[string(\"P\"),string(\"Transaction successfully verified.\"),string(\"6eh0m\"),string(\"1tfqi\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.744ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"5glqk9\"",
              "sol": "\"5glqk9\""
            },
            {
              "js": "[\"0\",\"Capstones\",\"[\",\"1tfqi\",\"6eh0m\"]",
              "sol": "[string(\"0\"),string(\"Capstones\"),string(\"[\"),string(\"1tfqi\"),string(\"6eh0m\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.744ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "[\"0\",\"cdz7fo\",\"\\x19Ethereum Signed Message:\\n32\",\"[\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"0\"),string(\"cdz7fo\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.745ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"Capstones\",\"L\",\"jv6jqj\",\"1tfqi\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\"),string(\"L\"),string(\"jv6jqj\"),string(\"1tfqi\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.745ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ng66ct\",\"jv6jqj\",\"Transaction successfully verified.\",\"L\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ng66ct\"),string(\"jv6jqj\"),string(\"Transaction successfully verified.\"),string(\"L\")]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.746ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"p1z7xb\"",
              "sol": "\"p1z7xb\""
            },
            {
              "js": "[[250,59,238,27,17,195,213,182,66,68,16,44,193,122,151,35,65,72,97,68,98,32,144,9,187,62,209,138,144,109,119,127],[1,100,157,161,239,203,165,77,24,188,189,60,20,14,188,73,174,254,11,122,62,96,96,178,63,202,149,21,163,185,15,69]]",
              "sol": "[bytes(abi.encode(\"250,59,238,27,17,195,213,182,66,68,16,44,193,122,151,35,65,72,97,68,98,32,144,9,187,62,209,138,144,109,119,127\")),bytes(abi.encode(\"1,100,157,161,239,203,165,77,24,188,189,60,20,14,188,73,174,254,11,122,62,96,96,178,63,202,149,21,163,185,15,69\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.746ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[224,246,157,182,114,119,179,216,241,94,177,51,184,55,147,61,87,55,207,51,165,173,46,34,76,189,5,98,217,198,66,223],[90,40,52,171,245,147,156,244,22,5,24,142,188,152,188,236,154,155,79,92,250,89,220,246,131,184,2,216,138,5,231,133],[248,228,16,48,213,5,247,171,125,24,130,46,233,230,92,8,90,23,147,202,76,46,46,241,12,130,237,59,109,111,221,13],[243,218,103,138,49,85,92,60,133,128,126,196,159,246,173,122,105,155,242,77,135,94,121,92,101,118,173,17,137,86,162,210],[140,42,191,54,236,128,251,196,55,230,255,68,162,160,82,65,150,125,137,212,48,247,133,203,109,231,62,128,164,40,19,230]]",
              "sol": "[bytes(abi.encode(\"224,246,157,182,114,119,179,216,241,94,177,51,184,55,147,61,87,55,207,51,165,173,46,34,76,189,5,98,217,198,66,223\")),bytes(abi.encode(\"90,40,52,171,245,147,156,244,22,5,24,142,188,152,188,236,154,155,79,92,250,89,220,246,131,184,2,216,138,5,231,133\")),bytes(abi.encode(\"248,228,16,48,213,5,247,171,125,24,130,46,233,230,92,8,90,23,147,202,76,46,46,241,12,130,237,59,109,111,221,13\")),bytes(abi.encode(\"243,218,103,138,49,85,92,60,133,128,126,196,159,246,173,122,105,155,242,77,135,94,121,92,101,118,173,17,137,86,162,210\")),bytes(abi.encode(\"140,42,191,54,236,128,251,196,55,230,255,68,162,160,82,65,150,125,137,212,48,247,133,203,109,231,62,128,164,40,19,230\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.748ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"1tfqi\"",
              "sol": "\"1tfqi\""
            },
            {
              "js": "[[56,171,168,34,98,133,211,169,116,218,206,206,65,16,3,102,222,246,46,7,192,5,110,98,50,249,120,214,190,213,32,144],[253,222,176,107,242,134,116,156,60,34,92,213,190,107,107,0,56,144,172,191,71,107,180,82,233,99,58,64,250,66,168,133],[145,108,146,208,228,200,209,106,41,181,32,248,75,11,121,134,36,26,9,65,88,123,99,211,155,155,155,21,37,178,65,160],[47,251,161,210,35,56,223,143,53,4,45,118,146,69,7,8,175,206,166,215,25,155,229,221,183,87,220,136,226,32,34,119],[20,3,191,154,42,81,97,28,244,248,126,236,227,205,108,205,251,164,91,172,108,180,73,18,2,182,169,109,182,158,207,129],[119,138,239,12,101,165,9,123,104,74,250,45,41,228,142,39,3,239,231,99,8,193,135,26,22,107,126,205,7,48,69,235],[27,79,52,107,104,179,93,178,56,5,87,160,166,198,172,139,83,178,45,218,27,144,26,113,39,153,172,106,228,109,138,86]]",
              "sol": "[bytes(abi.encode(\"56,171,168,34,98,133,211,169,116,218,206,206,65,16,3,102,222,246,46,7,192,5,110,98,50,249,120,214,190,213,32,144\")),bytes(abi.encode(\"253,222,176,107,242,134,116,156,60,34,92,213,190,107,107,0,56,144,172,191,71,107,180,82,233,99,58,64,250,66,168,133\")),bytes(abi.encode(\"145,108,146,208,228,200,209,106,41,181,32,248,75,11,121,134,36,26,9,65,88,123,99,211,155,155,155,21,37,178,65,160\")),bytes(abi.encode(\"47,251,161,210,35,56,223,143,53,4,45,118,146,69,7,8,175,206,166,215,25,155,229,221,183,87,220,136,226,32,34,119\")),bytes(abi.encode(\"20,3,191,154,42,81,97,28,244,248,126,236,227,205,108,205,251,164,91,172,108,180,73,18,2,182,169,109,182,158,207,129\")),bytes(abi.encode(\"119,138,239,12,101,165,9,123,104,74,250,45,41,228,142,39,3,239,231,99,8,193,135,26,22,107,126,205,7,48,69,235\")),bytes(abi.encode(\"27,79,52,107,104,179,93,178,56,5,87,160,166,198,172,139,83,178,45,218,27,144,26,113,39,153,172,106,228,109,138,86\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.749ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "[[67,183,190,58,0,108,119,195,33,114,93,99,36,190,23,255,131,225,242,90,56,206,121,229,116,224,72,10,111,203,149,6]]",
              "sol": "[bytes(abi.encode(\"67,183,190,58,0,108,119,195,33,114,93,99,36,190,23,255,131,225,242,90,56,206,121,229,116,224,72,10,111,203,149,6\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.749ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "[[188,36,246,24,66,1,145,25,93,228,247,170,109,185,115,25,166,75,237,177,211,152,162,46,225,239,96,74,222,140,161,116]]",
              "sol": "[bytes(abi.encode(\"188,36,246,24,66,1,145,25,93,228,247,170,109,185,115,25,166,75,237,177,211,152,162,46,225,239,96,74,222,140,161,116\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.750ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"5glqk9\"",
              "sol": "\"5glqk9\""
            },
            {
              "js": "[[38,84,93,38,242,221,12,6,127,45,144,18,6,195,210,114,40,122,195,19,254,234,137,120,125,103,61,4,80,114,91,58]]",
              "sol": "[bytes(abi.encode(\"38,84,93,38,242,221,12,6,127,45,144,18,6,195,210,114,40,122,195,19,254,234,137,120,125,103,61,4,80,114,91,58\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.750ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "[[244,34,200,7,135,92,189,42,136,114,163,206,151,222,12,64,53,104,113,47,207,214,147,59,237,181,148,209,238,36,6,84]]",
              "sol": "[bytes(abi.encode(\"244,34,200,7,135,92,189,42,136,114,163,206,151,222,12,64,53,104,113,47,207,214,147,59,237,181,148,209,238,36,6,84\"))]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.751ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"5glqk9\"",
              "sol": "\"5glqk9\""
            },
            {
              "js": "[[167,203,119,224,123,5,137,4,69,179,226,127,17,40,10,209,43,163,220,142,19,233,96,10,4,254,248,203,171,218,170,196]]",
              "sol": "[bytes(abi.encode(\"167,203,119,224,123,5,137,4,69,179,226,127,17,40,10,209,43,163,220,142,19,233,96,10,4,254,248,203,171,218,170,196\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.751ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"kbdqae\"",
              "sol": "\"kbdqae\""
            },
            {
              "js": "[[84,195,84,61,237,11,59,225,183,43,221,3,7,48,86,42,12,116,92,218,152,40,97,148,232,142,198,56,64,58,208,48],[71,31,29,0,8,132,226,136,136,150,36,229,89,135,93,233,101,221,179,175,180,31,180,67,153,78,162,228,18,211,125,112]]",
              "sol": "[bytes(abi.encode(\"84,195,84,61,237,11,59,225,183,43,221,3,7,48,86,42,12,116,92,218,152,40,97,148,232,142,198,56,64,58,208,48\")),bytes(abi.encode(\"71,31,29,0,8,132,226,136,136,150,36,229,89,135,93,233,101,221,179,175,180,31,180,67,153,78,162,228,18,211,125,112\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.752ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[210,64,240,89,51,17,53,25,79,68,161,210,239,125,211,99,37,166,15,143,216,57,170,210,73,70,20,54,96,34,171,118],[43,125,175,238,192,9,252,139,225,218,2,216,147,33,231,29,251,147,54,211,248,19,79,194,101,229,6,111,162,141,166,39]]",
              "sol": "[bytes(abi.encode(\"210,64,240,89,51,17,53,25,79,68,161,210,239,125,211,99,37,166,15,143,216,57,170,210,73,70,20,54,96,34,171,118\")),bytes(abi.encode(\"43,125,175,238,192,9,252,139,225,218,2,216,147,33,231,29,251,147,54,211,248,19,79,194,101,229,6,111,162,141,166,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.753ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "[[179,113,228,238,254,38,102,69,238,38,15,188,88,14,73,251,94,168,48,157,173,169,164,36,166,157,101,92,190,219,42,100],[234,120,237,8,237,180,24,145,35,215,82,254,226,173,161,78,144,210,226,95,127,79,5,54,2,140,112,233,162,109,157,158]]",
              "sol": "[bytes(abi.encode(\"179,113,228,238,254,38,102,69,238,38,15,188,88,14,73,251,94,168,48,157,173,169,164,36,166,157,101,92,190,219,42,100\")),bytes(abi.encode(\"234,120,237,8,237,180,24,145,35,215,82,254,226,173,161,78,144,210,226,95,127,79,5,54,2,140,112,233,162,109,157,158\"))]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.753ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "[[76,146,45,125,67,134,106,62,33,217,109,134,20,110,126,53,58,108,168,91,240,220,33,52,74,203,173,79,93,152,226,138],[54,142,131,208,29,116,198,29,185,185,194,164,84,118,245,153,20,8,214,229,227,33,92,124,0,169,61,5,40,44,198,182]]",
              "sol": "[bytes(abi.encode(\"76,146,45,125,67,134,106,62,33,217,109,134,20,110,126,53,58,108,168,91,240,220,33,52,74,203,173,79,93,152,226,138\")),bytes(abi.encode(\"54,142,131,208,29,116,198,29,185,185,194,164,84,118,245,153,20,8,214,229,227,33,92,124,0,169,61,5,40,44,198,182\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.754ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"kbdqae\"",
              "sol": "\"kbdqae\""
            },
            {
              "js": "[[225,16,35,151,147,75,167,230,84,24,253,163,113,136,166,84,109,227,35,187,101,16,222,68,41,81,94,37,123,204,232,226],[46,103,212,18,159,216,69,255,21,146,168,167,46,61,109,81,205,213,67,118,99,247,90,177,80,186,225,128,4,202,120,7],[40,132,115,191,31,235,84,220,56,112,141,236,123,233,56,56,254,137,138,98,68,192,156,153,6,33,144,140,51,44,3,188]]",
              "sol": "[bytes(abi.encode(\"225,16,35,151,147,75,167,230,84,24,253,163,113,136,166,84,109,227,35,187,101,16,222,68,41,81,94,37,123,204,232,226\")),bytes(abi.encode(\"46,103,212,18,159,216,69,255,21,146,168,167,46,61,109,81,205,213,67,118,99,247,90,177,80,186,225,128,4,202,120,7\")),bytes(abi.encode(\"40,132,115,191,31,235,84,220,56,112,141,236,123,233,56,56,254,137,138,98,68,192,156,153,6,33,144,140,51,44,3,188\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.754ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[53,93,3,226,6,220,235,120,190,85,130,129,75,83,76,150,56,155,21,45,239,86,45,70,89,104,65,84,55,11,64,135],[210,40,18,31,219,93,243,202,149,32,3,180,86,190,12,161,221,195,164,232,49,119,179,240,186,186,201,167,42,199,74,53],[53,154,106,56,42,55,241,68,226,191,53,31,133,87,53,12,88,179,242,187,195,130,92,7,8,136,6,166,82,115,219,22]]",
              "sol": "[bytes(abi.encode(\"53,93,3,226,6,220,235,120,190,85,130,129,75,83,76,150,56,155,21,45,239,86,45,70,89,104,65,84,55,11,64,135\")),bytes(abi.encode(\"210,40,18,31,219,93,243,202,149,32,3,180,86,190,12,161,221,195,164,232,49,119,179,240,186,186,201,167,42,199,74,53\")),bytes(abi.encode(\"53,154,106,56,42,55,241,68,226,191,53,31,133,87,53,12,88,179,242,187,195,130,92,7,8,136,6,166,82,115,219,22\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.755ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"kbdqae\"",
              "sol": "\"kbdqae\""
            },
            {
              "js": "[[193,251,63,65,1,96,249,79,218,142,140,158,58,143,186,196,139,40,63,170,166,130,10,109,60,123,156,249,6,77,237,80],[11,54,109,87,252,57,126,179,49,201,149,46,115,205,147,144,210,243,205,123,62,80,184,9,147,203,194,137,96,77,225,117],[228,85,89,69,10,179,186,62,64,181,45,57,109,215,102,194,214,5,42,76,244,245,192,51,67,176,55,109,113,125,129,183]]",
              "sol": "[bytes(abi.encode(\"193,251,63,65,1,96,249,79,218,142,140,158,58,143,186,196,139,40,63,170,166,130,10,109,60,123,156,249,6,77,237,80\")),bytes(abi.encode(\"11,54,109,87,252,57,126,179,49,201,149,46,115,205,147,144,210,243,205,123,62,80,184,9,147,203,194,137,96,77,225,117\")),bytes(abi.encode(\"228,85,89,69,10,179,186,62,64,181,45,57,109,215,102,194,214,5,42,76,244,245,192,51,67,176,55,109,113,125,129,183\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.756ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[145,173,66,222,216,234,0,183,40,88,149,244,199,255,92,107,215,227,55,215,69,244,95,120,180,205,142,199,102,55,68,189],[136,109,220,184,165,146,204,243,133,155,190,247,27,26,149,143,219,134,158,0,2,158,61,131,224,129,204,136,33,85,24,24],[127,138,231,146,71,183,93,247,72,71,113,197,171,232,22,93,85,209,1,95,56,133,227,197,186,150,8,170,162,65,27,59]]",
              "sol": "[bytes(abi.encode(\"145,173,66,222,216,234,0,183,40,88,149,244,199,255,92,107,215,227,55,215,69,244,95,120,180,205,142,199,102,55,68,189\")),bytes(abi.encode(\"136,109,220,184,165,146,204,243,133,155,190,247,27,26,149,143,219,134,158,0,2,158,61,131,224,129,204,136,33,85,24,24\")),bytes(abi.encode(\"127,138,231,146,71,183,93,247,72,71,113,197,171,232,22,93,85,209,1,95,56,133,227,197,186,150,8,170,162,65,27,59\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.756ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"5glqk9\"",
              "sol": "\"5glqk9\""
            },
            {
              "js": "[[22,33,101,50,214,245,250,80,199,139,251,235,64,118,43,246,188,146,173,1,33,92,64,32,89,200,23,63,203,161,137,17],[39,181,107,66,233,7,252,147,78,155,206,255,113,223,130,41,37,73,199,179,176,115,114,74,174,160,173,68,235,49,22,90],[82,237,126,200,20,1,107,215,215,73,36,223,193,108,21,168,88,123,53,108,249,237,42,235,70,182,201,113,56,193,201,56],[62,192,242,195,175,140,9,195,212,234,14,145,231,94,212,5,57,47,126,142,148,249,41,47,2,219,230,20,222,21,240,7]]",
              "sol": "[bytes(abi.encode(\"22,33,101,50,214,245,250,80,199,139,251,235,64,118,43,246,188,146,173,1,33,92,64,32,89,200,23,63,203,161,137,17\")),bytes(abi.encode(\"39,181,107,66,233,7,252,147,78,155,206,255,113,223,130,41,37,73,199,179,176,115,114,74,174,160,173,68,235,49,22,90\")),bytes(abi.encode(\"82,237,126,200,20,1,107,215,215,73,36,223,193,108,21,168,88,123,53,108,249,237,42,235,70,182,201,113,56,193,201,56\")),bytes(abi.encode(\"62,192,242,195,175,140,9,195,212,234,14,145,231,94,212,5,57,47,126,142,148,249,41,47,2,219,230,20,222,21,240,7\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.757ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"cdz7fo\"",
              "sol": "\"cdz7fo\""
            },
            {
              "js": "[[201,167,132,137,58,8,80,236,249,153,225,180,136,89,105,59,87,25,15,9,101,112,70,111,152,122,58,191,105,145,54,253],[166,157,65,120,169,73,226,125,214,64,189,69,29,217,20,104,230,9,95,90,161,118,155,83,17,48,237,184,70,84,124,241],[127,236,116,53,53,245,85,125,79,125,213,190,89,117,238,131,245,63,20,41,8,215,115,240,41,125,101,245,51,54,195,251],[254,200,104,7,3,213,96,0,42,3,114,190,28,122,42,70,152,71,167,223,167,95,226,236,129,190,250,210,214,252,209,117]]",
              "sol": "[bytes(abi.encode(\"201,167,132,137,58,8,80,236,249,153,225,180,136,89,105,59,87,25,15,9,101,112,70,111,152,122,58,191,105,145,54,253\")),bytes(abi.encode(\"166,157,65,120,169,73,226,125,214,64,189,69,29,217,20,104,230,9,95,90,161,118,155,83,17,48,237,184,70,84,124,241\")),bytes(abi.encode(\"127,236,116,53,53,245,85,125,79,125,213,190,89,117,238,131,245,63,20,41,8,215,115,240,41,125,101,245,51,54,195,251\")),bytes(abi.encode(\"254,200,104,7,3,213,96,0,42,3,114,190,28,122,42,70,152,71,167,223,167,95,226,236,129,190,250,210,214,252,209,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.758ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[99,76,219,10,30,190,165,40,176,54,239,144,185,229,191,164,201,162,138,41,112,223,242,235,64,140,146,66,192,31,18,40],[172,237,150,169,79,179,0,234,215,81,29,211,103,107,71,35,101,14,250,199,183,25,101,30,25,9,49,184,65,19,105,172],[137,23,114,116,170,249,144,174,72,154,176,130,37,21,12,200,200,158,157,219,127,108,205,12,55,183,18,240,218,124,218,70],[42,40,161,235,222,64,184,173,156,124,11,174,101,247,18,251,212,32,144,19,140,33,75,115,54,151,171,230,54,207,107,231]]",
              "sol": "[bytes(abi.encode(\"99,76,219,10,30,190,165,40,176,54,239,144,185,229,191,164,201,162,138,41,112,223,242,235,64,140,146,66,192,31,18,40\")),bytes(abi.encode(\"172,237,150,169,79,179,0,234,215,81,29,211,103,107,71,35,101,14,250,199,183,25,101,30,25,9,49,184,65,19,105,172\")),bytes(abi.encode(\"137,23,114,116,170,249,144,174,72,154,176,130,37,21,12,200,200,158,157,219,127,108,205,12,55,183,18,240,218,124,218,70\")),bytes(abi.encode(\"42,40,161,235,222,64,184,173,156,124,11,174,101,247,18,251,212,32,144,19,140,33,75,115,54,151,171,230,54,207,107,231\"))]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.758ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[216,234,87,183,226,189,229,158,190,209,32,230,112,190,9,67,13,191,2,95,216,197,28,170,131,128,211,186,107,27,243,210],[223,107,88,223,9,179,195,116,3,131,249,255,34,200,75,207,135,184,207,98,55,60,65,32,27,244,104,14,201,91,221,22],[62,130,120,233,131,169,236,139,24,6,116,254,14,59,85,187,224,35,236,64,131,170,71,87,104,65,217,225,41,254,250,57],[68,148,236,216,108,7,98,141,72,172,205,5,178,177,24,121,97,136,235,235,150,70,237,211,72,133,165,70,112,238,199,0]]",
              "sol": "[bytes(abi.encode(\"216,234,87,183,226,189,229,158,190,209,32,230,112,190,9,67,13,191,2,95,216,197,28,170,131,128,211,186,107,27,243,210\")),bytes(abi.encode(\"223,107,88,223,9,179,195,116,3,131,249,255,34,200,75,207,135,184,207,98,55,60,65,32,27,244,104,14,201,91,221,22\")),bytes(abi.encode(\"62,130,120,233,131,169,236,139,24,6,116,254,14,59,85,187,224,35,236,64,131,170,71,87,104,65,217,225,41,254,250,57\")),bytes(abi.encode(\"68,148,236,216,108,7,98,141,72,172,205,5,178,177,24,121,97,136,235,235,150,70,237,211,72,133,165,70,112,238,199,0\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.759ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "[[56,73,133,7,95,104,146,227,146,194,138,86,99,80,137,88,178,131,82,158,255,148,129,181,173,136,187,0,162,112,101,65],[208,206,240,38,104,112,134,93,138,120,121,20,60,12,237,171,98,197,32,197,157,72,203,227,169,221,103,171,7,152,159,106],[255,165,33,87,76,202,99,243,145,37,46,30,46,39,138,214,83,84,80,31,100,235,192,160,118,129,96,17,66,198,214,32],[116,2,35,4,230,31,228,71,61,167,190,186,20,47,41,66,253,58,173,108,75,129,220,128,211,224,96,50,14,52,90,220],[4,151,204,43,219,20,13,226,143,249,107,248,54,85,31,203,200,226,94,12,189,236,15,82,56,143,23,81,197,239,204,121]]",
              "sol": "[bytes(abi.encode(\"56,73,133,7,95,104,146,227,146,194,138,86,99,80,137,88,178,131,82,158,255,148,129,181,173,136,187,0,162,112,101,65\")),bytes(abi.encode(\"208,206,240,38,104,112,134,93,138,120,121,20,60,12,237,171,98,197,32,197,157,72,203,227,169,221,103,171,7,152,159,106\")),bytes(abi.encode(\"255,165,33,87,76,202,99,243,145,37,46,30,46,39,138,214,83,84,80,31,100,235,192,160,118,129,96,17,66,198,214,32\")),bytes(abi.encode(\"116,2,35,4,230,31,228,71,61,167,190,186,20,47,41,66,253,58,173,108,75,129,220,128,211,224,96,50,14,52,90,220\")),bytes(abi.encode(\"4,151,204,43,219,20,13,226,143,249,107,248,54,85,31,203,200,226,94,12,189,236,15,82,56,143,23,81,197,239,204,121\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.760ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"6eh0m\"",
              "sol": "\"6eh0m\""
            },
            {
              "js": "[[240,180,31,143,142,151,181,33,118,148,236,194,251,249,125,138,160,1,39,77,125,181,102,229,247,230,153,42,147,202,29,254],[167,12,186,246,11,219,245,252,179,62,150,237,48,16,134,10,177,16,2,223,154,22,55,85,202,47,76,178,226,200,197,90],[34,97,103,132,75,129,78,223,235,70,129,145,57,84,233,114,92,123,239,198,33,140,141,153,221,97,229,71,187,21,230,8],[57,18,210,45,19,254,142,232,86,46,97,52,6,236,186,208,59,179,101,204,17,220,142,209,90,82,91,231,126,46,168,138],[138,3,48,173,219,250,244,21,104,59,126,83,192,45,83,150,107,103,248,196,234,139,150,216,203,195,82,241,138,107,168,39]]",
              "sol": "[bytes(abi.encode(\"240,180,31,143,142,151,181,33,118,148,236,194,251,249,125,138,160,1,39,77,125,181,102,229,247,230,153,42,147,202,29,254\")),bytes(abi.encode(\"167,12,186,246,11,219,245,252,179,62,150,237,48,16,134,10,177,16,2,223,154,22,55,85,202,47,76,178,226,200,197,90\")),bytes(abi.encode(\"34,97,103,132,75,129,78,223,235,70,129,145,57,84,233,114,92,123,239,198,33,140,141,153,221,97,229,71,187,21,230,8\")),bytes(abi.encode(\"57,18,210,45,19,254,142,232,86,46,97,52,6,236,186,208,59,179,101,204,17,220,142,209,90,82,91,231,126,46,168,138\")),bytes(abi.encode(\"138,3,48,173,219,250,244,21,104,59,126,83,192,45,83,150,107,103,248,196,234,139,150,216,203,195,82,241,138,107,168,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.761ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "[[182,93,20,143,79,124,222,248,123,52,140,26,8,107,164,62,100,4,124,83,118,250,150,123,112,170,163,245,228,94,77,84],[184,149,28,118,241,88,80,150,194,83,13,181,102,139,28,125,37,141,138,55,37,243,208,193,58,130,166,171,0,211,235,104],[187,72,36,91,248,202,169,231,95,137,98,244,106,56,23,202,210,9,144,32,183,140,81,5,175,141,205,27,15,215,35,255],[48,191,150,158,193,169,236,98,96,211,236,241,21,247,89,220,129,165,106,151,5,132,42,95,76,245,65,248,239,252,170,228],[2,159,207,182,80,155,79,160,205,247,2,17,78,5,67,214,12,33,1,255,26,4,227,14,162,137,172,252,109,252,135,60]]",
              "sol": "[bytes(abi.encode(\"182,93,20,143,79,124,222,248,123,52,140,26,8,107,164,62,100,4,124,83,118,250,150,123,112,170,163,245,228,94,77,84\")),bytes(abi.encode(\"184,149,28,118,241,88,80,150,194,83,13,181,102,139,28,125,37,141,138,55,37,243,208,193,58,130,166,171,0,211,235,104\")),bytes(abi.encode(\"187,72,36,91,248,202,169,231,95,137,98,244,106,56,23,202,210,9,144,32,183,140,81,5,175,141,205,27,15,215,35,255\")),bytes(abi.encode(\"48,191,150,158,193,169,236,98,96,211,236,241,21,247,89,220,129,165,106,151,5,132,42,95,76,245,65,248,239,252,170,228\")),bytes(abi.encode(\"2,159,207,182,80,155,79,160,205,247,2,17,78,5,67,214,12,33,1,255,26,4,227,14,162,137,172,252,109,252,135,60\"))]"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.762ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[247,33,21,77,210,31,44,229,127,149,241,28,24,116,93,3,101,26,195,44,90,48,60,201,44,252,79,158,77,14,180,204],[165,110,221,214,112,18,209,220,98,81,143,202,79,93,254,254,44,200,240,104,117,21,250,179,179,235,194,227,113,146,153,107],[19,156,120,134,86,160,1,119,106,222,105,57,191,231,252,159,114,227,184,183,42,84,137,157,182,144,143,143,162,52,127,201],[132,47,97,130,162,158,66,79,42,184,160,98,234,204,80,191,177,220,30,182,125,19,220,220,157,75,248,250,152,53,23,93],[149,22,193,44,20,32,82,167,247,73,120,189,155,168,186,103,160,24,53,247,205,98,235,179,16,244,53,17,8,1,170,193]]",
              "sol": "[bytes(abi.encode(\"247,33,21,77,210,31,44,229,127,149,241,28,24,116,93,3,101,26,195,44,90,48,60,201,44,252,79,158,77,14,180,204\")),bytes(abi.encode(\"165,110,221,214,112,18,209,220,98,81,143,202,79,93,254,254,44,200,240,104,117,21,250,179,179,235,194,227,113,146,153,107\")),bytes(abi.encode(\"19,156,120,134,86,160,1,119,106,222,105,57,191,231,252,159,114,227,184,183,42,84,137,157,182,144,143,143,162,52,127,201\")),bytes(abi.encode(\"132,47,97,130,162,158,66,79,42,184,160,98,234,204,80,191,177,220,30,182,125,19,220,220,157,75,248,250,152,53,23,93\")),bytes(abi.encode(\"149,22,193,44,20,32,82,167,247,73,120,189,155,168,186,103,160,24,53,247,205,98,235,179,16,244,53,17,8,1,170,193\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.762ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[159]",
              "sol": "bytes1(\"159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.763ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.763ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.763ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.764ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.765ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.765ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"cdz7fo\"",
              "sol": "\"cdz7fo\""
            },
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.766ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.766ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.766ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"cdz7fo\"",
              "sol": "\"cdz7fo\""
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.767ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.768ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "\"0l3euu\"",
              "sol": "\"0l3euu\""
            },
            {
              "js": "\"ng66ct\"",
              "sol": "\"ng66ct\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.768ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.768ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"nqkvvq\"",
              "sol": "\"nqkvvq\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.769ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.770ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"jv6jqj\"",
              "sol": "\"jv6jqj\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.771ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.771ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"5glqk9\",\"0l3euu\"]",
              "sol": "[string(\"5glqk9\"),string(\"0l3euu\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.772ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[238,135,67,45,117,234,32,11,30,42,20,226,122,219,248,125,224,221,190,91,125,95,38,211,128,113,187,157,155,212,53,92],[228,12,143,168,137,75,240,41,249,70,150,162,110,117,217,253,58,79,193,110,5,91,37,232,100,238,179,56,69,109,236,137],[255,130,197,61,96,146,246,230,88,97,146,51,147,5,80,30,158,179,190,81,151,238,237,235,34,7,170,141,198,68,102,150]]",
              "sol": "[bytes(abi.encode(\"238,135,67,45,117,234,32,11,30,42,20,226,122,219,248,125,224,221,190,91,125,95,38,211,128,113,187,157,155,212,53,92\")),bytes(abi.encode(\"228,12,143,168,137,75,240,41,249,70,150,162,110,117,217,253,58,79,193,110,5,91,37,232,100,238,179,56,69,109,236,137\")),bytes(abi.encode(\"255,130,197,61,96,146,246,230,88,97,146,51,147,5,80,30,158,179,190,81,151,238,237,235,34,7,170,141,198,68,102,150\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.772ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.773ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[145,171,215,173,132,143,41,190,33,114,245,159,114,36,35,81,219,193,209,194,56,143,195,50,100,2,237,103,47,175,236,124]",
              "sol": "stringToBytes32(\"145,171,215,173,132,143,41,190,33,114,245,159,114,36,35,81,219,193,209,194,56,143,195,50,100,2,237,103,47,175,236,124\")"
            },
            {
              "js": "[174,226,165,14,234,109,14,206,86,73,86,1,1,225,218,37,69,108,208,253,61,217,213,221,85,101,137,27,162,182,193,239]",
              "sol": "stringToBytes32(\"174,226,165,14,234,109,14,206,86,73,86,1,1,225,218,37,69,108,208,253,61,217,213,221,85,101,137,27,162,182,193,239\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.773ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[192,28,40,116,164,120,180,29,234,117,176,250,32,37,254,94,66,150,252,38,248,122,104,73,194,118,199,76,191,135,85,93]",
              "sol": "stringToBytes32(\"192,28,40,116,164,120,180,29,234,117,176,250,32,37,254,94,66,150,252,38,248,122,104,73,194,118,199,76,191,135,85,93\")"
            },
            {
              "js": "[38,104,182,5,156,183,189,46,28,87,198,137,250,96,150,202,114,8,101,165,158,144,55,22,253,125,156,164,201,224,37,55]",
              "sol": "abi.encode(\"38,104,182,5,156,183,189,46,28,87,198,137,250,96,150,202,114,8,101,165,158,144,55,22,253,125,156,164,201,224,37,55\")"
            },
            {
              "js": "[126,188,110,23,232,130,21,247,221,230,183,99,70,238,5,219,183,115,157,214,13,35,234,174,243,219,143,89,59,59,84,108]",
              "sol": "abi.encode(\"126,188,110,23,232,130,21,247,221,230,183,99,70,238,5,219,183,115,157,214,13,35,234,174,243,219,143,89,59,59,84,108\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.774ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[238,19,170,206,12,205,83,235,82,211,69,113,51,177,174,235,156,135,127,149,91,75,9,55,193,63,79,34,247,140,81,119]",
              "sol": "abi.encode(\"238,19,170,206,12,205,83,235,82,211,69,113,51,177,174,235,156,135,127,149,91,75,9,55,193,63,79,34,247,140,81,119\")"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[72,218,50,34,158,216,112,185,45,197,4,148,53,120,19,26,159,98,58,97,17,143,13,110,153,211,23,8,239,17,182,113]",
              "sol": "abi.encode(\"72,218,50,34,158,216,112,185,45,197,4,148,53,120,19,26,159,98,58,97,17,143,13,110,153,211,23,8,239,17,182,113\")"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.775ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[81,43,68,129,7,19,49,135,250,60,229,165,28,136,66,38,181,196,226,39,64,19,125,182,24,95,125,125,178,157,222,39]",
              "sol": "stringToBytes32(\"81,43,68,129,7,19,49,135,250,60,229,165,28,136,66,38,181,196,226,39,64,19,125,182,24,95,125,125,178,157,222,39\")"
            },
            {
              "js": "\"1tfqi\"",
              "sol": "\"1tfqi\""
            },
            {
              "js": "[181,238,26,239,119,44,63,224,103,112,73,84,230,45,187,239,239,4,155,229,125,105,35,208,237,3,200,101,196,82,202,71]",
              "sol": "abi.encode(\"181,238,26,239,119,44,63,224,103,112,73,84,230,45,187,239,239,4,155,229,125,105,35,208,237,3,200,101,196,82,202,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[188,101,131,211,64,33,232,34,142,143,201,0,103,220,210,153,40,127,69,69,117,109,184,54,49,35,35,11,73,128,204,14]",
              "sol": "stringToBytes32(\"188,101,131,211,64,33,232,34,142,143,201,0,103,220,210,153,40,127,69,69,117,109,184,54,49,35,35,11,73,128,204,14\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[202,103,80,78,194,56,246,120,236,85,198,76,16,240,168,249,32,35,134,226,227,60,134,214,151,144,169,145,216,2,204,135]",
              "sol": "abi.encode(\"202,103,80,78,194,56,246,120,236,85,198,76,16,240,168,249,32,35,134,226,227,60,134,214,151,144,169,145,216,2,204,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.776ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[124,207,122,245,54,236,103,72,118,196,35,75,199,157,157,206,2,43,25,9,159,178,1,247,109,201,13,2,45,54,221,57]",
              "sol": "stringToBytes32(\"124,207,122,245,54,236,103,72,118,196,35,75,199,157,157,206,2,43,25,9,159,178,1,247,109,201,13,2,45,54,221,57\")"
            },
            {
              "js": "[154,40,122,167,151,86,205,245,200,130,176,254,234,124,208,157,138,128,190,75,51,38,135,243,199,244,250,101,215,245,44,24]",
              "sol": "abi.encode(\"154,40,122,167,151,86,205,245,200,130,176,254,234,124,208,157,138,128,190,75,51,38,135,243,199,244,250,101,215,245,44,24\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[124,207,122,245,54,236,103,72,118,196,35,75,199,157,157,206,2,43,25,9,159,178,1,247,109,201,13,2,45,54,221,57]",
                "sol": "stringToBytes32(\"124,207,122,245,54,236,103,72,118,196,35,75,199,157,157,206,2,43,25,9,159,178,1,247,109,201,13,2,45,54,221,57\")"
              },
              {
                "js": "[60,198,235,59,241,15,9,217,14,8,131,191,234,66,242,235,63,102,67,20,208,225,35,78,55,87,135,127,218,238,12,178,93]",
                "sol": "bytes33(\"60,198,235,59,241,15,9,217,14,8,131,191,234,66,242,235,63,102,67,20,208,225,35,78,55,87,135,127,218,238,12,178,93\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.777ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[62,158,96,115,232,108,66,144,135,255,250,23,200,44,4,182,253,243,42,229,187,57,152,146,192,141,179,248,93,155,40,174]",
              "sol": "abi.encode(\"62,158,96,115,232,108,66,144,135,255,250,23,200,44,4,182,253,243,42,229,187,57,152,146,192,141,179,248,93,155,40,174\")"
            },
            {
              "js": "[196,100,17,45,218,60,143,173,83,119,150,235,99,207,221,74,108,41,1,209,110,131,232,150,220,67,181,151,38,248,126,150]",
              "sol": "stringToBytes32(\"196,100,17,45,218,60,143,173,83,119,150,235,99,207,221,74,108,41,1,209,110,131,232,150,220,67,181,151,38,248,126,150\")"
            },
            {
              "js": "[247,15,244,69,48,35,210,206,140,211,13,150,9,70,169,12,95,50,234,54,240,143,65,55,72,254,152,67,72,6,140,162]",
              "sol": "abi.encode(\"247,15,244,69,48,35,210,206,140,211,13,150,9,70,169,12,95,50,234,54,240,143,65,55,72,254,152,67,72,6,140,162\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[105,147,222,132,68,168,92,4,196,158,72,13,156,38,39,19,63,53,246,188,13,44,80,194,250,134,46,22,98,0,45,26]",
              "sol": "abi.encode(\"105,147,222,132,68,168,92,4,196,158,72,13,156,38,39,19,63,53,246,188,13,44,80,194,250,134,46,22,98,0,45,26\")"
            },
            {
              "js": "[153,1,36,163,52,32,132,62,97,152,32,141,27,63,247,99,179,43,93,90,97,67,127,204,163,11,193,95,43,12,66,214]",
              "sol": "stringToBytes32(\"153,1,36,163,52,32,132,62,97,152,32,141,27,63,247,99,179,43,93,90,97,67,127,204,163,11,193,95,43,12,66,214\")"
            },
            {
              "js": "[78,120,158,138,185,211,218,7,122,186,188,109,111,184,17,13,61,187,233,104,183,243,90,145,83,246,211,237,13,195,35,245]",
              "sol": "abi.encode(\"78,120,158,138,185,211,218,7,122,186,188,109,111,184,17,13,61,187,233,104,183,243,90,145,83,246,211,237,13,195,35,245\")"
            },
            {
              "js": "\"1tfqi\"",
              "sol": "\"1tfqi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[56,70,44,253,191,232,246,109,44,9,118,17,28,78,226,77,22,40,215,1,229,13,43,178,216,53,255,24,123,7,19,236]",
              "sol": "abi.encode(\"56,70,44,253,191,232,246,109,44,9,118,17,28,78,226,77,22,40,215,1,229,13,43,178,216,53,255,24,123,7,19,236\")"
            },
            {
              "js": "[186,125,221,108,226,22,12,121,132,44,39,117,226,214,5,36,90,205,129,117,202,70,70,91,191,2,253,37,166,114,218,13]",
              "sol": "stringToBytes32(\"186,125,221,108,226,22,12,121,132,44,39,117,226,214,5,36,90,205,129,117,202,70,70,91,191,2,253,37,166,114,218,13\")"
            },
            {
              "js": "[236,202,116,47,39,75,55,72,0,222,58,66,116,121,88,207,183,69,128,60,79,123,117,222,159,174,224,181,224,131,173,16]",
              "sol": "abi.encode(\"236,202,116,47,39,75,55,72,0,222,58,66,116,121,88,207,183,69,128,60,79,123,117,222,159,174,224,181,224,131,173,16\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[213,58,173,37,8,208,77,121,112,147,178,16,71,82,75,31,3,66,222,91,118,21,140,163,46,114,255,107,218,57,220,6]",
              "sol": "abi.encode(\"213,58,173,37,8,208,77,121,112,147,178,16,71,82,75,31,3,66,222,91,118,21,140,163,46,114,255,107,218,57,220,6\")"
            },
            {
              "js": "[1,66,84,36,192,31,83,157,38,131,127,154,134,158,2,108,33,128,198,127,239,196,14,119,24,144,149,19,121,161,67,93]",
              "sol": "stringToBytes32(\"1,66,84,36,192,31,83,157,38,131,127,154,134,158,2,108,33,128,198,127,239,196,14,119,24,144,149,19,121,161,67,93\")"
            },
            {
              "js": "[161,147,80,15,96,214,72,175,64,133,226,230,93,135,126,62,49,17,158,226,251,78,227,40,11,208,105,154,183,154,10,207]",
              "sol": "abi.encode(\"161,147,80,15,96,214,72,175,64,133,226,230,93,135,126,62,49,17,158,226,251,78,227,40,11,208,105,154,183,154,10,207\")"
            },
            {
              "js": "\"kbdqae\"",
              "sol": "\"kbdqae\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[174,167,111,71,105,93,3,133,251,26,170,157,230,209,55,205,40,153,23,71,193,65,177,80,234,32,6,49,121,255,76,224]",
              "sol": "abi.encode(\"174,167,111,71,105,93,3,133,251,26,170,157,230,209,55,205,40,153,23,71,193,65,177,80,234,32,6,49,121,255,76,224\")"
            },
            {
              "js": "[123,17,202,135,141,44,217,238,200,60,67,84,238,36,131,228,204,180,162,86,32,206,22,158,64,9,57,144,139,167,70,216]",
              "sol": "stringToBytes32(\"123,17,202,135,141,44,217,238,200,60,67,84,238,36,131,228,204,180,162,86,32,206,22,158,64,9,57,144,139,167,70,216\")"
            },
            {
              "js": "[189,212,248,210,170,43,210,60,251,190,15,148,104,172,148,137,195,61,202,118,113,49,97,195,190,155,143,35,168,89,212,242]",
              "sol": "abi.encode(\"189,212,248,210,170,43,210,60,251,190,15,148,104,172,148,137,195,61,202,118,113,49,97,195,190,155,143,35,168,89,212,242\")"
            },
            {
              "js": "\"0l3euu\"",
              "sol": "\"0l3euu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[79,236,88,30,132,86,209,231,28,158,168,141,18,18,103,171,71,64,157,21,102,85,198,47,131,248,163,195,151,78,86,183]",
              "sol": "abi.encode(\"79,236,88,30,132,86,209,231,28,158,168,141,18,18,103,171,71,64,157,21,102,85,198,47,131,248,163,195,151,78,86,183\")"
            },
            {
              "js": "[44,99,141,163,14,160,243,230,44,175,132,193,138,218,72,184,131,18,72,144,66,109,167,9,155,157,53,218,29,215,3,143]",
              "sol": "stringToBytes32(\"44,99,141,163,14,160,243,230,44,175,132,193,138,218,72,184,131,18,72,144,66,109,167,9,155,157,53,218,29,215,3,143\")"
            },
            {
              "js": "[152,86,57,58,193,151,29,217,0,232,160,206,119,170,26,247,33,187,163,164,3,81,185,221,1,179,217,176,78,117,131,23]",
              "sol": "abi.encode(\"152,86,57,58,193,151,29,217,0,232,160,206,119,170,26,247,33,187,163,164,3,81,185,221,1,179,217,176,78,117,131,23\")"
            },
            {
              "js": "\"0l3euu\"",
              "sol": "\"0l3euu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[92,111,238,231,47,141,51,202,208,68,209,95,161,119,44,28,72,145,144,128,76,55,241,206,4,102,187,213,153,120,208,63]",
              "sol": "abi.encode(\"92,111,238,231,47,141,51,202,208,68,209,95,161,119,44,28,72,145,144,128,76,55,241,206,4,102,187,213,153,120,208,63\")"
            },
            {
              "js": "[86,122,189,216,175,203,78,150,221,104,168,175,120,151,204,111,130,61,250,146,242,30,50,31,186,60,150,43,227,191,78,195]",
              "sol": "stringToBytes32(\"86,122,189,216,175,203,78,150,221,104,168,175,120,151,204,111,130,61,250,146,242,30,50,31,186,60,150,43,227,191,78,195\")"
            },
            {
              "js": "[23,200,227,34,193,158,87,4,133,10,134,163,30,111,201,166,193,91,195,205,9,159,132,56,24,252,152,206,57,204,38,41]",
              "sol": "abi.encode(\"23,200,227,34,193,158,87,4,133,10,134,163,30,111,201,166,193,91,195,205,9,159,132,56,24,252,152,206,57,204,38,41\")"
            },
            {
              "js": "\"p1z7xb\"",
              "sol": "\"p1z7xb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[149,30,83,197,67,3,1,161,46,99,137,138,202,119,42,134,26,134,192,44,127,237,244,104,4,143,171,113,211,211,161,211]",
              "sol": "abi.encode(\"149,30,83,197,67,3,1,161,46,99,137,138,202,119,42,134,26,134,192,44,127,237,244,104,4,143,171,113,211,211,161,211\")"
            },
            {
              "js": "[207,18,52,236,201,126,4,208,212,214,38,47,241,14,22,105,51,152,67,236,216,74,64,25,242,62,196,98,60,86,250,58]",
              "sol": "stringToBytes32(\"207,18,52,236,201,126,4,208,212,214,38,47,241,14,22,105,51,152,67,236,216,74,64,25,242,62,196,98,60,86,250,58\")"
            },
            {
              "js": "[214,71,65,115,85,115,85,29,151,68,63,221,140,201,249,25,29,122,213,223,244,110,68,93,216,56,188,232,75,187,78,130]",
              "sol": "abi.encode(\"214,71,65,115,85,115,85,29,151,68,63,221,140,201,249,25,29,122,213,223,244,110,68,93,216,56,188,232,75,187,78,130\")"
            },
            {
              "js": "\"ov576p\"",
              "sol": "\"ov576p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.783ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[106,219,177,102,11,3,191,167,204,14,122,125,93,234,208,80,158,128,167,128,160,38,43,202,126,165,80,145,176,131,200,184]",
              "sol": "abi.encode(\"106,219,177,102,11,3,191,167,204,14,122,125,93,234,208,80,158,128,167,128,160,38,43,202,126,165,80,145,176,131,200,184\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "[101,151,207,56,8,150,4,154,103,28,119,4,81,82,116,149,174,5,161,138,194,53,71,225,1,188,186,103,248,17,151,21]",
              "sol": "abi.encode(\"101,151,207,56,8,150,4,154,103,28,119,4,81,82,116,149,174,5,161,138,194,53,71,225,1,188,186,103,248,17,151,21\")"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.784ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[191,247,203,230,179,140,207,88,210,43,45,218,104,36,202,84,200,11,250,62,27,72,234,167,12,37,234,119,117,143,13,241]",
              "sol": "stringToBytes32(\"191,247,203,230,179,140,207,88,210,43,45,218,104,36,202,84,200,11,250,62,27,72,234,167,12,37,234,119,117,143,13,241\")"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[69,217,180,121,136,20,134,202,192,173,178,22,193,25,8,57,77,154,218,186,192,218,81,62,13,185,232,235,39,20,25,221]",
              "sol": "stringToBytes32(\"69,217,180,121,136,20,134,202,192,173,178,22,193,25,8,57,77,154,218,186,192,218,81,62,13,185,232,235,39,20,25,221\")"
            },
            {
              "js": "[214,40,184,13,118,42,243,212,30,224,91,161,211,125,25,133,101,172,70,247,213,32,99,132,40,45,145,127,28,22,146,22]",
              "sol": "stringToBytes32(\"214,40,184,13,118,42,243,212,30,224,91,161,211,125,25,133,101,172,70,247,213,32,99,132,40,45,145,127,28,22,146,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.784ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[52,63,179,216,37,214,171,169,65,80,231,248,206,225,243,126,14,221,134,251,97,201,222,213,226,198,67,150,57,143,253,89]",
              "sol": "stringToBytes32(\"52,63,179,216,37,214,171,169,65,80,231,248,206,225,243,126,14,221,134,251,97,201,222,213,226,198,67,150,57,143,253,89\")"
            },
            {
              "js": "[195,241,104,5,61,198,87,132,65,230,217,10,64,72,186,247,167,142,82,236,60,13,237,90,53,94,81,170,24,69,176,84,136,250,243,28,181,94,195,34,143,15,113,225,141,129,106,117,129,199,67,109,77,79,42,23,67,180,48,200,216,151,43,86,117,14,187,172,206,58,202,74,112,160,176,57,17,76,33,176,69,106,19,29,212,144,38,208,102,88,112,142,233,185,240,252,241,135,179,97,0,200,153,204,48,233,166,113,91,194,110,47,173,221,143,254,237,57,94,113,99,72,205,24,194,152,7,8]",
              "sol": "abi.encode(\"195,241,104,5,61,198,87,132,65,230,217,10,64,72,186,247,167,142,82,236,60,13,237,90,53,94,81,170,24,69,176,84,136,250,243,28,181,94,195,34,143,15,113,225,141,129,106,117,129,199,67,109,77,79,42,23,67,180,48,200,216,151,43,86,117,14,187,172,206,58,202,74,112,160,176,57,17,76,33,176,69,106,19,29,212,144,38,208,102,88,112,142,233,185,240,252,241,135,179,97,0,200,153,204,48,233,166,113,91,194,110,47,173,221,143,254,237,57,94,113,99,72,205,24,194,152,7,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[111,10,104,178,250,183,190,239,3,3,58,197,18,251,81,125,80,103,76,108,175,57,134,135,8,43,156,152,151,56,29,24]",
              "sol": "stringToBytes32(\"111,10,104,178,250,183,190,239,3,3,58,197,18,251,81,125,80,103,76,108,175,57,134,135,8,43,156,152,151,56,29,24\")"
            },
            {
              "js": "[233,126,117,166,150,102,11,1,237,52,16,207,82,120,115,208,57,80,154,34,91,226,239,13,33,220,88,222,218,186,178,24,117,245,48,33,210,41,141,93,146,6,87,52,242,116,144,42,0,252,58,10,160,67,145,226,158,48,65,164,179,218,138,20,212]",
              "sol": "abi.encode(\"233,126,117,166,150,102,11,1,237,52,16,207,82,120,115,208,57,80,154,34,91,226,239,13,33,220,88,222,218,186,178,24,117,245,48,33,210,41,141,93,146,6,87,52,242,116,144,42,0,252,58,10,160,67,145,226,158,48,65,164,179,218,138,20,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.785ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.786ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[55,255]",
              "sol": "[uint(55),uint(255)]"
            },
            {
              "js": "[[255,7],[1,46]]",
              "sol": "[[uint(255),uint(7)],[uint(1),uint(46)]]"
            },
            {
              "js": "[69,160]",
              "sol": "[uint(69),uint(160)]"
            },
            {
              "js": "[66,4]",
              "sol": "[uint(66),uint(4)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.789ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.789ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[22,16,65,103,4,32,28,162,61]",
              "sol": "[uint(22),uint(16),uint(65),uint(103),uint(4),uint(32),uint(28),uint(162),uint(61)]"
            },
            {
              "js": "{\"A\": {\"X\": 254,\"Y\": 127},\"B\": {\"X\": [129,128],\"Y\": [129,96]},\"C\": {\"X\": 22,\"Y\": 161}}",
              "sol": "Verifier.Proof(Pairing.G1Point(254,127),Pairing.G2Point([uint(129),uint(128)],[uint(129),uint(96)]),Pairing.G1Point(22,161))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[20,254,21,1024]",
              "sol": "[uint(20),uint(254),uint(21),uint(1024)]"
            },
            {
              "js": "{\"A\": {\"X\": 55,\"Y\": 27},\"B\": {\"X\": [15,199999],\"Y\": [25,33]},\"C\": {\"X\": 63,\"Y\": 257}}",
              "sol": "Verifier.Proof(Pairing.G1Point(55,27),Pairing.G2Point([uint(15),uint(199999)],[uint(25),uint(33)]),Pairing.G1Point(63,257))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.791ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.796ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.796ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"accounts[2]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.798ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.798ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.799ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.801ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "25",
                "sol": "25"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.802ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "162",
                "sol": "162"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.803ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "[66,121,47,48,102,165,72,217,68,250,218,95,108,205,121,30,51,112,83,111,46,65,249,136,74,144,22,239,161,60,227,224]",
              "sol": "abi.encode(\"66,121,47,48,102,165,72,217,68,250,218,95,108,205,121,30,51,112,83,111,46,65,249,136,74,144,22,239,161,60,227,224\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": "[66,121,47,48,102,165,72,217,68,250,218,95,108,205,121,30,51,112,83,111,46,65,249,136,74,144,22,239,161,60,227,224]",
                "sol": "abi.encode(\"66,121,47,48,102,165,72,217,68,250,218,95,108,205,121,30,51,112,83,111,46,65,249,136,74,144,22,239,161,60,227,224\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.804ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.806ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[151,226,189,229]",
              "sol": "bytes4(\"151,226,189,229\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.807ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.808ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.808ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.809ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.810ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "[88,28,53,183,155,254,5,245,80,202,94,225,217,119,216,61,169,81,45,32,230,66,254,104,80,107,167,21,92,49,79,212]",
              "sol": "abi.encode(\"88,28,53,183,155,254,5,245,80,202,94,225,217,119,216,61,169,81,45,32,230,66,254,104,80,107,167,21,92,49,79,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "[226,52,198,211,24,36,238,91,55,189,174,15,197,112,200,197,34,245,3,35,188,244,221,237,89,153,28,137,89,246,46,186]",
              "sol": "abi.encode(\"226,52,198,211,24,36,238,91,55,189,174,15,197,112,200,197,34,245,3,35,188,244,221,237,89,153,28,137,89,246,46,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.811ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.813ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[87,49]",
              "sol": "[uint(87),uint(49)]"
            },
            {
              "js": "[[2014223716,102],[10,2014223714]]",
              "sol": "[[uint(2014223716),uint(102)],[uint(10),uint(2014223714)]]"
            },
            {
              "js": "[257,48]",
              "sol": "[uint(257),uint(48)]"
            },
            {
              "js": "[23,27]",
              "sol": "[uint(23),uint(27)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.815ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.817ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.818ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.818ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.819ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.820ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.821ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.822ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.822ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.824ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.825ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T20:33:16.826ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.827ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T20:33:16.827ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}