,{
  "2020-11-13T00:15:07.178ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:15:22.195ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:15:36.950ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:15:52.000ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:07.143ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:22.257ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.482ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [198,42,254,185,80,68,93,180,18,253,5,130,245,243,114,199,219,93,35,215,28,69,31,115,127,165,67,87,186,11,180,198],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"198,42,254,185,80,68,93,180,18,253,5,130,245,243,114,199,219,93,35,215,28,69,31,115,127,165,67,87,186,11,180,198\"),103)"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.483ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [203,49,26,195,1,90,133,218,146,43,37,59,19,227,54,194,165,134,85,80,194,178,188,221,191,246,142,48,244,120,203,224],\"capacity\": 1025}",
              "sol": "Buffer.buffer(abi.encode(\"203,49,26,195,1,90,133,218,146,43,37,59,19,227,54,194,165,134,85,80,194,178,188,221,191,246,142,48,244,120,203,224\"),1025)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [172,182,42,125,174,99,47,130,190,81,229,129,154,8,77,111,191,10,12,88,241,49,70,199,170,250,125,70,116,207,234,54],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"172,182,42,125,174,99,47,130,190,81,229,129,154,8,77,111,191,10,12,88,241,49,70,199,170,250,125,70,116,207,234,54\"),71)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.488ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [181,234,72,135,15,70,148,122,200,32,35,184,188,27,57,67,179,87,203,106,2,22,119,44,203,243,185,129,114,73,191,73],\"capacity\": 32}",
              "sol": "Buffer.buffer(abi.encode(\"181,234,72,135,15,70,148,122,200,32,35,184,188,27,57,67,179,87,203,106,2,22,119,44,203,243,185,129,114,73,191,73\"),32)"
            },
            {
              "js": "[132,107,40,5,156,22,194,195,171,35,46,176,114,71,88,207,28,239,76,197,237,72,168,177,60,69,147,32,95,20,25,22]",
              "sol": "abi.encode(\"132,107,40,5,156,22,194,195,171,35,46,176,114,71,88,207,28,239,76,197,237,72,168,177,60,69,147,32,95,20,25,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.488ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [136,172,236,168,251,4,12,160,190,228,140,46,139,29,145,158,231,48,242,161,86,235,222,132,190,56,10,228,159,140,54,242],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"136,172,236,168,251,4,12,160,190,228,140,46,139,29,145,158,231,48,242,161,86,235,222,132,190,56,10,228,159,140,54,242\"),28)"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.489ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [39,64,112,4,98,200,62,148,196,237,57,85,254,229,179,39,93,178,174,62,184,207,206,170,156,183,200,35,244,41,255,250],\"capacity\": 6}",
              "sol": "Buffer.buffer(abi.encode(\"39,64,112,4,98,200,62,148,196,237,57,85,254,229,179,39,93,178,174,62,184,207,206,170,156,183,200,35,244,41,255,250\"),6)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.489ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [240,149,251,23,33,182,90,159,79,103,1,87,173,11,76,16,68,75,136,218,85,17,149,62,24,232,122,240,25,157,225,30],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"240,149,251,23,33,182,90,159,79,103,1,87,173,11,76,16,68,75,136,218,85,17,149,62,24,232,122,240,25,157,225,30\"),7)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.490ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [161,62,20,104,59,72,114,16,150,190,249,80,175,51,152,143,111,128,91,133,141,132,142,245,193,186,95,116,108,185,137,44],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"161,62,20,104,59,72,114,16,150,190,249,80,175,51,152,143,111,128,91,133,141,132,142,245,193,186,95,116,108,185,137,44\"),256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.495ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.495ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.495ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 55,\"Y\": 33}",
              "sol": "Pairing.G1Point(55,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.496ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 61,\"Y\": 28}",
              "sol": "Pairing.G1Point(61,28)"
            },
            {
              "js": "{\"X\": 5,\"Y\": 1025}",
              "sol": "Pairing.G1Point(5,1025)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.497ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [22,70],\"Y\": [5,103]}",
              "sol": "Pairing.G2Point([uint(22),uint(70)],[uint(5),uint(103)])"
            },
            {
              "js": "{\"X\": [20,199999],\"Y\": [66,16]}",
              "sol": "Pairing.G2Point([uint(20),uint(199999)],[uint(66),uint(16)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.497ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 21,\"Y\": 11}",
              "sol": "Pairing.G1Point(21,11)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.498ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 199999,\"Y\": 28},{\"X\": 7,\"Y\": 162},{\"X\": 26,\"Y\": 71},{\"X\": 87,\"Y\": 45},{\"X\": 17,\"Y\": 61},{\"X\": 8,\"Y\": 33},{\"X\": 127,\"Y\": 63},{\"X\": 0,\"Y\": 1532892062}]",
              "sol": "[Pairing.G1Point(199999,28),Pairing.G1Point(7,162),Pairing.G1Point(26,71),Pairing.G1Point(87,45),Pairing.G1Point(17,61),Pairing.G1Point(8,33),Pairing.G1Point(127,63),Pairing.G1Point(0,1532892062)]"
            },
            {
              "js": "[{\"X\": [69,71],\"Y\": [103,22]},{\"X\": [7,162],\"Y\": [5,16]},{\"X\": [3,69],\"Y\": [128,160]},{\"X\": [31,54],\"Y\": [33,129]},{\"X\": [102,20],\"Y\": [255,54]},{\"X\": [56,200001],\"Y\": [6,256]},{\"X\": [88,24],\"Y\": [66,31]},{\"X\": [199999,47],\"Y\": [71,31]}]",
              "sol": "[Pairing.G2Point([uint(69),uint(71)],[uint(103),uint(22)]),Pairing.G2Point([uint(7),uint(162)],[uint(5),uint(16)]),Pairing.G2Point([uint(3),uint(69)],[uint(128),uint(160)]),Pairing.G2Point([uint(31),uint(54)],[uint(33),uint(129)]),Pairing.G2Point([uint(102),uint(20)],[uint(255),uint(54)]),Pairing.G2Point([uint(56),uint(200001)],[uint(6),uint(256)]),Pairing.G2Point([uint(88),uint(24)],[uint(66),uint(31)]),Pairing.G2Point([uint(199999),uint(47)],[uint(71),uint(31)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 24,\"Y\": 128},{\"X\": 161,\"Y\": 64},{\"X\": 95,\"Y\": 66},{\"X\": 25,\"Y\": 31},{\"X\": 46,\"Y\": 1024},{\"X\": 21,\"Y\": 96},{\"X\": 17,\"Y\": 30},{\"X\": 59,\"Y\": 58},{\"X\": 162,\"Y\": 17}]",
                "sol": "[Pairing.G1Point(8,1025),Pairing.G1Point(29,8),Pairing.G1Point(61,8),Pairing.G1Point(31,45),Pairing.G1Point(56,66),Pairing.G1Point(48,27),Pairing.G1Point(160,16),Pairing.G1Point(28,11),Pairing.G1Point(10,1)]"
              },
              {
                "js": "[{\"X\": [69,71],\"Y\": [103,22]},{\"X\": [7,162],\"Y\": [5,16]},{\"X\": [3,69],\"Y\": [128,160]},{\"X\": [31,54],\"Y\": [33,129]},{\"X\": [102,20],\"Y\": [255,54]},{\"X\": [56,200001],\"Y\": [6,256]},{\"X\": [88,24],\"Y\": [66,31]},{\"X\": [199999,47],\"Y\": [71,31]}]",
                "sol": "[Pairing.G2Point([uint(69),uint(71)],[uint(103),uint(22)]),Pairing.G2Point([uint(7),uint(162)],[uint(5),uint(16)]),Pairing.G2Point([uint(3),uint(69)],[uint(128),uint(160)]),Pairing.G2Point([uint(31),uint(54)],[uint(33),uint(129)]),Pairing.G2Point([uint(102),uint(20)],[uint(255),uint(54)]),Pairing.G2Point([uint(56),uint(200001)],[uint(6),uint(256)]),Pairing.G2Point([uint(88),uint(24)],[uint(66),uint(31)]),Pairing.G2Point([uint(199999),uint(47)],[uint(71),uint(31)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.504ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 19,\"Y\": 24}",
              "sol": "Pairing.G1Point(19,24)"
            },
            {
              "js": "{\"X\": [200001,18],\"Y\": [24,49]}",
              "sol": "Pairing.G2Point([uint(200001),uint(18)],[uint(24),uint(49)])"
            },
            {
              "js": "{\"X\": 32,\"Y\": 54}",
              "sol": "Pairing.G1Point(32,54)"
            },
            {
              "js": "{\"X\": [60,102],\"Y\": [199999,1025]}",
              "sol": "Pairing.G2Point([uint(60),uint(102)],[uint(199999),uint(1025)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.505ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 17,\"Y\": 31}",
              "sol": "Pairing.G1Point(17,31)"
            },
            {
              "js": "{\"X\": [22,66],\"Y\": [1532892063,18]}",
              "sol": "Pairing.G2Point([uint(22),uint(66)],[uint(1532892063),uint(18)])"
            },
            {
              "js": "{\"X\": 1,\"Y\": 0}",
              "sol": "Pairing.G1Point(1,0)"
            },
            {
              "js": "{\"X\": [8,1532892063],\"Y\": [1023,2014223714]}",
              "sol": "Pairing.G2Point([uint(8),uint(1532892063)],[uint(1023),uint(2014223714)])"
            },
            {
              "js": "{\"X\": 7,\"Y\": 2}",
              "sol": "Pairing.G1Point(7,2)"
            },
            {
              "js": "{\"X\": [3,66],\"Y\": [97,5]}",
              "sol": "Pairing.G2Point([uint(3),uint(66)],[uint(97),uint(5)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.510ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.511ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.511ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.512ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.512ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.513ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.513ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.514ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.516ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.516ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.517ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.519ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [150,226,138,254,248,29,226,22,224,50,51,118,120,62,40,150,161,230,44,221,194,203,37,224,80,219,13,227,3,146,167,234],\"capacity\": 127}",
              "sol": "Buffer.buffer(abi.encode(\"150,226,138,254,248,29,226,22,224,50,51,118,120,62,40,150,161,230,44,221,194,203,37,224,80,219,13,227,3,146,167,234\"),127)"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.520ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [114,50,140,40,203,179,219,116,11,110,47,17,220,78,65,88,9,240,81,155,242,119,113,174,59,78,44,157,73,236,26,210],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"114,50,140,40,203,179,219,116,11,110,47,17,220,78,65,88,9,240,81,155,242,119,113,174,59,78,44,157,73,236,26,210\"),19)"
            },
            {
              "js": "[225,54,154,96,126,50,60,174,87,23,108,201,126,181,136,171,236,161,86,232,235,132,50,174,206,147,247,33,181,234,50,128]",
              "sol": "abi.encode(\"225,54,154,96,126,50,60,174,87,23,108,201,126,181,136,171,236,161,86,232,235,132,50,174,206,147,247,33,181,234,50,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.520ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [160,179,195,19,2,42,168,111,51,244,9,55,24,146,30,223,138,247,221,243,43,4,101,191,185,81,180,126,238,72,240,37],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"160,179,195,19,2,42,168,111,51,244,9,55,24,146,30,223,138,247,221,243,43,4,101,191,185,81,180,126,238,72,240,37\"),55)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.521ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [185,195,243,219,139,181,183,213,10,157,248,82,38,16,255,97,49,58,57,171,120,254,126,115,87,251,197,83,221,95,135,50],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"185,195,243,219,139,181,183,213,10,157,248,82,38,16,255,97,49,58,57,171,120,254,126,115,87,251,197,83,221,95,135,50\"),59)"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.521ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[222,232,184,165,118,104,86,91,130,24,27,107,0,44,177,96,203,117,180,121,207,85,94,176,118,93,208,173,70,108,246,100]",
              "sol": "stringToBytes32(\"222,232,184,165,118,104,86,91,130,24,27,107,0,44,177,96,203,117,180,121,207,85,94,176,118,93,208,173,70,108,246,100\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.522ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[109,34,224,178,199,3,94,131,115,233,169,201,93,217,138,47,175,10,178,167,138,237,217,105,12,141,221,77,12,3,169,64]",
              "sol": "stringToBytes32(\"109,34,224,178,199,3,94,131,115,233,169,201,93,217,138,47,175,10,178,167,138,237,217,105,12,141,221,77,12,3,169,64\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[96,118,138,220,34,32,242,182,116,72,147,146,114,236,223,101,192,49,250,97,69,83,216,211,79,54,138,56,30,234,200,65]",
              "sol": "abi.encode(\"96,118,138,220,34,32,242,182,116,72,147,146,114,236,223,101,192,49,250,97,69,83,216,211,79,54,138,56,30,234,200,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.565ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.565ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.566ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.567ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.568ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.568ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.568ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.569ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.569ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"u35v7l\"",
              "sol": "\"u35v7l\""
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.570ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.570ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.570ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.571ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.571ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.572ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "[\"0\",\"[\",\"P\",\"[\",\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\",\"L\"]",
              "sol": "[string(\"0\"),string(\"[\"),string(\"P\"),string(\"[\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.572ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"lm7bes\"]",
              "sol": "[string(\"lm7bes\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.573ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.573ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"u35v7l\",\"0\",\"u35v7l\",\"0\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"u35v7l\"),string(\"0\"),string(\"u35v7l\"),string(\"0\")]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.575ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"[\"]",
              "sol": "[string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.575ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.575ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.576ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"lm7bes\"]",
              "sol": "[string(\"lm7bes\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.576ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"lm7bes\"",
              "sol": "\"lm7bes\""
            },
            {
              "js": "[\"[\",\"Capstones\"]",
              "sol": "[string(\"[\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.577ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"wm3a0b\",\"P\"]",
              "sol": "[string(\"wm3a0b\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.577ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"wm3a0b\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"wm3a0b\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.578ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"P\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"P\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.578ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"u35v7l\",\"lm7bes\",\"P\"]",
              "sol": "[string(\"u35v7l\"),string(\"lm7bes\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.579ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"L\",\"P\",\"lm7bes\"]",
              "sol": "[string(\"L\"),string(\"P\"),string(\"lm7bes\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.580ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"wm3a0b\",\"u35v7l\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"wm3a0b\"),string(\"u35v7l\")]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.580ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"u35v7l\"",
              "sol": "\"u35v7l\""
            },
            {
              "js": "[\"Capstones\",\"u35v7l\",\"0\"]",
              "sol": "[string(\"Capstones\"),string(\"u35v7l\"),string(\"0\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.581ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"1nba0s\",\"L\",\"lmtyb\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"1nba0s\"),string(\"L\"),string(\"lmtyb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.581ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"u35v7l\"",
              "sol": "\"u35v7l\""
            },
            {
              "js": "[\"[\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"[\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.582ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"P\",\"lm7bes\",\"lmtyb\",\"[\"]",
              "sol": "[string(\"P\"),string(\"lm7bes\"),string(\"lmtyb\"),string(\"[\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.582ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"lm7bes\",\"[\",\"Capstones\",\"0\"]",
              "sol": "[string(\"lm7bes\"),string(\"[\"),string(\"Capstones\"),string(\"0\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.583ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"L\",\"u35v7l\",\"[\",\"lm7bes\",\"P\"]",
              "sol": "[string(\"L\"),string(\"u35v7l\"),string(\"[\"),string(\"lm7bes\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.583ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\",\"lm7bes\",\"[\",\"lmtyb\",\"[\"]",
              "sol": "[string(\"L\"),string(\"lm7bes\"),string(\"[\"),string(\"lmtyb\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.584ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"g68o5g\"",
              "sol": "\"g68o5g\""
            },
            {
              "js": "[\"L\",\"wm3a0b\",\"P\",\"[\",\"u35v7l\"]",
              "sol": "[string(\"L\"),string(\"wm3a0b\"),string(\"P\"),string(\"[\"),string(\"u35v7l\")]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.584ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"g68o5g\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\",\"u35v7l\"]",
              "sol": "[string(\"g68o5g\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Transaction successfully verified.\"),string(\"u35v7l\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.585ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"u4185e\"",
              "sol": "\"u4185e\""
            },
            {
              "js": "[[98,29,218,199,116,191,30,43,214,255,173,110,252,221,186,228,196,33,247,167,17,129,212,231,28,53,43,87,36,168,2,138]]",
              "sol": "[bytes(abi.encode(\"98,29,218,199,116,191,30,43,214,255,173,110,252,221,186,228,196,33,247,167,17,129,212,231,28,53,43,87,36,168,2,138\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.586ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"u4185e\"",
              "sol": "\"u4185e\""
            },
            {
              "js": "[[89,199,160,227,93,176,135,188,22,227,246,250,11,48,166,106,184,196,21,3,116,166,51,194,164,147,65,90,15,205,139,152],[213,97,136,200,91,78,60,224,74,141,124,133,103,76,178,160,50,26,131,208,204,191,56,54,61,148,209,73,244,89,245,74],[155,157,235,107,112,76,60,80,142,12,96,198,208,253,37,7,167,182,0,11,162,3,51,65,139,213,79,255,138,133,114,0],[241,39,27,188,131,243,255,137,15,7,220,153,56,255,234,191,195,111,96,90,32,132,49,139,120,141,77,188,45,251,26,117],[147,173,100,103,55,97,89,140,66,28,136,8,45,98,97,215,186,53,223,148,148,166,23,194,149,97,137,43,73,87,44,22],[18,151,247,56,237,121,11,34,58,45,82,168,157,135,197,20,140,174,46,130,216,78,109,132,15,158,12,123,198,167,55,104],[183,29,59,47,92,71,153,163,121,210,112,128,147,55,226,240,21,216,42,124,13,107,125,227,240,193,58,59,158,192,249,47],[73,199,129,108,43,231,40,54,233,246,39,34,120,168,227,239,170,166,100,188,233,118,29,238,35,15,54,111,57,41,88,105],[226,172,12,24,79,214,16,145,190,158,57,117,193,160,172,9,57,26,225,33,217,72,97,106,191,187,185,232,128,62,33,5],[141,149,248,132,138,12,245,3,173,135,82,22,134,69,176,115,197,59,153,250,38,12,201,199,225,46,105,52,229,211,90,14]]",
              "sol": "[bytes(abi.encode(\"89,199,160,227,93,176,135,188,22,227,246,250,11,48,166,106,184,196,21,3,116,166,51,194,164,147,65,90,15,205,139,152\")),bytes(abi.encode(\"213,97,136,200,91,78,60,224,74,141,124,133,103,76,178,160,50,26,131,208,204,191,56,54,61,148,209,73,244,89,245,74\")),bytes(abi.encode(\"155,157,235,107,112,76,60,80,142,12,96,198,208,253,37,7,167,182,0,11,162,3,51,65,139,213,79,255,138,133,114,0\")),bytes(abi.encode(\"241,39,27,188,131,243,255,137,15,7,220,153,56,255,234,191,195,111,96,90,32,132,49,139,120,141,77,188,45,251,26,117\")),bytes(abi.encode(\"147,173,100,103,55,97,89,140,66,28,136,8,45,98,97,215,186,53,223,148,148,166,23,194,149,97,137,43,73,87,44,22\")),bytes(abi.encode(\"18,151,247,56,237,121,11,34,58,45,82,168,157,135,197,20,140,174,46,130,216,78,109,132,15,158,12,123,198,167,55,104\")),bytes(abi.encode(\"183,29,59,47,92,71,153,163,121,210,112,128,147,55,226,240,21,216,42,124,13,107,125,227,240,193,58,59,158,192,249,47\")),bytes(abi.encode(\"73,199,129,108,43,231,40,54,233,246,39,34,120,168,227,239,170,166,100,188,233,118,29,238,35,15,54,111,57,41,88,105\")),bytes(abi.encode(\"226,172,12,24,79,214,16,145,190,158,57,117,193,160,172,9,57,26,225,33,217,72,97,106,191,187,185,232,128,62,33,5\")),bytes(abi.encode(\"141,149,248,132,138,12,245,3,173,135,82,22,134,69,176,115,197,59,153,250,38,12,201,199,225,46,105,52,229,211,90,14\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.587ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[175,247,89,2,41,86,50,66,74,180,130,145,86,238,171,109,251,192,210,197,110,16,196,64,166,29,93,39,123,156,138,130]]",
              "sol": "[bytes(abi.encode(\"175,247,89,2,41,86,50,66,74,180,130,145,86,238,171,109,251,192,210,197,110,16,196,64,166,29,93,39,123,156,138,130\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.587ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"1nba0s\"",
              "sol": "\"1nba0s\""
            },
            {
              "js": "[[37,197,128,199,154,29,26,221,192,71,232,243,60,229,28,141,163,51,247,120,68,65,248,96,233,175,245,24,28,141,78,227],[98,235,138,7,175,4,74,31,26,28,169,212,191,129,250,131,184,127,0,199,233,249,70,216,193,161,136,206,195,179,221,51],[4,179,57,69,94,85,116,59,43,124,246,45,156,111,119,116,161,36,46,6,183,198,61,211,54,169,63,245,252,22,30,221],[234,205,70,129,121,208,251,83,80,69,222,130,170,143,100,135,255,249,143,168,208,243,22,99,150,243,55,31,32,142,67,215],[76,186,169,253,57,142,10,123,115,58,47,214,96,229,147,213,87,236,191,50,47,15,118,139,101,124,218,46,111,158,99,136],[108,121,48,70,197,223,36,26,58,186,13,59,123,14,60,171,181,194,41,82,148,200,14,116,156,132,193,146,87,111,113,71],[162,94,255,18,88,219,200,32,166,201,170,110,10,149,17,253,9,151,4,57,206,67,253,228,233,25,61,80,215,136,62,117],[71,125,176,32,72,100,127,127,211,179,144,86,218,248,220,151,14,83,234,0,1,168,192,51,250,125,165,111,13,24,186,228],[47,113,170,62,165,169,210,119,159,253,112,14,35,121,98,10,122,58,198,138,117,240,111,96,115,59,175,238,207,28,60,210]]",
              "sol": "[bytes(abi.encode(\"37,197,128,199,154,29,26,221,192,71,232,243,60,229,28,141,163,51,247,120,68,65,248,96,233,175,245,24,28,141,78,227\")),bytes(abi.encode(\"98,235,138,7,175,4,74,31,26,28,169,212,191,129,250,131,184,127,0,199,233,249,70,216,193,161,136,206,195,179,221,51\")),bytes(abi.encode(\"4,179,57,69,94,85,116,59,43,124,246,45,156,111,119,116,161,36,46,6,183,198,61,211,54,169,63,245,252,22,30,221\")),bytes(abi.encode(\"234,205,70,129,121,208,251,83,80,69,222,130,170,143,100,135,255,249,143,168,208,243,22,99,150,243,55,31,32,142,67,215\")),bytes(abi.encode(\"76,186,169,253,57,142,10,123,115,58,47,214,96,229,147,213,87,236,191,50,47,15,118,139,101,124,218,46,111,158,99,136\")),bytes(abi.encode(\"108,121,48,70,197,223,36,26,58,186,13,59,123,14,60,171,181,194,41,82,148,200,14,116,156,132,193,146,87,111,113,71\")),bytes(abi.encode(\"162,94,255,18,88,219,200,32,166,201,170,110,10,149,17,253,9,151,4,57,206,67,253,228,233,25,61,80,215,136,62,117\")),bytes(abi.encode(\"71,125,176,32,72,100,127,127,211,179,144,86,218,248,220,151,14,83,234,0,1,168,192,51,250,125,165,111,13,24,186,228\")),bytes(abi.encode(\"47,113,170,62,165,169,210,119,159,253,112,14,35,121,98,10,122,58,198,138,117,240,111,96,115,59,175,238,207,28,60,210\"))]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.588ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"on5thc\"",
              "sol": "\"on5thc\""
            },
            {
              "js": "[[93,131,255,112,209,252,19,154,148,75,24,33,115,213,11,211,118,248,9,215,68,64,134,223,128,218,241,178,47,67,108,146]]",
              "sol": "[bytes(abi.encode(\"93,131,255,112,209,252,19,154,148,75,24,33,115,213,11,211,118,248,9,215,68,64,134,223,128,218,241,178,47,67,108,146\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.589ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[224,9,83,88,251,222,72,189,138,112,155,33,32,47,99,207,243,155,185,127,178,135,112,165,188,188,192,236,5,4,128,121]]",
              "sol": "[bytes(abi.encode(\"224,9,83,88,251,222,72,189,138,112,155,33,32,47,99,207,243,155,185,127,178,135,112,165,188,188,192,236,5,4,128,121\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.589ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[13,82,166,64,222,89,194,5,47,78,147,145,78,183,244,85,69,227,101,111,57,255,235,142,162,244,14,0,118,205,179,146]]",
              "sol": "[bytes(abi.encode(\"13,82,166,64,222,89,194,5,47,78,147,145,78,183,244,85,69,227,101,111,57,255,235,142,162,244,14,0,118,205,179,146\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.590ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"u4185e\"",
              "sol": "\"u4185e\""
            },
            {
              "js": "[[30,77,165,124,234,183,152,122,53,109,254,86,38,241,176,58,239,49,207,47,120,190,99,20,234,120,38,218,157,133,133,5]]",
              "sol": "[bytes(abi.encode(\"30,77,165,124,234,183,152,122,53,109,254,86,38,241,176,58,239,49,207,47,120,190,99,20,234,120,38,218,157,133,133,5\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.591ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[171,198,191,242,19,65,102,220,62,28,34,151,41,27,77,252,239,92,32,194,174,243,87,161,52,1,23,177,248,17,55,105],[246,48,72,248,141,74,190,219,69,20,43,42,90,116,208,218,197,13,249,81,59,74,67,65,134,129,160,94,8,8,222,17]]",
              "sol": "[bytes(abi.encode(\"171,198,191,242,19,65,102,220,62,28,34,151,41,27,77,252,239,92,32,194,174,243,87,161,52,1,23,177,248,17,55,105\")),bytes(abi.encode(\"246,48,72,248,141,74,190,219,69,20,43,42,90,116,208,218,197,13,249,81,59,74,67,65,134,129,160,94,8,8,222,17\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.592ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[70,214,46,193,39,23,122,79,162,180,94,155,171,89,98,63,43,148,156,187,109,237,67,38,73,167,109,61,75,247,173,170],[237,210,13,170,225,57,90,33,36,121,205,158,52,218,20,227,58,118,85,69,127,188,171,136,91,144,230,83,144,59,254,153]]",
              "sol": "[bytes(abi.encode(\"70,214,46,193,39,23,122,79,162,180,94,155,171,89,98,63,43,148,156,187,109,237,67,38,73,167,109,61,75,247,173,170\")),bytes(abi.encode(\"237,210,13,170,225,57,90,33,36,121,205,158,52,218,20,227,58,118,85,69,127,188,171,136,91,144,230,83,144,59,254,153\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.592ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[130,52,154,57,41,236,218,144,251,37,72,227,112,3,52,30,75,220,14,59,1,195,83,119,183,5,73,46,172,5,95,247],[86,235,123,38,235,196,140,237,125,203,68,233,173,154,27,242,11,187,28,231,14,48,184,12,244,36,30,80,48,200,156,49]]",
              "sol": "[bytes(abi.encode(\"130,52,154,57,41,236,218,144,251,37,72,227,112,3,52,30,75,220,14,59,1,195,83,119,183,5,73,46,172,5,95,247\")),bytes(abi.encode(\"86,235,123,38,235,196,140,237,125,203,68,233,173,154,27,242,11,187,28,231,14,48,184,12,244,36,30,80,48,200,156,49\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.594ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "[[137,53,228,231,165,35,217,217,163,205,126,93,245,146,25,18,132,107,253,19,118,181,68,167,73,77,138,42,238,91,8,89],[133,75,243,196,49,146,70,69,31,21,117,206,187,105,172,67,152,99,178,224,218,91,93,230,147,150,134,72,96,24,4,213]]",
              "sol": "[bytes(abi.encode(\"137,53,228,231,165,35,217,217,163,205,126,93,245,146,25,18,132,107,253,19,118,181,68,167,73,77,138,42,238,91,8,89\")),bytes(abi.encode(\"133,75,243,196,49,146,70,69,31,21,117,206,187,105,172,67,152,99,178,224,218,91,93,230,147,150,134,72,96,24,4,213\"))]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.594ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"u4185e\"",
              "sol": "\"u4185e\""
            },
            {
              "js": "[[178,32,142,35,30,116,81,88,66,65,150,229,5,138,110,159,87,243,27,200,31,110,19,229,246,56,18,8,115,39,189,226],[202,93,50,228,203,238,200,38,27,8,67,120,190,42,249,62,67,109,84,79,234,85,216,163,177,1,113,254,222,136,176,19],[252,177,151,145,126,91,138,139,65,4,195,187,192,120,103,106,155,107,108,84,37,5,15,28,32,243,192,153,165,107,72,164]]",
              "sol": "[bytes(abi.encode(\"178,32,142,35,30,116,81,88,66,65,150,229,5,138,110,159,87,243,27,200,31,110,19,229,246,56,18,8,115,39,189,226\")),bytes(abi.encode(\"202,93,50,228,203,238,200,38,27,8,67,120,190,42,249,62,67,109,84,79,234,85,216,163,177,1,113,254,222,136,176,19\")),bytes(abi.encode(\"252,177,151,145,126,91,138,139,65,4,195,187,192,120,103,106,155,107,108,84,37,5,15,28,32,243,192,153,165,107,72,164\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.595ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"e88yy\"",
              "sol": "\"e88yy\""
            },
            {
              "js": "[[95,80,106,233,80,72,131,75,3,62,179,73,101,59,11,223,43,104,68,56,41,116,36,63,137,143,131,40,48,79,218,145],[105,251,71,109,181,84,62,123,116,20,221,162,16,7,161,200,117,202,98,155,222,84,16,99,214,59,122,218,103,151,74,255],[19,90,68,25,193,150,229,53,194,250,11,138,64,190,122,55,60,142,1,42,75,73,181,172,92,9,164,223,154,94,89,139]]",
              "sol": "[bytes(abi.encode(\"95,80,106,233,80,72,131,75,3,62,179,73,101,59,11,223,43,104,68,56,41,116,36,63,137,143,131,40,48,79,218,145\")),bytes(abi.encode(\"105,251,71,109,181,84,62,123,116,20,221,162,16,7,161,200,117,202,98,155,222,84,16,99,214,59,122,218,103,151,74,255\")),bytes(abi.encode(\"19,90,68,25,193,150,229,53,194,250,11,138,64,190,122,55,60,142,1,42,75,73,181,172,92,9,164,223,154,94,89,139\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.595ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[107,202,237,62,101,136,71,218,45,32,146,2,135,19,127,251,211,41,198,9,212,117,108,251,49,187,181,154,75,6,101,183],[74,113,157,149,193,243,55,239,172,5,252,23,55,42,99,87,168,228,59,229,108,54,40,60,166,17,207,112,52,199,153,61],[172,202,237,108,13,174,238,72,166,144,227,193,210,182,253,81,139,74,107,163,212,222,68,82,124,234,13,241,40,176,191,57]]",
              "sol": "[bytes(abi.encode(\"107,202,237,62,101,136,71,218,45,32,146,2,135,19,127,251,211,41,198,9,212,117,108,251,49,187,181,154,75,6,101,183\")),bytes(abi.encode(\"74,113,157,149,193,243,55,239,172,5,252,23,55,42,99,87,168,228,59,229,108,54,40,60,166,17,207,112,52,199,153,61\")),bytes(abi.encode(\"172,202,237,108,13,174,238,72,166,144,227,193,210,182,253,81,139,74,107,163,212,222,68,82,124,234,13,241,40,176,191,57\"))]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.596ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[215,123,49,244,86,147,191,179,109,90,136,159,13,133,172,190,219,217,246,47,218,234,8,6,36,64,114,149,188,116,41,137],[203,169,36,214,75,125,146,212,40,103,120,43,247,83,0,149,56,11,129,240,218,63,41,183,230,176,190,22,0,45,101,211],[166,100,134,21,73,182,253,210,49,191,202,58,193,248,233,7,159,252,25,229,164,215,25,226,104,94,160,123,36,213,115,135]]",
              "sol": "[bytes(abi.encode(\"215,123,49,244,86,147,191,179,109,90,136,159,13,133,172,190,219,217,246,47,218,234,8,6,36,64,114,149,188,116,41,137\")),bytes(abi.encode(\"203,169,36,214,75,125,146,212,40,103,120,43,247,83,0,149,56,11,129,240,218,63,41,183,230,176,190,22,0,45,101,211\")),bytes(abi.encode(\"166,100,134,21,73,182,253,210,49,191,202,58,193,248,233,7,159,252,25,229,164,215,25,226,104,94,160,123,36,213,115,135\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.597ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[2,156,26,200,9,100,203,229,18,0,118,101,82,94,160,235,180,201,247,124,21,19,249,43,30,75,220,199,41,111,233,121],[249,158,219,242,142,132,198,22,124,185,217,186,147,32,23,213,43,247,11,190,213,237,39,75,122,225,94,133,76,97,42,183],[46,209,221,49,220,253,51,94,172,37,249,197,72,40,37,249,212,205,155,143,24,38,193,224,203,113,141,221,247,50,107,151],[154,171,183,221,51,45,253,104,13,238,45,251,160,203,198,234,108,69,2,220,165,99,38,71,246,226,59,224,10,32,23,8]]",
              "sol": "[bytes(abi.encode(\"2,156,26,200,9,100,203,229,18,0,118,101,82,94,160,235,180,201,247,124,21,19,249,43,30,75,220,199,41,111,233,121\")),bytes(abi.encode(\"249,158,219,242,142,132,198,22,124,185,217,186,147,32,23,213,43,247,11,190,213,237,39,75,122,225,94,133,76,97,42,183\")),bytes(abi.encode(\"46,209,221,49,220,253,51,94,172,37,249,197,72,40,37,249,212,205,155,143,24,38,193,224,203,113,141,221,247,50,107,151\")),bytes(abi.encode(\"154,171,183,221,51,45,253,104,13,238,45,251,160,203,198,234,108,69,2,220,165,99,38,71,246,226,59,224,10,32,23,8\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.597ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"lmtyb\"",
              "sol": "\"lmtyb\""
            },
            {
              "js": "[[242,71,111,244,202,33,34,33,146,19,43,188,230,55,195,232,220,84,37,121,73,88,253,157,20,248,147,169,84,70,172,118],[126,52,51,214,41,98,139,104,40,225,42,198,67,254,122,203,136,37,93,199,37,201,192,115,37,34,170,98,43,121,142,240],[150,105,180,162,71,9,64,187,251,48,225,240,19,157,254,214,90,14,24,83,56,55,213,76,244,179,90,225,190,58,176,226],[122,16,71,184,176,93,26,99,148,139,68,212,246,212,149,49,121,70,174,73,189,240,165,24,64,134,62,152,186,60,190,2]]",
              "sol": "[bytes(abi.encode(\"242,71,111,244,202,33,34,33,146,19,43,188,230,55,195,232,220,84,37,121,73,88,253,157,20,248,147,169,84,70,172,118\")),bytes(abi.encode(\"126,52,51,214,41,98,139,104,40,225,42,198,67,254,122,203,136,37,93,199,37,201,192,115,37,34,170,98,43,121,142,240\")),bytes(abi.encode(\"150,105,180,162,71,9,64,187,251,48,225,240,19,157,254,214,90,14,24,83,56,55,213,76,244,179,90,225,190,58,176,226\")),bytes(abi.encode(\"122,16,71,184,176,93,26,99,148,139,68,212,246,212,149,49,121,70,174,73,189,240,165,24,64,134,62,152,186,60,190,2\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.598ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[204,93,8,41,232,9,167,86,228,226,0,195,40,131,144,210,154,221,210,246,155,131,159,23,13,125,7,27,16,187,200,199],[89,191,155,197,99,170,36,104,97,122,173,231,254,57,220,1,196,51,59,19,198,89,183,144,19,27,152,237,63,150,8,9],[184,104,82,198,127,233,41,121,246,141,113,253,151,99,224,85,212,158,158,147,136,90,40,200,188,193,32,230,205,104,98,96],[150,72,11,42,30,240,147,247,145,107,123,63,109,61,194,230,67,13,103,67,64,215,133,87,136,126,250,51,213,47,148,30]]",
              "sol": "[bytes(abi.encode(\"204,93,8,41,232,9,167,86,228,226,0,195,40,131,144,210,154,221,210,246,155,131,159,23,13,125,7,27,16,187,200,199\")),bytes(abi.encode(\"89,191,155,197,99,170,36,104,97,122,173,231,254,57,220,1,196,51,59,19,198,89,183,144,19,27,152,237,63,150,8,9\")),bytes(abi.encode(\"184,104,82,198,127,233,41,121,246,141,113,253,151,99,224,85,212,158,158,147,136,90,40,200,188,193,32,230,205,104,98,96\")),bytes(abi.encode(\"150,72,11,42,30,240,147,247,145,107,123,63,109,61,194,230,67,13,103,67,64,215,133,87,136,126,250,51,213,47,148,30\"))]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.599ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"me41cl\"",
              "sol": "\"me41cl\""
            },
            {
              "js": "[[171,112,86,188,224,81,49,159,186,201,88,224,137,69,14,147,121,101,250,108,110,210,119,93,255,120,65,244,215,120,94,132],[172,196,153,211,22,207,97,30,102,67,87,17,104,96,89,223,23,118,197,65,233,202,175,92,223,179,170,32,0,138,249,91],[100,13,212,159,92,203,119,94,226,94,87,24,12,78,188,120,54,68,245,212,208,33,71,211,114,22,61,236,24,183,194,24],[114,215,217,49,72,26,131,143,170,157,119,179,223,223,0,75,226,62,135,49,110,1,131,189,134,111,5,187,39,92,233,48]]",
              "sol": "[bytes(abi.encode(\"171,112,86,188,224,81,49,159,186,201,88,224,137,69,14,147,121,101,250,108,110,210,119,93,255,120,65,244,215,120,94,132\")),bytes(abi.encode(\"172,196,153,211,22,207,97,30,102,67,87,17,104,96,89,223,23,118,197,65,233,202,175,92,223,179,170,32,0,138,249,91\")),bytes(abi.encode(\"100,13,212,159,92,203,119,94,226,94,87,24,12,78,188,120,54,68,245,212,208,33,71,211,114,22,61,236,24,183,194,24\")),bytes(abi.encode(\"114,215,217,49,72,26,131,143,170,157,119,179,223,223,0,75,226,62,135,49,110,1,131,189,134,111,5,187,39,92,233,48\"))]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.599ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[184,59,42,216,141,40,44,104,158,77,55,208,35,176,39,57,124,243,13,93,34,205,178,87,7,207,146,142,177,136,167,134],[210,163,126,32,225,35,148,78,36,107,77,186,47,212,249,175,134,157,204,139,89,95,157,90,16,95,48,194,70,26,74,155],[58,84,103,79,42,31,96,207,6,69,182,244,146,79,238,153,252,137,218,187,244,23,212,85,31,80,16,218,121,104,236,120],[247,108,1,59,111,192,226,44,129,101,251,96,106,171,36,48,100,117,234,194,55,95,107,241,244,203,150,243,83,44,220,138],[166,12,233,238,55,112,235,176,43,32,222,160,246,26,23,3,205,53,11,173,250,96,112,227,124,129,71,16,175,14,1,214]]",
              "sol": "[bytes(abi.encode(\"184,59,42,216,141,40,44,104,158,77,55,208,35,176,39,57,124,243,13,93,34,205,178,87,7,207,146,142,177,136,167,134\")),bytes(abi.encode(\"210,163,126,32,225,35,148,78,36,107,77,186,47,212,249,175,134,157,204,139,89,95,157,90,16,95,48,194,70,26,74,155\")),bytes(abi.encode(\"58,84,103,79,42,31,96,207,6,69,182,244,146,79,238,153,252,137,218,187,244,23,212,85,31,80,16,218,121,104,236,120\")),bytes(abi.encode(\"247,108,1,59,111,192,226,44,129,101,251,96,106,171,36,48,100,117,234,194,55,95,107,241,244,203,150,243,83,44,220,138\")),bytes(abi.encode(\"166,12,233,238,55,112,235,176,43,32,222,160,246,26,23,3,205,53,11,173,250,96,112,227,124,129,71,16,175,14,1,214\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.600ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[69,10,243,133,21,92,0,113,37,50,12,91,254,110,248,69,216,187,27,178,125,78,33,83,53,220,103,218,111,94,110,117],[195,27,194,95,95,241,129,104,213,149,75,234,226,231,86,37,52,121,56,44,21,132,70,199,169,57,23,146,197,132,185,43],[115,199,186,46,115,34,214,55,171,139,223,118,253,22,181,208,145,36,108,162,150,82,97,149,73,5,39,123,115,242,229,8],[207,106,188,26,1,64,234,183,240,144,0,113,226,5,103,70,131,141,176,210,30,117,203,189,58,111,229,199,232,206,143,52],[129,40,98,105,37,152,153,219,186,142,128,180,126,199,21,153,72,48,108,208,51,103,162,196,92,0,194,70,51,87,49,73]]",
              "sol": "[bytes(abi.encode(\"69,10,243,133,21,92,0,113,37,50,12,91,254,110,248,69,216,187,27,178,125,78,33,83,53,220,103,218,111,94,110,117\")),bytes(abi.encode(\"195,27,194,95,95,241,129,104,213,149,75,234,226,231,86,37,52,121,56,44,21,132,70,199,169,57,23,146,197,132,185,43\")),bytes(abi.encode(\"115,199,186,46,115,34,214,55,171,139,223,118,253,22,181,208,145,36,108,162,150,82,97,149,73,5,39,123,115,242,229,8\")),bytes(abi.encode(\"207,106,188,26,1,64,234,183,240,144,0,113,226,5,103,70,131,141,176,210,30,117,203,189,58,111,229,199,232,206,143,52\")),bytes(abi.encode(\"129,40,98,105,37,152,153,219,186,142,128,180,126,199,21,153,72,48,108,208,51,103,162,196,92,0,194,70,51,87,49,73\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.601ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[191,112,155,147,254,164,169,4,65,251,221,95,178,118,190,139,65,216,68,245,158,96,68,233,26,69,12,18,207,164,62,128],[169,147,227,210,38,116,94,143,18,157,59,228,179,10,60,22,196,98,23,203,85,4,229,82,65,245,51,204,161,251,137,228],[188,87,159,221,28,244,47,254,179,90,233,186,29,209,53,52,226,55,113,79,40,18,64,147,99,148,213,253,73,117,83,79],[82,84,23,189,192,125,4,247,19,252,248,127,209,218,108,253,119,248,114,239,160,208,243,17,100,55,179,115,227,53,99,132],[171,5,132,96,20,237,205,31,68,169,0,185,225,82,77,175,213,104,28,117,1,167,110,169,159,102,117,209,176,52,201,142]]",
              "sol": "[bytes(abi.encode(\"191,112,155,147,254,164,169,4,65,251,221,95,178,118,190,139,65,216,68,245,158,96,68,233,26,69,12,18,207,164,62,128\")),bytes(abi.encode(\"169,147,227,210,38,116,94,143,18,157,59,228,179,10,60,22,196,98,23,203,85,4,229,82,65,245,51,204,161,251,137,228\")),bytes(abi.encode(\"188,87,159,221,28,244,47,254,179,90,233,186,29,209,53,52,226,55,113,79,40,18,64,147,99,148,213,253,73,117,83,79\")),bytes(abi.encode(\"82,84,23,189,192,125,4,247,19,252,248,127,209,218,108,253,119,248,114,239,160,208,243,17,100,55,179,115,227,53,99,132\")),bytes(abi.encode(\"171,5,132,96,20,237,205,31,68,169,0,185,225,82,77,175,213,104,28,117,1,167,110,169,159,102,117,209,176,52,201,142\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.601ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[127,44,220,60,186,164,254,83,74,252,91,4,173,149,120,99,25,111,120,35,173,19,82,122,147,213,98,122,219,159,233,184],[111,214,62,146,135,7,54,35,60,247,50,120,98,0,104,221,135,177,95,125,95,242,211,102,250,157,173,110,37,254,194,145],[107,60,245,213,166,239,236,164,210,209,5,13,24,32,87,153,75,107,76,51,153,130,47,14,81,101,229,227,184,208,169,243],[64,108,124,242,135,209,16,83,144,139,117,46,191,12,32,71,78,208,191,204,153,186,59,41,14,150,58,150,120,133,213,203],[131,160,187,249,142,143,21,208,90,47,16,36,71,65,29,1,96,168,51,190,81,153,222,169,8,69,176,174,182,96,88,56]]",
              "sol": "[bytes(abi.encode(\"127,44,220,60,186,164,254,83,74,252,91,4,173,149,120,99,25,111,120,35,173,19,82,122,147,213,98,122,219,159,233,184\")),bytes(abi.encode(\"111,214,62,146,135,7,54,35,60,247,50,120,98,0,104,221,135,177,95,125,95,242,211,102,250,157,173,110,37,254,194,145\")),bytes(abi.encode(\"107,60,245,213,166,239,236,164,210,209,5,13,24,32,87,153,75,107,76,51,153,130,47,14,81,101,229,227,184,208,169,243\")),bytes(abi.encode(\"64,108,124,242,135,209,16,83,144,139,117,46,191,12,32,71,78,208,191,204,153,186,59,41,14,150,58,150,120,133,213,203\")),bytes(abi.encode(\"131,160,187,249,142,143,21,208,90,47,16,36,71,65,29,1,96,168,51,190,81,153,222,169,8,69,176,174,182,96,88,56\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.602ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[35]",
              "sol": "bytes1(\"35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.602ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.603ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.603ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.603ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.604ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"847kz\"",
              "sol": "\"847kz\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.604ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.604ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.605ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"w53lc\"",
              "sol": "\"w53lc\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.605ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"g68o5g\"",
              "sol": "\"g68o5g\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.605ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"1nba0s\"",
              "sol": "\"1nba0s\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"u35v7l\"",
              "sol": "\"u35v7l\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.606ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"847kz\"",
              "sol": "\"847kz\""
            },
            {
              "js": "\"e88yy\"",
              "sol": "\"e88yy\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.607ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"u35v7l\"",
              "sol": "\"u35v7l\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.607ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"w53lc\"",
              "sol": "\"w53lc\""
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.609ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.609ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"i5ti0k\"",
              "sol": "\"i5ti0k\""
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.611ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.612ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"0\",\"847kz\",\"w53lc\",\"u4185e\",\"Capstones\",\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"0\"),string(\"847kz\"),string(\"w53lc\"),string(\"u4185e\"),string(\"Capstones\"),string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.613ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[26,136,129,141,187,168,173,189,184,88,209,27,55,55,127,25,163,234,141,181,24,203,86,146,250,216,173,217,89,122,139,87],[148,73,152,179,244,146,30,189,26,85,112,26,15,66,130,149,63,145,53,59,166,2,19,254,129,35,56,156,131,60,67,148]]",
              "sol": "[bytes(abi.encode(\"26,136,129,141,187,168,173,189,184,88,209,27,55,55,127,25,163,234,141,181,24,203,86,146,250,216,173,217,89,122,139,87\")),bytes(abi.encode(\"148,73,152,179,244,146,30,189,26,85,112,26,15,66,130,149,63,145,53,59,166,2,19,254,129,35,56,156,131,60,67,148\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.613ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.614ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[26,191,233,4,200,17,2,92,230,1,88,225,169,180,10,209,81,105,64,56,218,249,219,159,52,148,7,5,233,20,167,99]",
              "sol": "stringToBytes32(\"26,191,233,4,200,17,2,92,230,1,88,225,169,180,10,209,81,105,64,56,218,249,219,159,52,148,7,5,233,20,167,99\")"
            },
            {
              "js": "[78,125,225,17,164,234,34,179,15,218,82,255,16,8,34,248,215,252,32,241,141,109,150,74,136,187,77,174,209,17,1,109]",
              "sol": "stringToBytes32(\"78,125,225,17,164,234,34,179,15,218,82,255,16,8,34,248,215,252,32,241,141,109,150,74,136,187,77,174,209,17,1,109\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.614ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[245,154,165,30,123,245,12,77,112,229,122,179,5,16,216,136,75,135,69,12,19,28,196,211,243,92,199,109,63,114,22,119]",
              "sol": "stringToBytes32(\"245,154,165,30,123,245,12,77,112,229,122,179,5,16,216,136,75,135,69,12,19,28,196,211,243,92,199,109,63,114,22,119\")"
            },
            {
              "js": "[202,148,99,244,33,105,51,35,121,204,152,179,137,24,237,145,253,167,1,217,218,92,179,68,71,251,31,173,113,136,215,35]",
              "sol": "abi.encode(\"202,148,99,244,33,105,51,35,121,204,152,179,137,24,237,145,253,167,1,217,218,92,179,68,71,251,31,173,113,136,215,35\")"
            },
            {
              "js": "[208,255,2,155,201,145,210,58,60,63,223,177,45,138,61,126,166,199,121,65,201,224,98,47,221,146,209,88,174,186,136,58]",
              "sol": "abi.encode(\"208,255,2,155,201,145,210,58,60,63,223,177,45,138,61,126,166,199,121,65,201,224,98,47,221,146,209,88,174,186,136,58\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.615ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[131,83,254,216,20,19,82,246,111,155,135,205,119,4,60,163,254,138,114,58,133,231,2,130,226,3,6,183,110,43,70,91]",
              "sol": "abi.encode(\"131,83,254,216,20,19,82,246,111,155,135,205,119,4,60,163,254,138,114,58,133,231,2,130,226,3,6,183,110,43,70,91\")"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[149,207,224,142,221,152,45,25,78,37,110,211,43,205,67,227,122,197,4,204,184,133,252,58,47,139,188,10,189,181,193,77]",
              "sol": "abi.encode(\"149,207,224,142,221,152,45,25,78,37,110,211,43,205,67,227,122,197,4,204,184,133,252,58,47,139,188,10,189,181,193,77\")"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.616ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[75,105,11,87,132,207,100,182,185,65,214,132,42,198,0,198,162,64,77,226,179,159,155,131,44,72,227,74,184,103,7,148]",
              "sol": "stringToBytes32(\"75,105,11,87,132,207,100,182,185,65,214,132,42,198,0,198,162,64,77,226,179,159,155,131,44,72,227,74,184,103,7,148\")"
            },
            {
              "js": "\"1nba0s\"",
              "sol": "\"1nba0s\""
            },
            {
              "js": "[69,85,114,10,252,138,175,140,217,178,8,131,4,144,231,229,104,149,50,184,158,106,150,222,24,194,184,73,50,178,207,141]",
              "sol": "abi.encode(\"69,85,114,10,252,138,175,140,217,178,8,131,4,144,231,229,104,149,50,184,158,106,150,222,24,194,184,73,50,178,207,141\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[201,216,14,42,56,194,179,161,55,241,75,77,116,146,148,116,114,204,8,159,205,24,56,72,61,109,51,53,193,224,250,85]",
              "sol": "stringToBytes32(\"201,216,14,42,56,194,179,161,55,241,75,77,116,146,148,116,114,204,8,159,205,24,56,72,61,109,51,53,193,224,250,85\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[135,237,173,51,140,127,51,64,97,46,91,208,82,68,183,7,28,33,203,17,219,242,126,7,81,118,75,141,61,237,107,78]",
              "sol": "abi.encode(\"135,237,173,51,140,127,51,64,97,46,91,208,82,68,183,7,28,33,203,17,219,242,126,7,81,118,75,141,61,237,107,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.617ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[2,0,205,42,229,213,116,237,141,52,191,164,109,74,26,134,86,89,192,173,233,122,136,167,202,82,27,204,147,97,140,129]",
              "sol": "stringToBytes32(\"2,0,205,42,229,213,116,237,141,52,191,164,109,74,26,134,86,89,192,173,233,122,136,167,202,82,27,204,147,97,140,129\")"
            },
            {
              "js": "[52,240,110,85,162,114,253,54,85,241,2,124,127,87,210,78,174,57,2,244,3,105,204,90,210,37,199,156,142,185,81,105]",
              "sol": "abi.encode(\"52,240,110,85,162,114,253,54,85,241,2,124,127,87,210,78,174,57,2,244,3,105,204,90,210,37,199,156,142,185,81,105\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[2,0,205,42,229,213,116,237,141,52,191,164,109,74,26,134,86,89,192,173,233,122,136,167,202,82,27,204,147,97,140,129]",
                "sol": "stringToBytes32(\"2,0,205,42,229,213,116,237,141,52,191,164,109,74,26,134,86,89,192,173,233,122,136,167,202,82,27,204,147,97,140,129\")"
              },
              {
                "js": "[240,87,63,226,239,119,117,80,196,15,162,36,210,42,115,239,126,170,0,52,215,69,4,216,14,246,90,177,37,254,159,17,20]",
                "sol": "bytes33(\"240,87,63,226,239,119,117,80,196,15,162,36,210,42,115,239,126,170,0,52,215,69,4,216,14,246,90,177,37,254,159,17,20\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.618ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[26,164,28,62,109,229,44,211,232,106,143,55,241,172,213,73,68,95,171,201,159,57,36,200,78,213,30,202,71,8,23,215]",
              "sol": "abi.encode(\"26,164,28,62,109,229,44,211,232,106,143,55,241,172,213,73,68,95,171,201,159,57,36,200,78,213,30,202,71,8,23,215\")"
            },
            {
              "js": "[209,222,61,238,229,153,78,245,220,43,170,167,63,135,8,50,249,53,147,34,8,114,47,123,133,83,31,24,215,110,73,125]",
              "sol": "stringToBytes32(\"209,222,61,238,229,153,78,245,220,43,170,167,63,135,8,50,249,53,147,34,8,114,47,123,133,83,31,24,215,110,73,125\")"
            },
            {
              "js": "[177,156,52,14,120,208,26,50,218,255,142,213,137,26,239,94,134,14,46,109,200,69,125,177,62,56,88,250,210,207,239,171]",
              "sol": "abi.encode(\"177,156,52,14,120,208,26,50,218,255,142,213,137,26,239,94,134,14,46,109,200,69,125,177,62,56,88,250,210,207,239,171\")"
            },
            {
              "js": "\"on5thc\"",
              "sol": "\"on5thc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[131,162,118,117,141,93,164,249,128,168,18,44,222,32,33,216,97,214,252,215,94,14,188,118,199,17,33,181,110,31,17,169]",
              "sol": "abi.encode(\"131,162,118,117,141,93,164,249,128,168,18,44,222,32,33,216,97,214,252,215,94,14,188,118,199,17,33,181,110,31,17,169\")"
            },
            {
              "js": "[193,242,243,32,212,190,237,78,87,194,42,11,166,152,49,35,132,144,164,192,202,167,40,242,76,248,212,89,186,178,106,11]",
              "sol": "stringToBytes32(\"193,242,243,32,212,190,237,78,87,194,42,11,166,152,49,35,132,144,164,192,202,167,40,242,76,248,212,89,186,178,106,11\")"
            },
            {
              "js": "[215,151,244,129,238,245,8,66,193,84,118,20,113,224,151,197,154,46,115,65,104,177,14,135,235,104,164,170,115,229,231,102]",
              "sol": "abi.encode(\"215,151,244,129,238,245,8,66,193,84,118,20,113,224,151,197,154,46,115,65,104,177,14,135,235,104,164,170,115,229,231,102\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[23,30,254,12,6,232,42,200,192,221,99,138,169,37,123,250,35,180,244,113,167,57,175,203,85,209,204,53,147,139,58,67]",
              "sol": "abi.encode(\"23,30,254,12,6,232,42,200,192,221,99,138,169,37,123,250,35,180,244,113,167,57,175,203,85,209,204,53,147,139,58,67\")"
            },
            {
              "js": "[214,190,171,236,98,57,7,94,242,33,177,143,72,99,146,213,108,58,86,38,23,234,147,73,193,74,166,164,2,179,209,20]",
              "sol": "stringToBytes32(\"214,190,171,236,98,57,7,94,242,33,177,143,72,99,146,213,108,58,86,38,23,234,147,73,193,74,166,164,2,179,209,20\")"
            },
            {
              "js": "[147,63,161,188,178,242,211,50,187,229,10,134,120,209,236,243,61,245,77,49,231,54,237,134,117,210,22,209,50,87,30,154]",
              "sol": "abi.encode(\"147,63,161,188,178,242,211,50,187,229,10,134,120,209,236,243,61,245,77,49,231,54,237,134,117,210,22,209,50,87,30,154\")"
            },
            {
              "js": "\"on5thc\"",
              "sol": "\"on5thc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[51,140,57,48,37,74,40,164,11,194,210,251,16,4,226,89,209,187,248,8,207,144,160,33,238,22,202,106,93,178,238,218]",
              "sol": "abi.encode(\"51,140,57,48,37,74,40,164,11,194,210,251,16,4,226,89,209,187,248,8,207,144,160,33,238,22,202,106,93,178,238,218\")"
            },
            {
              "js": "[73,1,243,166,54,50,88,113,230,162,58,202,214,33,193,132,32,249,243,5,154,212,127,134,11,30,98,212,160,53,87,16]",
              "sol": "stringToBytes32(\"73,1,243,166,54,50,88,113,230,162,58,202,214,33,193,132,32,249,243,5,154,212,127,134,11,30,98,212,160,53,87,16\")"
            },
            {
              "js": "[253,183,23,2,138,202,251,95,246,91,107,166,156,5,46,132,154,154,39,237,94,105,151,194,99,110,122,152,221,31,69,172]",
              "sol": "abi.encode(\"253,183,23,2,138,202,251,95,246,91,107,166,156,5,46,132,154,154,39,237,94,105,151,194,99,110,122,152,221,31,69,172\")"
            },
            {
              "js": "\"wm3a0b\"",
              "sol": "\"wm3a0b\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[214,133,64,226,163,255,164,97,163,35,247,166,181,120,34,190,82,97,169,109,242,31,44,154,115,152,5,204,57,20,190,176]",
              "sol": "abi.encode(\"214,133,64,226,163,255,164,97,163,35,247,166,181,120,34,190,82,97,169,109,242,31,44,154,115,152,5,204,57,20,190,176\")"
            },
            {
              "js": "[109,254,74,107,42,89,200,143,232,53,75,19,213,37,174,65,225,240,178,155,79,66,174,97,56,160,36,200,237,65,239,57]",
              "sol": "stringToBytes32(\"109,254,74,107,42,89,200,143,232,53,75,19,213,37,174,65,225,240,178,155,79,66,174,97,56,160,36,200,237,65,239,57\")"
            },
            {
              "js": "[73,73,81,163,130,205,75,113,68,86,221,43,88,23,240,189,31,42,167,155,150,188,15,254,251,245,243,154,38,254,143,229]",
              "sol": "abi.encode(\"73,73,81,163,130,205,75,113,68,86,221,43,88,23,240,189,31,42,167,155,150,188,15,254,251,245,243,154,38,254,143,229\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[61,132,212,155,249,145,108,233,71,67,20,42,67,198,131,250,245,152,134,38,111,113,193,114,199,3,230,126,54,226,135,197]",
              "sol": "abi.encode(\"61,132,212,155,249,145,108,233,71,67,20,42,67,198,131,250,245,152,134,38,111,113,193,114,199,3,230,126,54,226,135,197\")"
            },
            {
              "js": "[222,40,255,136,237,15,31,170,85,177,107,220,64,43,97,77,133,101,170,42,197,161,245,97,78,73,121,35,13,171,124,136]",
              "sol": "stringToBytes32(\"222,40,255,136,237,15,31,170,85,177,107,220,64,43,97,77,133,101,170,42,197,161,245,97,78,73,121,35,13,171,124,136\")"
            },
            {
              "js": "[180,93,142,206,81,201,167,83,40,77,177,123,143,36,101,202,166,200,117,157,179,111,83,106,0,33,204,228,119,231,123,51]",
              "sol": "abi.encode(\"180,93,142,206,81,201,167,83,40,77,177,123,143,36,101,202,166,200,117,157,179,111,83,106,0,33,204,228,119,231,123,51\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[42,235,208,18,179,192,229,1,219,171,213,127,91,86,31,231,117,193,90,23,219,251,120,195,1,206,241,214,1,254,249,117]",
              "sol": "abi.encode(\"42,235,208,18,179,192,229,1,219,171,213,127,91,86,31,231,117,193,90,23,219,251,120,195,1,206,241,214,1,254,249,117\")"
            },
            {
              "js": "[125,210,210,82,225,123,83,240,139,21,23,81,54,68,107,128,250,80,1,157,237,144,94,208,129,177,21,199,154,173,249,84]",
              "sol": "stringToBytes32(\"125,210,210,82,225,123,83,240,139,21,23,81,54,68,107,128,250,80,1,157,237,144,94,208,129,177,21,199,154,173,249,84\")"
            },
            {
              "js": "[194,210,38,120,100,192,68,16,155,9,111,19,174,227,233,73,86,15,13,228,223,160,118,147,46,55,7,157,4,217,56,147]",
              "sol": "abi.encode(\"194,210,38,120,100,192,68,16,155,9,111,19,174,227,233,73,86,15,13,228,223,160,118,147,46,55,7,157,4,217,56,147\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[22,67,149,4,238,187,57,105,117,201,161,247,102,69,133,55,5,168,152,231,248,18,224,35,248,234,51,241,157,166,103,145]",
              "sol": "abi.encode(\"22,67,149,4,238,187,57,105,117,201,161,247,102,69,133,55,5,168,152,231,248,18,224,35,248,234,51,241,157,166,103,145\")"
            },
            {
              "js": "[241,73,195,235,210,130,251,61,172,127,63,132,24,132,194,29,17,125,119,212,97,166,10,239,234,62,33,7,164,255,247,120]",
              "sol": "stringToBytes32(\"241,73,195,235,210,130,251,61,172,127,63,132,24,132,194,29,17,125,119,212,97,166,10,239,234,62,33,7,164,255,247,120\")"
            },
            {
              "js": "[94,170,116,43,195,237,77,20,73,73,34,116,87,89,166,223,193,73,46,157,120,121,94,133,58,101,117,88,235,88,153,15]",
              "sol": "abi.encode(\"94,170,116,43,195,237,77,20,73,73,34,116,87,89,166,223,193,73,46,157,120,121,94,133,58,101,117,88,235,88,153,15\")"
            },
            {
              "js": "\"me41cl\"",
              "sol": "\"me41cl\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.627ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[49,78,172,31,197,78,203,0,59,24,20,255,167,36,255,120,100,212,98,224,6,53,254,254,198,59,235,244,11,99,27,73]",
              "sol": "abi.encode(\"49,78,172,31,197,78,203,0,59,24,20,255,167,36,255,120,100,212,98,224,6,53,254,254,198,59,235,244,11,99,27,73\")"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[137,170,34,156,201,68,127,90,173,99,13,120,85,168,158,138,202,9,185,33,35,42,189,10,216,236,129,244,111,105,169,228]",
              "sol": "abi.encode(\"137,170,34,156,201,68,127,90,173,99,13,120,85,168,158,138,202,9,185,33,35,42,189,10,216,236,129,244,111,105,169,228\")"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.628ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[91,70,164,104,167,213,22,42,245,117,219,77,3,173,252,227,66,71,181,73,157,112,45,98,93,39,142,236,170,162,215,228]",
              "sol": "stringToBytes32(\"91,70,164,104,167,213,22,42,245,117,219,77,3,173,252,227,66,71,181,73,157,112,45,98,93,39,142,236,170,162,215,228\")"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "[134,150,177,233,16,20,196,71,219,229,243,22,225,66,238,149,194,61,148,133,24,79,74,131,139,97,30,210,48,216,222,136]",
              "sol": "stringToBytes32(\"134,150,177,233,16,20,196,71,219,229,243,22,225,66,238,149,194,61,148,133,24,79,74,131,139,97,30,210,48,216,222,136\")"
            },
            {
              "js": "[228,54,160,47,30,116,112,217,114,49,232,30,139,86,225,167,91,228,157,144,234,158,146,1,54,201,191,187,167,40,201,17]",
              "sol": "stringToBytes32(\"228,54,160,47,30,116,112,217,114,49,232,30,139,86,225,167,91,228,157,144,234,158,146,1,54,201,191,187,167,40,201,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.629ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[240,99,206,143,28,17,235,132,189,110,160,139,217,254,56,72,228,236,180,199,250,228,191,102,197,175,126,127,221,224,196,161]",
              "sol": "stringToBytes32(\"240,99,206,143,28,17,235,132,189,110,160,139,217,254,56,72,228,236,180,199,250,228,191,102,197,175,126,127,221,224,196,161\")"
            },
            {
              "js": "[133,16,125,97,219,43,12,133,218,204,159]",
              "sol": "abi.encode(\"133,16,125,97,219,43,12,133,218,204,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[207,194,189,37,229,253,243,76,242,17,102,140,201,143,237,48,157,68,213,37,18,102,188,185,109,33,222,179,2,232,149,2]",
              "sol": "stringToBytes32(\"207,194,189,37,229,253,243,76,242,17,102,140,201,143,237,48,157,68,213,37,18,102,188,185,109,33,222,179,2,232,149,2\")"
            },
            {
              "js": "[94,89,29,164,69,229,154,111,109,129,96,35,201,96,255,159,108,128,218,68,81,85,218,228,204,35,80,157,143,29,204,107,43,8,115,26,71,145,128,225,8,203,62,156,7,136,248,203,203,210,254,11,154,103,71,125,27,135,231,138,146,245,207,172,72]",
              "sol": "abi.encode(\"94,89,29,164,69,229,154,111,109,129,96,35,201,96,255,159,108,128,218,68,81,85,218,228,204,35,80,157,143,29,204,107,43,8,115,26,71,145,128,225,8,203,62,156,7,136,248,203,203,210,254,11,154,103,71,125,27,135,231,138,146,245,207,172,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.630ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.633ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[10,95]",
              "sol": "[uint(10),uint(95)]"
            },
            {
              "js": "[[57,9],[17,10]]",
              "sol": "[[uint(57),uint(9)],[uint(17),uint(10)]]"
            },
            {
              "js": "[60,24]",
              "sol": "[uint(60),uint(24)]"
            },
            {
              "js": "[87,2014223714]",
              "sol": "[uint(87),uint(2014223714)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.637ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.637ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[1023]",
              "sol": "[uint(1023)]"
            },
            {
              "js": "{\"A\": {\"X\": 6,\"Y\": 128},\"B\": {\"X\": [45,60],\"Y\": [257,1]},\"C\": {\"X\": 199999,\"Y\": 128}}",
              "sol": "Verifier.Proof(Pairing.G1Point(6,128),Pairing.G2Point([uint(45),uint(60)],[uint(257),uint(1)]),Pairing.G1Point(199999,128))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[58,1532892064]",
              "sol": "[uint(58),uint(1532892064)]"
            },
            {
              "js": "{\"A\": {\"X\": 1,\"Y\": 11},\"B\": {\"X\": [61,69],\"Y\": [61,254]},\"C\": {\"X\": 25,\"Y\": 64}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1,11),Pairing.G2Point([uint(61),uint(69)],[uint(61),uint(254)]),Pairing.G1Point(25,64))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.641ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.641ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.641ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.644ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.644ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "accounts[2]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.645ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.645ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.647ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.648ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[240,111,128,160,253,252,148,191,255,161,148,226,79,65,59,242,155,174,138,141,37,132,167,86,249,14,14,160,127,76,137,142]",
              "sol": "abi.encode(\"240,111,128,160,253,252,148,191,255,161,148,226,79,65,59,242,155,174,138,141,37,132,167,86,249,14,14,160,127,76,137,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[240,111,128,160,253,252,148,191,255,161,148,226,79,65,59,242,155,174,138,141,37,132,167,86,249,14,14,160,127,76,137,142]",
                "sol": "abi.encode(\"240,111,128,160,253,252,148,191,255,161,148,226,79,65,59,242,155,174,138,141,37,132,167,86,249,14,14,160,127,76,137,142\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.650ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.651ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[99,34,69,114]",
              "sol": "bytes4(\"99,34,69,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.654ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.654ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.656ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.657ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.658ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "[69,147,33,49,101,108,230,36,154,228,247,73,116,84,221,211,212,179,229,36,226,71,182,112,135,246,212,174,236,23,235,16]",
              "sol": "abi.encode(\"69,147,33,49,101,108,230,36,154,228,247,73,116,84,221,211,212,179,229,36,226,71,182,112,135,246,212,174,236,23,235,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "[1,182,132,39,22,75,203,10,100,152,252,170,23,72,193,180,56,141,175,7,83,238,108,228,2,28,173,77,146,3,56,151]",
              "sol": "abi.encode(\"1,182,132,39,22,75,203,10,100,152,252,170,23,72,193,180,56,141,175,7,83,238,108,228,2,28,173,77,146,3,56,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.660ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.663ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[103,200000]",
              "sol": "[uint(103),uint(200000)]"
            },
            {
              "js": "[[48,60],[25,103]]",
              "sol": "[[uint(48),uint(60)],[uint(25),uint(103)]]"
            },
            {
              "js": "[2014223716,2014223715]",
              "sol": "[uint(2014223716),uint(2014223715)]"
            },
            {
              "js": "[61,10]",
              "sol": "[uint(61),uint(10)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.666ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.668ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.668ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.669ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.670ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.672ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.674ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.674ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.675ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.678ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "86",
                "sol": "86"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.679ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "57",
                "sol": "57"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:16:37.680ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.681ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:16:37.681ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}