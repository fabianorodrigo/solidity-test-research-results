,{
  "2020-11-10T12:09:15.641ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:09:31.307ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:09:46.805ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:02.395ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:17.709ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:32.897ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.353ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [224,62,90,35,87,31,104,185,204,14,144,242,72,156,254,188,206,39,137,76,233,70,98,4,120,160,176,206,250,227,14,84],\"capacity\": 29}",
              "sol": "Buffer.buffer(abi.encode(\"224,62,90,35,87,31,104,185,204,14,144,242,72,156,254,188,206,39,137,76,233,70,98,4,120,160,176,206,250,227,14,84\"),29)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.355ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [195,253,84,220,179,46,19,170,10,203,39,239,117,181,17,221,26,213,17,223,223,79,81,168,56,8,35,88,230,156,4,180],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"195,253,84,220,179,46,19,170,10,203,39,239,117,181,17,221,26,213,17,223,223,79,81,168,56,8,35,88,230,156,4,180\"),160)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [241,180,12,221,2,250,51,254,232,61,235,172,136,41,139,9,224,58,226,117,230,229,141,250,81,26,226,0,224,30,41,192],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"241,180,12,221,2,250,51,254,232,61,235,172,136,41,139,9,224,58,226,117,230,229,141,250,81,26,226,0,224,30,41,192\"),128)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.356ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [231,177,66,145,104,120,56,62,88,115,225,166,84,113,88,205,246,177,241,153,141,169,76,182,111,183,95,135,45,106,17,247],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"231,177,66,145,104,120,56,62,88,115,225,166,84,113,88,205,246,177,241,153,141,169,76,182,111,183,95,135,45,106,17,247\"),65)"
            },
            {
              "js": "[49,202,4,42,174,67,43,194,243,111,25,34,45,9,222,128,243,160,216,114,32,132,40,105,244,10,126,216,150,142,176,171]",
              "sol": "abi.encode(\"49,202,4,42,174,67,43,194,243,111,25,34,45,9,222,128,243,160,216,114,32,132,40,105,244,10,126,216,150,142,176,171\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.357ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [165,75,230,182,172,236,208,202,58,200,124,108,45,94,99,110,157,58,148,16,3,80,111,52,91,180,94,149,167,152,140,137],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"165,75,230,182,172,236,208,202,58,200,124,108,45,94,99,110,157,58,148,16,3,80,111,52,91,180,94,149,167,152,140,137\"),97)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.357ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [133,78,73,135,204,30,2,186,127,249,87,133,45,163,207,252,33,185,153,23,160,135,70,37,39,49,106,63,115,61,17,179],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"133,78,73,135,204,30,2,186,127,249,87,133,45,163,207,252,33,185,153,23,160,135,70,37,39,49,106,63,115,61,17,179\"),28)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.358ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [247,136,182,211,242,145,33,79,206,120,25,197,95,83,219,133,198,244,97,183,117,106,252,251,242,147,245,73,111,208,243,152],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"247,136,182,211,242,145,33,79,206,120,25,197,95,83,219,133,198,244,97,183,117,106,252,251,242,147,245,73,111,208,243,152\"),49)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.358ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [97,197,86,229,96,64,224,223,191,116,111,170,168,151,45,94,225,155,58,18,67,106,137,46,193,221,146,70,18,104,11,174],\"capacity\": 63}",
              "sol": "Buffer.buffer(abi.encode(\"97,197,86,229,96,64,224,223,191,116,111,170,168,151,45,94,225,155,58,18,67,106,137,46,193,221,146,70,18,104,11,174\"),63)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.362ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.362ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.363ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 2,\"Y\": 60}",
              "sol": "Pairing.G1Point(2,60)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.365ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 57,\"Y\": 86}",
              "sol": "Pairing.G1Point(57,86)"
            },
            {
              "js": "{\"X\": 65,\"Y\": 48}",
              "sol": "Pairing.G1Point(65,48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.365ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [71,31],\"Y\": [102,22]}",
              "sol": "Pairing.G2Point([uint(71),uint(31)],[uint(102),uint(22)])"
            },
            {
              "js": "{\"X\": [254,46],\"Y\": [26,26]}",
              "sol": "Pairing.G2Point([uint(254),uint(46)],[uint(26),uint(26)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.366ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 21,\"Y\": 61}",
              "sol": "Pairing.G1Point(21,61)"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.367ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 1,\"Y\": 96},{\"X\": 2014223715,\"Y\": 127},{\"X\": 2014223714,\"Y\": 23},{\"X\": 1024,\"Y\": 28},{\"X\": 70,\"Y\": 2},{\"X\": 16,\"Y\": 19}]",
              "sol": "[Pairing.G1Point(1,96),Pairing.G1Point(2014223715,127),Pairing.G1Point(2014223714,23),Pairing.G1Point(1024,28),Pairing.G1Point(70,2),Pairing.G1Point(16,19)]"
            },
            {
              "js": "[{\"X\": [61,18],\"Y\": [128,29]},{\"X\": [4,28],\"Y\": [21,2014223714]},{\"X\": [66,63],\"Y\": [1532892064,6]},{\"X\": [69,33],\"Y\": [87,33]},{\"X\": [9,15],\"Y\": [65,61]},{\"X\": [96,1023],\"Y\": [63,0]}]",
              "sol": "[Pairing.G2Point([uint(61),uint(18)],[uint(128),uint(29)]),Pairing.G2Point([uint(4),uint(28)],[uint(21),uint(2014223714)]),Pairing.G2Point([uint(66),uint(63)],[uint(1532892064),uint(6)]),Pairing.G2Point([uint(69),uint(33)],[uint(87),uint(33)]),Pairing.G2Point([uint(9),uint(15)],[uint(65),uint(61)]),Pairing.G2Point([uint(96),uint(1023)],[uint(63),uint(0)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 45,\"Y\": 56},{\"X\": 160,\"Y\": 200001},{\"X\": 48,\"Y\": 18},{\"X\": 28,\"Y\": 5},{\"X\": 23,\"Y\": 54},{\"X\": 2,\"Y\": 27},{\"X\": 63,\"Y\": 1025}]",
                "sol": "[Pairing.G1Point(25,15),Pairing.G1Point(102,10),Pairing.G1Point(6,4),Pairing.G1Point(61,15),Pairing.G1Point(46,128),Pairing.G1Point(63,1),Pairing.G1Point(127,47)]"
              },
              {
                "js": "[{\"X\": [61,18],\"Y\": [128,29]},{\"X\": [4,28],\"Y\": [21,2014223714]},{\"X\": [66,63],\"Y\": [1532892064,6]},{\"X\": [69,33],\"Y\": [87,33]},{\"X\": [9,15],\"Y\": [65,61]},{\"X\": [96,1023],\"Y\": [63,0]}]",
                "sol": "[Pairing.G2Point([uint(61),uint(18)],[uint(128),uint(29)]),Pairing.G2Point([uint(4),uint(28)],[uint(21),uint(2014223714)]),Pairing.G2Point([uint(66),uint(63)],[uint(1532892064),uint(6)]),Pairing.G2Point([uint(69),uint(33)],[uint(87),uint(33)]),Pairing.G2Point([uint(9),uint(15)],[uint(65),uint(61)]),Pairing.G2Point([uint(96),uint(1023)],[uint(63),uint(0)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.372ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 1024,\"Y\": 30}",
              "sol": "Pairing.G1Point(1024,30)"
            },
            {
              "js": "{\"X\": [56,101],\"Y\": [200001,2]}",
              "sol": "Pairing.G2Point([uint(56),uint(101)],[uint(200001),uint(2)])"
            },
            {
              "js": "{\"X\": 57,\"Y\": 57}",
              "sol": "Pairing.G1Point(57,57)"
            },
            {
              "js": "{\"X\": [2014223715,128],\"Y\": [6,5]}",
              "sol": "Pairing.G2Point([uint(2014223715),uint(128)],[uint(6),uint(5)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.373ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 95,\"Y\": 11}",
              "sol": "Pairing.G1Point(95,11)"
            },
            {
              "js": "{\"X\": [200000,200000],\"Y\": [162,97]}",
              "sol": "Pairing.G2Point([uint(200000),uint(200000)],[uint(162),uint(97)])"
            },
            {
              "js": "{\"X\": 199999,\"Y\": 1025}",
              "sol": "Pairing.G1Point(199999,1025)"
            },
            {
              "js": "{\"X\": [65,257],\"Y\": [103,254]}",
              "sol": "Pairing.G2Point([uint(65),uint(257)],[uint(103),uint(254)])"
            },
            {
              "js": "{\"X\": 1024,\"Y\": 1532892062}",
              "sol": "Pairing.G1Point(1024,1532892062)"
            },
            {
              "js": "{\"X\": [54,47],\"Y\": [0,2]}",
              "sol": "Pairing.G2Point([uint(54),uint(47)],[uint(0),uint(2)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.379ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.379ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.380ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.381ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.382ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.383ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.383ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.384ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.384ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.385ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.385ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.389ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [173,16,166,210,138,214,133,193,254,78,209,201,10,71,56,28,109,92,91,109,199,55,34,119,71,108,50,255,190,69,129,210],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"173,16,166,210,138,214,133,193,254,78,209,201,10,71,56,28,109,92,91,109,199,55,34,119,71,108,50,255,190,69,129,210\"),56)"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.390ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [97,10,168,161,141,157,87,67,254,94,177,234,192,173,242,126,148,92,139,95,240,70,184,212,21,11,99,100,103,246,79,160],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"97,10,168,161,141,157,87,67,254,94,177,234,192,173,242,126,148,92,139,95,240,70,184,212,21,11,99,100,103,246,79,160\"),128)"
            },
            {
              "js": "[250,103,171,4,139,223,178,93,104,246,238,242,192,245,71,141,81,241,91,8,150,145,33,63,16,193,96,6,88,239,203,23]",
              "sol": "abi.encode(\"250,103,171,4,139,223,178,93,104,246,238,242,192,245,71,141,81,241,91,8,150,145,33,63,16,193,96,6,88,239,203,23\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.390ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [54,54,233,214,159,151,243,124,191,24,224,73,162,136,23,229,138,178,65,175,14,72,10,26,126,57,127,215,27,1,195,176],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"54,54,233,214,159,151,243,124,191,24,224,73,162,136,23,229,138,178,65,175,14,72,10,26,126,57,127,215,27,1,195,176\"),97)"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.391ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [139,254,2,210,103,99,28,132,10,201,12,90,185,68,211,211,158,156,241,222,26,52,26,114,247,71,55,99,58,132,181,171],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"139,254,2,210,103,99,28,132,10,201,12,90,185,68,211,211,158,156,241,222,26,52,26,114,247,71,55,99,58,132,181,171\"),70)"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.392ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[198,146,253,90,91,100,193,97,107,248,177,254,70,52,203,53,251,11,225,204,4,188,155,122,136,29,109,129,10,232,79,63]",
              "sol": "stringToBytes32(\"198,146,253,90,91,100,193,97,107,248,177,254,70,52,203,53,251,11,225,204,4,188,155,122,136,29,109,129,10,232,79,63\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.392ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[99,219,113,184,90,161,208,44,25,210,15,200,73,188,150,48,119,200,79,42,214,145,40,210,74,138,115,156,234,244,13,41]",
              "sol": "stringToBytes32(\"99,219,113,184,90,161,208,44,25,210,15,200,73,188,150,48,119,200,79,42,214,145,40,210,74,138,115,156,234,244,13,41\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[97,239,85,132,247,23,254,106,252,32,163,223,138,255,10,225,241,206,116,162,234,177,66,246,34,8,32,25,185,140,81,30]",
              "sol": "abi.encode(\"97,239,85,132,247,23,254,106,252,32,163,223,138,255,10,225,241,206,116,162,234,177,66,246,34,8,32,25,185,140,81,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.440ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.441ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.441ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.442ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.442ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.442ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.443ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.443ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.444ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.444ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.444ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.445ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.445ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.446ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.446ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\",\"L\",\"Capstones\",\"Capstones\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"L\"),string(\"Capstones\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.447ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"Capstones\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Capstones\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.447ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\",\"P\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\"),string(\"P\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.448ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Capstones\",\"[\"]",
              "sol": "[string(\"Capstones\"),string(\"[\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.449ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.449ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"kctc4h\"]",
              "sol": "[string(\"kctc4h\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.450ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"em9vdj\"",
              "sol": "\"em9vdj\""
            },
            {
              "js": "[\"em9vdj\"]",
              "sol": "[string(\"em9vdj\")]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.451ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.451ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"kctc4h\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"kctc4h\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.452ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"em9vdj\",\"em9vdj\"]",
              "sol": "[string(\"em9vdj\"),string(\"em9vdj\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.452ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"[\",\"0\"]",
              "sol": "[string(\"[\"),string(\"0\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.453ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"ndpnxr\"",
              "sol": "\"ndpnxr\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.454ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"ndpnxr\",\"L\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"ndpnxr\"),string(\"L\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.455ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"P\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.455ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"8dtf3p\"",
              "sol": "\"8dtf3p\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"kctc4h\",\"kctc4h\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"kctc4h\"),string(\"kctc4h\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.456ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"em9vdj\",\"L\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"em9vdj\"),string(\"L\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.456ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"kctc4h\",\"em9vdj\",\"kctc4h\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"kctc4h\"),string(\"em9vdj\"),string(\"kctc4h\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.457ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"L\",\"kctc4h\",\"ndpnxr\",\"em9vdj\"]",
              "sol": "[string(\"L\"),string(\"kctc4h\"),string(\"ndpnxr\"),string(\"em9vdj\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.457ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"kctc4h\"",
              "sol": "\"kctc4h\""
            },
            {
              "js": "[\"Capstones\",\"Transaction successfully verified.\",\"L\",\"ndpnxr\"]",
              "sol": "[string(\"Capstones\"),string(\"Transaction successfully verified.\"),string(\"L\"),string(\"ndpnxr\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.458ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"kctc4h\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ndpnxr\"]",
              "sol": "[string(\"P\"),string(\"kctc4h\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ndpnxr\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.458ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"Capstones\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"0\",\"0\"]",
              "sol": "[string(\"Capstones\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.459ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"L\",\"0\",\"8dtf3p\",\"L\",\"8dtf3p\"]",
              "sol": "[string(\"L\"),string(\"0\"),string(\"8dtf3p\"),string(\"L\"),string(\"8dtf3p\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.459ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"8dtf3p\",\"ndpnxr\",\"ndpnxr\",\"8dtf3p\",\"ndpnxr\"]",
              "sol": "[string(\"8dtf3p\"),string(\"ndpnxr\"),string(\"ndpnxr\"),string(\"8dtf3p\"),string(\"ndpnxr\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.460ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"ERC1820_ACCEPT_MAGIC\",\"kctc4h\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"kctc4h\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.460ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[205,52,182,29,100,234,228,88,235,179,49,63,54,89,164,10,16,79,190,186,11,22,192,110,62,68,237,227,47,197,39,9],[2,211,80,234,175,221,80,144,250,152,232,126,23,53,200,81,220,146,52,190,63,96,226,112,39,182,50,157,202,222,121,50],[88,225,134,2,157,192,218,49,191,216,130,118,200,95,142,143,240,197,31,5,149,24,94,228,172,30,144,227,67,199,20,85],[133,251,150,203,161,2,37,18,231,207,63,238,237,238,248,125,43,107,223,180,9,117,155,163,195,5,138,26,38,134,226,7],[196,26,24,187,205,56,29,206,238,120,225,166,35,154,73,129,195,250,161,241,178,66,69,174,215,109,73,252,159,224,67,95]]",
              "sol": "[bytes(abi.encode(\"205,52,182,29,100,234,228,88,235,179,49,63,54,89,164,10,16,79,190,186,11,22,192,110,62,68,237,227,47,197,39,9\")),bytes(abi.encode(\"2,211,80,234,175,221,80,144,250,152,232,126,23,53,200,81,220,146,52,190,63,96,226,112,39,182,50,157,202,222,121,50\")),bytes(abi.encode(\"88,225,134,2,157,192,218,49,191,216,130,118,200,95,142,143,240,197,31,5,149,24,94,228,172,30,144,227,67,199,20,85\")),bytes(abi.encode(\"133,251,150,203,161,2,37,18,231,207,63,238,237,238,248,125,43,107,223,180,9,117,155,163,195,5,138,26,38,134,226,7\")),bytes(abi.encode(\"196,26,24,187,205,56,29,206,238,120,225,166,35,154,73,129,195,250,161,241,178,66,69,174,215,109,73,252,159,224,67,95\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.461ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[195,67,132,139,98,47,253,235,225,153,25,54,70,76,67,2,186,250,8,46,191,221,74,6,210,215,21,140,38,249,62,45],[199,161,34,112,146,41,206,11,223,229,114,20,230,249,49,43,233,110,71,80,62,251,159,115,79,88,151,224,181,218,181,40]]",
              "sol": "[bytes(abi.encode(\"195,67,132,139,98,47,253,235,225,153,25,54,70,76,67,2,186,250,8,46,191,221,74,6,210,215,21,140,38,249,62,45\")),bytes(abi.encode(\"199,161,34,112,146,41,206,11,223,229,114,20,230,249,49,43,233,110,71,80,62,251,159,115,79,88,151,224,181,218,181,40\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.462ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[199,44,111,65,47,179,170,197,209,109,191,240,71,229,97,18,99,202,122,211,117,96,65,148,202,179,83,181,87,214,108,124],[139,35,122,217,165,133,156,76,31,216,174,149,199,228,161,67,203,229,154,61,10,9,138,185,160,247,3,202,120,28,172,125],[54,167,43,133,221,87,90,47,147,161,35,57,128,60,228,12,231,227,33,122,182,176,103,213,15,255,200,43,226,95,134,114],[150,62,193,82,62,75,97,177,58,179,227,225,41,5,147,147,4,155,19,245,14,249,108,193,25,190,158,201,196,255,141,69],[148,232,193,163,48,223,242,171,102,29,235,92,174,111,42,182,160,9,130,195,126,250,243,35,40,236,235,203,249,187,252,173]]",
              "sol": "[bytes(abi.encode(\"199,44,111,65,47,179,170,197,209,109,191,240,71,229,97,18,99,202,122,211,117,96,65,148,202,179,83,181,87,214,108,124\")),bytes(abi.encode(\"139,35,122,217,165,133,156,76,31,216,174,149,199,228,161,67,203,229,154,61,10,9,138,185,160,247,3,202,120,28,172,125\")),bytes(abi.encode(\"54,167,43,133,221,87,90,47,147,161,35,57,128,60,228,12,231,227,33,122,182,176,103,213,15,255,200,43,226,95,134,114\")),bytes(abi.encode(\"150,62,193,82,62,75,97,177,58,179,227,225,41,5,147,147,4,155,19,245,14,249,108,193,25,190,158,201,196,255,141,69\")),bytes(abi.encode(\"148,232,193,163,48,223,242,171,102,29,235,92,174,111,42,182,160,9,130,195,126,250,243,35,40,236,235,203,249,187,252,173\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.463ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[68,218,198,97,123,50,245,172,255,1,111,121,110,37,194,253,47,111,128,236,215,80,34,84,191,55,174,155,164,4,143,33],[3,34,200,12,55,200,154,77,1,10,53,199,150,238,154,165,160,66,69,243,57,50,178,241,202,1,203,128,116,15,241,176],[71,187,157,96,20,157,217,161,104,18,105,201,130,135,239,189,157,249,246,106,186,114,61,199,76,251,11,173,201,244,94,66],[129,179,104,94,101,94,119,255,133,1,239,118,239,233,104,203,60,165,64,131,154,40,36,52,75,146,193,183,6,71,179,184],[93,89,80,211,68,54,56,170,213,134,245,162,166,90,228,177,40,200,53,11,25,250,134,170,232,60,9,39,94,205,252,39],[39,166,14,89,121,130,12,69,41,52,224,30,28,73,209,88,56,39,157,218,90,233,102,24,39,103,232,189,212,233,213,62],[154,128,14,72,246,212,183,232,255,159,138,26,219,115,234,207,15,18,209,59,83,125,191,101,203,147,91,191,176,255,81,101],[223,252,116,58,173,169,167,127,107,103,132,249,56,47,166,194,84,6,161,220,253,18,181,40,150,182,84,16,78,108,202,212]]",
              "sol": "[bytes(abi.encode(\"68,218,198,97,123,50,245,172,255,1,111,121,110,37,194,253,47,111,128,236,215,80,34,84,191,55,174,155,164,4,143,33\")),bytes(abi.encode(\"3,34,200,12,55,200,154,77,1,10,53,199,150,238,154,165,160,66,69,243,57,50,178,241,202,1,203,128,116,15,241,176\")),bytes(abi.encode(\"71,187,157,96,20,157,217,161,104,18,105,201,130,135,239,189,157,249,246,106,186,114,61,199,76,251,11,173,201,244,94,66\")),bytes(abi.encode(\"129,179,104,94,101,94,119,255,133,1,239,118,239,233,104,203,60,165,64,131,154,40,36,52,75,146,193,183,6,71,179,184\")),bytes(abi.encode(\"93,89,80,211,68,54,56,170,213,134,245,162,166,90,228,177,40,200,53,11,25,250,134,170,232,60,9,39,94,205,252,39\")),bytes(abi.encode(\"39,166,14,89,121,130,12,69,41,52,224,30,28,73,209,88,56,39,157,218,90,233,102,24,39,103,232,189,212,233,213,62\")),bytes(abi.encode(\"154,128,14,72,246,212,183,232,255,159,138,26,219,115,234,207,15,18,209,59,83,125,191,101,203,147,91,191,176,255,81,101\")),bytes(abi.encode(\"223,252,116,58,173,169,167,127,107,103,132,249,56,47,166,194,84,6,161,220,253,18,181,40,150,182,84,16,78,108,202,212\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.464ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"kctc4h\"",
              "sol": "\"kctc4h\""
            },
            {
              "js": "[[10,227,120,248,219,194,72,61,61,9,126,157,155,69,197,47,111,132,205,254,204,210,168,17,28,150,193,127,77,214,137,57]]",
              "sol": "[bytes(abi.encode(\"10,227,120,248,219,194,72,61,61,9,126,157,155,69,197,47,111,132,205,254,204,210,168,17,28,150,193,127,77,214,137,57\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.464ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[137,67,108,233,87,188,24,182,202,85,93,92,164,31,223,179,58,87,23,182,194,177,222,235,178,101,131,155,168,47,146,88]]",
              "sol": "[bytes(abi.encode(\"137,67,108,233,87,188,24,182,202,85,93,92,164,31,223,179,58,87,23,182,194,177,222,235,178,101,131,155,168,47,146,88\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.465ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[6,205,199,96,32,127,130,115,114,209,76,197,15,141,19,216,33,243,254,62,163,99,144,169,100,111,84,185,125,224,189,44]]",
              "sol": "[bytes(abi.encode(\"6,205,199,96,32,127,130,115,114,209,76,197,15,141,19,216,33,243,254,62,163,99,144,169,100,111,84,185,125,224,189,44\"))]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.465ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[179,88,246,187,49,240,247,152,211,74,26,240,2,44,211,9,197,102,77,175,122,111,91,207,35,188,252,143,110,53,239,116]]",
              "sol": "[bytes(abi.encode(\"179,88,246,187,49,240,247,152,211,74,26,240,2,44,211,9,197,102,77,175,122,111,91,207,35,188,252,143,110,53,239,116\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.466ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"em9vdj\"",
              "sol": "\"em9vdj\""
            },
            {
              "js": "[[249,191,153,64,149,203,31,138,90,209,226,217,77,39,169,82,37,95,2,222,6,8,154,249,159,125,231,76,201,172,94,153],[22,110,109,159,165,111,125,96,196,59,224,246,120,5,35,9,242,74,182,202,89,235,175,192,129,72,4,11,251,142,148,1]]",
              "sol": "[bytes(abi.encode(\"249,191,153,64,149,203,31,138,90,209,226,217,77,39,169,82,37,95,2,222,6,8,154,249,159,125,231,76,201,172,94,153\")),bytes(abi.encode(\"22,110,109,159,165,111,125,96,196,59,224,246,120,5,35,9,242,74,182,202,89,235,175,192,129,72,4,11,251,142,148,1\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.467ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[97,214,138,161,207,127,183,24,109,118,84,95,90,157,79,109,236,63,128,66,154,210,238,176,107,82,104,117,23,47,181,114],[213,200,104,161,236,3,74,72,93,40,96,206,66,197,148,14,210,110,118,3,70,99,29,254,38,28,48,64,170,16,175,128]]",
              "sol": "[bytes(abi.encode(\"97,214,138,161,207,127,183,24,109,118,84,95,90,157,79,109,236,63,128,66,154,210,238,176,107,82,104,117,23,47,181,114\")),bytes(abi.encode(\"213,200,104,161,236,3,74,72,93,40,96,206,66,197,148,14,210,110,118,3,70,99,29,254,38,28,48,64,170,16,175,128\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.468ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[15,67,200,131,31,54,113,67,188,98,251,124,50,107,120,188,154,16,158,113,50,204,3,121,67,77,139,128,229,54,156,52],[132,176,125,166,132,186,88,145,75,172,27,106,99,162,121,181,215,128,204,242,218,37,82,201,217,97,118,113,243,254,22,79]]",
              "sol": "[bytes(abi.encode(\"15,67,200,131,31,54,113,67,188,98,251,124,50,107,120,188,154,16,158,113,50,204,3,121,67,77,139,128,229,54,156,52\")),bytes(abi.encode(\"132,176,125,166,132,186,88,145,75,172,27,106,99,162,121,181,215,128,204,242,218,37,82,201,217,97,118,113,243,254,22,79\"))]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.468ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[223,60,126,49,56,190,35,161,224,182,66,102,90,81,53,106,195,196,43,8,109,82,59,92,211,224,66,61,137,192,66,103],[11,196,115,176,45,54,72,192,40,142,76,107,126,80,254,144,245,115,201,14,246,108,7,7,136,131,233,161,54,177,134,205]]",
              "sol": "[bytes(abi.encode(\"223,60,126,49,56,190,35,161,224,182,66,102,90,81,53,106,195,196,43,8,109,82,59,92,211,224,66,61,137,192,66,103\")),bytes(abi.encode(\"11,196,115,176,45,54,72,192,40,142,76,107,126,80,254,144,245,115,201,14,246,108,7,7,136,131,233,161,54,177,134,205\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.469ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[116,121,186,57,222,64,152,97,212,178,225,52,250,165,38,141,191,175,78,159,165,211,8,234,16,65,210,29,90,107,134,199],[86,141,180,237,219,252,191,88,231,203,69,19,249,218,161,207,53,214,61,45,209,173,59,197,55,76,249,75,188,67,136,236],[21,196,243,201,98,178,224,250,84,133,4,88,143,233,42,103,209,108,157,167,48,214,206,64,126,169,32,208,224,124,170,6]]",
              "sol": "[bytes(abi.encode(\"116,121,186,57,222,64,152,97,212,178,225,52,250,165,38,141,191,175,78,159,165,211,8,234,16,65,210,29,90,107,134,199\")),bytes(abi.encode(\"86,141,180,237,219,252,191,88,231,203,69,19,249,218,161,207,53,214,61,45,209,173,59,197,55,76,249,75,188,67,136,236\")),bytes(abi.encode(\"21,196,243,201,98,178,224,250,84,133,4,88,143,233,42,103,209,108,157,167,48,214,206,64,126,169,32,208,224,124,170,6\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.469ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[75,123,111,117,179,137,168,200,41,225,150,11,50,195,150,91,17,231,199,24,118,27,190,74,2,252,58,88,175,215,79,155],[128,41,228,216,230,116,245,237,147,223,226,199,93,131,154,83,24,87,28,56,8,140,12,223,146,69,229,90,106,200,49,56],[211,163,92,19,35,66,234,239,246,111,163,194,224,137,27,3,226,174,63,171,183,139,90,41,84,25,62,244,9,196,5,113]]",
              "sol": "[bytes(abi.encode(\"75,123,111,117,179,137,168,200,41,225,150,11,50,195,150,91,17,231,199,24,118,27,190,74,2,252,58,88,175,215,79,155\")),bytes(abi.encode(\"128,41,228,216,230,116,245,237,147,223,226,199,93,131,154,83,24,87,28,56,8,140,12,223,146,69,229,90,106,200,49,56\")),bytes(abi.encode(\"211,163,92,19,35,66,234,239,246,111,163,194,224,137,27,3,226,174,63,171,183,139,90,41,84,25,62,244,9,196,5,113\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.470ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[127,27,31,42,36,206,131,108,223,66,68,212,237,49,125,229,242,28,188,57,126,217,6,108,149,243,186,115,98,211,10,107],[199,96,210,68,27,229,180,122,181,37,208,109,204,105,13,103,61,45,11,152,175,48,80,155,131,89,114,58,24,195,162,4],[134,121,105,65,142,135,129,81,62,80,227,96,226,0,139,109,154,14,60,134,158,3,221,19,173,56,26,53,241,82,243,63]]",
              "sol": "[bytes(abi.encode(\"127,27,31,42,36,206,131,108,223,66,68,212,237,49,125,229,242,28,188,57,126,217,6,108,149,243,186,115,98,211,10,107\")),bytes(abi.encode(\"199,96,210,68,27,229,180,122,181,37,208,109,204,105,13,103,61,45,11,152,175,48,80,155,131,89,114,58,24,195,162,4\")),bytes(abi.encode(\"134,121,105,65,142,135,129,81,62,80,227,96,226,0,139,109,154,14,60,134,158,3,221,19,173,56,26,53,241,82,243,63\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.472ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"ndpnxr\"",
              "sol": "\"ndpnxr\""
            },
            {
              "js": "[[76,95,235,186,233,14,201,219,88,161,163,219,127,131,177,227,3,103,196,8,15,63,61,249,58,5,47,108,76,210,196,157],[77,126,207,45,126,121,215,177,106,123,215,148,92,123,211,35,237,56,11,68,18,147,185,28,117,111,240,81,237,132,49,1],[26,203,56,179,151,252,122,44,230,90,117,82,47,227,64,218,99,66,123,57,112,226,99,95,16,64,247,141,102,231,206,226]]",
              "sol": "[bytes(abi.encode(\"76,95,235,186,233,14,201,219,88,161,163,219,127,131,177,227,3,103,196,8,15,63,61,249,58,5,47,108,76,210,196,157\")),bytes(abi.encode(\"77,126,207,45,126,121,215,177,106,123,215,148,92,123,211,35,237,56,11,68,18,147,185,28,117,111,240,81,237,132,49,1\")),bytes(abi.encode(\"26,203,56,179,151,252,122,44,230,90,117,82,47,227,64,218,99,66,123,57,112,226,99,95,16,64,247,141,102,231,206,226\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.472ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[69,246,146,176,199,170,31,219,234,33,214,254,208,253,150,61,115,202,126,108,232,195,74,56,137,5,85,104,51,32,101,151],[3,41,73,15,223,209,207,138,68,63,204,239,225,193,98,213,90,36,204,5,36,70,193,188,208,168,1,63,237,176,132,137],[154,134,2,77,4,71,92,83,163,44,63,26,202,149,167,58,215,204,72,118,251,98,150,95,172,62,211,211,239,245,126,227],[78,143,179,6,189,183,91,237,234,183,63,142,52,137,188,139,215,9,255,237,25,190,206,161,175,6,155,192,174,226,180,26]]",
              "sol": "[bytes(abi.encode(\"69,246,146,176,199,170,31,219,234,33,214,254,208,253,150,61,115,202,126,108,232,195,74,56,137,5,85,104,51,32,101,151\")),bytes(abi.encode(\"3,41,73,15,223,209,207,138,68,63,204,239,225,193,98,213,90,36,204,5,36,70,193,188,208,168,1,63,237,176,132,137\")),bytes(abi.encode(\"154,134,2,77,4,71,92,83,163,44,63,26,202,149,167,58,215,204,72,118,251,98,150,95,172,62,211,211,239,245,126,227\")),bytes(abi.encode(\"78,143,179,6,189,183,91,237,234,183,63,142,52,137,188,139,215,9,255,237,25,190,206,161,175,6,155,192,174,226,180,26\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.473ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"ndpnxr\"",
              "sol": "\"ndpnxr\""
            },
            {
              "js": "[[252,163,112,53,203,33,112,208,201,3,107,45,169,41,212,160,245,155,46,214,71,120,84,89,130,135,103,48,240,85,144,10],[69,173,33,40,176,250,14,210,50,174,178,198,211,249,134,15,14,47,226,157,237,183,229,76,130,70,18,168,3,139,236,175],[81,80,148,241,218,96,27,169,115,46,213,3,33,70,108,210,125,119,202,251,202,202,83,198,23,162,72,72,239,85,247,147],[114,54,207,137,111,157,233,122,121,111,114,101,90,197,235,213,71,20,69,91,42,5,198,100,127,226,210,217,168,69,115,14]]",
              "sol": "[bytes(abi.encode(\"252,163,112,53,203,33,112,208,201,3,107,45,169,41,212,160,245,155,46,214,71,120,84,89,130,135,103,48,240,85,144,10\")),bytes(abi.encode(\"69,173,33,40,176,250,14,210,50,174,178,198,211,249,134,15,14,47,226,157,237,183,229,76,130,70,18,168,3,139,236,175\")),bytes(abi.encode(\"81,80,148,241,218,96,27,169,115,46,213,3,33,70,108,210,125,119,202,251,202,202,83,198,23,162,72,72,239,85,247,147\")),bytes(abi.encode(\"114,54,207,137,111,157,233,122,121,111,114,101,90,197,235,213,71,20,69,91,42,5,198,100,127,226,210,217,168,69,115,14\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.474ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[43,187,122,25,127,36,95,209,3,176,83,200,156,101,44,79,226,190,92,132,96,181,74,187,196,214,244,106,213,159,158,244],[222,48,215,197,166,32,214,78,107,191,223,37,245,170,92,223,164,164,162,66,65,85,168,70,180,95,67,56,38,118,127,202],[191,129,140,229,186,155,76,155,95,214,205,46,209,182,193,209,157,91,21,41,12,204,91,141,51,11,98,250,109,94,87,191],[192,199,194,96,172,246,212,178,168,0,216,212,178,224,110,52,211,25,61,242,19,211,173,101,148,4,168,157,54,174,198,39]]",
              "sol": "[bytes(abi.encode(\"43,187,122,25,127,36,95,209,3,176,83,200,156,101,44,79,226,190,92,132,96,181,74,187,196,214,244,106,213,159,158,244\")),bytes(abi.encode(\"222,48,215,197,166,32,214,78,107,191,223,37,245,170,92,223,164,164,162,66,65,85,168,70,180,95,67,56,38,118,127,202\")),bytes(abi.encode(\"191,129,140,229,186,155,76,155,95,214,205,46,209,182,193,209,157,91,21,41,12,204,91,141,51,11,98,250,109,94,87,191\")),bytes(abi.encode(\"192,199,194,96,172,246,212,178,168,0,216,212,178,224,110,52,211,25,61,242,19,211,173,101,148,4,168,157,54,174,198,39\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.474ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"8dtf3p\"",
              "sol": "\"8dtf3p\""
            },
            {
              "js": "[[0,193,132,166,159,119,158,17,41,141,60,178,177,85,230,120,119,236,67,85,60,146,225,59,186,29,168,101,22,113,119,151],[83,85,169,165,175,243,113,92,108,215,138,213,79,228,161,154,153,27,109,0,160,148,114,224,181,174,197,113,227,31,11,142],[171,101,127,93,182,208,235,88,231,119,190,240,151,49,111,255,178,184,48,160,239,90,80,15,252,110,212,51,146,249,105,51],[170,25,156,230,25,139,50,39,42,240,208,205,195,20,2,135,24,162,154,169,164,55,213,156,177,245,61,135,229,133,130,76]]",
              "sol": "[bytes(abi.encode(\"0,193,132,166,159,119,158,17,41,141,60,178,177,85,230,120,119,236,67,85,60,146,225,59,186,29,168,101,22,113,119,151\")),bytes(abi.encode(\"83,85,169,165,175,243,113,92,108,215,138,213,79,228,161,154,153,27,109,0,160,148,114,224,181,174,197,113,227,31,11,142\")),bytes(abi.encode(\"171,101,127,93,182,208,235,88,231,119,190,240,151,49,111,255,178,184,48,160,239,90,80,15,252,110,212,51,146,249,105,51\")),bytes(abi.encode(\"170,25,156,230,25,139,50,39,42,240,208,205,195,20,2,135,24,162,154,169,164,55,213,156,177,245,61,135,229,133,130,76\"))]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.475ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[198,136,160,178,238,86,21,134,80,72,221,155,27,99,65,143,39,166,4,217,146,1,3,127,13,49,198,76,57,247,193,102],[244,161,183,58,125,65,187,146,15,98,7,180,147,182,3,105,227,63,231,39,220,198,61,157,218,188,2,46,118,137,27,11],[3,186,165,182,234,236,208,253,51,193,60,239,139,7,151,15,68,133,45,59,15,40,101,45,132,70,110,114,49,224,92,230],[183,226,216,53,90,18,66,212,74,121,100,68,37,215,7,249,116,23,133,50,77,183,182,147,240,104,198,255,136,231,212,201],[186,251,68,145,168,46,230,251,14,14,71,20,109,179,86,237,1,246,174,255,161,252,208,128,222,81,179,239,158,63,183,210]]",
              "sol": "[bytes(abi.encode(\"198,136,160,178,238,86,21,134,80,72,221,155,27,99,65,143,39,166,4,217,146,1,3,127,13,49,198,76,57,247,193,102\")),bytes(abi.encode(\"244,161,183,58,125,65,187,146,15,98,7,180,147,182,3,105,227,63,231,39,220,198,61,157,218,188,2,46,118,137,27,11\")),bytes(abi.encode(\"3,186,165,182,234,236,208,253,51,193,60,239,139,7,151,15,68,133,45,59,15,40,101,45,132,70,110,114,49,224,92,230\")),bytes(abi.encode(\"183,226,216,53,90,18,66,212,74,121,100,68,37,215,7,249,116,23,133,50,77,183,182,147,240,104,198,255,136,231,212,201\")),bytes(abi.encode(\"186,251,68,145,168,46,230,251,14,14,71,20,109,179,86,237,1,246,174,255,161,252,208,128,222,81,179,239,158,63,183,210\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.475ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[158,49,165,26,226,229,32,250,23,117,54,41,115,49,5,154,29,137,76,93,210,81,65,125,86,199,15,135,166,172,128,160],[178,174,150,225,249,10,49,9,56,240,163,139,211,56,44,135,13,101,134,164,39,152,137,122,27,61,43,8,54,46,152,69],[253,42,214,38,72,191,125,138,242,244,126,180,190,52,94,160,197,198,21,190,184,50,194,58,57,93,9,228,123,137,0,63],[180,213,192,165,83,50,44,116,130,175,32,234,187,7,63,245,122,194,163,104,14,68,247,25,145,126,223,8,120,164,63,66],[155,215,50,199,255,69,28,70,163,164,8,145,217,41,183,28,253,2,100,158,51,255,230,152,215,154,17,149,223,33,253,166]]",
              "sol": "[bytes(abi.encode(\"158,49,165,26,226,229,32,250,23,117,54,41,115,49,5,154,29,137,76,93,210,81,65,125,86,199,15,135,166,172,128,160\")),bytes(abi.encode(\"178,174,150,225,249,10,49,9,56,240,163,139,211,56,44,135,13,101,134,164,39,152,137,122,27,61,43,8,54,46,152,69\")),bytes(abi.encode(\"253,42,214,38,72,191,125,138,242,244,126,180,190,52,94,160,197,198,21,190,184,50,194,58,57,93,9,228,123,137,0,63\")),bytes(abi.encode(\"180,213,192,165,83,50,44,116,130,175,32,234,187,7,63,245,122,194,163,104,14,68,247,25,145,126,223,8,120,164,63,66\")),bytes(abi.encode(\"155,215,50,199,255,69,28,70,163,164,8,145,217,41,183,28,253,2,100,158,51,255,230,152,215,154,17,149,223,33,253,166\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.476ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[135,167,47,249,148,207,146,135,224,231,56,245,116,31,81,79,201,184,132,133,57,124,216,85,112,75,18,148,65,73,222,196],[130,10,241,205,221,49,188,139,92,182,5,41,8,174,109,166,141,166,220,232,182,87,67,1,114,47,101,40,139,81,180,148],[98,38,140,173,201,231,130,126,108,247,15,155,136,19,179,107,127,240,219,252,62,89,242,40,91,235,149,226,240,35,177,220],[125,23,93,206,2,46,210,233,68,4,93,8,91,43,76,191,20,169,250,248,175,143,128,49,73,160,64,176,175,214,238,104],[162,9,75,195,6,74,187,200,86,18,155,127,8,2,159,37,12,242,124,54,64,184,95,187,107,203,41,156,158,45,193,227]]",
              "sol": "[bytes(abi.encode(\"135,167,47,249,148,207,146,135,224,231,56,245,116,31,81,79,201,184,132,133,57,124,216,85,112,75,18,148,65,73,222,196\")),bytes(abi.encode(\"130,10,241,205,221,49,188,139,92,182,5,41,8,174,109,166,141,166,220,232,182,87,67,1,114,47,101,40,139,81,180,148\")),bytes(abi.encode(\"98,38,140,173,201,231,130,126,108,247,15,155,136,19,179,107,127,240,219,252,62,89,242,40,91,235,149,226,240,35,177,220\")),bytes(abi.encode(\"125,23,93,206,2,46,210,233,68,4,93,8,91,43,76,191,20,169,250,248,175,143,128,49,73,160,64,176,175,214,238,104\")),bytes(abi.encode(\"162,9,75,195,6,74,187,200,86,18,155,127,8,2,159,37,12,242,124,54,64,184,95,187,107,203,41,156,158,45,193,227\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.477ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"8dtf3p\"",
              "sol": "\"8dtf3p\""
            },
            {
              "js": "[[160,89,36,188,220,44,166,124,1,228,131,24,196,234,13,146,125,116,205,202,200,116,222,81,109,52,81,166,236,81,164,70],[119,112,0,95,214,61,51,44,124,158,181,86,26,254,36,189,131,154,212,40,77,167,62,246,129,71,192,56,0,149,212,12],[227,216,148,95,9,80,89,164,197,40,240,230,16,128,173,125,163,140,240,176,249,37,87,25,124,202,236,173,113,38,254,222],[69,89,182,243,49,120,134,208,166,159,10,158,168,33,5,25,6,83,33,161,32,233,138,205,240,186,144,162,24,229,63,176],[217,187,59,81,179,200,53,23,117,188,138,149,89,220,79,100,88,164,103,100,175,158,35,16,41,95,24,254,176,116,25,67]]",
              "sol": "[bytes(abi.encode(\"160,89,36,188,220,44,166,124,1,228,131,24,196,234,13,146,125,116,205,202,200,116,222,81,109,52,81,166,236,81,164,70\")),bytes(abi.encode(\"119,112,0,95,214,61,51,44,124,158,181,86,26,254,36,189,131,154,212,40,77,167,62,246,129,71,192,56,0,149,212,12\")),bytes(abi.encode(\"227,216,148,95,9,80,89,164,197,40,240,230,16,128,173,125,163,140,240,176,249,37,87,25,124,202,236,173,113,38,254,222\")),bytes(abi.encode(\"69,89,182,243,49,120,134,208,166,159,10,158,168,33,5,25,6,83,33,161,32,233,138,205,240,186,144,162,24,229,63,176\")),bytes(abi.encode(\"217,187,59,81,179,200,53,23,117,188,138,149,89,220,79,100,88,164,103,100,175,158,35,16,41,95,24,254,176,116,25,67\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.477ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[1]",
              "sol": "bytes1(\"1\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.478ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.478ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.479ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.479ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.479ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"r96mu8\"",
              "sol": "\"r96mu8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.480ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.480ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"ndpnxr\"",
              "sol": "\"ndpnxr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.480ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.481ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"em9vdj\"",
              "sol": "\"em9vdj\""
            },
            {
              "js": "\"bv2do\"",
              "sol": "\"bv2do\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.481ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"ndpnxr\"",
              "sol": "\"ndpnxr\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.481ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"bv2do\"",
              "sol": "\"bv2do\""
            },
            {
              "js": "\"0kfg6w\"",
              "sol": "\"0kfg6w\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"0kfg6w\"",
              "sol": "\"0kfg6w\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.482ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.482ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.483ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.483ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"mu9pk5\"",
              "sol": "\"mu9pk5\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.484ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.485ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"[\",\"Capstones\",\"bv2do\",\"0kfg6w\",\"w0h1mp\",\"r96mu8\",\"kctc4h\",\"Capstones\"]",
              "sol": "[string(\"[\"),string(\"Capstones\"),string(\"bv2do\"),string(\"0kfg6w\"),string(\"w0h1mp\"),string(\"r96mu8\"),string(\"kctc4h\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.485ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[230,203,154,168,131,25,94,205,234,225,61,15,0,207,204,201,102,204,48,178,226,8,178,62,11,203,79,153,55,87,96,217]]",
              "sol": "[bytes(abi.encode(\"230,203,154,168,131,25,94,205,234,225,61,15,0,207,204,201,102,204,48,178,226,8,178,62,11,203,79,153,55,87,96,217\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.485ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.486ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[32,87,29,102,232,41,166,26,170,133,79,32,161,16,33,93,128,65,173,116,122,129,88,216,152,149,120,183,65,187,36,17]",
              "sol": "stringToBytes32(\"32,87,29,102,232,41,166,26,170,133,79,32,161,16,33,93,128,65,173,116,122,129,88,216,152,149,120,183,65,187,36,17\")"
            },
            {
              "js": "[198,248,48,61,132,1,91,5,244,240,147,242,44,69,120,200,95,164,155,210,169,117,163,126,251,32,212,207,23,82,200,245]",
              "sol": "stringToBytes32(\"198,248,48,61,132,1,91,5,244,240,147,242,44,69,120,200,95,164,155,210,169,117,163,126,251,32,212,207,23,82,200,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.487ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[211,199,177,109,16,157,43,57,88,219,70,14,74,226,78,127,132,79,69,246,168,179,34,6,84,35,44,112,97,112,173,34]",
              "sol": "stringToBytes32(\"211,199,177,109,16,157,43,57,88,219,70,14,74,226,78,127,132,79,69,246,168,179,34,6,84,35,44,112,97,112,173,34\")"
            },
            {
              "js": "[178,73,99,10,107,54,209,110,135,2,95,24,184,166,219,252,105,161,126,52,125,156,196,160,240,205,3,189,116,224,188,175]",
              "sol": "abi.encode(\"178,73,99,10,107,54,209,110,135,2,95,24,184,166,219,252,105,161,126,52,125,156,196,160,240,205,3,189,116,224,188,175\")"
            },
            {
              "js": "[244,224,239,236,143,13,59,134,212,62,77,177,215,56,47,121,249,119,59,145,28,218,48,223,114,134,194,248,115,134,123,176]",
              "sol": "abi.encode(\"244,224,239,236,143,13,59,134,212,62,77,177,215,56,47,121,249,119,59,145,28,218,48,223,114,134,194,248,115,134,123,176\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.488ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[235,224,53,191,193,67,241,68,255,174,203,164,19,223,194,198,16,42,130,15,204,122,9,42,121,176,150,184,46,101,234,191]",
              "sol": "abi.encode(\"235,224,53,191,193,67,241,68,255,174,203,164,19,223,194,198,16,42,130,15,204,122,9,42,121,176,150,184,46,101,234,191\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[207,99,70,113,93,109,38,248,152,188,72,0,63,207,61,59,186,205,237,36,116,132,79,90,241,89,19,17,16,5,240,197]",
              "sol": "abi.encode(\"207,99,70,113,93,109,38,248,152,188,72,0,63,207,61,59,186,205,237,36,116,132,79,90,241,89,19,17,16,5,240,197\")"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.489ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[90,114,118,176,146,74,144,104,78,112,29,229,42,49,9,18,76,206,211,168,63,239,248,174,187,18,94,46,130,213,15,28]",
              "sol": "stringToBytes32(\"90,114,118,176,146,74,144,104,78,112,29,229,42,49,9,18,76,206,211,168,63,239,248,174,187,18,94,46,130,213,15,28\")"
            },
            {
              "js": "\"mu9pk5\"",
              "sol": "\"mu9pk5\""
            },
            {
              "js": "[177,57,140,126,168,99,64,109,248,64,199,146,137,13,137,53,163,83,97,55,98,64,150,151,131,12,225,213,99,135,11,122]",
              "sol": "abi.encode(\"177,57,140,126,168,99,64,109,248,64,199,146,137,13,137,53,163,83,97,55,98,64,150,151,131,12,225,213,99,135,11,122\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[186,133,171,130,0,172,152,50,246,59,209,252,189,214,81,255,37,56,197,63,236,68,52,89,186,54,38,140,98,125,43,31]",
              "sol": "stringToBytes32(\"186,133,171,130,0,172,152,50,246,59,209,252,189,214,81,255,37,56,197,63,236,68,52,89,186,54,38,140,98,125,43,31\")"
            },
            {
              "js": "\"kctc4h\"",
              "sol": "\"kctc4h\""
            },
            {
              "js": "[254,172,23,18,227,26,181,229,130,9,184,138,202,188,214,202,159,148,221,180,112,103,61,229,40,168,16,43,61,201,21,100]",
              "sol": "abi.encode(\"254,172,23,18,227,26,181,229,130,9,184,138,202,188,214,202,159,148,221,180,112,103,61,229,40,168,16,43,61,201,21,100\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.490ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[192,229,147,227,194,111,160,226,210,212,98,4,98,40,138,35,64,105,8,124,120,226,87,179,84,64,244,107,143,233,173,82]",
              "sol": "stringToBytes32(\"192,229,147,227,194,111,160,226,210,212,98,4,98,40,138,35,64,105,8,124,120,226,87,179,84,64,244,107,143,233,173,82\")"
            },
            {
              "js": "[158,77,119,187,164,253,154,104,52,93,98,109,252,52,20,107,114,164,239,134,155,35,19,54,53,153,86,113,31,49,213,189]",
              "sol": "abi.encode(\"158,77,119,187,164,253,154,104,52,93,98,109,252,52,20,107,114,164,239,134,155,35,19,54,53,153,86,113,31,49,213,189\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[192,229,147,227,194,111,160,226,210,212,98,4,98,40,138,35,64,105,8,124,120,226,87,179,84,64,244,107,143,233,173,82]",
                "sol": "stringToBytes32(\"192,229,147,227,194,111,160,226,210,212,98,4,98,40,138,35,64,105,8,124,120,226,87,179,84,64,244,107,143,233,173,82\")"
              },
              {
                "js": "[133,130,36,27,115,130,14,107,31,131,194,2,244,130,100,3,255,70,21,205,4,40,212,100,203,124,59,239,59,217,65,61,180]",
                "sol": "bytes33(\"133,130,36,27,115,130,14,107,31,131,194,2,244,130,100,3,255,70,21,205,4,40,212,100,203,124,59,239,59,217,65,61,180\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.491ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[64,181,185,234,34,218,95,35,253,77,150,251,122,106,13,98,237,32,28,171,154,105,45,85,129,252,213,213,56,92,3,151]",
              "sol": "abi.encode(\"64,181,185,234,34,218,95,35,253,77,150,251,122,106,13,98,237,32,28,171,154,105,45,85,129,252,213,213,56,92,3,151\")"
            },
            {
              "js": "[165,129,181,195,46,136,216,174,251,47,118,41,207,184,173,48,212,210,67,175,194,101,40,252,81,247,52,20,226,180,135,121]",
              "sol": "stringToBytes32(\"165,129,181,195,46,136,216,174,251,47,118,41,207,184,173,48,212,210,67,175,194,101,40,252,81,247,52,20,226,180,135,121\")"
            },
            {
              "js": "[191,168,250,47,188,24,5,31,131,7,64,132,82,144,206,19,244,251,8,52,86,37,23,173,179,230,163,86,165,206,80,57]",
              "sol": "abi.encode(\"191,168,250,47,188,24,5,31,131,7,64,132,82,144,206,19,244,251,8,52,86,37,23,173,179,230,163,86,165,206,80,57\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[21,252,32,249,30,94,186,234,218,28,73,107,155,133,95,104,189,20,5,37,36,118,206,87,34,156,54,7,217,213,13,184]",
              "sol": "abi.encode(\"21,252,32,249,30,94,186,234,218,28,73,107,155,133,95,104,189,20,5,37,36,118,206,87,34,156,54,7,217,213,13,184\")"
            },
            {
              "js": "[13,73,105,74,160,236,51,229,146,207,228,24,182,9,185,238,246,199,115,85,187,21,254,136,227,125,233,255,33,77,222,206]",
              "sol": "stringToBytes32(\"13,73,105,74,160,236,51,229,146,207,228,24,182,9,185,238,246,199,115,85,187,21,254,136,227,125,233,255,33,77,222,206\")"
            },
            {
              "js": "[83,184,255,231,115,101,123,187,234,72,187,43,167,186,188,186,29,84,152,155,244,21,232,177,6,169,97,233,70,70,15,207]",
              "sol": "abi.encode(\"83,184,255,231,115,101,123,187,234,72,187,43,167,186,188,186,29,84,152,155,244,21,232,177,6,169,97,233,70,70,15,207\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[18,174,134,19,229,10,233,236,153,140,160,239,23,200,143,13,168,54,147,189,60,26,187,105,203,108,214,233,94,213,67,156]",
              "sol": "abi.encode(\"18,174,134,19,229,10,233,236,153,140,160,239,23,200,143,13,168,54,147,189,60,26,187,105,203,108,214,233,94,213,67,156\")"
            },
            {
              "js": "[124,218,153,167,239,124,74,243,143,187,72,130,112,19,178,113,130,166,2,137,249,118,204,224,203,88,2,236,114,32,85,107]",
              "sol": "stringToBytes32(\"124,218,153,167,239,124,74,243,143,187,72,130,112,19,178,113,130,166,2,137,249,118,204,224,203,88,2,236,114,32,85,107\")"
            },
            {
              "js": "[200,149,65,81,240,185,121,224,147,56,193,156,187,179,22,49,84,150,195,10,154,0,181,39,179,78,128,27,254,83,89,113]",
              "sol": "abi.encode(\"200,149,65,81,240,185,121,224,147,56,193,156,187,179,22,49,84,150,195,10,154,0,181,39,179,78,128,27,254,83,89,113\")"
            },
            {
              "js": "\"w0h1mp\"",
              "sol": "\"w0h1mp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[131,140,120,51,222,38,47,36,203,139,81,34,1,242,155,78,190,102,245,74,178,107,41,100,15,165,21,98,52,236,116,42]",
              "sol": "abi.encode(\"131,140,120,51,222,38,47,36,203,139,81,34,1,242,155,78,190,102,245,74,178,107,41,100,15,165,21,98,52,236,116,42\")"
            },
            {
              "js": "[58,117,69,24,196,98,97,15,230,212,1,55,17,178,12,20,172,4,243,7,239,230,82,53,194,130,222,3,182,229,130,136]",
              "sol": "stringToBytes32(\"58,117,69,24,196,98,97,15,230,212,1,55,17,178,12,20,172,4,243,7,239,230,82,53,194,130,222,3,182,229,130,136\")"
            },
            {
              "js": "[175,113,149,202,233,224,89,34,62,222,242,66,117,212,147,115,93,223,181,206,46,79,198,19,185,178,253,84,144,128,28,240]",
              "sol": "abi.encode(\"175,113,149,202,233,224,89,34,62,222,242,66,117,212,147,115,93,223,181,206,46,79,198,19,185,178,253,84,144,128,28,240\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[220,218,15,54,204,79,77,32,132,0,164,71,52,252,59,99,131,158,141,138,178,13,167,5,213,183,115,58,172,146,8,32]",
              "sol": "abi.encode(\"220,218,15,54,204,79,77,32,132,0,164,71,52,252,59,99,131,158,141,138,178,13,167,5,213,183,115,58,172,146,8,32\")"
            },
            {
              "js": "[144,59,212,127,51,104,109,118,98,82,52,217,89,192,251,17,221,71,125,64,189,92,106,193,51,113,0,27,70,15,26,109]",
              "sol": "stringToBytes32(\"144,59,212,127,51,104,109,118,98,82,52,217,89,192,251,17,221,71,125,64,189,92,106,193,51,113,0,27,70,15,26,109\")"
            },
            {
              "js": "[206,13,42,7,166,254,87,191,175,56,58,198,3,208,192,241,213,39,1,135,103,83,56,234,216,201,166,2,78,58,106,46]",
              "sol": "abi.encode(\"206,13,42,7,166,254,87,191,175,56,58,198,3,208,192,241,213,39,1,135,103,83,56,234,216,201,166,2,78,58,106,46\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[62,211,148,226,102,80,99,54,213,115,20,13,146,54,112,112,187,172,92,150,136,70,62,241,139,32,77,181,230,200,73,26]",
              "sol": "abi.encode(\"62,211,148,226,102,80,99,54,213,115,20,13,146,54,112,112,187,172,92,150,136,70,62,241,139,32,77,181,230,200,73,26\")"
            },
            {
              "js": "[37,25,128,46,76,20,88,12,95,35,209,169,152,232,183,203,250,240,149,221,166,109,180,240,34,156,116,108,187,227,26,195]",
              "sol": "stringToBytes32(\"37,25,128,46,76,20,88,12,95,35,209,169,152,232,183,203,250,240,149,221,166,109,180,240,34,156,116,108,187,227,26,195\")"
            },
            {
              "js": "[178,215,101,234,196,116,110,11,74,193,21,106,180,68,225,247,215,190,82,142,170,203,55,177,130,22,49,235,10,112,143,195]",
              "sol": "abi.encode(\"178,215,101,234,196,116,110,11,74,193,21,106,180,68,225,247,215,190,82,142,170,203,55,177,130,22,49,235,10,112,143,195\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[141,232,107,201,78,39,203,250,201,118,12,67,142,2,74,191,240,153,187,4,112,220,157,222,156,183,58,79,165,144,182,15]",
              "sol": "abi.encode(\"141,232,107,201,78,39,203,250,201,118,12,67,142,2,74,191,240,153,187,4,112,220,157,222,156,183,58,79,165,144,182,15\")"
            },
            {
              "js": "[29,86,155,147,106,204,73,7,29,171,218,233,45,78,69,127,199,23,211,222,106,25,122,9,121,29,11,52,3,187,61,170]",
              "sol": "stringToBytes32(\"29,86,155,147,106,204,73,7,29,171,218,233,45,78,69,127,199,23,211,222,106,25,122,9,121,29,11,52,3,187,61,170\")"
            },
            {
              "js": "[175,60,238,210,157,7,80,227,93,176,10,120,49,152,3,176,172,208,10,37,168,204,9,223,26,136,151,217,38,106,131,76]",
              "sol": "abi.encode(\"175,60,238,210,157,7,80,227,93,176,10,120,49,152,3,176,172,208,10,37,168,204,9,223,26,136,151,217,38,106,131,76\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[50,179,122,47,120,208,33,37,204,236,204,70,173,59,78,28,121,43,8,154,223,137,245,198,199,195,248,19,105,65,158,17]",
              "sol": "abi.encode(\"50,179,122,47,120,208,33,37,204,236,204,70,173,59,78,28,121,43,8,154,223,137,245,198,199,195,248,19,105,65,158,17\")"
            },
            {
              "js": "[27,144,226,72,86,98,21,148,74,36,167,30,251,161,82,239,232,233,113,66,109,255,23,177,179,104,232,79,135,200,183,49]",
              "sol": "stringToBytes32(\"27,144,226,72,86,98,21,148,74,36,167,30,251,161,82,239,232,233,113,66,109,255,23,177,179,104,232,79,135,200,183,49\")"
            },
            {
              "js": "[167,175,232,77,145,223,20,162,228,85,200,118,213,191,123,138,240,193,59,42,139,100,107,115,156,184,149,104,22,120,79,143]",
              "sol": "abi.encode(\"167,175,232,77,145,223,20,162,228,85,200,118,213,191,123,138,240,193,59,42,139,100,107,115,156,184,149,104,22,120,79,143\")"
            },
            {
              "js": "\"8dtf3p\"",
              "sol": "\"8dtf3p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.502ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[24,176,125,50,105,152,204,165,79,90,194,55,159,118,60,152,224,19,134,36,40,35,210,111,54,11,2,29,142,232,0,152]",
              "sol": "abi.encode(\"24,176,125,50,105,152,204,165,79,90,194,55,159,118,60,152,224,19,134,36,40,35,210,111,54,11,2,29,142,232,0,152\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "[232,248,188,214,222,48,215,69,69,45,162,33,215,15,248,130,29,99,163,157,138,4,95,194,137,5,227,10,129,222,92,87]",
              "sol": "abi.encode(\"232,248,188,214,222,48,215,69,69,45,162,33,215,15,248,130,29,99,163,157,138,4,95,194,137,5,227,10,129,222,92,87\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.503ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[134,114,170,238,166,93,167,205,99,24,97,79,122,50,126,230,46,136,161,196,108,93,54,248,42,194,10,243,99,144,198,85]",
              "sol": "stringToBytes32(\"134,114,170,238,166,93,167,205,99,24,97,79,122,50,126,230,46,136,161,196,108,93,54,248,42,194,10,243,99,144,198,85\")"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[34,91,183,149,221,178,17,245,120,88,12,72,73,146,84,120,107,138,218,100,8,21,192,67,6,114,181,9,124,242,134,26]",
              "sol": "stringToBytes32(\"34,91,183,149,221,178,17,245,120,88,12,72,73,146,84,120,107,138,218,100,8,21,192,67,6,114,181,9,124,242,134,26\")"
            },
            {
              "js": "[212,154,15,232,98,172,218,187,91,219,174,55,106,235,98,200,127,59,3,152,199,240,59,26,60,68,104,179,6,4,205,253]",
              "sol": "stringToBytes32(\"212,154,15,232,98,172,218,187,91,219,174,55,106,235,98,200,127,59,3,152,199,240,59,26,60,68,104,179,6,4,205,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.504ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[218,156,22,220,136,89,158,131,175,211,54,128,202,185,79,4,8,3,218,103,59,12,241,20,135,73,210,31,20,160,123,234]",
              "sol": "stringToBytes32(\"218,156,22,220,136,89,158,131,175,211,54,128,202,185,79,4,8,3,218,103,59,12,241,20,135,73,210,31,20,160,123,234\")"
            },
            {
              "js": "[55,62,63,54,208,43,32,208,179,157,46,157,32,53,4,21,76,72,46,190,5,111,202,0,22,106]",
              "sol": "abi.encode(\"55,62,63,54,208,43,32,208,179,157,46,157,32,53,4,21,76,72,46,190,5,111,202,0,22,106\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[192,143,243,143,0,125,216,79,201,169,225,46,76,197,186,132,249,44,18,66,208,88,234,146,172,189,82,122,52,50,135,187]",
              "sol": "stringToBytes32(\"192,143,243,143,0,125,216,79,201,169,225,46,76,197,186,132,249,44,18,66,208,88,234,146,172,189,82,122,52,50,135,187\")"
            },
            {
              "js": "[148,225,119,145,47,3,138,156,129,4,227,177,77,211,119,64,87,7,247,192,14,15,237,80,3,175,69,212,128,76,198,147,187,225,72,129,7,32,112,195,143,112,134,46,107,77,231,142,197,85,23,138,245,8,80,145,192,183,35,136,101,162,107,15,212]",
              "sol": "abi.encode(\"148,225,119,145,47,3,138,156,129,4,227,177,77,211,119,64,87,7,247,192,14,15,237,80,3,175,69,212,128,76,198,147,187,225,72,129,7,32,112,195,143,112,134,46,107,77,231,142,197,85,23,138,245,8,80,145,192,183,35,136,101,162,107,15,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.505ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.506ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[27,97]",
              "sol": "[uint(27),uint(97)]"
            },
            {
              "js": "[[1,17],[26,1532892063]]",
              "sol": "[[uint(1),uint(17)],[uint(26),uint(1532892063)]]"
            },
            {
              "js": "[23,97]",
              "sol": "[uint(23),uint(97)]"
            },
            {
              "js": "[3,46]",
              "sol": "[uint(3),uint(46)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.510ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.510ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[6,20,200001,6,59,3,18,128,58]",
              "sol": "[uint(6),uint(20),uint(200001),uint(6),uint(59),uint(3),uint(18),uint(128),uint(58)]"
            },
            {
              "js": "{\"A\": {\"X\": 199999,\"Y\": 45},\"B\": {\"X\": [2,24],\"Y\": [200000,65]},\"C\": {\"X\": 46,\"Y\": 6}}",
              "sol": "Verifier.Proof(Pairing.G1Point(199999,45),Pairing.G2Point([uint(2),uint(24)],[uint(200000),uint(65)]),Pairing.G1Point(46,6))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[6,20,54,54,11,199999,128,11]",
              "sol": "[uint(6),uint(20),uint(54),uint(54),uint(11),uint(199999),uint(128),uint(11)]"
            },
            {
              "js": "{\"A\": {\"X\": 23,\"Y\": 58},\"B\": {\"X\": [56,70],\"Y\": [19,255]},\"C\": {\"X\": 101,\"Y\": 128}}",
              "sol": "Verifier.Proof(Pairing.G1Point(23,58),Pairing.G2Point([uint(56),uint(70)],[uint(19),uint(255)]),Pairing.G1Point(101,128))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.514ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.514ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.514ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"accounts[6]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.516ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.517ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.517ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.518ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.519ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.520ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[224,52,184,78,58,30,217,148,150,75,213,146,169,131,121,195,217,200,64,135,156,153,68,180,84,40,247,11,205,217,25,135]",
              "sol": "abi.encode(\"224,52,184,78,58,30,217,148,150,75,213,146,169,131,121,195,217,200,64,135,156,153,68,180,84,40,247,11,205,217,25,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[224,52,184,78,58,30,217,148,150,75,213,146,169,131,121,195,217,200,64,135,156,153,68,180,84,40,247,11,205,217,25,135]",
                "sol": "abi.encode(\"224,52,184,78,58,30,217,148,150,75,213,146,169,131,121,195,217,200,64,135,156,153,68,180,84,40,247,11,205,217,25,135\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.521ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.522ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[245,89,179,123]",
              "sol": "bytes4(\"245,89,179,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.524ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.524ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.525ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.527ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.528ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[159,184,214,62,18,239,47,52,41,132,254,225,157,126,12,136,246,118,30,101,180,238,230,144,24,37,139,136,208,252,255,215]",
              "sol": "abi.encode(\"159,184,214,62,18,239,47,52,41,132,254,225,157,126,12,136,246,118,30,101,180,238,230,144,24,37,139,136,208,252,255,215\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "[251,62,83,28,51,151,17,26,93,222,162,8,24,72,178,2,1,254,195,107,149,13,148,192,165,67,108,232,220,119,145,234]",
              "sol": "abi.encode(\"251,62,83,28,51,151,17,26,93,222,162,8,24,72,178,2,1,254,195,107,149,13,148,192,165,67,108,232,220,119,145,234\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.529ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.531ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[25,254]",
              "sol": "[uint(25),uint(254)]"
            },
            {
              "js": "[[1024,17],[18,26]]",
              "sol": "[[uint(1024),uint(17)],[uint(18),uint(26)]]"
            },
            {
              "js": "[21,20]",
              "sol": "[uint(21),uint(20)]"
            },
            {
              "js": "[71,254]",
              "sol": "[uint(71),uint(254)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.532ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.533ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.534ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.534ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.535ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.536ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.537ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.538ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.538ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.539ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.541ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "128",
                "sol": "128"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T12:10:48.542ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.543ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T12:10:48.543ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}