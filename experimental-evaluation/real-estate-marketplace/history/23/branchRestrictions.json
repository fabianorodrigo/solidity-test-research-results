,{
  "2020-11-12T12:51:16.561ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:51:31.510ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:51:46.377ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:01.478ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"58lwua\"",
              "sol": "\"58lwua\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:16.428ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:31.652ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.778ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [52,209,211,153,38,93,220,9,229,156,201,113,71,34,76,139,155,48,129,3,154,47,80,67,205,129,108,105,166,97,21,101],\"capacity\": 58}",
              "sol": "Buffer.buffer(abi.encode(\"52,209,211,153,38,93,220,9,229,156,201,113,71,34,76,139,155,48,129,3,154,47,80,67,205,129,108,105,166,97,21,101\"),58)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.783ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [249,95,19,177,65,67,31,177,189,164,50,60,152,68,184,158,248,66,150,37,239,18,128,48,172,122,80,76,173,150,30,126],\"capacity\": 18}",
              "sol": "Buffer.buffer(abi.encode(\"249,95,19,177,65,67,31,177,189,164,50,60,152,68,184,158,248,66,150,37,239,18,128,48,172,122,80,76,173,150,30,126\"),18)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [26,152,36,148,244,216,29,124,69,22,170,221,186,115,88,62,86,129,110,97,40,156,97,166,32,20,172,83,179,89,243,95],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"26,152,36,148,244,216,29,124,69,22,170,221,186,115,88,62,86,129,110,97,40,156,97,166,32,20,172,83,179,89,243,95\"),28)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.785ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [104,6,250,87,119,43,115,33,59,22,20,93,92,7,154,204,222,146,101,60,250,217,130,130,243,90,8,135,99,6,211,223],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"104,6,250,87,119,43,115,33,59,22,20,93,92,7,154,204,222,146,101,60,250,217,130,130,243,90,8,135,99,6,211,223\"),24)"
            },
            {
              "js": "[65,89,215,203,74,239,247,152,116,214,148,97,28,231,3,202,201,192,227,109,221,18,171,212,91,107,207,243,143,191,121,110]",
              "sol": "abi.encode(\"65,89,215,203,74,239,247,152,116,214,148,97,28,231,3,202,201,192,227,109,221,18,171,212,91,107,207,243,143,191,121,110\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.785ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [68,97,101,125,79,115,240,7,198,67,144,236,135,163,198,210,69,137,249,186,148,213,160,99,25,197,244,45,91,134,24,88],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"68,97,101,125,79,115,240,7,198,67,144,236,135,163,198,210,69,137,249,186,148,213,160,99,25,197,244,45,91,134,24,88\"),27)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.786ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [236,110,146,132,207,175,8,187,246,128,2,202,228,18,91,171,255,35,210,207,27,235,225,182,112,104,76,10,127,161,84,183],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"236,110,146,132,207,175,8,187,246,128,2,202,228,18,91,171,255,35,210,207,27,235,225,182,112,104,76,10,127,161,84,183\"),55)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.786ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [171,30,1,247,137,77,197,24,143,20,33,178,196,37,177,38,245,26,111,99,13,71,127,195,239,55,23,177,235,226,11,102],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"171,30,1,247,137,77,197,24,143,20,33,178,196,37,177,38,245,26,111,99,13,71,127,195,239,55,23,177,235,226,11,102\"),55)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.786ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [39,122,124,152,93,5,225,156,120,74,44,56,201,46,83,28,119,127,2,119,219,11,231,230,81,71,236,140,5,250,31,74],\"capacity\": 86}",
              "sol": "Buffer.buffer(abi.encode(\"39,122,124,152,93,5,225,156,120,74,44,56,201,46,83,28,119,127,2,119,219,11,231,230,81,71,236,140,5,250,31,74\"),86)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.792ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.792ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.792ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 161,\"Y\": 65}",
              "sol": "Pairing.G1Point(161,65)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.793ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 1532892064,\"Y\": 23}",
              "sol": "Pairing.G1Point(1532892064,23)"
            },
            {
              "js": "{\"X\": 1,\"Y\": 71}",
              "sol": "Pairing.G1Point(1,71)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.794ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [23,162],\"Y\": [0,129]}",
              "sol": "Pairing.G2Point([uint(23),uint(162)],[uint(0),uint(129)])"
            },
            {
              "js": "{\"X\": [2014223714,1024],\"Y\": [87,2]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(1024)],[uint(87),uint(2)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.794ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 103,\"Y\": 256}",
              "sol": "Pairing.G1Point(103,256)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.795ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 86,\"Y\": 20},{\"X\": 18,\"Y\": 103},{\"X\": 20,\"Y\": 60},{\"X\": 3,\"Y\": 4},{\"X\": 2014223715,\"Y\": 1024},{\"X\": 1025,\"Y\": 18},{\"X\": 96,\"Y\": 1024}]",
              "sol": "[Pairing.G1Point(86,20),Pairing.G1Point(18,103),Pairing.G1Point(20,60),Pairing.G1Point(3,4),Pairing.G1Point(2014223715,1024),Pairing.G1Point(1025,18),Pairing.G1Point(96,1024)]"
            },
            {
              "js": "[{\"X\": [7,54],\"Y\": [1,5]},{\"X\": [200000,31],\"Y\": [23,27]},{\"X\": [2,255],\"Y\": [71,1532892063]},{\"X\": [21,10],\"Y\": [18,48]},{\"X\": [96,27],\"Y\": [1532892064,29]},{\"X\": [127,48],\"Y\": [127,27]},{\"X\": [1,1024],\"Y\": [66,1023]}]",
              "sol": "[Pairing.G2Point([uint(7),uint(54)],[uint(1),uint(5)]),Pairing.G2Point([uint(200000),uint(31)],[uint(23),uint(27)]),Pairing.G2Point([uint(2),uint(255)],[uint(71),uint(1532892063)]),Pairing.G2Point([uint(21),uint(10)],[uint(18),uint(48)]),Pairing.G2Point([uint(96),uint(27)],[uint(1532892064),uint(29)]),Pairing.G2Point([uint(127),uint(48)],[uint(127),uint(27)]),Pairing.G2Point([uint(1),uint(1024)],[uint(66),uint(1023)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 1024,\"Y\": 95},{\"X\": 20,\"Y\": 33},{\"X\": 95,\"Y\": 1023},{\"X\": 63,\"Y\": 0},{\"X\": 96,\"Y\": 8},{\"X\": 18,\"Y\": 1532892062},{\"X\": 66,\"Y\": 15},{\"X\": 32,\"Y\": 16}]",
                "sol": "[Pairing.G1Point(1025,101),Pairing.G1Point(20,29),Pairing.G1Point(22,254),Pairing.G1Point(2014223714,45),Pairing.G1Point(30,56),Pairing.G1Point(61,30),Pairing.G1Point(49,2014223715),Pairing.G1Point(3,199999)]"
              },
              {
                "js": "[{\"X\": [7,54],\"Y\": [1,5]},{\"X\": [200000,31],\"Y\": [23,27]},{\"X\": [2,255],\"Y\": [71,1532892063]},{\"X\": [21,10],\"Y\": [18,48]},{\"X\": [96,27],\"Y\": [1532892064,29]},{\"X\": [127,48],\"Y\": [127,27]},{\"X\": [1,1024],\"Y\": [66,1023]}]",
                "sol": "[Pairing.G2Point([uint(7),uint(54)],[uint(1),uint(5)]),Pairing.G2Point([uint(200000),uint(31)],[uint(23),uint(27)]),Pairing.G2Point([uint(2),uint(255)],[uint(71),uint(1532892063)]),Pairing.G2Point([uint(21),uint(10)],[uint(18),uint(48)]),Pairing.G2Point([uint(96),uint(27)],[uint(1532892064),uint(29)]),Pairing.G2Point([uint(127),uint(48)],[uint(127),uint(27)]),Pairing.G2Point([uint(1),uint(1024)],[uint(66),uint(1023)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.801ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 95,\"Y\": 31}",
              "sol": "Pairing.G1Point(95,31)"
            },
            {
              "js": "{\"X\": [59,25],\"Y\": [64,70]}",
              "sol": "Pairing.G2Point([uint(59),uint(25)],[uint(64),uint(70)])"
            },
            {
              "js": "{\"X\": 18,\"Y\": 129}",
              "sol": "Pairing.G1Point(18,129)"
            },
            {
              "js": "{\"X\": [56,26],\"Y\": [1024,54]}",
              "sol": "Pairing.G2Point([uint(56),uint(26)],[uint(1024),uint(54)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.802ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 101,\"Y\": 255}",
              "sol": "Pairing.G1Point(101,255)"
            },
            {
              "js": "{\"X\": [27,199999],\"Y\": [88,9]}",
              "sol": "Pairing.G2Point([uint(27),uint(199999)],[uint(88),uint(9)])"
            },
            {
              "js": "{\"X\": 2014223714,\"Y\": 95}",
              "sol": "Pairing.G1Point(2014223714,95)"
            },
            {
              "js": "{\"X\": [162,9],\"Y\": [63,19]}",
              "sol": "Pairing.G2Point([uint(162),uint(9)],[uint(63),uint(19)])"
            },
            {
              "js": "{\"X\": 29,\"Y\": 27}",
              "sol": "Pairing.G1Point(29,27)"
            },
            {
              "js": "{\"X\": [55,23],\"Y\": [63,46]}",
              "sol": "Pairing.G2Point([uint(55),uint(23)],[uint(63),uint(46)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.808ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.809ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.809ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.810ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.810ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.811ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.811ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.813ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.814ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.814ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.815ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.817ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [59,121,82,3,186,35,197,38,126,225,31,174,212,9,103,186,151,177,72,250,250,169,107,125,10,76,121,48,155,69,5,155],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"59,121,82,3,186,35,197,38,126,225,31,174,212,9,103,186,151,177,72,250,250,169,107,125,10,76,121,48,155,69,5,155\"),97)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.818ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [231,189,176,111,126,227,123,73,246,210,118,151,121,176,192,183,55,232,68,235,33,166,152,251,54,166,128,146,86,14,241,65],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"231,189,176,111,126,227,123,73,246,210,118,151,121,176,192,183,55,232,68,235,33,166,152,251,54,166,128,146,86,14,241,65\"),97)"
            },
            {
              "js": "[146,219,80,214,246,195,70,96,87,129,47,138,185,35,124,90,69,175,100,29,154,153,162,74,24,193,156,51,55,226,12,45]",
              "sol": "abi.encode(\"146,219,80,214,246,195,70,96,87,129,47,138,185,35,124,90,69,175,100,29,154,153,162,74,24,193,156,51,55,226,12,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.818ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [20,169,146,138,176,40,228,3,34,241,182,11,0,128,200,175,93,57,56,82,122,145,157,134,59,61,8,240,205,104,137,112],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"20,169,146,138,176,40,228,3,34,241,182,11,0,128,200,175,93,57,56,82,122,145,157,134,59,61,8,240,205,104,137,112\"),16)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.819ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [80,203,67,154,204,160,233,153,106,97,219,108,186,97,177,18,129,148,193,194,5,54,251,194,34,23,56,150,40,42,169,34],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"80,203,67,154,204,160,233,153,106,97,219,108,186,97,177,18,129,148,193,194,5,54,251,194,34,23,56,150,40,42,169,34\"),57)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.820ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[141,45,139,56,25,76,113,250,249,107,152,2,77,247,107,126,163,158,108,150,117,101,102,238,254,81,170,111,176,119,101,81]",
              "sol": "stringToBytes32(\"141,45,139,56,25,76,113,250,249,107,152,2,77,247,107,126,163,158,108,150,117,101,102,238,254,81,170,111,176,119,101,81\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.821ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[104,218,11,208,218,50,176,105,98,137,222,183,33,98,170,191,175,217,79,128,99,159,124,34,93,132,43,185,184,118,217,156]",
              "sol": "stringToBytes32(\"104,218,11,208,218,50,176,105,98,137,222,183,33,98,170,191,175,217,79,128,99,159,124,34,93,132,43,185,184,118,217,156\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[158,209,103,192,187,18,25,56,142,85,107,73,99,198,233,46,52,245,203,34,221,110,87,216,23,38,98,99,144,29,27,19]",
              "sol": "abi.encode(\"158,209,103,192,187,18,25,56,142,85,107,73,99,198,233,46,52,245,203,34,221,110,87,216,23,38,98,99,144,29,27,19\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.861ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.862ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.862ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.863ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.863ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.863ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.864ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.864ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.864ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.865ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.865ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.866ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.866ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"58lwua\"",
              "sol": "\"58lwua\""
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.867ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"58lwua\"",
              "sol": "\"58lwua\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.867ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "[\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"939v\",\"7g033\",\"\\x19Ethereum Signed Message:\\n32\",\"[\",\"7g033\",\"0\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"939v\"),string(\"7g033\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"[\"),string(\"7g033\"),string(\"0\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.868ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"[\",\"939v\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"[\"),string(\"939v\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.869ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"[\",\"Capstones\",\"0\",\"939v\",\"P\",\"yylc1n\",\"939v\",\"Transaction successfully verified.\",\"6jx0oo\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"[\"),string(\"Capstones\"),string(\"0\"),string(\"939v\"),string(\"P\"),string(\"yylc1n\"),string(\"939v\"),string(\"Transaction successfully verified.\"),string(\"6jx0oo\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.870ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"[\",\"6jx0oo\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"6jx0oo\",\"P\",\"58lwua\",\"4f68ak\"]",
              "sol": "[string(\"[\"),string(\"6jx0oo\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"6jx0oo\"),string(\"P\"),string(\"58lwua\"),string(\"4f68ak\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.870ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"7g033\"]",
              "sol": "[string(\"7g033\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.870ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.871ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"4f68ak\"]",
              "sol": "[string(\"4f68ak\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.871ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.872ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"L\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.872ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "[\"P\",\"4f68ak\"]",
              "sol": "[string(\"P\"),string(\"4f68ak\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.873ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"ryws7\"",
              "sol": "\"ryws7\""
            },
            {
              "js": "[\"7zsfsu\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"7zsfsu\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.873ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "[\"L\",\"ryws7\"]",
              "sol": "[string(\"L\"),string(\"ryws7\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.874ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[\"Capstones\",\"6jx0oo\",\"[\"]",
              "sol": "[string(\"Capstones\"),string(\"6jx0oo\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.874ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"939v\",\"\\x19Ethereum Signed Message:\\n32\",\"0\"]",
              "sol": "[string(\"939v\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.875ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "[\"939v\",\"\\x19Ethereum Signed Message:\\n32\",\"7zsfsu\"]",
              "sol": "[string(\"939v\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"7zsfsu\")]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.876ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "[\"6jx0oo\",\"yylc1n\",\"939v\"]",
              "sol": "[string(\"6jx0oo\"),string(\"yylc1n\"),string(\"939v\")]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.876ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "[\"4f68ak\",\"lgetno\",\"\\x19Ethereum Signed Message:\\n32\",\"Capstones\"]",
              "sol": "[string(\"4f68ak\"),string(\"lgetno\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.877ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "[\"7zsfsu\",\"[\",\"7g033\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"7zsfsu\"),string(\"[\"),string(\"7g033\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.877ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"7zsfsu\"",
              "sol": "\"7zsfsu\""
            },
            {
              "js": "[\"7zsfsu\",\"727mbt\",\"L\",\"4f68ak\"]",
              "sol": "[string(\"7zsfsu\"),string(\"727mbt\"),string(\"L\"),string(\"4f68ak\")]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.878ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"P\",\"58lwua\",\"P\",\"lgetno\"]",
              "sol": "[string(\"P\"),string(\"58lwua\"),string(\"P\"),string(\"lgetno\")]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.878ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"7g033\",\"727mbt\",\"939v\",\"Capstones\",\"727mbt\"]",
              "sol": "[string(\"7g033\"),string(\"727mbt\"),string(\"939v\"),string(\"Capstones\"),string(\"727mbt\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.879ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"7zsfsu\"",
              "sol": "\"7zsfsu\""
            },
            {
              "js": "[\"7g033\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"939v\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"7g033\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"939v\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.879ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"7zsfsu\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\",\"bcpn7u\"]",
              "sol": "[string(\"7zsfsu\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"bcpn7u\")]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.880ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"6jx0oo\"",
              "sol": "\"6jx0oo\""
            },
            {
              "js": "[\"yylc1n\",\"ERC1820_ACCEPT_MAGIC\",\"7zsfsu\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\"]",
              "sol": "[string(\"yylc1n\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"7zsfsu\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\")]"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.881ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[4,40,111,132,65,142,15,245,25,210,150,215,66,146,106,51,38,225,210,243,174,39,170,207,47,7,49,219,199,75,188,199],[78,228,235,88,160,179,74,34,176,117,82,101,50,242,172,214,92,157,47,162,163,162,247,170,195,2,182,157,203,113,146,152],[233,220,197,175,93,231,73,74,233,62,252,203,226,113,49,101,90,216,37,55,213,225,210,33,92,157,129,177,111,160,60,222],[255,91,163,19,118,20,16,76,126,65,188,98,13,42,188,109,20,173,249,253,205,182,6,184,124,151,239,53,93,173,195,37]]",
              "sol": "[bytes(abi.encode(\"4,40,111,132,65,142,15,245,25,210,150,215,66,146,106,51,38,225,210,243,174,39,170,207,47,7,49,219,199,75,188,199\")),bytes(abi.encode(\"78,228,235,88,160,179,74,34,176,117,82,101,50,242,172,214,92,157,47,162,163,162,247,170,195,2,182,157,203,113,146,152\")),bytes(abi.encode(\"233,220,197,175,93,231,73,74,233,62,252,203,226,113,49,101,90,216,37,55,213,225,210,33,92,157,129,177,111,160,60,222\")),bytes(abi.encode(\"255,91,163,19,118,20,16,76,126,65,188,98,13,42,188,109,20,173,249,253,205,182,6,184,124,151,239,53,93,173,195,37\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.881ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"bcpn7u\"",
              "sol": "\"bcpn7u\""
            },
            {
              "js": "[[9,100,44,151,216,40,224,237,50,106,25,62,106,221,246,18,30,111,28,20,150,217,90,121,200,45,17,124,67,27,134,202]]",
              "sol": "[bytes(abi.encode(\"9,100,44,151,216,40,224,237,50,106,25,62,106,221,246,18,30,111,28,20,150,217,90,121,200,45,17,124,67,27,134,202\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.882ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[96,234,193,209,182,198,31,118,216,252,51,82,168,189,215,133,24,51,86,196,82,171,40,97,46,128,36,61,87,188,139,236],[115,154,148,190,67,19,76,80,252,28,142,2,182,224,211,97,196,50,21,208,254,199,149,102,86,222,137,74,10,234,8,240],[224,75,90,248,27,107,46,128,101,116,91,5,77,116,10,177,171,170,74,60,101,123,25,122,99,200,244,78,194,241,247,226]]",
              "sol": "[bytes(abi.encode(\"96,234,193,209,182,198,31,118,216,252,51,82,168,189,215,133,24,51,86,196,82,171,40,97,46,128,36,61,87,188,139,236\")),bytes(abi.encode(\"115,154,148,190,67,19,76,80,252,28,142,2,182,224,211,97,196,50,21,208,254,199,149,102,86,222,137,74,10,234,8,240\")),bytes(abi.encode(\"224,75,90,248,27,107,46,128,101,116,91,5,77,116,10,177,171,170,74,60,101,123,25,122,99,200,244,78,194,241,247,226\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.882ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[183,112,180,139,35,166,243,56,8,41,254,243,255,83,186,10,64,10,132,246,105,93,210,192,66,56,113,155,115,121,237,4],[114,250,50,190,97,109,248,0,104,103,10,126,14,194,80,49,2,15,89,93,51,74,94,205,5,100,66,89,214,237,67,163],[240,251,113,133,86,52,250,254,176,93,65,210,218,138,214,162,122,153,43,130,202,2,17,148,3,4,102,222,112,243,119,190],[46,176,174,67,1,68,126,180,53,192,66,89,154,110,35,4,18,87,2,170,78,211,35,199,30,155,213,125,72,189,76,41],[154,209,114,189,123,235,226,145,28,98,128,66,115,242,62,3,142,92,193,99,39,196,178,26,17,77,86,156,242,249,133,199],[41,248,253,178,126,124,57,159,37,86,55,168,61,245,235,105,199,201,237,240,122,6,19,133,254,16,2,53,162,184,23,237]]",
              "sol": "[bytes(abi.encode(\"183,112,180,139,35,166,243,56,8,41,254,243,255,83,186,10,64,10,132,246,105,93,210,192,66,56,113,155,115,121,237,4\")),bytes(abi.encode(\"114,250,50,190,97,109,248,0,104,103,10,126,14,194,80,49,2,15,89,93,51,74,94,205,5,100,66,89,214,237,67,163\")),bytes(abi.encode(\"240,251,113,133,86,52,250,254,176,93,65,210,218,138,214,162,122,153,43,130,202,2,17,148,3,4,102,222,112,243,119,190\")),bytes(abi.encode(\"46,176,174,67,1,68,126,180,53,192,66,89,154,110,35,4,18,87,2,170,78,211,35,199,30,155,213,125,72,189,76,41\")),bytes(abi.encode(\"154,209,114,189,123,235,226,145,28,98,128,66,115,242,62,3,142,92,193,99,39,196,178,26,17,77,86,156,242,249,133,199\")),bytes(abi.encode(\"41,248,253,178,126,124,57,159,37,86,55,168,61,245,235,105,199,201,237,240,122,6,19,133,254,16,2,53,162,184,23,237\"))]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.883ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"6jx0oo\"",
              "sol": "\"6jx0oo\""
            },
            {
              "js": "[[23,234,219,47,45,125,154,107,36,248,161,62,110,12,234,95,56,218,2,23,228,115,65,252,108,203,152,165,38,165,214,117]]",
              "sol": "[bytes(abi.encode(\"23,234,219,47,45,125,154,107,36,248,161,62,110,12,234,95,56,218,2,23,228,115,65,252,108,203,152,165,38,165,214,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.884ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[[82,244,255,193,122,214,229,141,212,91,225,184,169,65,211,54,103,106,47,50,133,112,196,196,229,81,181,58,43,135,86,224]]",
              "sol": "[bytes(abi.encode(\"82,244,255,193,122,214,229,141,212,91,225,184,169,65,211,54,103,106,47,50,133,112,196,196,229,81,181,58,43,135,86,224\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.884ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"58lwua\"",
              "sol": "\"58lwua\""
            },
            {
              "js": "[[45,107,255,46,3,203,126,185,91,87,244,105,145,91,6,185,194,121,241,65,64,189,206,54,71,147,150,202,22,147,74,94]]",
              "sol": "[bytes(abi.encode(\"45,107,255,46,3,203,126,185,91,87,244,105,145,91,6,185,194,121,241,65,64,189,206,54,71,147,150,202,22,147,74,94\"))]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.885ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[193,87,215,63,100,192,181,99,33,91,155,152,64,121,188,32,156,79,98,145,235,148,242,68,186,21,254,52,208,152,166,236]]",
              "sol": "[bytes(abi.encode(\"193,87,215,63,100,192,181,99,33,91,155,152,64,121,188,32,156,79,98,145,235,148,242,68,186,21,254,52,208,152,166,236\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.886ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[[1,225,121,233,29,234,254,154,180,127,125,186,252,225,17,43,79,106,130,39,91,116,223,198,179,216,16,205,253,7,178,18],[153,79,246,255,224,138,59,152,90,131,21,252,171,85,246,128,201,58,108,222,115,94,37,231,216,239,56,63,160,70,80,43]]",
              "sol": "[bytes(abi.encode(\"1,225,121,233,29,234,254,154,180,127,125,186,252,225,17,43,79,106,130,39,91,116,223,198,179,216,16,205,253,7,178,18\")),bytes(abi.encode(\"153,79,246,255,224,138,59,152,90,131,21,252,171,85,246,128,201,58,108,222,115,94,37,231,216,239,56,63,160,70,80,43\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.887ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[137,129,228,138,28,8,130,167,8,38,47,46,208,109,234,73,176,139,153,249,225,54,112,161,155,140,220,89,102,190,108,252],[252,123,174,135,38,134,137,212,105,150,162,22,38,42,222,18,209,22,96,171,68,54,251,188,28,103,103,190,205,182,90,49]]",
              "sol": "[bytes(abi.encode(\"137,129,228,138,28,8,130,167,8,38,47,46,208,109,234,73,176,139,153,249,225,54,112,161,155,140,220,89,102,190,108,252\")),bytes(abi.encode(\"252,123,174,135,38,134,137,212,105,150,162,22,38,42,222,18,209,22,96,171,68,54,251,188,28,103,103,190,205,182,90,49\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.887ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[15,83,59,38,62,30,231,96,14,254,172,82,191,172,219,191,11,187,232,124,115,2,16,216,62,230,19,146,188,243,125,66],[30,46,215,104,226,136,1,94,22,171,255,86,79,244,160,66,213,36,158,48,178,77,111,246,174,178,52,174,206,209,23,255]]",
              "sol": "[bytes(abi.encode(\"15,83,59,38,62,30,231,96,14,254,172,82,191,172,219,191,11,187,232,124,115,2,16,216,62,230,19,146,188,243,125,66\")),bytes(abi.encode(\"30,46,215,104,226,136,1,94,22,171,255,86,79,244,160,66,213,36,158,48,178,77,111,246,174,178,52,174,206,209,23,255\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.888ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "[[216,225,96,196,68,103,184,95,206,98,99,100,107,174,115,5,161,31,102,169,186,129,245,251,92,238,38,70,247,43,208,147],[60,25,128,110,183,144,97,131,83,89,178,241,197,213,104,182,130,62,198,162,92,151,182,210,103,165,219,33,45,7,223,193]]",
              "sol": "[bytes(abi.encode(\"216,225,96,196,68,103,184,95,206,98,99,100,107,174,115,5,161,31,102,169,186,129,245,251,92,238,38,70,247,43,208,147\")),bytes(abi.encode(\"60,25,128,110,183,144,97,131,83,89,178,241,197,213,104,182,130,62,198,162,92,151,182,210,103,165,219,33,45,7,223,193\"))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.888ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"6jx0oo\"",
              "sol": "\"6jx0oo\""
            },
            {
              "js": "[[112,123,119,88,59,36,16,6,108,52,191,23,30,107,196,217,221,76,38,196,173,60,192,238,235,247,200,116,112,33,227,26],[1,161,153,46,56,69,211,78,6,254,193,77,77,175,68,131,35,21,10,236,36,166,204,33,22,165,192,61,166,209,134,161],[103,159,97,151,216,93,165,136,118,181,254,24,31,235,200,164,187,250,126,96,4,143,84,230,82,151,125,161,198,27,123,43]]",
              "sol": "[bytes(abi.encode(\"112,123,119,88,59,36,16,6,108,52,191,23,30,107,196,217,221,76,38,196,173,60,192,238,235,247,200,116,112,33,227,26\")),bytes(abi.encode(\"1,161,153,46,56,69,211,78,6,254,193,77,77,175,68,131,35,21,10,236,36,166,204,33,22,165,192,61,166,209,134,161\")),bytes(abi.encode(\"103,159,97,151,216,93,165,136,118,181,254,24,31,235,200,164,187,250,126,96,4,143,84,230,82,151,125,161,198,27,123,43\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.889ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[232,123,151,16,228,177,243,68,32,145,87,38,184,212,228,44,97,174,167,90,48,151,10,88,114,8,180,21,153,63,170,196],[192,109,205,104,62,120,51,220,160,61,70,249,87,238,215,21,80,110,95,95,189,234,141,186,44,199,158,64,111,79,187,203],[13,49,246,69,54,253,176,122,54,117,255,192,152,81,91,14,76,36,99,80,58,89,19,248,187,203,245,251,138,231,135,94]]",
              "sol": "[bytes(abi.encode(\"232,123,151,16,228,177,243,68,32,145,87,38,184,212,228,44,97,174,167,90,48,151,10,88,114,8,180,21,153,63,170,196\")),bytes(abi.encode(\"192,109,205,104,62,120,51,220,160,61,70,249,87,238,215,21,80,110,95,95,189,234,141,186,44,199,158,64,111,79,187,203\")),bytes(abi.encode(\"13,49,246,69,54,253,176,122,54,117,255,192,152,81,91,14,76,36,99,80,58,89,19,248,187,203,245,251,138,231,135,94\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.889ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[[237,30,55,66,115,39,77,192,13,46,37,130,247,168,138,6,127,99,223,156,115,235,169,142,156,149,8,13,82,207,165,248],[150,43,28,220,249,86,146,243,90,48,224,112,146,232,152,247,66,79,70,47,162,253,29,26,246,209,112,78,85,192,70,218],[175,39,43,8,247,58,195,216,151,89,155,238,193,6,101,212,71,52,30,158,134,151,226,56,126,128,66,137,33,29,59,69]]",
              "sol": "[bytes(abi.encode(\"237,30,55,66,115,39,77,192,13,46,37,130,247,168,138,6,127,99,223,156,115,235,169,142,156,149,8,13,82,207,165,248\")),bytes(abi.encode(\"150,43,28,220,249,86,146,243,90,48,224,112,146,232,152,247,66,79,70,47,162,253,29,26,246,209,112,78,85,192,70,218\")),bytes(abi.encode(\"175,39,43,8,247,58,195,216,151,89,155,238,193,6,101,212,71,52,30,158,134,151,226,56,126,128,66,137,33,29,59,69\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.890ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[199,249,140,42,143,46,178,106,146,199,130,172,137,231,77,101,142,48,239,65,35,235,225,82,212,90,189,61,127,197,174,151],[97,233,204,190,18,107,206,230,178,214,73,91,216,78,113,119,217,120,182,45,251,12,1,225,18,154,198,20,71,98,3,164],[94,180,221,76,252,213,36,53,41,13,61,213,173,171,53,240,250,255,85,238,192,244,203,249,55,41,235,243,146,62,166,91]]",
              "sol": "[bytes(abi.encode(\"199,249,140,42,143,46,178,106,146,199,130,172,137,231,77,101,142,48,239,65,35,235,225,82,212,90,189,61,127,197,174,151\")),bytes(abi.encode(\"97,233,204,190,18,107,206,230,178,214,73,91,216,78,113,119,217,120,182,45,251,12,1,225,18,154,198,20,71,98,3,164\")),bytes(abi.encode(\"94,180,221,76,252,213,36,53,41,13,61,213,173,171,53,240,250,255,85,238,192,244,203,249,55,41,235,243,146,62,166,91\"))]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.891ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[[158,72,33,180,60,54,246,113,126,4,14,169,162,216,38,125,215,148,192,71,231,127,173,215,29,195,169,137,180,216,17,128],[110,130,96,115,155,122,90,104,31,151,62,108,177,140,122,169,47,251,176,37,34,31,7,60,157,159,60,10,214,26,146,252],[195,69,237,166,13,125,179,126,96,230,45,224,184,181,100,59,124,213,159,199,100,91,177,138,199,180,106,241,216,143,234,118],[73,37,212,47,224,56,83,23,11,62,152,56,83,30,217,142,7,26,128,165,200,35,0,181,154,236,140,101,193,30,154,125]]",
              "sol": "[bytes(abi.encode(\"158,72,33,180,60,54,246,113,126,4,14,169,162,216,38,125,215,148,192,71,231,127,173,215,29,195,169,137,180,216,17,128\")),bytes(abi.encode(\"110,130,96,115,155,122,90,104,31,151,62,108,177,140,122,169,47,251,176,37,34,31,7,60,157,159,60,10,214,26,146,252\")),bytes(abi.encode(\"195,69,237,166,13,125,179,126,96,230,45,224,184,181,100,59,124,213,159,199,100,91,177,138,199,180,106,241,216,143,234,118\")),bytes(abi.encode(\"73,37,212,47,224,56,83,23,11,62,152,56,83,30,217,142,7,26,128,165,200,35,0,181,154,236,140,101,193,30,154,125\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.891ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"gpffaj\"",
              "sol": "\"gpffaj\""
            },
            {
              "js": "[[215,119,161,129,226,218,176,88,238,75,214,32,124,35,88,128,161,25,189,115,209,28,78,253,105,206,242,19,95,202,188,21],[116,219,86,2,52,141,196,30,85,23,11,46,242,154,79,255,247,116,39,77,143,11,130,28,98,231,139,206,175,102,11,73],[119,116,34,69,152,191,40,73,238,12,208,29,81,120,192,141,1,42,74,20,171,255,199,105,105,251,162,201,2,218,87,17],[80,180,23,30,240,227,124,94,233,66,161,32,150,191,67,242,184,203,43,53,52,175,191,122,98,211,49,250,175,152,211,175]]",
              "sol": "[bytes(abi.encode(\"215,119,161,129,226,218,176,88,238,75,214,32,124,35,88,128,161,25,189,115,209,28,78,253,105,206,242,19,95,202,188,21\")),bytes(abi.encode(\"116,219,86,2,52,141,196,30,85,23,11,46,242,154,79,255,247,116,39,77,143,11,130,28,98,231,139,206,175,102,11,73\")),bytes(abi.encode(\"119,116,34,69,152,191,40,73,238,12,208,29,81,120,192,141,1,42,74,20,171,255,199,105,105,251,162,201,2,218,87,17\")),bytes(abi.encode(\"80,180,23,30,240,227,124,94,233,66,161,32,150,191,67,242,184,203,43,53,52,175,191,122,98,211,49,250,175,152,211,175\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.892ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[202,120,215,10,15,2,162,24,171,41,250,118,126,50,242,175,81,107,131,206,43,15,101,155,196,239,43,245,200,246,248,88],[227,40,73,221,9,211,31,91,29,136,218,195,160,30,204,114,242,47,28,33,198,228,61,211,10,187,85,29,239,140,232,181],[110,89,210,40,245,95,171,146,15,236,27,160,191,89,63,214,240,215,121,207,96,76,31,12,221,113,68,205,44,15,51,185],[122,9,93,115,188,232,85,99,90,1,48,236,190,34,249,67,247,244,196,86,144,126,205,28,245,246,176,78,131,65,165,236]]",
              "sol": "[bytes(abi.encode(\"202,120,215,10,15,2,162,24,171,41,250,118,126,50,242,175,81,107,131,206,43,15,101,155,196,239,43,245,200,246,248,88\")),bytes(abi.encode(\"227,40,73,221,9,211,31,91,29,136,218,195,160,30,204,114,242,47,28,33,198,228,61,211,10,187,85,29,239,140,232,181\")),bytes(abi.encode(\"110,89,210,40,245,95,171,146,15,236,27,160,191,89,63,214,240,215,121,207,96,76,31,12,221,113,68,205,44,15,51,185\")),bytes(abi.encode(\"122,9,93,115,188,232,85,99,90,1,48,236,190,34,249,67,247,244,196,86,144,126,205,28,245,246,176,78,131,65,165,236\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.892ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "[[198,57,241,25,155,43,28,28,249,122,170,167,55,20,142,131,131,85,197,215,33,251,122,118,79,236,216,50,40,5,27,32],[107,112,122,53,152,38,61,56,255,229,150,155,244,151,157,238,5,102,112,126,150,51,19,109,109,119,185,215,125,138,229,167],[109,134,57,13,219,97,216,1,40,24,26,200,105,92,162,191,103,220,191,173,2,121,144,204,118,251,67,228,136,163,102,129],[19,167,201,51,235,47,235,49,86,187,173,45,125,14,34,209,193,177,83,40,19,211,133,27,81,165,200,184,201,178,230,53]]",
              "sol": "[bytes(abi.encode(\"198,57,241,25,155,43,28,28,249,122,170,167,55,20,142,131,131,85,197,215,33,251,122,118,79,236,216,50,40,5,27,32\")),bytes(abi.encode(\"107,112,122,53,152,38,61,56,255,229,150,155,244,151,157,238,5,102,112,126,150,51,19,109,109,119,185,215,125,138,229,167\")),bytes(abi.encode(\"109,134,57,13,219,97,216,1,40,24,26,200,105,92,162,191,103,220,191,173,2,121,144,204,118,251,67,228,136,163,102,129\")),bytes(abi.encode(\"19,167,201,51,235,47,235,49,86,187,173,45,125,14,34,209,193,177,83,40,19,211,133,27,81,165,200,184,201,178,230,53\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.893ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ryws7\"",
              "sol": "\"ryws7\""
            },
            {
              "js": "[[178,71,107,124,14,175,88,87,238,91,198,120,77,24,90,97,118,77,121,62,168,208,92,136,144,205,199,121,90,135,226,13],[253,186,196,224,72,170,186,216,243,99,196,198,6,136,183,38,100,16,200,57,213,133,83,221,89,5,216,131,61,43,113,255],[73,59,102,174,22,42,70,42,211,181,18,111,113,236,181,221,152,214,56,35,189,13,93,217,52,33,95,54,245,108,129,96],[19,123,104,66,170,24,130,20,143,92,137,218,127,32,198,52,137,151,121,114,56,190,19,37,201,161,191,181,81,55,213,156],[117,156,236,140,139,16,226,160,187,56,229,127,53,157,250,192,235,88,43,121,32,184,159,130,189,14,109,66,7,178,103,32]]",
              "sol": "[bytes(abi.encode(\"178,71,107,124,14,175,88,87,238,91,198,120,77,24,90,97,118,77,121,62,168,208,92,136,144,205,199,121,90,135,226,13\")),bytes(abi.encode(\"253,186,196,224,72,170,186,216,243,99,196,198,6,136,183,38,100,16,200,57,213,133,83,221,89,5,216,131,61,43,113,255\")),bytes(abi.encode(\"73,59,102,174,22,42,70,42,211,181,18,111,113,236,181,221,152,214,56,35,189,13,93,217,52,33,95,54,245,108,129,96\")),bytes(abi.encode(\"19,123,104,66,170,24,130,20,143,92,137,218,127,32,198,52,137,151,121,114,56,190,19,37,201,161,191,181,81,55,213,156\")),bytes(abi.encode(\"117,156,236,140,139,16,226,160,187,56,229,127,53,157,250,192,235,88,43,121,32,184,159,130,189,14,109,66,7,178,103,32\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.894ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "[[77,72,244,148,32,71,153,133,0,133,236,243,3,248,45,83,254,111,7,18,207,161,115,120,18,217,56,82,93,6,103,80],[32,6,21,128,46,147,202,40,99,83,250,115,59,191,33,28,232,63,172,172,182,169,175,88,196,240,10,161,114,82,88,98],[201,96,125,180,140,112,136,112,232,247,105,153,152,150,121,193,255,126,197,59,237,148,125,204,177,135,190,21,169,243,168,81],[145,193,188,0,34,150,70,146,78,51,37,164,36,134,120,243,46,35,79,210,82,28,203,191,29,1,77,99,162,12,217,242],[186,136,190,95,217,101,179,104,8,244,92,247,233,161,50,31,158,100,187,192,99,71,108,238,133,227,234,157,84,89,234,97]]",
              "sol": "[bytes(abi.encode(\"77,72,244,148,32,71,153,133,0,133,236,243,3,248,45,83,254,111,7,18,207,161,115,120,18,217,56,82,93,6,103,80\")),bytes(abi.encode(\"32,6,21,128,46,147,202,40,99,83,250,115,59,191,33,28,232,63,172,172,182,169,175,88,196,240,10,161,114,82,88,98\")),bytes(abi.encode(\"201,96,125,180,140,112,136,112,232,247,105,153,152,150,121,193,255,126,197,59,237,148,125,204,177,135,190,21,169,243,168,81\")),bytes(abi.encode(\"145,193,188,0,34,150,70,146,78,51,37,164,36,134,120,243,46,35,79,210,82,28,203,191,29,1,77,99,162,12,217,242\")),bytes(abi.encode(\"186,136,190,95,217,101,179,104,8,244,92,247,233,161,50,31,158,100,187,192,99,71,108,238,133,227,234,157,84,89,234,97\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.896ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[206,207,102,137,165,99,148,233,143,213,195,201,228,179,230,20,18,136,68,217,189,179,176,128,247,238,70,162,78,21,37,182],[227,235,184,32,145,231,96,73,83,154,96,35,70,157,62,1,178,62,24,138,209,194,2,112,113,19,161,10,18,66,240,76],[104,203,107,2,136,154,116,133,20,180,250,47,210,81,43,44,105,127,237,117,41,231,58,170,86,43,203,138,187,203,85,175],[78,159,13,231,173,171,142,69,92,217,231,98,16,5,75,244,238,153,12,114,17,228,133,15,196,84,178,244,74,222,157,52],[121,173,133,213,193,117,88,122,153,21,67,81,241,202,239,5,5,158,182,127,174,91,138,119,254,142,50,124,60,192,213,18]]",
              "sol": "[bytes(abi.encode(\"206,207,102,137,165,99,148,233,143,213,195,201,228,179,230,20,18,136,68,217,189,179,176,128,247,238,70,162,78,21,37,182\")),bytes(abi.encode(\"227,235,184,32,145,231,96,73,83,154,96,35,70,157,62,1,178,62,24,138,209,194,2,112,113,19,161,10,18,66,240,76\")),bytes(abi.encode(\"104,203,107,2,136,154,116,133,20,180,250,47,210,81,43,44,105,127,237,117,41,231,58,170,86,43,203,138,187,203,85,175\")),bytes(abi.encode(\"78,159,13,231,173,171,142,69,92,217,231,98,16,5,75,244,238,153,12,114,17,228,133,15,196,84,178,244,74,222,157,52\")),bytes(abi.encode(\"121,173,133,213,193,117,88,122,153,21,67,81,241,202,239,5,5,158,182,127,174,91,138,119,254,142,50,124,60,192,213,18\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.896ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"vqznh6\"",
              "sol": "\"vqznh6\""
            },
            {
              "js": "[[78,236,37,53,250,235,41,96,79,26,7,73,114,61,12,171,148,3,4,75,17,33,54,132,90,245,0,226,201,111,186,250],[60,168,203,89,81,63,190,189,231,109,108,221,202,93,6,211,228,85,124,220,166,123,152,138,17,30,220,201,102,15,69,137],[90,48,25,171,221,44,108,219,57,47,196,80,130,135,177,249,87,184,233,197,45,70,168,126,94,76,12,243,129,202,58,57],[162,169,189,11,213,13,250,238,130,120,218,53,208,105,54,35,157,150,188,185,233,90,89,16,140,12,204,112,174,176,55,108],[120,64,112,206,189,251,48,234,81,163,67,90,197,75,47,4,72,189,186,167,215,226,80,227,216,176,104,119,244,166,239,187]]",
              "sol": "[bytes(abi.encode(\"78,236,37,53,250,235,41,96,79,26,7,73,114,61,12,171,148,3,4,75,17,33,54,132,90,245,0,226,201,111,186,250\")),bytes(abi.encode(\"60,168,203,89,81,63,190,189,231,109,108,221,202,93,6,211,228,85,124,220,166,123,152,138,17,30,220,201,102,15,69,137\")),bytes(abi.encode(\"90,48,25,171,221,44,108,219,57,47,196,80,130,135,177,249,87,184,233,197,45,70,168,126,94,76,12,243,129,202,58,57\")),bytes(abi.encode(\"162,169,189,11,213,13,250,238,130,120,218,53,208,105,54,35,157,150,188,185,233,90,89,16,140,12,204,112,174,176,55,108\")),bytes(abi.encode(\"120,64,112,206,189,251,48,234,81,163,67,90,197,75,47,4,72,189,186,167,215,226,80,227,216,176,104,119,244,166,239,187\"))]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.897ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[187]",
              "sol": "bytes1(\"187\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.898ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.898ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.898ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.899ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.899ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.899ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"gpffaj\"",
              "sol": "\"gpffaj\""
            },
            {
              "js": "\"6jx0oo\"",
              "sol": "\"6jx0oo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.900ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"58lwua\"",
              "sol": "\"58lwua\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.900ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"bcpn7u\"",
              "sol": "\"bcpn7u\""
            },
            {
              "js": "\"7zsfsu\"",
              "sol": "\"7zsfsu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.900ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"6jx0oo\"",
              "sol": "\"6jx0oo\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.901ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"7g033\"",
              "sol": "\"7g033\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.902ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"gpffaj\"",
              "sol": "\"gpffaj\""
            },
            {
              "js": "\"7zsfsu\"",
              "sol": "\"7zsfsu\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.902ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.903ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"7zsfsu\"",
              "sol": "\"7zsfsu\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.905ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.905ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"939v\"",
              "sol": "\"939v\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"yylc1n\"",
              "sol": "\"yylc1n\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.906ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.907ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"7zsfsu\",\"\\x19Ethereum Signed Message:\\n32\",\"yylc1n\",\"727mbt\",\"939v\"]",
              "sol": "[string(\"7zsfsu\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"yylc1n\"),string(\"727mbt\"),string(\"939v\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.907ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[244,192,46,70,136,161,52,41,4,123,28,67,172,135,47,39,194,212,101,71,221,21,210,242,21,252,88,65,236,156,240,57],[126,110,2,118,134,94,98,91,118,84,86,10,59,151,7,221,55,193,162,100,159,189,80,99,235,35,146,167,26,197,186,251]]",
              "sol": "[bytes(abi.encode(\"244,192,46,70,136,161,52,41,4,123,28,67,172,135,47,39,194,212,101,71,221,21,210,242,21,252,88,65,236,156,240,57\")),bytes(abi.encode(\"126,110,2,118,134,94,98,91,118,84,86,10,59,151,7,221,55,193,162,100,159,189,80,99,235,35,146,167,26,197,186,251\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.907ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.908ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[75,158,148,64,128,68,20,58,0,121,73,190,28,236,101,252,24,78,183,46,174,117,71,60,193,78,35,118,128,34,44,209]",
              "sol": "stringToBytes32(\"75,158,148,64,128,68,20,58,0,121,73,190,28,236,101,252,24,78,183,46,174,117,71,60,193,78,35,118,128,34,44,209\")"
            },
            {
              "js": "[218,137,29,230,85,121,37,222,74,53,120,69,253,60,57,119,215,47,218,39,185,236,45,164,149,12,149,219,228,225,183,36]",
              "sol": "stringToBytes32(\"218,137,29,230,85,121,37,222,74,53,120,69,253,60,57,119,215,47,218,39,185,236,45,164,149,12,149,219,228,225,183,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.908ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[53,217,112,240,51,189,217,164,234,44,192,205,187,23,204,69,247,36,51,182,62,127,61,176,250,218,155,185,33,44,152,40]",
              "sol": "stringToBytes32(\"53,217,112,240,51,189,217,164,234,44,192,205,187,23,204,69,247,36,51,182,62,127,61,176,250,218,155,185,33,44,152,40\")"
            },
            {
              "js": "[172,188,166,205,153,140,78,58,109,23,55,5,109,192,218,242,38,15,235,171,167,236,68,184,230,162,142,195,120,92,131,142]",
              "sol": "abi.encode(\"172,188,166,205,153,140,78,58,109,23,55,5,109,192,218,242,38,15,235,171,167,236,68,184,230,162,142,195,120,92,131,142\")"
            },
            {
              "js": "[220,140,191,61,176,77,114,18,253,104,46,166,198,112,189,75,13,118,111,238,198,191,196,226,122,34,26,21,27,22,76,17]",
              "sol": "abi.encode(\"220,140,191,61,176,77,114,18,253,104,46,166,198,112,189,75,13,118,111,238,198,191,196,226,122,34,26,21,27,22,76,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.909ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[176,63,25,238,221,145,99,210,245,12,22,52,60,112,216,10,83,155,45,128,248,162,27,87,225,195,140,243,102,146,113,138]",
              "sol": "abi.encode(\"176,63,25,238,221,145,99,210,245,12,22,52,60,112,216,10,83,155,45,128,248,162,27,87,225,195,140,243,102,146,113,138\")"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[117,238,110,170,93,162,62,221,106,171,232,35,195,187,233,160,122,16,186,87,128,122,88,165,194,185,141,227,174,193,2,225]",
              "sol": "abi.encode(\"117,238,110,170,93,162,62,221,106,171,232,35,195,187,233,160,122,16,186,87,128,122,88,165,194,185,141,227,174,193,2,225\")"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.910ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[116,66,102,202,177,100,84,186,223,126,215,167,76,235,252,41,169,114,83,211,17,151,152,115,108,140,46,57,75,130,128,157]",
              "sol": "stringToBytes32(\"116,66,102,202,177,100,84,186,223,126,215,167,76,235,252,41,169,114,83,211,17,151,152,115,108,140,46,57,75,130,128,157\")"
            },
            {
              "js": "\"gpffaj\"",
              "sol": "\"gpffaj\""
            },
            {
              "js": "[124,240,115,236,182,40,158,248,253,74,163,63,189,45,167,220,242,62,141,244,166,186,227,179,45,110,148,204,68,104,88,168]",
              "sol": "abi.encode(\"124,240,115,236,182,40,158,248,253,74,163,63,189,45,167,220,242,62,141,244,166,186,227,179,45,110,148,204,68,104,88,168\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[229,134,111,31,152,74,26,138,55,247,118,24,173,75,207,253,41,160,246,157,73,137,248,230,246,17,160,34,23,38,73,66]",
              "sol": "stringToBytes32(\"229,134,111,31,152,74,26,138,55,247,118,24,173,75,207,253,41,160,246,157,73,137,248,230,246,17,160,34,23,38,73,66\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[110,123,219,165,220,67,85,78,39,213,149,181,228,210,166,158,150,26,167,35,68,52,158,208,234,117,109,233,58,213,247,5]",
              "sol": "abi.encode(\"110,123,219,165,220,67,85,78,39,213,149,181,228,210,166,158,150,26,167,35,68,52,158,208,234,117,109,233,58,213,247,5\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.911ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[62,176,131,225,207,40,188,21,216,113,142,93,118,14,127,254,239,10,71,225,19,87,207,182,88,131,173,197,251,105,159,12]",
              "sol": "stringToBytes32(\"62,176,131,225,207,40,188,21,216,113,142,93,118,14,127,254,239,10,71,225,19,87,207,182,88,131,173,197,251,105,159,12\")"
            },
            {
              "js": "[230,85,8,106,147,40,29,28,173,106,138,42,229,30,187,240,235,161,175,250,142,192,120,241,178,162,140,59,207,39,103,145]",
              "sol": "abi.encode(\"230,85,8,106,147,40,29,28,173,106,138,42,229,30,187,240,235,161,175,250,142,192,120,241,178,162,140,59,207,39,103,145\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[62,176,131,225,207,40,188,21,216,113,142,93,118,14,127,254,239,10,71,225,19,87,207,182,88,131,173,197,251,105,159,12]",
                "sol": "stringToBytes32(\"62,176,131,225,207,40,188,21,216,113,142,93,118,14,127,254,239,10,71,225,19,87,207,182,88,131,173,197,251,105,159,12\")"
              },
              {
                "js": "[42,213,103,93,101,152,223,43,233,222,96,233,184,146,95,55,40,163,213,146,24,46,119,132,0,172,125,72,215,239,127,204,177]",
                "sol": "bytes33(\"42,213,103,93,101,152,223,43,233,222,96,233,184,146,95,55,40,163,213,146,24,46,119,132,0,172,125,72,215,239,127,204,177\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.912ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[177,91,43,216,230,148,151,51,18,153,160,181,93,69,59,154,231,17,67,160,248,198,249,26,135,117,168,88,47,199,240,118]",
              "sol": "abi.encode(\"177,91,43,216,230,148,151,51,18,153,160,181,93,69,59,154,231,17,67,160,248,198,249,26,135,117,168,88,47,199,240,118\")"
            },
            {
              "js": "[251,176,238,45,139,252,148,10,24,116,49,20,23,175,96,219,147,55,190,63,213,17,188,105,94,69,21,222,6,28,222,207]",
              "sol": "stringToBytes32(\"251,176,238,45,139,252,148,10,24,116,49,20,23,175,96,219,147,55,190,63,213,17,188,105,94,69,21,222,6,28,222,207\")"
            },
            {
              "js": "[249,17,49,169,237,104,250,165,60,42,23,158,101,176,74,232,254,107,230,102,160,233,13,89,239,173,222,224,221,61,105,137]",
              "sol": "abi.encode(\"249,17,49,169,237,104,250,165,60,42,23,158,101,176,74,232,254,107,230,102,160,233,13,89,239,173,222,224,221,61,105,137\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[87,188,15,226,184,238,214,200,77,161,183,72,203,64,227,159,143,101,171,75,222,219,137,202,192,83,232,6,153,17,196,251]",
              "sol": "abi.encode(\"87,188,15,226,184,238,214,200,77,161,183,72,203,64,227,159,143,101,171,75,222,219,137,202,192,83,232,6,153,17,196,251\")"
            },
            {
              "js": "[228,156,224,153,24,34,179,164,203,125,202,191,214,165,49,159,231,119,32,120,250,14,255,143,25,211,17,99,83,110,140,144]",
              "sol": "stringToBytes32(\"228,156,224,153,24,34,179,164,203,125,202,191,214,165,49,159,231,119,32,120,250,14,255,143,25,211,17,99,83,110,140,144\")"
            },
            {
              "js": "[56,16,30,36,180,157,204,119,216,166,64,106,122,57,54,28,211,198,135,252,73,244,175,220,126,220,254,51,48,132,250,243]",
              "sol": "abi.encode(\"56,16,30,36,180,157,204,119,216,166,64,106,122,57,54,28,211,198,135,252,73,244,175,220,126,220,254,51,48,132,250,243\")"
            },
            {
              "js": "\"ryws7\"",
              "sol": "\"ryws7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[36,155,151,83,187,55,135,31,71,255,162,191,20,238,61,146,213,173,90,228,221,184,103,61,55,152,81,111,133,40,200,137]",
              "sol": "abi.encode(\"36,155,151,83,187,55,135,31,71,255,162,191,20,238,61,146,213,173,90,228,221,184,103,61,55,152,81,111,133,40,200,137\")"
            },
            {
              "js": "[215,219,114,46,37,24,18,168,77,127,171,214,104,35,201,88,204,179,119,250,242,247,241,95,74,75,37,18,193,179,206,87]",
              "sol": "stringToBytes32(\"215,219,114,46,37,24,18,168,77,127,171,214,104,35,201,88,204,179,119,250,242,247,241,95,74,75,37,18,193,179,206,87\")"
            },
            {
              "js": "[253,225,61,36,58,178,45,151,240,76,52,73,150,8,171,51,161,171,135,9,236,142,93,193,116,126,5,41,116,160,56,255]",
              "sol": "abi.encode(\"253,225,61,36,58,178,45,151,240,76,52,73,150,8,171,51,161,171,135,9,236,142,93,193,116,126,5,41,116,160,56,255\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[32,237,166,56,59,91,150,53,77,252,149,92,225,138,6,119,7,117,115,129,80,121,120,38,9,154,3,206,113,167,238,3]",
              "sol": "abi.encode(\"32,237,166,56,59,91,150,53,77,252,149,92,225,138,6,119,7,117,115,129,80,121,120,38,9,154,3,206,113,167,238,3\")"
            },
            {
              "js": "[151,55,253,49,146,48,134,32,41,193,159,82,26,146,145,172,124,45,153,222,58,182,248,128,244,149,48,4,38,77,173,209]",
              "sol": "stringToBytes32(\"151,55,253,49,146,48,134,32,41,193,159,82,26,146,145,172,124,45,153,222,58,182,248,128,244,149,48,4,38,77,173,209\")"
            },
            {
              "js": "[72,170,221,59,219,199,41,184,124,98,71,79,226,96,246,60,55,241,56,34,237,166,202,105,162,125,44,143,229,228,51,170]",
              "sol": "abi.encode(\"72,170,221,59,219,199,41,184,124,98,71,79,226,96,246,60,55,241,56,34,237,166,202,105,162,125,44,143,229,228,51,170\")"
            },
            {
              "js": "\"4f68ak\"",
              "sol": "\"4f68ak\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[114,67,225,129,22,115,73,50,195,96,226,64,79,229,173,78,201,26,101,150,70,13,10,242,99,18,83,167,217,148,252,76]",
              "sol": "abi.encode(\"114,67,225,129,22,115,73,50,195,96,226,64,79,229,173,78,201,26,101,150,70,13,10,242,99,18,83,167,217,148,252,76\")"
            },
            {
              "js": "[166,196,207,38,100,183,84,26,95,53,229,119,52,10,125,253,197,75,212,10,165,65,123,138,249,157,84,101,16,173,99,224]",
              "sol": "stringToBytes32(\"166,196,207,38,100,183,84,26,95,53,229,119,52,10,125,253,197,75,212,10,165,65,123,138,249,157,84,101,16,173,99,224\")"
            },
            {
              "js": "[207,130,83,11,179,172,45,231,254,247,105,30,246,246,251,77,68,25,162,128,157,78,187,218,29,117,245,25,221,192,24,88]",
              "sol": "abi.encode(\"207,130,83,11,179,172,45,231,254,247,105,30,246,246,251,77,68,25,162,128,157,78,187,218,29,117,245,25,221,192,24,88\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[127,221,39,250,119,157,70,78,237,145,57,48,65,60,161,40,232,219,77,219,233,206,44,117,173,27,173,188,249,38,42,181]",
              "sol": "abi.encode(\"127,221,39,250,119,157,70,78,237,145,57,48,65,60,161,40,232,219,77,219,233,206,44,117,173,27,173,188,249,38,42,181\")"
            },
            {
              "js": "[197,1,83,44,57,180,32,200,245,63,23,101,150,117,175,158,184,245,85,108,179,52,65,255,58,83,78,42,53,245,62,230]",
              "sol": "stringToBytes32(\"197,1,83,44,57,180,32,200,245,63,23,101,150,117,175,158,184,245,85,108,179,52,65,255,58,83,78,42,53,245,62,230\")"
            },
            {
              "js": "[155,151,67,169,254,133,16,244,183,64,167,107,72,37,91,169,59,35,223,36,99,187,21,181,80,187,170,34,147,73,160,64]",
              "sol": "abi.encode(\"155,151,67,169,254,133,16,244,183,64,167,107,72,37,91,169,59,35,223,36,99,187,21,181,80,187,170,34,147,73,160,64\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[6,92,155,208,28,26,11,52,3,35,4,138,180,226,80,237,133,240,178,158,42,179,187,55,74,189,153,90,241,212,63,3]",
              "sol": "abi.encode(\"6,92,155,208,28,26,11,52,3,35,4,138,180,226,80,237,133,240,178,158,42,179,187,55,74,189,153,90,241,212,63,3\")"
            },
            {
              "js": "[191,47,214,21,132,44,116,73,120,252,114,10,209,202,59,106,81,83,1,126,192,208,30,104,228,137,233,174,177,207,96,105]",
              "sol": "stringToBytes32(\"191,47,214,21,132,44,116,73,120,252,114,10,209,202,59,106,81,83,1,126,192,208,30,104,228,137,233,174,177,207,96,105\")"
            },
            {
              "js": "[92,90,3,228,28,54,33,29,218,43,187,206,71,187,83,241,39,152,26,19,96,244,53,103,162,209,185,162,157,210,169,30]",
              "sol": "abi.encode(\"92,90,3,228,28,54,33,29,218,43,187,206,71,187,83,241,39,152,26,19,96,244,53,103,162,209,185,162,157,210,169,30\")"
            },
            {
              "js": "\"lgetno\"",
              "sol": "\"lgetno\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[41,32,107,75,188,2,254,87,175,232,194,30,53,253,74,207,172,169,103,226,83,247,154,221,210,224,83,164,91,90,192,163]",
              "sol": "abi.encode(\"41,32,107,75,188,2,254,87,175,232,194,30,53,253,74,207,172,169,103,226,83,247,154,221,210,224,83,164,91,90,192,163\")"
            },
            {
              "js": "[205,187,188,254,35,101,43,243,44,64,146,157,247,24,185,234,49,207,170,64,51,5,17,169,2,77,51,97,162,122,151,75]",
              "sol": "stringToBytes32(\"205,187,188,254,35,101,43,243,44,64,146,157,247,24,185,234,49,207,170,64,51,5,17,169,2,77,51,97,162,122,151,75\")"
            },
            {
              "js": "[119,79,123,0,6,151,99,255,5,115,9,89,218,19,236,85,219,251,5,216,150,8,234,219,112,170,249,155,166,121,113,88]",
              "sol": "abi.encode(\"119,79,123,0,6,151,99,255,5,115,9,89,218,19,236,85,219,251,5,216,150,8,234,219,112,170,249,155,166,121,113,88\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.921ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[121,167,144,226,61,102,45,148,24,73,200,216,148,112,219,45,165,9,138,125,12,103,5,231,134,137,235,53,128,144,39,11]",
              "sol": "abi.encode(\"121,167,144,226,61,102,45,148,24,73,200,216,148,112,219,45,165,9,138,125,12,103,5,231,134,137,235,53,128,144,39,11\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[251,87,11,163,79,101,93,17,52,238,29,105,142,126,80,212,44,200,216,146,173,141,127,40,217,6,19,184,245,63,35,67]",
              "sol": "abi.encode(\"251,87,11,163,79,101,93,17,52,238,29,105,142,126,80,212,44,200,216,146,173,141,127,40,217,6,19,184,245,63,35,67\")"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.922ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[74,63,50,94,198,171,133,15,228,139,116,230,116,115,237,185,228,35,70,213,67,133,126,17,137,136,185,128,241,109,53,88]",
              "sol": "stringToBytes32(\"74,63,50,94,198,171,133,15,228,139,116,230,116,115,237,185,228,35,70,213,67,133,126,17,137,136,185,128,241,109,53,88\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "[251,124,219,38,18,252,179,48,99,36,185,82,205,129,119,190,42,91,236,25,198,208,52,228,30,99,16,238,155,142,98,130]",
              "sol": "stringToBytes32(\"251,124,219,38,18,252,179,48,99,36,185,82,205,129,119,190,42,91,236,25,198,208,52,228,30,99,16,238,155,142,98,130\")"
            },
            {
              "js": "[169,14,110,6,245,139,171,32,137,5,86,97,34,254,156,233,23,43,124,145,253,79,77,230,118,31,104,217,233,38,109,2]",
              "sol": "stringToBytes32(\"169,14,110,6,245,139,171,32,137,5,86,97,34,254,156,233,23,43,124,145,253,79,77,230,118,31,104,217,233,38,109,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.924ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[209,204,60,179,155,230,12,238,12,225,31,247,190,138,1,191,123,140,229,244,106,21,54,88,202,121,6,77,190,103,215,120]",
              "sol": "stringToBytes32(\"209,204,60,179,155,230,12,238,12,225,31,247,190,138,1,191,123,140,229,244,106,21,54,88,202,121,6,77,190,103,215,120\")"
            },
            {
              "js": "[60,255,195,24,246,86,131,167,120,24,30,142,136,59,88,71,84,193,103,157,144,50,14,43,228,69,90,174,228,164,52,179,219,244,106,191,250,232,74,5,227,153,88,208,103,130,19,142,145,214,135,202,84,239,141,29,131,50,208,188,98,184,2,94,21,205]",
              "sol": "abi.encode(\"60,255,195,24,246,86,131,167,120,24,30,142,136,59,88,71,84,193,103,157,144,50,14,43,228,69,90,174,228,164,52,179,219,244,106,191,250,232,74,5,227,153,88,208,103,130,19,142,145,214,135,202,84,239,141,29,131,50,208,188,98,184,2,94,21,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[11,147,3,1,125,254,89,51,81,40,128,140,130,24,136,96,138,81,56,86,46,57,211,126,37,167,236,67,146,200,19,139]",
              "sol": "stringToBytes32(\"11,147,3,1,125,254,89,51,81,40,128,140,130,24,136,96,138,81,56,86,46,57,211,126,37,167,236,67,146,200,19,139\")"
            },
            {
              "js": "[174,150,100,52,133,243,104,83,178,145,108,82,35,235,188,56,23,215,26,164,55,86,80,150,138,151,186,167,169,157,162,37,62,99,6,35,249,167,107,51,237,35,105,224,141,44,70,255,228,240,255,119,182,254,8,243,90,64,196,168,12,186,110,55,148]",
              "sol": "abi.encode(\"174,150,100,52,133,243,104,83,178,145,108,82,35,235,188,56,23,215,26,164,55,86,80,150,138,151,186,167,169,157,162,37,62,99,6,35,249,167,107,51,237,35,105,224,141,44,70,255,228,240,255,119,182,254,8,243,90,64,196,168,12,186,110,55,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.926ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.927ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[2,5]",
              "sol": "[uint(2),uint(5)]"
            },
            {
              "js": "[[7,70],[15,31]]",
              "sol": "[[uint(7),uint(70)],[uint(15),uint(31)]]"
            },
            {
              "js": "[1,10]",
              "sol": "[uint(1),uint(10)]"
            },
            {
              "js": "[101,22]",
              "sol": "[uint(101),uint(22)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.931ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.931ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[24,55,27,1532892064,66,1023,1532892062]",
              "sol": "[uint(24),uint(55),uint(27),uint(1532892064),uint(66),uint(1023),uint(1532892062)]"
            },
            {
              "js": "{\"A\": {\"X\": 54,\"Y\": 8},\"B\": {\"X\": [0,65],\"Y\": [162,87]},\"C\": {\"X\": 28,\"Y\": 57}}",
              "sol": "Verifier.Proof(Pairing.G1Point(54,8),Pairing.G2Point([uint(0),uint(65)],[uint(162),uint(87)]),Pairing.G1Point(28,57))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[200000,16,129,25]",
              "sol": "[uint(200000),uint(16),uint(129),uint(25)]"
            },
            {
              "js": "{\"A\": {\"X\": 69,\"Y\": 87},\"B\": {\"X\": [63,63],\"Y\": [65,11]},\"C\": {\"X\": 160,\"Y\": 25}}",
              "sol": "Verifier.Proof(Pairing.G1Point(69,87),Pairing.G2Point([uint(63),uint(63)],[uint(65),uint(11)]),Pairing.G1Point(160,25))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.935ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.935ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.935ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"accounts[2]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.937ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.938ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.939ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.939ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.940ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.941ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[49,40,134,119,184,171,230,37,111,220,134,237,169,217,87,213,39,252,227,37,33,125,155,9,169,147,141,245,87,116,222,216]",
              "sol": "abi.encode(\"49,40,134,119,184,171,230,37,111,220,134,237,169,217,87,213,39,252,227,37,33,125,155,9,169,147,141,245,87,116,222,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[49,40,134,119,184,171,230,37,111,220,134,237,169,217,87,213,39,252,227,37,33,125,155,9,169,147,141,245,87,116,222,216]",
                "sol": "abi.encode(\"49,40,134,119,184,171,230,37,111,220,134,237,169,217,87,213,39,252,227,37,33,125,155,9,169,147,141,245,87,116,222,216\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.943ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.944ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[89,112,222,58]",
              "sol": "bytes4(\"89,112,222,58\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.947ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.947ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.947ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "25",
                "sol": "25"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.948ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1025",
                "sol": "1025"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.949ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "[220,47,200,35,65,85,38,219,35,44,240,154,180,86,197,169,139,42,143,53,230,100,134,92,91,238,52,242,182,51,178,194]",
              "sol": "abi.encode(\"220,47,200,35,65,85,38,219,35,44,240,154,180,86,197,169,139,42,143,53,230,100,134,92,91,238,52,242,182,51,178,194\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "[91,90,213,122,146,74,173,19,113,249,155,237,128,91,219,144,172,175,189,82,218,87,145,149,0,35,155,94,238,195,39,13]",
              "sol": "abi.encode(\"91,90,213,122,146,74,173,19,113,249,155,237,128,91,219,144,172,175,189,82,218,87,145,149,0,35,155,94,238,195,39,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.950ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.952ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[59,32]",
              "sol": "[uint(59),uint(32)]"
            },
            {
              "js": "[[2014223716,27],[256,129]]",
              "sol": "[[uint(2014223716),uint(27)],[uint(256),uint(129)]]"
            },
            {
              "js": "[0,15]",
              "sol": "[uint(0),uint(15)]"
            },
            {
              "js": "[57,19]",
              "sol": "[uint(57),uint(19)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.955ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.956ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.957ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.958ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.958ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.960ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.962ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.964ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.964ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.966ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.966ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:52:46.967ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.968ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:52:46.968ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}