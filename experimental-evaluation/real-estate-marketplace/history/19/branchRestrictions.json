,{
  "2020-11-12T03:31:13.275ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:31:28.228ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:31:43.233ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:31:58.368ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:13.488ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:28.704ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.038ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [213,132,85,236,79,187,161,255,199,41,153,126,63,130,223,140,26,74,243,14,13,61,45,83,200,67,236,199,123,128,220,34],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"213,132,85,236,79,187,161,255,199,41,153,126,63,130,223,140,26,74,243,14,13,61,45,83,200,67,236,199,123,128,220,34\"),129)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.040ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [235,198,80,160,141,137,46,112,142,24,253,226,8,32,240,223,147,171,223,90,35,234,33,177,206,109,142,14,33,164,169,249],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"235,198,80,160,141,137,46,112,142,24,253,226,8,32,240,223,147,171,223,90,35,234,33,177,206,109,142,14,33,164,169,249\"),3)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [187,175,95,5,237,100,125,23,192,247,86,40,98,35,38,54,156,54,85,178,7,204,224,3,24,136,22,163,192,139,146,9],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"187,175,95,5,237,100,125,23,192,247,86,40,98,35,38,54,156,54,85,178,7,204,224,3,24,136,22,163,192,139,146,9\"),61)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.041ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [159,20,104,220,57,231,62,16,205,158,126,236,224,215,155,121,154,145,215,86,62,87,41,127,88,95,115,62,16,99,249,23],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"159,20,104,220,57,231,62,16,205,158,126,236,224,215,155,121,154,145,215,86,62,87,41,127,88,95,115,62,16,99,249,23\"),59)"
            },
            {
              "js": "[85,154,213,79,102,126,78,112,218,151,63,0,16,152,208,94,202,202,19,163,250,163,164,8,132,102,161,0,17,239,163,120]",
              "sol": "abi.encode(\"85,154,213,79,102,126,78,112,218,151,63,0,16,152,208,94,202,202,19,163,250,163,164,8,132,102,161,0,17,239,163,120\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.042ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [197,184,235,122,223,234,184,32,29,123,76,69,238,171,148,35,177,197,119,229,120,152,97,195,36,10,157,153,86,13,35,183],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"197,184,235,122,223,234,184,32,29,123,76,69,238,171,148,35,177,197,119,229,120,152,97,195,36,10,157,153,86,13,35,183\"),1)"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.042ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [84,57,97,199,112,64,207,78,75,145,138,166,29,4,67,78,201,223,54,178,48,54,171,11,213,229,12,249,117,224,43,105],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"84,57,97,199,112,64,207,78,75,145,138,166,29,4,67,78,201,223,54,178,48,54,171,11,213,229,12,249,117,224,43,105\"),101)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.043ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [80,221,94,57,114,92,143,243,138,110,20,234,159,101,93,115,31,73,17,171,31,70,136,86,240,218,108,158,186,102,223,142],\"capacity\": 254}",
              "sol": "Buffer.buffer(abi.encode(\"80,221,94,57,114,92,143,243,138,110,20,234,159,101,93,115,31,73,17,171,31,70,136,86,240,218,108,158,186,102,223,142\"),254)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.045ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [91,194,192,221,5,45,83,126,31,102,20,86,254,113,231,53,76,225,244,155,203,48,96,163,124,117,89,173,22,15,47,230],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"91,194,192,221,5,45,83,126,31,102,20,86,254,113,231,53,76,225,244,155,203,48,96,163,124,117,89,173,22,15,47,230\"),49)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.052ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.052ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.053ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 66,\"Y\": 88}",
              "sol": "Pairing.G1Point(66,88)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.054ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 9,\"Y\": 70}",
              "sol": "Pairing.G1Point(9,70)"
            },
            {
              "js": "{\"X\": 46,\"Y\": 32}",
              "sol": "Pairing.G1Point(46,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.054ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [26,49],\"Y\": [1,98]}",
              "sol": "Pairing.G2Point([uint(26),uint(49)],[uint(1),uint(98)])"
            },
            {
              "js": "{\"X\": [87,129],\"Y\": [30,33]}",
              "sol": "Pairing.G2Point([uint(87),uint(129)],[uint(30),uint(33)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.055ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 5,\"Y\": 128}",
              "sol": "Pairing.G1Point(5,128)"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.056ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 15,\"Y\": 161},{\"X\": 33,\"Y\": 1023},{\"X\": 61,\"Y\": 95},{\"X\": 257,\"Y\": 23},{\"X\": 25,\"Y\": 65},{\"X\": 101,\"Y\": 55}]",
              "sol": "[Pairing.G1Point(15,161),Pairing.G1Point(33,1023),Pairing.G1Point(61,95),Pairing.G1Point(257,23),Pairing.G1Point(25,65),Pairing.G1Point(101,55)]"
            },
            {
              "js": "[{\"X\": [48,19],\"Y\": [97,9]},{\"X\": [97,25],\"Y\": [161,102]},{\"X\": [32,0],\"Y\": [98,103]},{\"X\": [95,102],\"Y\": [2,15]},{\"X\": [257,200001],\"Y\": [2014223716,27]},{\"X\": [200000,25],\"Y\": [103,49]}]",
              "sol": "[Pairing.G2Point([uint(48),uint(19)],[uint(97),uint(9)]),Pairing.G2Point([uint(97),uint(25)],[uint(161),uint(102)]),Pairing.G2Point([uint(32),uint(0)],[uint(98),uint(103)]),Pairing.G2Point([uint(95),uint(102)],[uint(2),uint(15)]),Pairing.G2Point([uint(257),uint(200001)],[uint(2014223716),uint(27)]),Pairing.G2Point([uint(200000),uint(25)],[uint(103),uint(49)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 3,\"Y\": 56},{\"X\": 66,\"Y\": 199999},{\"X\": 3,\"Y\": 9},{\"X\": 30,\"Y\": 10},{\"X\": 2,\"Y\": 8},{\"X\": 31,\"Y\": 55},{\"X\": 59,\"Y\": 45}]",
                "sol": "[Pairing.G1Point(28,102),Pairing.G1Point(200001,199999),Pairing.G1Point(6,57),Pairing.G1Point(161,30),Pairing.G1Point(17,19),Pairing.G1Point(61,48),Pairing.G1Point(127,254)]"
              },
              {
                "js": "[{\"X\": [48,19],\"Y\": [97,9]},{\"X\": [97,25],\"Y\": [161,102]},{\"X\": [32,0],\"Y\": [98,103]},{\"X\": [95,102],\"Y\": [2,15]},{\"X\": [257,200001],\"Y\": [2014223716,27]},{\"X\": [200000,25],\"Y\": [103,49]}]",
                "sol": "[Pairing.G2Point([uint(48),uint(19)],[uint(97),uint(9)]),Pairing.G2Point([uint(97),uint(25)],[uint(161),uint(102)]),Pairing.G2Point([uint(32),uint(0)],[uint(98),uint(103)]),Pairing.G2Point([uint(95),uint(102)],[uint(2),uint(15)]),Pairing.G2Point([uint(257),uint(200001)],[uint(2014223716),uint(27)]),Pairing.G2Point([uint(200000),uint(25)],[uint(103),uint(49)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.062ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 48,\"Y\": 1}",
              "sol": "Pairing.G1Point(48,1)"
            },
            {
              "js": "{\"X\": [87,7],\"Y\": [1532892064,256]}",
              "sol": "Pairing.G2Point([uint(87),uint(7)],[uint(1532892064),uint(256)])"
            },
            {
              "js": "{\"X\": 57,\"Y\": 256}",
              "sol": "Pairing.G1Point(57,256)"
            },
            {
              "js": "{\"X\": [1023,33],\"Y\": [98,33]}",
              "sol": "Pairing.G2Point([uint(1023),uint(33)],[uint(98),uint(33)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.063ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 86,\"Y\": 1532892063}",
              "sol": "Pairing.G1Point(86,1532892063)"
            },
            {
              "js": "{\"X\": [47,1025],\"Y\": [5,87]}",
              "sol": "Pairing.G2Point([uint(47),uint(1025)],[uint(5),uint(87)])"
            },
            {
              "js": "{\"X\": 55,\"Y\": 102}",
              "sol": "Pairing.G1Point(55,102)"
            },
            {
              "js": "{\"X\": [87,71],\"Y\": [55,56]}",
              "sol": "Pairing.G2Point([uint(87),uint(71)],[uint(55),uint(56)])"
            },
            {
              "js": "{\"X\": 60,\"Y\": 2014223716}",
              "sol": "Pairing.G1Point(60,2014223716)"
            },
            {
              "js": "{\"X\": [2,65],\"Y\": [103,11]}",
              "sol": "Pairing.G2Point([uint(2),uint(65)],[uint(103),uint(11)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.071ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.072ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.073ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.074ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.076ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.077ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.077ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.078ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.079ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.079ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.080ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.085ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [193,74,48,65,199,75,17,121,55,76,107,21,158,223,29,115,119,221,155,20,234,197,143,201,71,204,51,232,20,103,199,164],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"193,74,48,65,199,75,17,121,55,76,107,21,158,223,29,115,119,221,155,20,234,197,143,201,71,204,51,232,20,103,199,164\"),199999)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.085ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [5,223,20,10,183,118,246,210,166,51,46,47,160,46,118,109,110,175,169,255,3,34,101,139,131,209,243,157,44,84,201,199],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"5,223,20,10,183,118,246,210,166,51,46,47,160,46,118,109,110,175,169,255,3,34,101,139,131,209,243,157,44,84,201,199\"),59)"
            },
            {
              "js": "[60,54,198,13,166,74,210,124,233,87,247,55,193,183,113,14,97,141,59,56,66,119,95,152,39,164,83,143,19,180,184,101]",
              "sol": "abi.encode(\"60,54,198,13,166,74,210,124,233,87,247,55,193,183,113,14,97,141,59,56,66,119,95,152,39,164,83,143,19,180,184,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.086ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [218,161,196,56,229,242,32,238,34,198,84,11,103,13,67,82,233,9,242,106,62,43,72,221,167,250,227,80,5,175,228,65],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"218,161,196,56,229,242,32,238,34,198,84,11,103,13,67,82,233,9,242,106,62,43,72,221,167,250,227,80,5,175,228,65\"),200000)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.086ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [254,121,194,251,90,218,105,112,130,171,144,159,76,215,198,130,172,244,61,212,53,33,142,22,148,246,202,9,162,243,54,215],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"254,121,194,251,90,218,105,112,130,171,144,159,76,215,198,130,172,244,61,212,53,33,142,22,148,246,202,9,162,243,54,215\"),71)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.087ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[119,197,84,214,139,226,190,149,85,169,92,185,61,240,65,254,222,184,146,246,251,131,135,201,141,242,35,218,205,127,203,210]",
              "sol": "stringToBytes32(\"119,197,84,214,139,226,190,149,85,169,92,185,61,240,65,254,222,184,146,246,251,131,135,201,141,242,35,218,205,127,203,210\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.088ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[58,211,42,83,160,188,47,211,239,187,199,25,205,66,156,171,142,2,179,75,135,30,155,14,209,96,190,168,16,120,208,98]",
              "sol": "stringToBytes32(\"58,211,42,83,160,188,47,211,239,187,199,25,205,66,156,171,142,2,179,75,135,30,155,14,209,96,190,168,16,120,208,98\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[112,24,145,11,92,131,41,243,51,236,166,174,15,130,238,122,93,49,129,108,225,254,132,39,83,65,132,93,170,160,133,91]",
              "sol": "abi.encode(\"112,24,145,11,92,131,41,243,51,236,166,174,15,130,238,122,93,49,129,108,225,254,132,39,83,65,132,93,170,160,133,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.158ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.159ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.159ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.160ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.160ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.161ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.161ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.162ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.162ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.163ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.163ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"ik16el\"",
              "sol": "\"ik16el\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.164ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.164ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.165ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.165ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"P\",\"ka3dp\",\"aki1xzh\",\"ka3dp\",\"ka3dp\",\"bz25ct\"]",
              "sol": "[string(\"P\"),string(\"ka3dp\"),string(\"aki1xzh\"),string(\"ka3dp\"),string(\"ka3dp\"),string(\"bz25ct\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.166ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"h63uk8\"",
              "sol": "\"h63uk8\""
            },
            {
              "js": "[\"h63uk8\",\"ik16el\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"h63uk8\"),string(\"ik16el\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.166ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"h63uk8\",\"7potks\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"h63uk8\"),string(\"7potks\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.167ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"bz25ct\",\"Transaction successfully verified.\",\"aki1xzh\",\"0\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"bz25ct\"]",
              "sol": "[string(\"bz25ct\"),string(\"Transaction successfully verified.\"),string(\"aki1xzh\"),string(\"0\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"bz25ct\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.168ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "[\"bz25ct\"]",
              "sol": "[string(\"bz25ct\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.168ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"aki1xzh\"]",
              "sol": "[string(\"aki1xzh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.169ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.169ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.170ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"ka3dp\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"ka3dp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.170ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"Capstones\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.171ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"0\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"0\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.172ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"ka3dp\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"ka3dp\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.172ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"7potks\"",
              "sol": "\"7potks\""
            },
            {
              "js": "[\"0\",\"7potks\",\"Capstones\"]",
              "sol": "[string(\"0\"),string(\"7potks\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.173ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.173ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"h63uk8\",\"bz25ct\",\"0\"]",
              "sol": "[string(\"h63uk8\"),string(\"bz25ct\"),string(\"0\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.174ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"7potks\",\"[\",\"0\"]",
              "sol": "[string(\"7potks\"),string(\"[\"),string(\"0\")]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.175ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"dbumyo\"",
              "sol": "\"dbumyo\""
            },
            {
              "js": "[\"bz25ct\",\"L\",\"[\",\"xlhdw5\"]",
              "sol": "[string(\"bz25ct\"),string(\"L\"),string(\"[\"),string(\"xlhdw5\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.176ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"h63uk8\",\"h63uk8\",\"L\",\"ka3dp\"]",
              "sol": "[string(\"h63uk8\"),string(\"h63uk8\"),string(\"L\"),string(\"ka3dp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.176ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"h63uk8\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"2rkj83\",\"7potks\"]",
              "sol": "[string(\"h63uk8\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"2rkj83\"),string(\"7potks\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.177ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"7potks\"",
              "sol": "\"7potks\""
            },
            {
              "js": "[\"ka3dp\",\"Transaction successfully verified.\",\"bz25ct\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"ka3dp\"),string(\"Transaction successfully verified.\"),string(\"bz25ct\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.178ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "[\"dbumyo\",\"7potks\",\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"aki1xzh\"]",
              "sol": "[string(\"dbumyo\"),string(\"7potks\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"aki1xzh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.178ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"ka3dp\",\"\\x19Ethereum Signed Message:\\n32\",\"dbumyo\",\"Transaction successfully verified.\",\"L\"]",
              "sol": "[string(\"ka3dp\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"dbumyo\"),string(\"Transaction successfully verified.\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.179ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"h63uk8\",\"nulhfk\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"h63uk8\"),string(\"nulhfk\")]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.179ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ik16el\",\"nulhfk\",\"P\",\"L\",\"L\"]",
              "sol": "[string(\"ik16el\"),string(\"nulhfk\"),string(\"P\"),string(\"L\"),string(\"L\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.180ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[33,189,170,133,130,133,103,36,126,24,49,151,240,57,232,247,149,216,108,179,221,145,226,48,132,46,201,38,167,177,105,26],[10,109,164,195,73,169,32,76,21,155,196,135,110,163,250,161,204,55,154,200,176,117,234,19,35,62,233,203,188,49,20,97],[172,146,143,90,213,154,101,70,183,221,60,145,103,157,244,248,170,181,77,173,156,154,216,18,42,218,175,123,183,147,191,135],[116,127,76,129,125,229,27,140,209,146,56,7,251,178,49,105,70,67,156,83,191,84,65,93,151,185,51,49,26,1,243,172],[60,151,177,233,66,168,115,185,191,59,94,162,86,198,16,128,50,86,81,254,211,98,119,163,162,248,122,90,148,190,226,245],[26,207,155,14,146,240,167,194,93,157,25,103,182,207,54,25,159,249,230,96,201,43,68,121,32,247,188,190,219,198,52,55],[255,211,64,49,185,101,67,198,37,121,57,180,7,245,25,124,104,189,79,38,244,128,52,15,14,13,2,146,137,70,181,6]]",
              "sol": "[bytes(abi.encode(\"33,189,170,133,130,133,103,36,126,24,49,151,240,57,232,247,149,216,108,179,221,145,226,48,132,46,201,38,167,177,105,26\")),bytes(abi.encode(\"10,109,164,195,73,169,32,76,21,155,196,135,110,163,250,161,204,55,154,200,176,117,234,19,35,62,233,203,188,49,20,97\")),bytes(abi.encode(\"172,146,143,90,213,154,101,70,183,221,60,145,103,157,244,248,170,181,77,173,156,154,216,18,42,218,175,123,183,147,191,135\")),bytes(abi.encode(\"116,127,76,129,125,229,27,140,209,146,56,7,251,178,49,105,70,67,156,83,191,84,65,93,151,185,51,49,26,1,243,172\")),bytes(abi.encode(\"60,151,177,233,66,168,115,185,191,59,94,162,86,198,16,128,50,86,81,254,211,98,119,163,162,248,122,90,148,190,226,245\")),bytes(abi.encode(\"26,207,155,14,146,240,167,194,93,157,25,103,182,207,54,25,159,249,230,96,201,43,68,121,32,247,188,190,219,198,52,55\")),bytes(abi.encode(\"255,211,64,49,185,101,67,198,37,121,57,180,7,245,25,124,104,189,79,38,244,128,52,15,14,13,2,146,137,70,181,6\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.181ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[39,165,196,52,144,183,250,211,137,139,100,14,212,76,72,177,201,192,104,126,58,116,200,228,189,123,25,130,121,131,46,91],[166,24,120,139,76,184,225,162,56,80,118,187,124,130,157,161,80,134,161,154,237,51,178,168,36,251,226,164,165,0,89,137],[142,206,137,226,237,250,10,159,81,98,35,121,150,209,106,118,56,213,46,123,99,150,245,143,60,163,72,236,223,170,189,65],[3,143,86,52,167,140,239,233,241,126,99,1,57,134,123,194,163,37,188,204,116,121,186,127,70,204,172,123,175,226,86,202],[7,94,153,159,35,54,141,141,240,39,227,224,194,223,254,177,131,33,90,120,166,239,83,86,252,157,10,142,98,142,128,223],[116,187,33,12,221,9,2,56,221,88,66,150,96,102,29,233,110,121,57,61,82,42,188,229,138,116,132,82,91,21,119,119],[115,179,224,80,140,84,192,225,183,161,167,197,53,193,116,163,244,7,52,230,26,16,54,234,123,217,20,120,22,120,94,6],[169,36,169,130,20,114,81,123,176,171,211,21,157,219,191,102,125,170,24,88,81,144,37,82,54,219,254,38,54,125,148,85]]",
              "sol": "[bytes(abi.encode(\"39,165,196,52,144,183,250,211,137,139,100,14,212,76,72,177,201,192,104,126,58,116,200,228,189,123,25,130,121,131,46,91\")),bytes(abi.encode(\"166,24,120,139,76,184,225,162,56,80,118,187,124,130,157,161,80,134,161,154,237,51,178,168,36,251,226,164,165,0,89,137\")),bytes(abi.encode(\"142,206,137,226,237,250,10,159,81,98,35,121,150,209,106,118,56,213,46,123,99,150,245,143,60,163,72,236,223,170,189,65\")),bytes(abi.encode(\"3,143,86,52,167,140,239,233,241,126,99,1,57,134,123,194,163,37,188,204,116,121,186,127,70,204,172,123,175,226,86,202\")),bytes(abi.encode(\"7,94,153,159,35,54,141,141,240,39,227,224,194,223,254,177,131,33,90,120,166,239,83,86,252,157,10,142,98,142,128,223\")),bytes(abi.encode(\"116,187,33,12,221,9,2,56,221,88,66,150,96,102,29,233,110,121,57,61,82,42,188,229,138,116,132,82,91,21,119,119\")),bytes(abi.encode(\"115,179,224,80,140,84,192,225,183,161,167,197,53,193,116,163,244,7,52,230,26,16,54,234,123,217,20,120,22,120,94,6\")),bytes(abi.encode(\"169,36,169,130,20,114,81,123,176,171,211,21,157,219,191,102,125,170,24,88,81,144,37,82,54,219,254,38,54,125,148,85\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.182ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[100,205,111,18,26,155,77,88,82,152,245,153,57,89,6,22,212,127,80,12,203,153,11,27,169,34,14,147,190,242,207,84],[189,115,100,63,48,100,120,248,46,116,133,30,67,18,39,68,150,48,32,238,230,233,170,169,248,72,154,172,71,164,19,163],[199,145,103,222,199,223,136,151,209,25,54,9,118,31,136,58,28,49,126,107,63,11,63,231,162,181,210,11,27,158,255,191],[106,188,215,101,25,63,157,233,20,179,154,99,60,134,113,114,163,211,153,219,251,80,148,21,161,36,142,159,196,8,99,37],[136,72,202,136,57,192,101,47,219,205,126,200,200,130,116,78,22,245,222,83,164,93,88,152,206,37,168,237,13,159,183,8],[2,68,135,121,146,7,218,133,53,78,239,70,44,255,135,68,244,109,73,220,115,143,236,32,98,5,183,122,239,122,109,6],[229,173,42,230,141,125,125,89,192,11,28,17,7,154,251,187,90,130,124,232,27,70,149,146,158,204,163,80,46,52,121,202]]",
              "sol": "[bytes(abi.encode(\"100,205,111,18,26,155,77,88,82,152,245,153,57,89,6,22,212,127,80,12,203,153,11,27,169,34,14,147,190,242,207,84\")),bytes(abi.encode(\"189,115,100,63,48,100,120,248,46,116,133,30,67,18,39,68,150,48,32,238,230,233,170,169,248,72,154,172,71,164,19,163\")),bytes(abi.encode(\"199,145,103,222,199,223,136,151,209,25,54,9,118,31,136,58,28,49,126,107,63,11,63,231,162,181,210,11,27,158,255,191\")),bytes(abi.encode(\"106,188,215,101,25,63,157,233,20,179,154,99,60,134,113,114,163,211,153,219,251,80,148,21,161,36,142,159,196,8,99,37\")),bytes(abi.encode(\"136,72,202,136,57,192,101,47,219,205,126,200,200,130,116,78,22,245,222,83,164,93,88,152,206,37,168,237,13,159,183,8\")),bytes(abi.encode(\"2,68,135,121,146,7,218,133,53,78,239,70,44,255,135,68,244,109,73,220,115,143,236,32,98,5,183,122,239,122,109,6\")),bytes(abi.encode(\"229,173,42,230,141,125,125,89,192,11,28,17,7,154,251,187,90,130,124,232,27,70,149,146,158,204,163,80,46,52,121,202\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.183ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[53,65,98,241,131,48,227,68,12,41,9,19,81,253,37,108,250,214,205,187,47,112,167,210,126,255,125,128,179,187,41,232],[107,21,66,106,40,104,39,44,202,20,162,200,105,78,77,229,178,129,176,230,100,119,119,192,19,81,31,210,64,190,121,186]]",
              "sol": "[bytes(abi.encode(\"53,65,98,241,131,48,227,68,12,41,9,19,81,253,37,108,250,214,205,187,47,112,167,210,126,255,125,128,179,187,41,232\")),bytes(abi.encode(\"107,21,66,106,40,104,39,44,202,20,162,200,105,78,77,229,178,129,176,230,100,119,119,192,19,81,31,210,64,190,121,186\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.183ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[0,57,193,2,46,39,153,146,251,69,129,28,88,231,209,51,140,62,151,237,154,178,117,149,187,22,27,125,47,29,51,23]]",
              "sol": "[bytes(abi.encode(\"0,57,193,2,46,39,153,146,251,69,129,28,88,231,209,51,140,62,151,237,154,178,117,149,187,22,27,125,47,29,51,23\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.186ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[121,161,36,236,219,151,82,43,36,48,95,116,248,211,243,90,136,139,230,63,77,55,94,119,17,79,21,77,135,109,14,36]]",
              "sol": "[bytes(abi.encode(\"121,161,36,236,219,151,82,43,36,48,95,116,248,211,243,90,136,139,230,63,77,55,94,119,17,79,21,77,135,109,14,36\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.187ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[113,26,29,216,222,193,99,120,40,241,237,12,15,143,111,111,35,54,134,115,54,193,220,9,155,40,176,15,165,32,189,130]]",
              "sol": "[bytes(abi.encode(\"113,26,29,216,222,193,99,120,40,241,237,12,15,143,111,111,35,54,134,115,54,193,220,9,155,40,176,15,165,32,189,130\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.188ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[26,54,55,119,137,196,191,195,78,7,107,110,94,113,160,20,153,130,77,82,246,254,74,23,29,119,212,200,252,1,155,233]]",
              "sol": "[bytes(abi.encode(\"26,54,55,119,137,196,191,195,78,7,107,110,94,113,160,20,153,130,77,82,246,254,74,23,29,119,212,200,252,1,155,233\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.188ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"2rkj83\"",
              "sol": "\"2rkj83\""
            },
            {
              "js": "[[159,181,244,89,118,162,52,224,185,166,168,190,239,199,231,16,71,74,13,91,138,99,158,239,94,13,203,199,82,45,103,166],[237,202,229,16,237,222,85,186,223,102,167,31,67,15,50,47,8,19,85,57,177,232,156,246,31,173,108,255,136,3,114,73]]",
              "sol": "[bytes(abi.encode(\"159,181,244,89,118,162,52,224,185,166,168,190,239,199,231,16,71,74,13,91,138,99,158,239,94,13,203,199,82,45,103,166\")),bytes(abi.encode(\"237,202,229,16,237,222,85,186,223,102,167,31,67,15,50,47,8,19,85,57,177,232,156,246,31,173,108,255,136,3,114,73\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.189ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[198,110,2,24,100,17,179,84,219,98,138,56,197,248,227,239,141,158,134,118,184,73,60,90,19,152,208,136,96,26,226,137],[11,70,13,47,164,92,82,6,98,76,170,20,61,169,216,235,151,133,184,185,226,231,3,125,224,183,140,159,38,58,52,236]]",
              "sol": "[bytes(abi.encode(\"198,110,2,24,100,17,179,84,219,98,138,56,197,248,227,239,141,158,134,118,184,73,60,90,19,152,208,136,96,26,226,137\")),bytes(abi.encode(\"11,70,13,47,164,92,82,6,98,76,170,20,61,169,216,235,151,133,184,185,226,231,3,125,224,183,140,159,38,58,52,236\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.189ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"dbumyo\"",
              "sol": "\"dbumyo\""
            },
            {
              "js": "[[191,241,58,193,129,107,184,250,252,157,248,16,248,222,0,5,190,253,210,227,76,225,113,48,167,183,253,66,56,4,97,111],[145,171,156,220,69,186,184,111,251,176,88,169,70,244,246,197,238,175,68,14,58,135,255,127,44,210,211,82,70,205,200,174]]",
              "sol": "[bytes(abi.encode(\"191,241,58,193,129,107,184,250,252,157,248,16,248,222,0,5,190,253,210,227,76,225,113,48,167,183,253,66,56,4,97,111\")),bytes(abi.encode(\"145,171,156,220,69,186,184,111,251,176,88,169,70,244,246,197,238,175,68,14,58,135,255,127,44,210,211,82,70,205,200,174\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.190ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"xlhdw5\"",
              "sol": "\"xlhdw5\""
            },
            {
              "js": "[[207,12,117,72,50,138,203,125,7,173,109,105,252,203,27,199,151,104,168,13,188,141,62,104,96,13,126,56,206,249,81,27],[175,43,150,53,144,194,131,129,137,39,220,66,182,61,181,73,17,146,175,71,218,172,227,222,12,106,91,130,161,62,115,16]]",
              "sol": "[bytes(abi.encode(\"207,12,117,72,50,138,203,125,7,173,109,105,252,203,27,199,151,104,168,13,188,141,62,104,96,13,126,56,206,249,81,27\")),bytes(abi.encode(\"175,43,150,53,144,194,131,129,137,39,220,66,182,61,181,73,17,146,175,71,218,172,227,222,12,106,91,130,161,62,115,16\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.191ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"dbumyo\"",
              "sol": "\"dbumyo\""
            },
            {
              "js": "[[9,52,118,163,16,192,96,110,166,134,210,139,55,70,67,149,139,253,1,186,131,234,42,26,92,222,69,73,101,115,157,113],[21,92,188,205,182,119,111,10,64,101,31,134,79,4,116,164,80,239,108,220,75,169,207,49,229,37,2,102,117,56,35,46],[42,74,142,158,29,181,8,40,209,100,57,21,70,76,143,173,88,182,74,0,54,241,157,139,49,167,53,249,219,0,146,45]]",
              "sol": "[bytes(abi.encode(\"9,52,118,163,16,192,96,110,166,134,210,139,55,70,67,149,139,253,1,186,131,234,42,26,92,222,69,73,101,115,157,113\")),bytes(abi.encode(\"21,92,188,205,182,119,111,10,64,101,31,134,79,4,116,164,80,239,108,220,75,169,207,49,229,37,2,102,117,56,35,46\")),bytes(abi.encode(\"42,74,142,158,29,181,8,40,209,100,57,21,70,76,143,173,88,182,74,0,54,241,157,139,49,167,53,249,219,0,146,45\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.191ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "[[225,70,117,36,67,114,168,222,95,241,76,11,123,118,21,76,16,169,177,227,87,225,72,116,162,153,35,78,89,211,5,98],[171,250,156,2,133,191,200,131,148,58,19,105,154,185,179,130,100,17,5,103,193,194,111,32,44,183,30,49,145,55,253,110],[126,0,255,191,42,244,222,116,79,48,48,98,175,12,152,83,169,41,23,247,56,96,46,16,60,167,111,182,4,0,197,184]]",
              "sol": "[bytes(abi.encode(\"225,70,117,36,67,114,168,222,95,241,76,11,123,118,21,76,16,169,177,227,87,225,72,116,162,153,35,78,89,211,5,98\")),bytes(abi.encode(\"171,250,156,2,133,191,200,131,148,58,19,105,154,185,179,130,100,17,5,103,193,194,111,32,44,183,30,49,145,55,253,110\")),bytes(abi.encode(\"126,0,255,191,42,244,222,116,79,48,48,98,175,12,152,83,169,41,23,247,56,96,46,16,60,167,111,182,4,0,197,184\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.193ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[219,107,205,139,247,82,56,140,29,163,140,184,119,80,119,18,153,203,131,46,134,68,228,238,75,108,199,222,148,64,252,33],[142,179,129,96,20,138,195,109,95,138,225,92,173,146,216,153,25,174,57,132,222,66,109,4,4,14,101,128,12,237,213,42],[144,229,26,141,68,189,166,171,145,119,213,243,168,27,241,219,102,139,188,14,142,100,2,9,243,65,185,50,143,97,56,106]]",
              "sol": "[bytes(abi.encode(\"219,107,205,139,247,82,56,140,29,163,140,184,119,80,119,18,153,203,131,46,134,68,228,238,75,108,199,222,148,64,252,33\")),bytes(abi.encode(\"142,179,129,96,20,138,195,109,95,138,225,92,173,146,216,153,25,174,57,132,222,66,109,4,4,14,101,128,12,237,213,42\")),bytes(abi.encode(\"144,229,26,141,68,189,166,171,145,119,213,243,168,27,241,219,102,139,188,14,142,100,2,9,243,65,185,50,143,97,56,106\"))]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.193ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"h63uk8\"",
              "sol": "\"h63uk8\""
            },
            {
              "js": "[[168,77,202,136,208,253,49,206,193,38,0,30,186,241,81,96,139,179,44,121,11,4,29,54,156,53,212,49,133,184,67,96],[94,45,21,9,236,130,247,118,141,161,67,31,180,219,213,61,33,237,99,81,68,57,128,147,242,58,34,104,8,30,121,23],[196,18,79,68,10,245,78,32,12,168,178,23,170,209,109,13,121,156,247,145,22,115,125,23,149,5,227,184,199,13,117,209]]",
              "sol": "[bytes(abi.encode(\"168,77,202,136,208,253,49,206,193,38,0,30,186,241,81,96,139,179,44,121,11,4,29,54,156,53,212,49,133,184,67,96\")),bytes(abi.encode(\"94,45,21,9,236,130,247,118,141,161,67,31,180,219,213,61,33,237,99,81,68,57,128,147,242,58,34,104,8,30,121,23\")),bytes(abi.encode(\"196,18,79,68,10,245,78,32,12,168,178,23,170,209,109,13,121,156,247,145,22,115,125,23,149,5,227,184,199,13,117,209\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.194ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[163,146,248,106,79,125,43,241,195,68,240,164,27,102,157,55,166,168,94,66,82,78,63,196,53,178,58,5,209,191,203,238],[13,162,179,153,234,91,195,32,68,161,220,203,220,29,106,184,194,233,136,103,170,149,239,198,43,5,236,205,192,23,220,1],[10,2,14,223,237,0,135,131,227,123,61,88,51,234,22,139,129,168,249,88,195,120,20,101,107,246,143,219,89,126,185,219],[16,99,71,246,2,227,172,217,79,120,10,108,60,34,244,239,107,120,143,72,6,55,125,140,209,222,105,62,26,205,246,225]]",
              "sol": "[bytes(abi.encode(\"163,146,248,106,79,125,43,241,195,68,240,164,27,102,157,55,166,168,94,66,82,78,63,196,53,178,58,5,209,191,203,238\")),bytes(abi.encode(\"13,162,179,153,234,91,195,32,68,161,220,203,220,29,106,184,194,233,136,103,170,149,239,198,43,5,236,205,192,23,220,1\")),bytes(abi.encode(\"10,2,14,223,237,0,135,131,227,123,61,88,51,234,22,139,129,168,249,88,195,120,20,101,107,246,143,219,89,126,185,219\")),bytes(abi.encode(\"16,99,71,246,2,227,172,217,79,120,10,108,60,34,244,239,107,120,143,72,6,55,125,140,209,222,105,62,26,205,246,225\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.195ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[48,105,79,113,176,207,187,194,97,234,207,210,76,173,214,244,163,199,205,118,56,162,218,31,32,199,145,78,144,28,171,232],[94,36,160,192,22,200,9,251,235,4,47,191,166,93,9,34,106,203,13,78,237,11,127,151,152,238,85,212,159,252,104,228],[60,68,114,135,168,96,51,236,201,244,40,97,136,203,76,136,77,122,74,180,68,47,240,145,245,215,8,39,189,22,60,134],[84,81,45,142,17,51,173,200,121,105,54,226,0,53,174,252,40,156,189,188,131,152,100,74,102,151,109,113,144,175,136,166]]",
              "sol": "[bytes(abi.encode(\"48,105,79,113,176,207,187,194,97,234,207,210,76,173,214,244,163,199,205,118,56,162,218,31,32,199,145,78,144,28,171,232\")),bytes(abi.encode(\"94,36,160,192,22,200,9,251,235,4,47,191,166,93,9,34,106,203,13,78,237,11,127,151,152,238,85,212,159,252,104,228\")),bytes(abi.encode(\"60,68,114,135,168,96,51,236,201,244,40,97,136,203,76,136,77,122,74,180,68,47,240,145,245,215,8,39,189,22,60,134\")),bytes(abi.encode(\"84,81,45,142,17,51,173,200,121,105,54,226,0,53,174,252,40,156,189,188,131,152,100,74,102,151,109,113,144,175,136,166\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.196ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "[[0,87,214,99,195,48,15,77,244,85,195,247,28,171,248,74,26,81,35,108,159,144,91,84,50,80,94,175,193,147,64,233],[252,153,48,167,197,243,96,165,105,181,247,171,236,51,139,102,6,223,242,215,190,25,116,129,242,63,86,31,42,27,135,74],[51,154,13,175,234,253,175,146,1,225,80,134,113,112,233,121,213,203,219,191,242,21,187,176,80,237,159,79,19,15,150,108],[236,92,93,69,244,75,159,51,206,244,52,95,25,218,190,17,191,109,62,190,2,211,228,141,110,10,47,214,127,84,133,4]]",
              "sol": "[bytes(abi.encode(\"0,87,214,99,195,48,15,77,244,85,195,247,28,171,248,74,26,81,35,108,159,144,91,84,50,80,94,175,193,147,64,233\")),bytes(abi.encode(\"252,153,48,167,197,243,96,165,105,181,247,171,236,51,139,102,6,223,242,215,190,25,116,129,242,63,86,31,42,27,135,74\")),bytes(abi.encode(\"51,154,13,175,234,253,175,146,1,225,80,134,113,112,233,121,213,203,219,191,242,21,187,176,80,237,159,79,19,15,150,108\")),bytes(abi.encode(\"236,92,93,69,244,75,159,51,206,244,52,95,25,218,190,17,191,109,62,190,2,211,228,141,110,10,47,214,127,84,133,4\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.196ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "[[64,191,60,92,135,161,151,169,141,0,84,183,194,124,223,44,208,239,96,19,74,59,226,126,28,165,203,20,251,213,22,131],[173,140,100,96,179,213,109,237,127,103,90,89,169,50,193,216,244,180,31,207,86,70,44,26,112,180,123,31,55,35,153,71],[204,168,195,56,220,109,225,124,229,199,188,96,165,233,126,214,147,156,43,130,153,7,70,21,64,22,248,204,86,84,66,144],[220,73,193,48,7,86,38,237,164,243,52,253,197,251,19,232,35,107,203,76,80,49,177,202,69,222,46,172,159,19,41,124]]",
              "sol": "[bytes(abi.encode(\"64,191,60,92,135,161,151,169,141,0,84,183,194,124,223,44,208,239,96,19,74,59,226,126,28,165,203,20,251,213,22,131\")),bytes(abi.encode(\"173,140,100,96,179,213,109,237,127,103,90,89,169,50,193,216,244,180,31,207,86,70,44,26,112,180,123,31,55,35,153,71\")),bytes(abi.encode(\"204,168,195,56,220,109,225,124,229,199,188,96,165,233,126,214,147,156,43,130,153,7,70,21,64,22,248,204,86,84,66,144\")),bytes(abi.encode(\"220,73,193,48,7,86,38,237,164,243,52,253,197,251,19,232,35,107,203,76,80,49,177,202,69,222,46,172,159,19,41,124\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.197ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[203,129,103,16,9,115,252,95,40,118,119,195,196,249,221,88,173,45,92,141,183,120,212,233,91,140,157,135,103,68,102,243],[108,0,151,2,51,4,0,48,124,243,153,43,23,140,67,41,252,173,192,155,215,80,96,159,196,23,52,77,1,125,178,173],[130,39,19,204,53,63,169,182,135,79,27,63,217,243,153,34,212,13,86,189,110,85,171,236,180,8,195,105,29,86,167,20],[100,185,14,66,194,164,218,240,44,214,126,201,103,226,170,4,33,107,17,136,49,21,131,242,5,252,15,54,172,75,153,161],[45,110,191,254,102,11,73,31,145,2,203,111,101,139,164,162,230,102,112,212,0,57,145,244,63,84,206,3,228,54,121,232]]",
              "sol": "[bytes(abi.encode(\"203,129,103,16,9,115,252,95,40,118,119,195,196,249,221,88,173,45,92,141,183,120,212,233,91,140,157,135,103,68,102,243\")),bytes(abi.encode(\"108,0,151,2,51,4,0,48,124,243,153,43,23,140,67,41,252,173,192,155,215,80,96,159,196,23,52,77,1,125,178,173\")),bytes(abi.encode(\"130,39,19,204,53,63,169,182,135,79,27,63,217,243,153,34,212,13,86,189,110,85,171,236,180,8,195,105,29,86,167,20\")),bytes(abi.encode(\"100,185,14,66,194,164,218,240,44,214,126,201,103,226,170,4,33,107,17,136,49,21,131,242,5,252,15,54,172,75,153,161\")),bytes(abi.encode(\"45,110,191,254,102,11,73,31,145,2,203,111,101,139,164,162,230,102,112,212,0,57,145,244,63,84,206,3,228,54,121,232\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.198ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[177,227,202,27,154,100,102,102,234,107,202,14,58,194,182,60,124,63,38,226,176,34,252,48,249,171,248,132,35,95,254,33],[202,207,8,215,91,133,196,180,33,75,59,163,144,107,231,74,252,204,44,61,100,74,28,142,9,41,137,148,165,129,121,28],[248,197,159,220,48,170,47,209,194,53,97,185,23,63,140,115,62,2,11,52,201,59,20,141,181,66,66,7,67,121,98,36],[165,140,13,170,98,60,84,180,43,39,210,255,161,63,86,26,40,171,151,208,51,135,221,222,13,141,249,120,251,123,232,9],[103,247,179,254,128,40,158,4,157,255,39,36,113,17,68,9,169,233,113,112,98,174,88,132,173,75,115,230,169,165,114,78]]",
              "sol": "[bytes(abi.encode(\"177,227,202,27,154,100,102,102,234,107,202,14,58,194,182,60,124,63,38,226,176,34,252,48,249,171,248,132,35,95,254,33\")),bytes(abi.encode(\"202,207,8,215,91,133,196,180,33,75,59,163,144,107,231,74,252,204,44,61,100,74,28,142,9,41,137,148,165,129,121,28\")),bytes(abi.encode(\"248,197,159,220,48,170,47,209,194,53,97,185,23,63,140,115,62,2,11,52,201,59,20,141,181,66,66,7,67,121,98,36\")),bytes(abi.encode(\"165,140,13,170,98,60,84,180,43,39,210,255,161,63,86,26,40,171,151,208,51,135,221,222,13,141,249,120,251,123,232,9\")),bytes(abi.encode(\"103,247,179,254,128,40,158,4,157,255,39,36,113,17,68,9,169,233,113,112,98,174,88,132,173,75,115,230,169,165,114,78\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.199ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "[[213,222,31,77,100,252,220,241,249,123,111,231,120,185,15,39,55,220,245,225,115,0,65,15,56,138,249,241,105,83,29,250],[240,20,161,228,171,195,46,229,6,184,59,59,214,15,190,173,21,83,141,206,57,75,221,172,69,61,42,203,245,177,133,19],[172,222,162,15,169,119,27,32,253,191,98,30,88,73,51,76,240,255,79,56,105,76,150,146,241,154,136,142,64,210,193,213],[145,95,174,15,68,215,254,161,172,66,48,11,5,228,52,198,150,47,21,248,157,64,207,95,122,182,229,78,127,203,231,242],[101,146,81,15,211,42,230,54,44,100,150,135,30,142,32,187,221,88,185,27,241,188,3,120,6,21,4,224,9,233,160,141]]",
              "sol": "[bytes(abi.encode(\"213,222,31,77,100,252,220,241,249,123,111,231,120,185,15,39,55,220,245,225,115,0,65,15,56,138,249,241,105,83,29,250\")),bytes(abi.encode(\"240,20,161,228,171,195,46,229,6,184,59,59,214,15,190,173,21,83,141,206,57,75,221,172,69,61,42,203,245,177,133,19\")),bytes(abi.encode(\"172,222,162,15,169,119,27,32,253,191,98,30,88,73,51,76,240,255,79,56,105,76,150,146,241,154,136,142,64,210,193,213\")),bytes(abi.encode(\"145,95,174,15,68,215,254,161,172,66,48,11,5,228,52,198,150,47,21,248,157,64,207,95,122,182,229,78,127,203,231,242\")),bytes(abi.encode(\"101,146,81,15,211,42,230,54,44,100,150,135,30,142,32,187,221,88,185,27,241,188,3,120,6,21,4,224,9,233,160,141\"))]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.201ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"2rkj83\"",
              "sol": "\"2rkj83\""
            },
            {
              "js": "[[3,190,230,164,126,72,122,222,88,129,236,34,48,219,79,83,112,5,179,162,163,166,245,84,197,139,210,247,132,181,7,85],[225,26,200,79,223,105,1,41,144,163,200,243,161,10,20,28,178,56,164,255,144,164,88,222,237,244,169,193,206,160,6,112],[215,105,40,251,224,65,27,179,243,92,82,30,197,44,28,15,40,159,6,195,211,238,156,39,40,3,224,107,69,203,19,87],[183,100,51,45,175,131,58,232,207,207,57,138,91,43,224,99,98,82,15,184,187,118,101,201,101,212,48,132,35,33,101,80],[172,181,160,187,192,197,232,194,15,236,201,224,244,62,96,249,62,123,218,250,227,180,17,22,226,103,234,23,109,241,225,88]]",
              "sol": "[bytes(abi.encode(\"3,190,230,164,126,72,122,222,88,129,236,34,48,219,79,83,112,5,179,162,163,166,245,84,197,139,210,247,132,181,7,85\")),bytes(abi.encode(\"225,26,200,79,223,105,1,41,144,163,200,243,161,10,20,28,178,56,164,255,144,164,88,222,237,244,169,193,206,160,6,112\")),bytes(abi.encode(\"215,105,40,251,224,65,27,179,243,92,82,30,197,44,28,15,40,159,6,195,211,238,156,39,40,3,224,107,69,203,19,87\")),bytes(abi.encode(\"183,100,51,45,175,131,58,232,207,207,57,138,91,43,224,99,98,82,15,184,187,118,101,201,101,212,48,132,35,33,101,80\")),bytes(abi.encode(\"172,181,160,187,192,197,232,194,15,236,201,224,244,62,96,249,62,123,218,250,227,180,17,22,226,103,234,23,109,241,225,88\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.202ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[30]",
              "sol": "bytes1(\"30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.203ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.203ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.204ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.204ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.205ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"2rkj83\"",
              "sol": "\"2rkj83\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.205ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"dbumyo\"",
              "sol": "\"dbumyo\""
            },
            {
              "js": "\"7potks\"",
              "sol": "\"7potks\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.206ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.206ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"h63uk8\"",
              "sol": "\"h63uk8\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.207ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"xlhdw5\"",
              "sol": "\"xlhdw5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.207ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "\"xlhdw5\"",
              "sol": "\"xlhdw5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.208ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"dbumyo\"",
              "sol": "\"dbumyo\""
            },
            {
              "js": "\"f5f7xj\"",
              "sol": "\"f5f7xj\""
            },
            {
              "js": "\"aki1xzh\"",
              "sol": "\"aki1xzh\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.208ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.209ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.210ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"ik16el\"",
              "sol": "\"ik16el\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.210ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"nulhfk\"",
              "sol": "\"nulhfk\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.211ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.212ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"2rkj83\"]",
              "sol": "[string(\"2rkj83\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.213ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[241,20,225,73,142,22,243,23,111,65,233,16,58,49,249,194,121,38,59,13,86,145,85,254,222,157,195,205,188,162,191,23]]",
              "sol": "[bytes(abi.encode(\"241,20,225,73,142,22,243,23,111,65,233,16,58,49,249,194,121,38,59,13,86,145,85,254,222,157,195,205,188,162,191,23\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.213ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.214ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[65,80,94,107,190,236,59,8,8,240,196,220,71,9,128,114,131,71,43,32,239,95,162,244,250,209,198,23,20,72,12,218]",
              "sol": "stringToBytes32(\"65,80,94,107,190,236,59,8,8,240,196,220,71,9,128,114,131,71,43,32,239,95,162,244,250,209,198,23,20,72,12,218\")"
            },
            {
              "js": "[32,218,197,126,133,36,20,82,76,176,96,175,151,102,82,171,240,213,220,152,210,79,102,16,86,158,70,205,110,147,101,248]",
              "sol": "stringToBytes32(\"32,218,197,126,133,36,20,82,76,176,96,175,151,102,82,171,240,213,220,152,210,79,102,16,86,158,70,205,110,147,101,248\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.215ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[142,95,92,71,230,204,47,185,116,35,146,106,242,43,155,13,191,45,193,211,72,138,43,31,1,2,161,127,115,11,48,128]",
              "sol": "stringToBytes32(\"142,95,92,71,230,204,47,185,116,35,146,106,242,43,155,13,191,45,193,211,72,138,43,31,1,2,161,127,115,11,48,128\")"
            },
            {
              "js": "[120,30,164,234,61,124,46,49,43,190,57,224,61,131,147,77,236,39,182,25,10,165,166,250,98,15,163,29,34,121,11,52]",
              "sol": "abi.encode(\"120,30,164,234,61,124,46,49,43,190,57,224,61,131,147,77,236,39,182,25,10,165,166,250,98,15,163,29,34,121,11,52\")"
            },
            {
              "js": "[207,229,159,204,117,63,145,62,39,196,110,100,31,46,187,57,101,146,15,127,167,130,5,229,254,62,30,24,219,19,169,59]",
              "sol": "abi.encode(\"207,229,159,204,117,63,145,62,39,196,110,100,31,46,187,57,101,146,15,127,167,130,5,229,254,62,30,24,219,19,169,59\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.215ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[76,10,154,30,5,239,109,137,14,18,129,242,228,63,219,43,211,186,30,3,160,131,146,201,110,203,63,47,239,226,10,68]",
              "sol": "abi.encode(\"76,10,154,30,5,239,109,137,14,18,129,242,228,63,219,43,211,186,30,3,160,131,146,201,110,203,63,47,239,226,10,68\")"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[191,119,132,20,123,223,231,3,68,74,10,80,124,66,200,134,118,64,75,247,216,110,247,153,241,86,47,35,158,62,4,197]",
              "sol": "abi.encode(\"191,119,132,20,123,223,231,3,68,74,10,80,124,66,200,134,118,64,75,247,216,110,247,153,241,86,47,35,158,62,4,197\")"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.217ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[155,155,35,6,130,47,146,107,86,237,216,172,156,2,243,67,216,86,190,151,142,30,38,244,127,135,110,224,100,49,38,226]",
              "sol": "stringToBytes32(\"155,155,35,6,130,47,146,107,86,237,216,172,156,2,243,67,216,86,190,151,142,30,38,244,127,135,110,224,100,49,38,226\")"
            },
            {
              "js": "\"ik16el\"",
              "sol": "\"ik16el\""
            },
            {
              "js": "[106,78,164,48,22,226,228,142,133,227,222,56,24,73,73,48,137,150,229,107,22,106,205,192,70,6,254,18,212,224,10,191]",
              "sol": "abi.encode(\"106,78,164,48,22,226,228,142,133,227,222,56,24,73,73,48,137,150,229,107,22,106,205,192,70,6,254,18,212,224,10,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[184,106,166,93,185,92,197,169,253,30,194,182,205,55,145,79,1,215,193,14,171,199,192,224,48,147,43,108,46,95,135,95]",
              "sol": "stringToBytes32(\"184,106,166,93,185,92,197,169,253,30,194,182,205,55,145,79,1,215,193,14,171,199,192,224,48,147,43,108,46,95,135,95\")"
            },
            {
              "js": "\"f5f7xj\"",
              "sol": "\"f5f7xj\""
            },
            {
              "js": "[220,197,3,167,67,118,1,92,236,178,160,205,96,177,237,135,245,139,21,128,133,28,132,4,194,99,70,201,121,63,120,128]",
              "sol": "abi.encode(\"220,197,3,167,67,118,1,92,236,178,160,205,96,177,237,135,245,139,21,128,133,28,132,4,194,99,70,201,121,63,120,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.220ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[64,152,196,218,104,215,1,21,11,200,43,141,132,149,40,90,17,18,213,61,89,34,198,27,198,244,118,205,185,19,250,246]",
              "sol": "stringToBytes32(\"64,152,196,218,104,215,1,21,11,200,43,141,132,149,40,90,17,18,213,61,89,34,198,27,198,244,118,205,185,19,250,246\")"
            },
            {
              "js": "[163,220,70,176,117,159,180,47,124,184,190,51,7,29,57,62,235,173,128,104,128,148,192,102,210,101,237,31,60,22,21,143]",
              "sol": "abi.encode(\"163,220,70,176,117,159,180,47,124,184,190,51,7,29,57,62,235,173,128,104,128,148,192,102,210,101,237,31,60,22,21,143\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[64,152,196,218,104,215,1,21,11,200,43,141,132,149,40,90,17,18,213,61,89,34,198,27,198,244,118,205,185,19,250,246]",
                "sol": "stringToBytes32(\"64,152,196,218,104,215,1,21,11,200,43,141,132,149,40,90,17,18,213,61,89,34,198,27,198,244,118,205,185,19,250,246\")"
              },
              {
                "js": "[57,5,106,233,67,34,47,86,172,116,161,48,67,9,64,6,39,145,27,174,207,97,41,22,19,28,247,193,7,229,189,74,208]",
                "sol": "bytes33(\"57,5,106,233,67,34,47,86,172,116,161,48,67,9,64,6,39,145,27,174,207,97,41,22,19,28,247,193,7,229,189,74,208\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.221ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[80,229,80,236,170,47,45,15,18,180,171,128,147,82,225,34,224,167,217,164,111,226,229,201,141,81,142,54,181,69,63,54]",
              "sol": "abi.encode(\"80,229,80,236,170,47,45,15,18,180,171,128,147,82,225,34,224,167,217,164,111,226,229,201,141,81,142,54,181,69,63,54\")"
            },
            {
              "js": "[247,2,137,105,33,87,132,59,19,108,245,40,198,246,171,149,31,2,93,165,153,208,193,96,175,47,227,195,246,113,4,207]",
              "sol": "stringToBytes32(\"247,2,137,105,33,87,132,59,19,108,245,40,198,246,171,149,31,2,93,165,153,208,193,96,175,47,227,195,246,113,4,207\")"
            },
            {
              "js": "[210,22,108,121,56,64,44,131,197,218,200,62,107,32,58,152,121,123,83,148,223,218,167,195,235,176,224,40,180,173,230,214]",
              "sol": "abi.encode(\"210,22,108,121,56,64,44,131,197,218,200,62,107,32,58,152,121,123,83,148,223,218,167,195,235,176,224,40,180,173,230,214\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[181,1,219,159,14,59,222,105,162,243,123,185,162,0,24,135,106,221,235,172,145,58,198,185,236,93,214,202,236,179,153,129]",
              "sol": "abi.encode(\"181,1,219,159,14,59,222,105,162,243,123,185,162,0,24,135,106,221,235,172,145,58,198,185,236,93,214,202,236,179,153,129\")"
            },
            {
              "js": "[9,69,253,78,79,193,251,134,14,199,162,65,230,190,199,99,198,92,8,172,105,235,31,197,37,151,49,80,130,220,126,87]",
              "sol": "stringToBytes32(\"9,69,253,78,79,193,251,134,14,199,162,65,230,190,199,99,198,92,8,172,105,235,31,197,37,151,49,80,130,220,126,87\")"
            },
            {
              "js": "[175,192,89,231,9,193,206,153,189,116,101,240,21,92,25,209,180,14,76,7,160,102,243,15,244,144,196,131,171,124,109,10]",
              "sol": "abi.encode(\"175,192,89,231,9,193,206,153,189,116,101,240,21,92,25,209,180,14,76,7,160,102,243,15,244,144,196,131,171,124,109,10\")"
            },
            {
              "js": "\"bz25ct\"",
              "sol": "\"bz25ct\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[117,4,241,109,138,207,225,204,7,40,150,170,60,139,7,105,247,201,243,163,227,231,106,83,247,239,221,253,221,104,76,32]",
              "sol": "abi.encode(\"117,4,241,109,138,207,225,204,7,40,150,170,60,139,7,105,247,201,243,163,227,231,106,83,247,239,221,253,221,104,76,32\")"
            },
            {
              "js": "[219,230,157,109,157,56,225,139,44,90,183,92,206,112,135,252,105,87,208,195,157,157,252,154,1,125,113,69,171,174,54,202]",
              "sol": "stringToBytes32(\"219,230,157,109,157,56,225,139,44,90,183,92,206,112,135,252,105,87,208,195,157,157,252,154,1,125,113,69,171,174,54,202\")"
            },
            {
              "js": "[161,3,232,141,224,143,209,169,226,181,18,1,201,16,226,198,150,190,160,223,34,23,252,85,132,250,244,168,140,202,153,104]",
              "sol": "abi.encode(\"161,3,232,141,224,143,209,169,226,181,18,1,201,16,226,198,150,190,160,223,34,23,252,85,132,250,244,168,140,202,153,104\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[18,73,235,203,223,155,230,60,32,65,25,115,29,144,185,100,227,213,203,190,232,97,143,106,94,31,231,28,174,62,1,81]",
              "sol": "abi.encode(\"18,73,235,203,223,155,230,60,32,65,25,115,29,144,185,100,227,213,203,190,232,97,143,106,94,31,231,28,174,62,1,81\")"
            },
            {
              "js": "[22,159,29,136,200,146,89,251,212,158,114,201,89,218,156,72,135,249,245,58,244,70,91,213,176,134,105,220,50,173,139,27]",
              "sol": "stringToBytes32(\"22,159,29,136,200,146,89,251,212,158,114,201,89,218,156,72,135,249,245,58,244,70,91,213,176,134,105,220,50,173,139,27\")"
            },
            {
              "js": "[85,215,110,112,105,173,45,171,9,220,11,194,171,160,238,36,95,28,133,63,145,119,10,88,156,241,185,127,197,108,171,179]",
              "sol": "abi.encode(\"85,215,110,112,105,173,45,171,9,220,11,194,171,160,238,36,95,28,133,63,145,119,10,88,156,241,185,127,197,108,171,179\")"
            },
            {
              "js": "\"ka3dp\"",
              "sol": "\"ka3dp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[106,86,226,214,39,101,17,75,34,236,193,124,128,4,184,91,217,40,150,166,69,193,112,112,123,211,124,222,105,26,183,51]",
              "sol": "abi.encode(\"106,86,226,214,39,101,17,75,34,236,193,124,128,4,184,91,217,40,150,166,69,193,112,112,123,211,124,222,105,26,183,51\")"
            },
            {
              "js": "[120,78,199,81,88,91,122,64,235,216,173,44,255,148,40,177,73,47,51,230,161,53,105,73,100,191,226,96,248,54,190,170]",
              "sol": "stringToBytes32(\"120,78,199,81,88,91,122,64,235,216,173,44,255,148,40,177,73,47,51,230,161,53,105,73,100,191,226,96,248,54,190,170\")"
            },
            {
              "js": "[153,21,249,9,65,197,56,43,150,243,146,87,156,125,148,239,88,37,94,183,238,59,78,197,179,71,154,241,114,99,111,116]",
              "sol": "abi.encode(\"153,21,249,9,65,197,56,43,150,243,146,87,156,125,148,239,88,37,94,183,238,59,78,197,179,71,154,241,114,99,111,116\")"
            },
            {
              "js": "\"f5f7xj\"",
              "sol": "\"f5f7xj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[86,179,8,53,150,209,195,189,165,125,215,219,153,35,247,222,209,81,112,49,183,232,97,161,40,233,95,34,41,30,150,42]",
              "sol": "abi.encode(\"86,179,8,53,150,209,195,189,165,125,215,219,153,35,247,222,209,81,112,49,183,232,97,161,40,233,95,34,41,30,150,42\")"
            },
            {
              "js": "[135,70,69,238,210,20,24,202,86,22,134,106,203,81,110,155,54,147,206,252,254,224,100,216,202,126,204,56,73,70,185,95]",
              "sol": "stringToBytes32(\"135,70,69,238,210,20,24,202,86,22,134,106,203,81,110,155,54,147,206,252,254,224,100,216,202,126,204,56,73,70,185,95\")"
            },
            {
              "js": "[255,8,180,154,101,218,18,231,12,244,187,16,55,125,117,30,176,104,126,102,78,232,148,108,63,0,58,60,107,111,138,233]",
              "sol": "abi.encode(\"255,8,180,154,101,218,18,231,12,244,187,16,55,125,117,30,176,104,126,102,78,232,148,108,63,0,58,60,107,111,138,233\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[249,88,5,6,220,24,34,100,189,202,113,5,166,79,137,235,231,157,41,86,141,200,189,64,211,33,56,220,37,65,107,36]",
              "sol": "abi.encode(\"249,88,5,6,220,24,34,100,189,202,113,5,166,79,137,235,231,157,41,86,141,200,189,64,211,33,56,220,37,65,107,36\")"
            },
            {
              "js": "[229,44,215,21,237,195,5,241,40,8,65,61,76,169,181,98,38,185,181,129,84,105,218,83,116,231,87,227,246,136,78,170]",
              "sol": "stringToBytes32(\"229,44,215,21,237,195,5,241,40,8,65,61,76,169,181,98,38,185,181,129,84,105,218,83,116,231,87,227,246,136,78,170\")"
            },
            {
              "js": "[68,68,45,228,209,82,113,117,2,27,61,176,154,31,125,166,157,223,165,190,101,98,94,247,47,78,21,197,50,184,140,73]",
              "sol": "abi.encode(\"68,68,45,228,209,82,113,117,2,27,61,176,154,31,125,166,157,223,165,190,101,98,94,247,47,78,21,197,50,184,140,73\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[115,18,227,159,217,93,175,252,168,225,182,138,213,84,233,209,15,168,4,221,184,58,0,135,83,21,40,184,220,100,201,114]",
              "sol": "abi.encode(\"115,18,227,159,217,93,175,252,168,225,182,138,213,84,233,209,15,168,4,221,184,58,0,135,83,21,40,184,220,100,201,114\")"
            },
            {
              "js": "[73,75,242,95,149,55,72,124,22,76,225,46,66,210,99,167,67,237,9,80,79,251,163,252,10,232,154,81,187,242,96,92]",
              "sol": "stringToBytes32(\"73,75,242,95,149,55,72,124,22,76,225,46,66,210,99,167,67,237,9,80,79,251,163,252,10,232,154,81,187,242,96,92\")"
            },
            {
              "js": "[84,78,104,53,235,189,65,254,41,37,45,237,73,22,241,79,203,54,174,41,198,249,13,172,174,50,237,40,7,245,168,89]",
              "sol": "abi.encode(\"84,78,104,53,235,189,65,254,41,37,45,237,73,22,241,79,203,54,174,41,198,249,13,172,174,50,237,40,7,245,168,89\")"
            },
            {
              "js": "\"h63uk8\"",
              "sol": "\"h63uk8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.227ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[22,148,43,211,175,87,203,85,3,214,67,169,32,106,143,77,124,136,188,254,21,57,209,121,249,238,65,142,117,31,70,104]",
              "sol": "abi.encode(\"22,148,43,211,175,87,203,85,3,214,67,169,32,106,143,77,124,136,188,254,21,57,209,121,249,238,65,142,117,31,70,104\")"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "[44,36,219,61,133,137,180,89,19,54,51,27,40,141,8,211,103,152,228,212,16,88,140,9,239,4,0,117,223,55,10,232]",
              "sol": "abi.encode(\"44,36,219,61,133,137,180,89,19,54,51,27,40,141,8,211,103,152,228,212,16,88,140,9,239,4,0,117,223,55,10,232\")"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.228ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[212,92,228,56,36,43,172,190,220,61,190,6,52,219,82,12,70,144,183,192,65,250,181,65,152,68,125,119,193,233,97,160]",
              "sol": "stringToBytes32(\"212,92,228,56,36,43,172,190,220,61,190,6,52,219,82,12,70,144,183,192,65,250,181,65,152,68,125,119,193,233,97,160\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[87,241,94,230,3,3,158,167,112,92,139,78,60,164,15,203,53,221,150,207,171,6,49,175,151,84,61,146,216,154,40,241]",
              "sol": "stringToBytes32(\"87,241,94,230,3,3,158,167,112,92,139,78,60,164,15,203,53,221,150,207,171,6,49,175,151,84,61,146,216,154,40,241\")"
            },
            {
              "js": "[116,36,219,151,1,104,215,55,168,38,195,248,161,12,116,68,17,41,59,24,14,146,33,111,57,210,249,172,114,81,249,190]",
              "sol": "stringToBytes32(\"116,36,219,151,1,104,215,55,168,38,195,248,161,12,116,68,17,41,59,24,14,146,33,111,57,210,249,172,114,81,249,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.229ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[48,17,42,172,116,239,200,249,218,151,24,165,121,61,214,163,188,130,210,245,101,7,144,130,23,11,249,159,224,193,172,67]",
              "sol": "stringToBytes32(\"48,17,42,172,116,239,200,249,218,151,24,165,121,61,214,163,188,130,210,245,101,7,144,130,23,11,249,159,224,193,172,67\")"
            },
            {
              "js": "[48,164,146,204,232,24,188,105,94,147,63,199,28,168,153,246,182,65,225]",
              "sol": "abi.encode(\"48,164,146,204,232,24,188,105,94,147,63,199,28,168,153,246,182,65,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[246,193,74,169,155,34,70,244,255,245,188,176,103,14,198,216,58,77,80,78,181,176,205,252,203,44,3,108,118,198,132,58]",
              "sol": "stringToBytes32(\"246,193,74,169,155,34,70,244,255,245,188,176,103,14,198,216,58,77,80,78,181,176,205,252,203,44,3,108,118,198,132,58\")"
            },
            {
              "js": "[180,207,156,56,56,116,29,239,210,84,1,74,121,92,140,204,164,121,248,0,188,85,214,34,57,173,102,106,200,25,1,175,215,234,58,114,1,58,146,202,35,79,98,179,15,95,136,171,162,137,9,229,163,224,55,11,3,71,108,58,228,6,22,72,104]",
              "sol": "abi.encode(\"180,207,156,56,56,116,29,239,210,84,1,74,121,92,140,204,164,121,248,0,188,85,214,34,57,173,102,106,200,25,1,175,215,234,58,114,1,58,146,202,35,79,98,179,15,95,136,171,162,137,9,229,163,224,55,11,3,71,108,58,228,6,22,72,104\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.230ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.231ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[61,4]",
              "sol": "[uint(61),uint(4)]"
            },
            {
              "js": "[[20,3],[11,15]]",
              "sol": "[[uint(20),uint(3)],[uint(11),uint(15)]]"
            },
            {
              "js": "[1025,103]",
              "sol": "[uint(1025),uint(103)]"
            },
            {
              "js": "[257,19]",
              "sol": "[uint(257),uint(19)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.234ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.234ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[88,86]",
              "sol": "[uint(88),uint(86)]"
            },
            {
              "js": "{\"A\": {\"X\": 86,\"Y\": 98},\"B\": {\"X\": [23,98],\"Y\": [32,30]},\"C\": {\"X\": 70,\"Y\": 88}}",
              "sol": "Verifier.Proof(Pairing.G1Point(86,98),Pairing.G2Point([uint(23),uint(98)],[uint(32),uint(30)]),Pairing.G1Point(70,88))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[199999,199999,160,200000,70,61,57,24,1,199999]",
              "sol": "[uint(199999),uint(199999),uint(160),uint(200000),uint(70),uint(61),uint(57),uint(24),uint(1),uint(199999)]"
            },
            {
              "js": "{\"A\": {\"X\": 61,\"Y\": 61},\"B\": {\"X\": [24,17],\"Y\": [48,45]},\"C\": {\"X\": 3,\"Y\": 98}}",
              "sol": "Verifier.Proof(Pairing.G1Point(61,61),Pairing.G2Point([uint(24),uint(17)],[uint(48),uint(45)]),Pairing.G1Point(3,98))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.237ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.237ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.238ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.240ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.240ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "accounts[9]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.241ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.241ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.242ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.244ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "[105,158,181,192,130,99,232,195,26,141,78,83,244,213,200,34,19,83,146,205,132,55,237,122,80,29,203,141,15,58,237,225]",
              "sol": "abi.encode(\"105,158,181,192,130,99,232,195,26,141,78,83,244,213,200,34,19,83,146,205,132,55,237,122,80,29,203,141,15,58,237,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "[105,158,181,192,130,99,232,195,26,141,78,83,244,213,200,34,19,83,146,205,132,55,237,122,80,29,203,141,15,58,237,225]",
                "sol": "abi.encode(\"105,158,181,192,130,99,232,195,26,141,78,83,244,213,200,34,19,83,146,205,132,55,237,122,80,29,203,141,15,58,237,225\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.245ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.248ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[4,69,75,89]",
              "sol": "bytes4(\"4,69,75,89\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.251ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.251ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.251ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.252ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.253ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "[10,199,254,210,44,13,135,15,169,35,166,42,119,169,158,8,159,19,94,214,88,180,228,254,160,72,192,231,194,167,211,207]",
              "sol": "abi.encode(\"10,199,254,210,44,13,135,15,169,35,166,42,119,169,158,8,159,19,94,214,88,180,228,254,160,72,192,231,194,167,211,207\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "[93,85,137,157,122,218,166,55,32,58,7,194,99,61,61,90,84,34,154,187,208,160,155,111,55,100,239,10,75,42,189,182]",
              "sol": "abi.encode(\"93,85,137,157,122,218,166,55,32,58,7,194,99,61,61,90,84,34,154,187,208,160,155,111,55,100,239,10,75,42,189,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.255ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.257ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[96,48]",
              "sol": "[uint(96),uint(48)]"
            },
            {
              "js": "[[1,254],[128,1532892064]]",
              "sol": "[[uint(1),uint(254)],[uint(128),uint(1532892064)]]"
            },
            {
              "js": "[95,45]",
              "sol": "[uint(95),uint(45)]"
            },
            {
              "js": "[57,257]",
              "sol": "[uint(57),uint(257)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.259ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.261ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.262ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.262ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.263ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.264ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.266ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.266ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.267ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.268ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "8",
                "sol": "8"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.269ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T03:32:44.270ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.271ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T03:32:44.272ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}