,{
  "2020-11-10T20:46:46.644ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:47:01.577ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:47:16.474ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:47:31.468ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:47:46.520ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:01.647ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.694ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [227,46,243,251,138,51,90,144,150,88,6,151,124,239,106,113,169,59,160,130,22,142,95,54,148,170,168,114,0,60,65,174],\"capacity\": 48}",
              "sol": "Buffer.buffer(abi.encode(\"227,46,243,251,138,51,90,144,150,88,6,151,124,239,106,113,169,59,160,130,22,142,95,54,148,170,168,114,0,60,65,174\"),48)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.695ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [98,42,207,196,206,199,204,108,162,158,63,62,214,115,220,36,108,215,152,42,171,128,201,180,46,159,182,63,246,125,55,115],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"98,42,207,196,206,199,204,108,162,158,63,62,214,115,220,36,108,215,152,42,171,128,201,180,46,159,182,63,246,125,55,115\"),1532892062)"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [192,65,23,91,120,214,180,62,170,20,231,30,214,192,150,123,160,211,167,226,242,163,170,137,223,102,129,219,43,47,239,27],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"192,65,23,91,120,214,180,62,170,20,231,30,214,192,150,123,160,211,167,226,242,163,170,137,223,102,129,219,43,47,239,27\"),24)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.697ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [182,107,191,82,174,121,42,254,181,224,191,212,129,16,73,183,95,183,108,216,138,66,190,82,210,25,168,86,201,72,202,12],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"182,107,191,82,174,121,42,254,181,224,191,212,129,16,73,183,95,183,108,216,138,66,190,82,210,25,168,86,201,72,202,12\"),59)"
            },
            {
              "js": "[162,245,194,183,75,253,234,51,125,112,107,83,163,210,118,134,233,240,156,224,244,70,243,81,218,99,105,167,197,65,115,84]",
              "sol": "abi.encode(\"162,245,194,183,75,253,234,51,125,112,107,83,163,210,118,134,233,240,156,224,244,70,243,81,218,99,105,167,197,65,115,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.697ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [152,58,51,186,160,239,105,207,234,1,89,87,16,187,84,17,242,195,206,223,193,110,93,116,144,234,47,226,68,218,81,67],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"152,58,51,186,160,239,105,207,234,1,89,87,16,187,84,17,242,195,206,223,193,110,93,116,144,234,47,226,68,218,81,67\"),19)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.697ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [212,43,167,86,162,154,130,17,158,172,238,135,194,133,13,225,20,106,203,121,53,171,73,206,123,238,73,32,206,235,250,201],\"capacity\": 47}",
              "sol": "Buffer.buffer(abi.encode(\"212,43,167,86,162,154,130,17,158,172,238,135,194,133,13,225,20,106,203,121,53,171,73,206,123,238,73,32,206,235,250,201\"),47)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.698ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [224,189,232,147,236,218,85,165,174,178,147,203,92,229,101,24,150,31,64,210,209,30,217,43,243,191,107,198,239,138,242,117],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"224,189,232,147,236,218,85,165,174,178,147,203,92,229,101,24,150,31,64,210,209,30,217,43,243,191,107,198,239,138,242,117\"),9)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.698ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [152,126,190,140,103,254,133,121,185,19,184,161,254,100,5,36,73,12,180,42,51,117,86,79,157,91,155,51,154,118,94,88],\"capacity\": 63}",
              "sol": "Buffer.buffer(abi.encode(\"152,126,190,140,103,254,133,121,185,19,184,161,254,100,5,36,73,12,180,42,51,117,86,79,157,91,155,51,154,118,94,88\"),63)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.703ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.703ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.704ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 48,\"Y\": 18}",
              "sol": "Pairing.G1Point(48,18)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.704ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 29,\"Y\": 28}",
              "sol": "Pairing.G1Point(29,28)"
            },
            {
              "js": "{\"X\": 3,\"Y\": 33}",
              "sol": "Pairing.G1Point(3,33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.705ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [18,88],\"Y\": [86,86]}",
              "sol": "Pairing.G2Point([uint(18),uint(88)],[uint(86),uint(86)])"
            },
            {
              "js": "{\"X\": [97,1532892063],\"Y\": [70,69]}",
              "sol": "Pairing.G2Point([uint(97),uint(1532892063)],[uint(70),uint(69)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.706ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 59,\"Y\": 1532892062}",
              "sol": "Pairing.G1Point(59,1532892062)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.706ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 33,\"Y\": 102},{\"X\": 66,\"Y\": 31},{\"X\": 25,\"Y\": 30},{\"X\": 200001,\"Y\": 32},{\"X\": 49,\"Y\": 57},{\"X\": 23,\"Y\": 2},{\"X\": 1532892062,\"Y\": 54},{\"X\": 55,\"Y\": 162},{\"X\": 128,\"Y\": 127},{\"X\": 23,\"Y\": 55}]",
              "sol": "[Pairing.G1Point(33,102),Pairing.G1Point(66,31),Pairing.G1Point(25,30),Pairing.G1Point(200001,32),Pairing.G1Point(49,57),Pairing.G1Point(23,2),Pairing.G1Point(1532892062,54),Pairing.G1Point(55,162),Pairing.G1Point(128,127),Pairing.G1Point(23,55)]"
            },
            {
              "js": "[{\"X\": [64,257],\"Y\": [86,3]},{\"X\": [70,1532892064],\"Y\": [1532892062,3]},{\"X\": [96,127],\"Y\": [15,56]},{\"X\": [15,102],\"Y\": [15,16]},{\"X\": [64,257],\"Y\": [8,18]},{\"X\": [19,2014223716],\"Y\": [47,1532892062]},{\"X\": [97,161],\"Y\": [97,9]},{\"X\": [1532892062,54],\"Y\": [59,98]},{\"X\": [95,8],\"Y\": [254,8]},{\"X\": [19,2014223715],\"Y\": [66,57]}]",
              "sol": "[Pairing.G2Point([uint(64),uint(257)],[uint(86),uint(3)]),Pairing.G2Point([uint(70),uint(1532892064)],[uint(1532892062),uint(3)]),Pairing.G2Point([uint(96),uint(127)],[uint(15),uint(56)]),Pairing.G2Point([uint(15),uint(102)],[uint(15),uint(16)]),Pairing.G2Point([uint(64),uint(257)],[uint(8),uint(18)]),Pairing.G2Point([uint(19),uint(2014223716)],[uint(47),uint(1532892062)]),Pairing.G2Point([uint(97),uint(161)],[uint(97),uint(9)]),Pairing.G2Point([uint(1532892062),uint(54)],[uint(59),uint(98)]),Pairing.G2Point([uint(95),uint(8)],[uint(254),uint(8)]),Pairing.G2Point([uint(19),uint(2014223715)],[uint(66),uint(57)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 2,\"Y\": 160},{\"X\": 19,\"Y\": 86},{\"X\": 256,\"Y\": 254},{\"X\": 1023,\"Y\": 26},{\"X\": 32,\"Y\": 29},{\"X\": 2014223714,\"Y\": 23},{\"X\": 95,\"Y\": 22},{\"X\": 254,\"Y\": 3},{\"X\": 71,\"Y\": 70},{\"X\": 31,\"Y\": 58},{\"X\": 49,\"Y\": 29}]",
                "sol": "[Pairing.G1Point(95,200000),Pairing.G1Point(2014223715,5),Pairing.G1Point(33,254),Pairing.G1Point(2014223716,96),Pairing.G1Point(45,56),Pairing.G1Point(1532892063,60),Pairing.G1Point(19,3),Pairing.G1Point(160,9),Pairing.G1Point(61,7),Pairing.G1Point(95,3),Pairing.G1Point(61,2)]"
              },
              {
                "js": "[{\"X\": [64,257],\"Y\": [86,3]},{\"X\": [70,1532892064],\"Y\": [1532892062,3]},{\"X\": [96,127],\"Y\": [15,56]},{\"X\": [15,102],\"Y\": [15,16]},{\"X\": [64,257],\"Y\": [8,18]},{\"X\": [19,2014223716],\"Y\": [47,1532892062]},{\"X\": [97,161],\"Y\": [97,9]},{\"X\": [1532892062,54],\"Y\": [59,98]},{\"X\": [95,8],\"Y\": [254,8]},{\"X\": [19,2014223715],\"Y\": [66,57]}]",
                "sol": "[Pairing.G2Point([uint(64),uint(257)],[uint(86),uint(3)]),Pairing.G2Point([uint(70),uint(1532892064)],[uint(1532892062),uint(3)]),Pairing.G2Point([uint(96),uint(127)],[uint(15),uint(56)]),Pairing.G2Point([uint(15),uint(102)],[uint(15),uint(16)]),Pairing.G2Point([uint(64),uint(257)],[uint(8),uint(18)]),Pairing.G2Point([uint(19),uint(2014223716)],[uint(47),uint(1532892062)]),Pairing.G2Point([uint(97),uint(161)],[uint(97),uint(9)]),Pairing.G2Point([uint(1532892062),uint(54)],[uint(59),uint(98)]),Pairing.G2Point([uint(95),uint(8)],[uint(254),uint(8)]),Pairing.G2Point([uint(19),uint(2014223715)],[uint(66),uint(57)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.715ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 129,\"Y\": 30}",
              "sol": "Pairing.G1Point(129,30)"
            },
            {
              "js": "{\"X\": [48,129],\"Y\": [57,1023]}",
              "sol": "Pairing.G2Point([uint(48),uint(129)],[uint(57),uint(1023)])"
            },
            {
              "js": "{\"X\": 25,\"Y\": 59}",
              "sol": "Pairing.G1Point(25,59)"
            },
            {
              "js": "{\"X\": [9,29],\"Y\": [49,102]}",
              "sol": "Pairing.G2Point([uint(9),uint(29)],[uint(49),uint(102)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.716ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 199999,\"Y\": 23}",
              "sol": "Pairing.G1Point(199999,23)"
            },
            {
              "js": "{\"X\": [59,2014223716],\"Y\": [20,57]}",
              "sol": "Pairing.G2Point([uint(59),uint(2014223716)],[uint(20),uint(57)])"
            },
            {
              "js": "{\"X\": 86,\"Y\": 33}",
              "sol": "Pairing.G1Point(86,33)"
            },
            {
              "js": "{\"X\": [256,58],\"Y\": [47,56]}",
              "sol": "Pairing.G2Point([uint(256),uint(58)],[uint(47),uint(56)])"
            },
            {
              "js": "{\"X\": 200000,\"Y\": 47}",
              "sol": "Pairing.G1Point(200000,47)"
            },
            {
              "js": "{\"X\": [66,199999],\"Y\": [10,15]}",
              "sol": "Pairing.G2Point([uint(66),uint(199999)],[uint(10),uint(15)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.721ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.722ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.722ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.723ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.723ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.724ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.724ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.725ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.725ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.726ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.726ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.730ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [46,147,75,127,32,62,194,208,0,171,117,154,57,179,3,20,98,218,57,3,143,253,215,145,133,89,10,226,6,111,9,93],\"capacity\": 29}",
              "sol": "Buffer.buffer(abi.encode(\"46,147,75,127,32,62,194,208,0,171,117,154,57,179,3,20,98,218,57,3,143,253,215,145,133,89,10,226,6,111,9,93\"),29)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.730ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [220,94,75,109,148,221,165,7,255,252,213,246,28,138,217,203,95,202,93,47,72,206,175,165,26,144,56,154,111,255,105,255],\"capacity\": 6}",
              "sol": "Buffer.buffer(abi.encode(\"220,94,75,109,148,221,165,7,255,252,213,246,28,138,217,203,95,202,93,47,72,206,175,165,26,144,56,154,111,255,105,255\"),6)"
            },
            {
              "js": "[107,219,220,138,104,115,188,154,86,57,217,251,15,86,179,117,91,187,216,77,58,188,216,133,56,164,10,140,173,172,124,165]",
              "sol": "abi.encode(\"107,219,220,138,104,115,188,154,86,57,217,251,15,86,179,117,91,187,216,77,58,188,216,133,56,164,10,140,173,172,124,165\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.731ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [252,222,128,111,118,27,79,160,111,29,40,175,6,229,222,56,133,30,253,144,51,229,231,228,17,151,186,18,100,148,153,157],\"capacity\": 200001}",
              "sol": "Buffer.buffer(abi.encode(\"252,222,128,111,118,27,79,160,111,29,40,175,6,229,222,56,133,30,253,144,51,229,231,228,17,151,186,18,100,148,153,157\"),200001)"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.731ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [35,16,231,208,162,94,209,231,48,132,114,69,190,77,187,64,93,111,186,35,1,8,224,59,112,46,80,80,76,125,122,240],\"capacity\": 26}",
              "sol": "Buffer.buffer(abi.encode(\"35,16,231,208,162,94,209,231,48,132,114,69,190,77,187,64,93,111,186,35,1,8,224,59,112,46,80,80,76,125,122,240\"),26)"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.732ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[73,28,21,75,175,121,211,131,42,169,155,157,147,203,125,237,227,123,66,42,174,82,10,237,168,194,182,78,125,254,160,253]",
              "sol": "stringToBytes32(\"73,28,21,75,175,121,211,131,42,169,155,157,147,203,125,237,227,123,66,42,174,82,10,237,168,194,182,78,125,254,160,253\")"
            },
            {
              "js": "\"3rcoep\"",
              "sol": "\"3rcoep\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.733ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[154,43,146,217,46,14,147,33,17,152,83,196,11,121,5,31,11,215,120,220,60,125,232,62,92,109,36,120,11,109,243,54]",
              "sol": "stringToBytes32(\"154,43,146,217,46,14,147,33,17,152,83,196,11,121,5,31,11,215,120,220,60,125,232,62,92,109,36,120,11,109,243,54\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[87,121,70,29,67,142,47,13,226,66,182,92,69,195,183,23,84,59,141,93,166,184,99,101,72,223,45,202,105,178,153,178]",
              "sol": "abi.encode(\"87,121,70,29,67,142,47,13,226,66,182,92,69,195,183,23,84,59,141,93,166,184,99,101,72,223,45,202,105,178,153,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.774ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.775ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.775ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.776ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.776ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.776ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.777ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.777ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.778ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.778ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.778ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.779ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.779ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"cr43sa\"",
              "sol": "\"cr43sa\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.780ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"qpj32e\"",
              "sol": "\"qpj32e\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.780ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"3rcoep\",\"Capstones\",\"0\",\"0\",\"L\"]",
              "sol": "[string(\"3rcoep\"),string(\"Capstones\"),string(\"0\"),string(\"0\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.781ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"qpj32e\"",
              "sol": "\"qpj32e\""
            },
            {
              "js": "[\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\"]",
              "sol": "[string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.782ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"P\",\"cr43sa\",\"3rcoep\",\"L\",\"P\",\"[\"]",
              "sol": "[string(\"P\"),string(\"cr43sa\"),string(\"3rcoep\"),string(\"L\"),string(\"P\"),string(\"[\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.782ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"[\",\"mprxf\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"[\"),string(\"mprxf\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.783ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"gfhr2\"]",
              "sol": "[string(\"gfhr2\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.783ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"mprxf\"",
              "sol": "\"mprxf\""
            },
            {
              "js": "[\"[\"]",
              "sol": "[string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.784ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.784ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.785ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"si4ooh\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"si4ooh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.785ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"mprxf\"",
              "sol": "\"mprxf\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"si4ooh\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"si4ooh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.787ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"cr43sa\",\"Capstones\"]",
              "sol": "[string(\"cr43sa\"),string(\"Capstones\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.787ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"mprxf\"",
              "sol": "\"mprxf\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"si4ooh\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"si4ooh\")]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.788ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"3mw527\"",
              "sol": "\"3mw527\""
            },
            {
              "js": "[\"3mw527\",\"3rcoep\",\"mprxf\"]",
              "sol": "[string(\"3mw527\"),string(\"3rcoep\"),string(\"mprxf\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.788ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"cr43sa\",\"cr43sa\",\"[\"]",
              "sol": "[string(\"cr43sa\"),string(\"cr43sa\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.789ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "[\"cr43sa\",\"P\",\"cr43sa\"]",
              "sol": "[string(\"cr43sa\"),string(\"P\"),string(\"cr43sa\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.789ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"3rcoep\"",
              "sol": "\"3rcoep\""
            },
            {
              "js": "[\"3rcoep\",\"31sqo\",\"P\"]",
              "sol": "[string(\"3rcoep\"),string(\"31sqo\"),string(\"P\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.790ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"gfhr2\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"gfhr2\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.790ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\",\"[\",\"\\x19Ethereum Signed Message:\\n32\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"L\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.791ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"cr43sa\",\"L\",\"ERC1820_ACCEPT_MAGIC\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"cr43sa\"),string(\"L\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.791ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"cr43sa\"",
              "sol": "\"cr43sa\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"oklu3a\",\"P\",\"cr43sa\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"oklu3a\"),string(\"P\"),string(\"cr43sa\")]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.792ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"gfhr2\"",
              "sol": "\"gfhr2\""
            },
            {
              "js": "[\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.792ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"a3skl6\"",
              "sol": "\"a3skl6\""
            },
            {
              "js": "[\"si4ooh\",\"0\",\"Capstones\",\"a3skl6\",\"gfhr2\"]",
              "sol": "[string(\"si4ooh\"),string(\"0\"),string(\"Capstones\"),string(\"a3skl6\"),string(\"gfhr2\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.793ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"mprxf\"",
              "sol": "\"mprxf\""
            },
            {
              "js": "[\"qpj32e\",\"31sqo\",\"cr43sa\",\"a3skl6\",\"Capstones\"]",
              "sol": "[string(\"qpj32e\"),string(\"31sqo\"),string(\"cr43sa\"),string(\"a3skl6\"),string(\"Capstones\")]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.793ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "[\"oklu3a\",\"P\",\"si4ooh\",\"\\x19Ethereum Signed Message:\\n32\",\"a3skl6\"]",
              "sol": "[string(\"oklu3a\"),string(\"P\"),string(\"si4ooh\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"a3skl6\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.794ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"gfhr2\"",
              "sol": "\"gfhr2\""
            },
            {
              "js": "[[204,40,193,16,130,85,182,2,81,186,172,85,199,105,10,166,119,252,27,20,199,221,121,28,154,2,196,135,128,57,120,41],[135,144,144,143,198,54,132,154,219,145,52,175,4,74,112,242,145,254,200,1,183,102,174,77,88,238,44,96,166,94,11,32],[98,203,108,67,154,103,245,129,102,249,252,165,227,103,77,130,3,86,67,122,21,254,191,183,197,202,46,121,82,136,3,125]]",
              "sol": "[bytes(abi.encode(\"204,40,193,16,130,85,182,2,81,186,172,85,199,105,10,166,119,252,27,20,199,221,121,28,154,2,196,135,128,57,120,41\")),bytes(abi.encode(\"135,144,144,143,198,54,132,154,219,145,52,175,4,74,112,242,145,254,200,1,183,102,174,77,88,238,44,96,166,94,11,32\")),bytes(abi.encode(\"98,203,108,67,154,103,245,129,102,249,252,165,227,103,77,130,3,86,67,122,21,254,191,183,197,202,46,121,82,136,3,125\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.794ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "[[119,139,240,243,125,169,191,20,2,185,172,111,57,224,8,122,26,148,31,134,150,250,236,98,5,82,251,60,251,139,128,196],[153,20,110,19,197,91,196,85,220,90,115,158,162,58,19,178,65,163,71,89,83,125,134,179,229,44,92,1,154,44,223,116],[41,152,190,11,0,190,179,159,142,77,66,126,30,226,166,250,167,162,9,104,77,163,97,181,222,164,149,220,125,170,165,79],[77,141,116,126,255,16,116,119,177,187,230,93,53,9,173,208,104,82,26,179,35,175,23,227,119,145,229,147,182,5,215,218],[229,103,120,54,30,174,91,217,211,106,47,39,254,25,195,191,169,9,139,152,74,116,92,130,115,110,209,104,142,154,80,244]]",
              "sol": "[bytes(abi.encode(\"119,139,240,243,125,169,191,20,2,185,172,111,57,224,8,122,26,148,31,134,150,250,236,98,5,82,251,60,251,139,128,196\")),bytes(abi.encode(\"153,20,110,19,197,91,196,85,220,90,115,158,162,58,19,178,65,163,71,89,83,125,134,179,229,44,92,1,154,44,223,116\")),bytes(abi.encode(\"41,152,190,11,0,190,179,159,142,77,66,126,30,226,166,250,167,162,9,104,77,163,97,181,222,164,149,220,125,170,165,79\")),bytes(abi.encode(\"77,141,116,126,255,16,116,119,177,187,230,93,53,9,173,208,104,82,26,179,35,175,23,227,119,145,229,147,182,5,215,218\")),bytes(abi.encode(\"229,103,120,54,30,174,91,217,211,106,47,39,254,25,195,191,169,9,139,152,74,116,92,130,115,110,209,104,142,154,80,244\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.795ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"3mw527\"",
              "sol": "\"3mw527\""
            },
            {
              "js": "[[76,164,149,93,222,101,109,86,39,203,241,252,71,160,214,45,103,237,35,109,208,36,82,121,145,183,255,143,124,102,161,81],[17,116,62,80,118,114,49,190,120,201,245,130,13,51,13,165,129,236,253,45,189,114,196,35,122,117,24,77,72,198,186,204],[65,82,10,225,183,2,135,137,187,200,38,172,31,239,245,58,214,63,179,203,150,53,121,34,11,227,142,214,138,120,29,112],[189,118,134,164,197,65,193,73,210,119,169,230,212,95,130,236,120,120,10,17,252,187,35,178,71,236,57,154,105,62,114,12],[78,233,224,163,133,178,212,13,97,153,102,18,135,8,55,213,14,216,178,223,100,214,162,108,131,48,0,163,204,220,33,33],[68,248,120,198,140,234,175,245,169,198,28,102,89,204,245,132,87,36,76,97,169,90,254,190,255,44,28,109,99,4,238,108],[73,91,167,122,162,207,169,148,156,145,194,196,51,158,228,210,47,137,141,212,78,200,168,171,114,103,251,156,82,254,79,52]]",
              "sol": "[bytes(abi.encode(\"76,164,149,93,222,101,109,86,39,203,241,252,71,160,214,45,103,237,35,109,208,36,82,121,145,183,255,143,124,102,161,81\")),bytes(abi.encode(\"17,116,62,80,118,114,49,190,120,201,245,130,13,51,13,165,129,236,253,45,189,114,196,35,122,117,24,77,72,198,186,204\")),bytes(abi.encode(\"65,82,10,225,183,2,135,137,187,200,38,172,31,239,245,58,214,63,179,203,150,53,121,34,11,227,142,214,138,120,29,112\")),bytes(abi.encode(\"189,118,134,164,197,65,193,73,210,119,169,230,212,95,130,236,120,120,10,17,252,187,35,178,71,236,57,154,105,62,114,12\")),bytes(abi.encode(\"78,233,224,163,133,178,212,13,97,153,102,18,135,8,55,213,14,216,178,223,100,214,162,108,131,48,0,163,204,220,33,33\")),bytes(abi.encode(\"68,248,120,198,140,234,175,245,169,198,28,102,89,204,245,132,87,36,76,97,169,90,254,190,255,44,28,109,99,4,238,108\")),bytes(abi.encode(\"73,91,167,122,162,207,169,148,156,145,194,196,51,158,228,210,47,137,141,212,78,200,168,171,114,103,251,156,82,254,79,52\"))]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.796ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[241,39,48,174,250,191,172,114,201,233,110,50,127,215,82,84,14,43,5,86,158,209,158,41,125,42,197,232,131,193,214,221],[207,71,223,31,83,18,56,124,251,179,184,173,141,58,106,81,241,237,177,66,34,194,177,135,54,207,80,87,82,46,50,91],[14,185,125,51,141,152,156,217,164,228,198,207,139,68,171,166,74,15,166,107,105,175,158,170,188,218,202,228,253,171,10,235],[170,95,224,226,80,73,175,209,124,71,194,96,65,81,163,6,254,39,19,224,27,187,214,170,217,167,160,180,74,219,118,124]]",
              "sol": "[bytes(abi.encode(\"241,39,48,174,250,191,172,114,201,233,110,50,127,215,82,84,14,43,5,86,158,209,158,41,125,42,197,232,131,193,214,221\")),bytes(abi.encode(\"207,71,223,31,83,18,56,124,251,179,184,173,141,58,106,81,241,237,177,66,34,194,177,135,54,207,80,87,82,46,50,91\")),bytes(abi.encode(\"14,185,125,51,141,152,156,217,164,228,198,207,139,68,171,166,74,15,166,107,105,175,158,170,188,218,202,228,253,171,10,235\")),bytes(abi.encode(\"170,95,224,226,80,73,175,209,124,71,194,96,65,81,163,6,254,39,19,224,27,187,214,170,217,167,160,180,74,219,118,124\"))]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.796ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"a3skl6\"",
              "sol": "\"a3skl6\""
            },
            {
              "js": "[[160,188,70,28,62,114,164,90,243,122,157,95,137,144,71,52,191,205,214,65,184,85,124,68,78,6,43,199,42,137,105,253]]",
              "sol": "[bytes(abi.encode(\"160,188,70,28,62,114,164,90,243,122,157,95,137,144,71,52,191,205,214,65,184,85,124,68,78,6,43,199,42,137,105,253\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.797ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"3mw527\"",
              "sol": "\"3mw527\""
            },
            {
              "js": "[[138,161,194,167,136,154,240,168,226,31,207,42,162,10,72,63,142,246,249,236,104,209,188,191,51,75,238,37,240,33,143,19]]",
              "sol": "[bytes(abi.encode(\"138,161,194,167,136,154,240,168,226,31,207,42,162,10,72,63,142,246,249,236,104,209,188,191,51,75,238,37,240,33,143,19\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.798ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[35,246,33,0,89,185,44,135,217,41,64,234,115,10,4,248,159,181,108,174,135,86,91,247,104,83,125,130,83,14,241,66]]",
              "sol": "[bytes(abi.encode(\"35,246,33,0,89,185,44,135,217,41,64,234,115,10,4,248,159,181,108,174,135,86,91,247,104,83,125,130,83,14,241,66\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.798ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"oklu3a\"",
              "sol": "\"oklu3a\""
            },
            {
              "js": "[[111,177,247,157,94,185,190,220,132,171,99,54,248,231,212,235,173,76,174,220,117,175,55,77,28,254,223,116,95,86,145,126]]",
              "sol": "[bytes(abi.encode(\"111,177,247,157,94,185,190,220,132,171,99,54,248,231,212,235,173,76,174,220,117,175,55,77,28,254,223,116,95,86,145,126\"))]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.799ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[138,164,62,128,80,52,77,73,209,249,44,234,137,206,4,224,198,43,124,50,160,82,148,129,8,137,109,79,190,103,6,188],[246,216,230,236,9,38,170,99,92,13,20,243,211,52,208,101,223,210,216,203,116,12,17,154,241,231,99,120,54,174,25,187]]",
              "sol": "[bytes(abi.encode(\"138,164,62,128,80,52,77,73,209,249,44,234,137,206,4,224,198,43,124,50,160,82,148,129,8,137,109,79,190,103,6,188\")),bytes(abi.encode(\"246,216,230,236,9,38,170,99,92,13,20,243,211,52,208,101,223,210,216,203,116,12,17,154,241,231,99,120,54,174,25,187\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.799ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[200,65,165,232,238,82,194,150,20,65,243,46,239,138,111,61,31,36,138,153,199,5,156,42,54,93,46,152,117,158,238,176],[132,149,183,23,207,91,122,147,33,141,91,6,6,126,226,6,228,217,68,58,112,7,124,8,98,233,229,16,32,167,88,25]]",
              "sol": "[bytes(abi.encode(\"200,65,165,232,238,82,194,150,20,65,243,46,239,138,111,61,31,36,138,153,199,5,156,42,54,93,46,152,117,158,238,176\")),bytes(abi.encode(\"132,149,183,23,207,91,122,147,33,141,91,6,6,126,226,6,228,217,68,58,112,7,124,8,98,233,229,16,32,167,88,25\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.800ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"cr43sa\"",
              "sol": "\"cr43sa\""
            },
            {
              "js": "[[235,19,151,26,88,251,232,233,255,173,76,232,140,168,190,77,149,103,189,117,225,30,106,146,157,37,49,225,198,77,91,54],[177,221,211,119,126,5,69,172,106,96,230,239,24,76,196,25,140,212,74,109,8,148,179,42,116,115,157,52,59,211,196,227]]",
              "sol": "[bytes(abi.encode(\"235,19,151,26,88,251,232,233,255,173,76,232,140,168,190,77,149,103,189,117,225,30,106,146,157,37,49,225,198,77,91,54\")),bytes(abi.encode(\"177,221,211,119,126,5,69,172,106,96,230,239,24,76,196,25,140,212,74,109,8,148,179,42,116,115,157,52,59,211,196,227\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.801ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[95,86,55,166,195,201,180,87,215,195,52,47,139,217,63,15,45,141,46,162,122,78,122,23,125,116,208,141,42,68,42,17],[161,64,41,4,78,83,18,198,143,62,242,125,83,51,209,163,175,185,151,165,35,155,134,227,129,132,104,53,87,7,47,253]]",
              "sol": "[bytes(abi.encode(\"95,86,55,166,195,201,180,87,215,195,52,47,139,217,63,15,45,141,46,162,122,78,122,23,125,116,208,141,42,68,42,17\")),bytes(abi.encode(\"161,64,41,4,78,83,18,198,143,62,242,125,83,51,209,163,175,185,151,165,35,155,134,227,129,132,104,53,87,7,47,253\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.803ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[68,183,253,161,43,74,230,38,173,178,156,234,93,83,133,49,204,16,87,209,82,29,123,54,96,228,55,84,116,139,93,9],[1,78,3,4,153,17,0,118,6,37,230,244,6,210,218,192,98,68,191,76,114,73,32,85,3,217,93,96,6,92,199,166],[253,66,96,199,173,180,64,113,47,167,93,202,32,76,173,152,146,210,103,5,13,242,39,247,113,253,182,142,43,241,101,3]]",
              "sol": "[bytes(abi.encode(\"68,183,253,161,43,74,230,38,173,178,156,234,93,83,133,49,204,16,87,209,82,29,123,54,96,228,55,84,116,139,93,9\")),bytes(abi.encode(\"1,78,3,4,153,17,0,118,6,37,230,244,6,210,218,192,98,68,191,76,114,73,32,85,3,217,93,96,6,92,199,166\")),bytes(abi.encode(\"253,66,96,199,173,180,64,113,47,167,93,202,32,76,173,152,146,210,103,5,13,242,39,247,113,253,182,142,43,241,101,3\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.803ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"3rcoep\"",
              "sol": "\"3rcoep\""
            },
            {
              "js": "[[213,212,38,78,144,168,233,133,241,13,14,223,40,118,181,76,9,168,227,142,215,34,94,238,117,10,222,108,3,161,246,8],[176,202,40,18,151,29,110,241,83,26,150,169,71,88,106,217,113,13,13,55,45,142,126,171,76,32,73,4,226,214,114,241],[26,250,59,26,229,86,216,198,87,62,14,134,6,129,86,92,59,163,112,43,186,30,238,127,23,232,179,88,28,15,114,241]]",
              "sol": "[bytes(abi.encode(\"213,212,38,78,144,168,233,133,241,13,14,223,40,118,181,76,9,168,227,142,215,34,94,238,117,10,222,108,3,161,246,8\")),bytes(abi.encode(\"176,202,40,18,151,29,110,241,83,26,150,169,71,88,106,217,113,13,13,55,45,142,126,171,76,32,73,4,226,214,114,241\")),bytes(abi.encode(\"26,250,59,26,229,86,216,198,87,62,14,134,6,129,86,92,59,163,112,43,186,30,238,127,23,232,179,88,28,15,114,241\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.804ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[218,39,99,131,43,96,132,62,11,118,31,16,150,1,105,71,63,37,233,11,23,180,160,86,198,80,96,247,45,147,174,46],[0,90,118,191,252,188,145,8,198,154,85,10,207,179,156,173,65,149,70,1,13,48,183,207,162,147,106,119,22,190,91,112],[211,66,236,71,1,50,1,253,16,198,87,208,77,111,130,231,74,203,138,81,67,3,225,189,44,234,207,91,6,86,158,57]]",
              "sol": "[bytes(abi.encode(\"218,39,99,131,43,96,132,62,11,118,31,16,150,1,105,71,63,37,233,11,23,180,160,86,198,80,96,247,45,147,174,46\")),bytes(abi.encode(\"0,90,118,191,252,188,145,8,198,154,85,10,207,179,156,173,65,149,70,1,13,48,183,207,162,147,106,119,22,190,91,112\")),bytes(abi.encode(\"211,66,236,71,1,50,1,253,16,198,87,208,77,111,130,231,74,203,138,81,67,3,225,189,44,234,207,91,6,86,158,57\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.805ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[22,88,117,111,91,190,21,81,18,210,110,139,77,192,152,222,5,102,168,109,20,26,241,64,90,191,196,123,108,157,62,157],[37,183,253,75,54,110,86,27,148,129,111,129,16,183,17,188,84,218,195,214,94,218,226,242,170,138,83,25,92,222,55,154],[241,253,58,109,101,12,151,55,149,121,227,56,122,246,144,190,74,86,190,126,138,53,126,149,90,230,125,29,164,128,157,116]]",
              "sol": "[bytes(abi.encode(\"22,88,117,111,91,190,21,81,18,210,110,139,77,192,152,222,5,102,168,109,20,26,241,64,90,191,196,123,108,157,62,157\")),bytes(abi.encode(\"37,183,253,75,54,110,86,27,148,129,111,129,16,183,17,188,84,218,195,214,94,218,226,242,170,138,83,25,92,222,55,154\")),bytes(abi.encode(\"241,253,58,109,101,12,151,55,149,121,227,56,122,246,144,190,74,86,190,126,138,53,126,149,90,230,125,29,164,128,157,116\"))]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.805ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[168,156,177,227,105,217,67,69,183,83,171,130,243,253,251,162,97,4,217,207,207,0,238,61,66,62,184,228,192,187,229,184],[158,60,193,157,178,175,182,5,190,157,99,223,136,59,105,55,176,58,164,206,180,59,15,49,230,112,70,192,73,76,59,24],[136,30,216,210,196,45,221,53,74,11,237,65,20,232,214,165,10,133,162,96,65,42,162,138,118,16,74,195,119,229,114,229],[170,236,134,118,101,216,8,117,14,233,219,176,109,178,21,3,69,147,119,132,106,77,139,179,26,194,237,220,246,180,49,89]]",
              "sol": "[bytes(abi.encode(\"168,156,177,227,105,217,67,69,183,83,171,130,243,253,251,162,97,4,217,207,207,0,238,61,66,62,184,228,192,187,229,184\")),bytes(abi.encode(\"158,60,193,157,178,175,182,5,190,157,99,223,136,59,105,55,176,58,164,206,180,59,15,49,230,112,70,192,73,76,59,24\")),bytes(abi.encode(\"136,30,216,210,196,45,221,53,74,11,237,65,20,232,214,165,10,133,162,96,65,42,162,138,118,16,74,195,119,229,114,229\")),bytes(abi.encode(\"170,236,134,118,101,216,8,117,14,233,219,176,109,178,21,3,69,147,119,132,106,77,139,179,26,194,237,220,246,180,49,89\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.806ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "[[57,118,56,34,51,140,212,170,48,120,195,92,226,203,41,71,21,139,255,201,31,151,151,138,158,105,157,133,214,113,200,165],[216,29,111,222,131,106,168,152,195,61,28,135,0,246,159,16,184,225,76,147,35,45,238,43,33,136,173,28,181,15,24,72],[219,32,165,240,115,211,25,63,180,110,220,250,211,199,195,147,36,193,149,220,4,149,86,42,160,1,118,255,252,122,30,124],[118,53,129,41,238,5,48,20,83,194,54,89,152,146,65,38,114,219,179,249,245,22,102,127,242,39,19,43,22,95,208,138]]",
              "sol": "[bytes(abi.encode(\"57,118,56,34,51,140,212,170,48,120,195,92,226,203,41,71,21,139,255,201,31,151,151,138,158,105,157,133,214,113,200,165\")),bytes(abi.encode(\"216,29,111,222,131,106,168,152,195,61,28,135,0,246,159,16,184,225,76,147,35,45,238,43,33,136,173,28,181,15,24,72\")),bytes(abi.encode(\"219,32,165,240,115,211,25,63,180,110,220,250,211,199,195,147,36,193,149,220,4,149,86,42,160,1,118,255,252,122,30,124\")),bytes(abi.encode(\"118,53,129,41,238,5,48,20,83,194,54,89,152,146,65,38,114,219,179,249,245,22,102,127,242,39,19,43,22,95,208,138\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.806ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[132,96,147,10,221,161,209,6,217,137,119,132,43,19,84,121,202,14,73,49,141,199,35,20,69,149,2,106,220,100,121,38],[68,9,182,95,203,238,217,19,147,41,124,165,71,137,200,85,69,197,112,25,125,142,142,29,199,22,76,23,109,62,223,162],[206,96,229,149,214,197,233,203,85,239,75,194,104,145,45,69,243,175,238,53,169,36,198,55,210,48,140,79,93,151,65,80],[21,34,79,161,152,222,93,184,235,254,188,68,239,13,233,55,99,210,243,232,86,79,49,207,148,143,228,78,224,221,12,199]]",
              "sol": "[bytes(abi.encode(\"132,96,147,10,221,161,209,6,217,137,119,132,43,19,84,121,202,14,73,49,141,199,35,20,69,149,2,106,220,100,121,38\")),bytes(abi.encode(\"68,9,182,95,203,238,217,19,147,41,124,165,71,137,200,85,69,197,112,25,125,142,142,29,199,22,76,23,109,62,223,162\")),bytes(abi.encode(\"206,96,229,149,214,197,233,203,85,239,75,194,104,145,45,69,243,175,238,53,169,36,198,55,210,48,140,79,93,151,65,80\")),bytes(abi.encode(\"21,34,79,161,152,222,93,184,235,254,188,68,239,13,233,55,99,210,243,232,86,79,49,207,148,143,228,78,224,221,12,199\"))]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.807ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"gfhr2\"",
              "sol": "\"gfhr2\""
            },
            {
              "js": "[[190,2,49,113,67,138,38,35,160,6,51,216,236,137,176,199,101,205,167,214,167,65,164,189,62,149,14,238,23,43,98,209],[57,24,139,161,37,235,137,109,235,52,195,114,241,228,41,234,58,75,192,128,177,195,206,139,202,6,188,232,140,73,58,186],[59,68,73,25,165,229,125,244,194,171,69,140,242,245,53,63,251,14,48,71,47,253,90,249,98,251,245,131,211,25,222,69],[170,116,104,80,198,59,81,164,237,96,170,176,44,51,163,155,67,51,72,7,245,255,150,197,115,111,160,200,85,196,229,218]]",
              "sol": "[bytes(abi.encode(\"190,2,49,113,67,138,38,35,160,6,51,216,236,137,176,199,101,205,167,214,167,65,164,189,62,149,14,238,23,43,98,209\")),bytes(abi.encode(\"57,24,139,161,37,235,137,109,235,52,195,114,241,228,41,234,58,75,192,128,177,195,206,139,202,6,188,232,140,73,58,186\")),bytes(abi.encode(\"59,68,73,25,165,229,125,244,194,171,69,140,242,245,53,63,251,14,48,71,47,253,90,249,98,251,245,131,211,25,222,69\")),bytes(abi.encode(\"170,116,104,80,198,59,81,164,237,96,170,176,44,51,163,155,67,51,72,7,245,255,150,197,115,111,160,200,85,196,229,218\"))]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.808ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[195,234,175,142,221,91,200,57,231,102,93,168,143,1,176,34,30,181,166,161,40,127,80,194,120,118,39,120,168,64,225,124],[230,254,218,67,175,41,104,206,133,186,107,33,50,110,83,106,17,81,113,102,152,100,220,254,196,221,143,10,99,120,50,105],[12,171,45,53,163,80,5,222,112,1,237,18,94,41,32,240,250,87,173,80,162,238,224,135,144,93,152,160,164,158,136,220],[50,135,206,225,7,42,203,214,156,212,12,76,97,50,77,235,42,132,110,235,29,148,236,83,252,146,7,160,134,104,183,204],[74,17,194,187,254,111,111,209,141,218,209,135,251,223,161,135,173,146,177,224,169,248,105,144,80,66,247,67,161,66,127,225]]",
              "sol": "[bytes(abi.encode(\"195,234,175,142,221,91,200,57,231,102,93,168,143,1,176,34,30,181,166,161,40,127,80,194,120,118,39,120,168,64,225,124\")),bytes(abi.encode(\"230,254,218,67,175,41,104,206,133,186,107,33,50,110,83,106,17,81,113,102,152,100,220,254,196,221,143,10,99,120,50,105\")),bytes(abi.encode(\"12,171,45,53,163,80,5,222,112,1,237,18,94,41,32,240,250,87,173,80,162,238,224,135,144,93,152,160,164,158,136,220\")),bytes(abi.encode(\"50,135,206,225,7,42,203,214,156,212,12,76,97,50,77,235,42,132,110,235,29,148,236,83,252,146,7,160,134,104,183,204\")),bytes(abi.encode(\"74,17,194,187,254,111,111,209,141,218,209,135,251,223,161,135,173,146,177,224,169,248,105,144,80,66,247,67,161,66,127,225\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.808ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[92,197,127,34,234,227,111,105,24,254,52,4,158,159,244,44,159,37,9,133,128,161,3,143,198,102,219,218,255,78,14,78],[185,220,35,191,30,158,242,219,177,2,120,208,196,196,22,112,124,103,215,249,208,84,242,90,23,222,66,14,254,117,17,185],[201,226,228,11,58,201,221,22,194,35,225,123,254,141,188,27,71,56,247,216,32,246,78,115,59,225,134,134,65,199,210,53],[11,63,200,41,34,233,73,109,144,211,116,163,152,36,140,52,219,74,226,217,93,74,145,114,155,152,199,237,120,51,79,41],[41,109,212,109,221,220,19,229,190,54,125,248,109,99,9,148,150,52,144,234,146,23,99,241,33,255,232,171,123,205,108,241]]",
              "sol": "[bytes(abi.encode(\"92,197,127,34,234,227,111,105,24,254,52,4,158,159,244,44,159,37,9,133,128,161,3,143,198,102,219,218,255,78,14,78\")),bytes(abi.encode(\"185,220,35,191,30,158,242,219,177,2,120,208,196,196,22,112,124,103,215,249,208,84,242,90,23,222,66,14,254,117,17,185\")),bytes(abi.encode(\"201,226,228,11,58,201,221,22,194,35,225,123,254,141,188,27,71,56,247,216,32,246,78,115,59,225,134,134,65,199,210,53\")),bytes(abi.encode(\"11,63,200,41,34,233,73,109,144,211,116,163,152,36,140,52,219,74,226,217,93,74,145,114,155,152,199,237,120,51,79,41\")),bytes(abi.encode(\"41,109,212,109,221,220,19,229,190,54,125,248,109,99,9,148,150,52,144,234,146,23,99,241,33,255,232,171,123,205,108,241\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.809ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[198,51,34,108,177,38,200,114,25,80,143,227,137,242,39,97,2,226,29,27,80,33,164,163,2,36,217,96,201,155,185,172],[9,229,148,131,116,146,221,59,202,192,43,82,94,162,113,4,32,117,100,114,85,156,152,123,81,124,91,200,204,76,174,157],[212,117,216,125,128,19,250,103,135,110,67,95,85,71,50,114,45,252,117,47,38,44,128,223,146,128,58,188,209,155,95,154],[167,102,147,205,140,114,254,241,30,134,170,48,104,236,200,81,99,45,243,115,149,30,210,209,52,192,173,43,91,99,30,122],[152,246,221,200,58,55,194,164,41,224,180,227,46,157,2,222,46,147,220,152,40,53,63,34,192,244,187,158,171,155,143,98]]",
              "sol": "[bytes(abi.encode(\"198,51,34,108,177,38,200,114,25,80,143,227,137,242,39,97,2,226,29,27,80,33,164,163,2,36,217,96,201,155,185,172\")),bytes(abi.encode(\"9,229,148,131,116,146,221,59,202,192,43,82,94,162,113,4,32,117,100,114,85,156,152,123,81,124,91,200,204,76,174,157\")),bytes(abi.encode(\"212,117,216,125,128,19,250,103,135,110,67,95,85,71,50,114,45,252,117,47,38,44,128,223,146,128,58,188,209,155,95,154\")),bytes(abi.encode(\"167,102,147,205,140,114,254,241,30,134,170,48,104,236,200,81,99,45,243,115,149,30,210,209,52,192,173,43,91,99,30,122\")),bytes(abi.encode(\"152,246,221,200,58,55,194,164,41,224,180,227,46,157,2,222,46,147,220,152,40,53,63,34,192,244,187,158,171,155,143,98\"))]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.810ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "[[58,189,229,40,144,167,211,14,182,205,73,181,129,97,176,167,162,35,155,217,187,165,18,7,38,172,216,243,127,211,81,55],[77,143,66,63,167,94,217,29,215,214,155,248,246,77,165,11,135,154,195,48,136,169,191,179,183,167,211,116,170,202,76,175],[40,224,212,79,150,174,217,226,215,89,115,64,208,6,11,237,107,20,79,11,204,66,49,188,5,178,155,235,5,54,195,241],[59,20,138,181,5,125,17,170,68,185,144,212,246,236,240,196,229,178,6,34,198,219,146,9,235,233,233,129,211,12,3,129],[28,111,220,129,97,174,225,177,46,48,184,98,186,70,57,107,80,129,110,112,97,74,87,56,242,15,199,109,138,133,196,209]]",
              "sol": "[bytes(abi.encode(\"58,189,229,40,144,167,211,14,182,205,73,181,129,97,176,167,162,35,155,217,187,165,18,7,38,172,216,243,127,211,81,55\")),bytes(abi.encode(\"77,143,66,63,167,94,217,29,215,214,155,248,246,77,165,11,135,154,195,48,136,169,191,179,183,167,211,116,170,202,76,175\")),bytes(abi.encode(\"40,224,212,79,150,174,217,226,215,89,115,64,208,6,11,237,107,20,79,11,204,66,49,188,5,178,155,235,5,54,195,241\")),bytes(abi.encode(\"59,20,138,181,5,125,17,170,68,185,144,212,246,236,240,196,229,178,6,34,198,219,146,9,235,233,233,129,211,12,3,129\")),bytes(abi.encode(\"28,111,220,129,97,174,225,177,46,48,184,98,186,70,57,107,80,129,110,112,97,74,87,56,242,15,199,109,138,133,196,209\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.810ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[166]",
              "sol": "bytes1(\"166\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.811ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.811ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.811ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.812ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.812ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.812ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.813ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.813ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"a3skl6\"",
              "sol": "\"a3skl6\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.813ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "\"e4ndgt\"",
              "sol": "\"e4ndgt\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.814ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"gfhr2\"",
              "sol": "\"gfhr2\""
            },
            {
              "js": "\"31sqo\"",
              "sol": "\"31sqo\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.814ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"e4ndgt\"",
              "sol": "\"e4ndgt\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"qpj32e\"",
              "sol": "\"qpj32e\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.814ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.815ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"oklu3a\"",
              "sol": "\"oklu3a\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.815ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"oklu3a\"",
              "sol": "\"oklu3a\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.816ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"qpj32e\"",
              "sol": "\"qpj32e\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"cr43sa\"",
              "sol": "\"cr43sa\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.817ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.818ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"31sqo\",\"oklu3a\",\"0\",\"a3skl6\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"31sqo\"),string(\"oklu3a\"),string(\"0\"),string(\"a3skl6\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.819ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[52,220,4,219,172,124,175,174,45,79,174,38,142,70,233,3,145,253,53,184,48,173,9,144,178,38,19,215,195,100,72,212],[240,147,211,245,51,126,164,239,182,224,6,118,191,177,218,162,103,252,137,178,168,23,56,88,142,125,88,71,114,30,27,5],[242,229,43,107,196,85,161,116,13,35,47,173,13,200,142,184,125,211,151,181,145,38,44,219,2,174,142,242,215,176,40,237],[217,244,105,157,242,15,174,237,113,49,58,173,176,36,19,238,223,158,221,129,161,90,161,132,78,87,216,49,39,39,12,233],[240,170,79,66,57,226,10,102,36,94,54,100,101,175,74,81,58,118,102,76,246,232,118,241,232,250,11,122,120,110,231,158]]",
              "sol": "[bytes(abi.encode(\"52,220,4,219,172,124,175,174,45,79,174,38,142,70,233,3,145,253,53,184,48,173,9,144,178,38,19,215,195,100,72,212\")),bytes(abi.encode(\"240,147,211,245,51,126,164,239,182,224,6,118,191,177,218,162,103,252,137,178,168,23,56,88,142,125,88,71,114,30,27,5\")),bytes(abi.encode(\"242,229,43,107,196,85,161,116,13,35,47,173,13,200,142,184,125,211,151,181,145,38,44,219,2,174,142,242,215,176,40,237\")),bytes(abi.encode(\"217,244,105,157,242,15,174,237,113,49,58,173,176,36,19,238,223,158,221,129,161,90,161,132,78,87,216,49,39,39,12,233\")),bytes(abi.encode(\"240,170,79,66,57,226,10,102,36,94,54,100,101,175,74,81,58,118,102,76,246,232,118,241,232,250,11,122,120,110,231,158\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.820ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.821ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[170,31,240,61,108,249,253,113,140,85,107,103,160,37,216,110,58,100,154,188,152,186,161,115,93,79,112,192,45,188,90,9]",
              "sol": "stringToBytes32(\"170,31,240,61,108,249,253,113,140,85,107,103,160,37,216,110,58,100,154,188,152,186,161,115,93,79,112,192,45,188,90,9\")"
            },
            {
              "js": "[172,215,17,202,206,30,234,184,237,184,122,227,155,39,74,220,67,188,64,80,109,79,139,13,182,201,173,161,161,192,223,75]",
              "sol": "stringToBytes32(\"172,215,17,202,206,30,234,184,237,184,122,227,155,39,74,220,67,188,64,80,109,79,139,13,182,201,173,161,161,192,223,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.821ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[180,246,233,202,186,47,39,234,125,215,37,130,133,222,124,45,184,31,19,37,91,12,12,58,26,5,50,126,239,132,123,24]",
              "sol": "stringToBytes32(\"180,246,233,202,186,47,39,234,125,215,37,130,133,222,124,45,184,31,19,37,91,12,12,58,26,5,50,126,239,132,123,24\")"
            },
            {
              "js": "[146,232,110,80,255,199,251,8,46,188,249,233,111,77,183,64,101,138,131,75,140,25,11,143,184,86,122,0,189,175,197,124]",
              "sol": "abi.encode(\"146,232,110,80,255,199,251,8,46,188,249,233,111,77,183,64,101,138,131,75,140,25,11,143,184,86,122,0,189,175,197,124\")"
            },
            {
              "js": "[188,61,187,58,47,198,137,95,238,79,33,182,132,86,7,47,251,12,214,189,22,210,85,248,205,1,161,38,243,39,212,153]",
              "sol": "abi.encode(\"188,61,187,58,47,198,137,95,238,79,33,182,132,86,7,47,251,12,214,189,22,210,85,248,205,1,161,38,243,39,212,153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.822ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[112,203,67,83,17,180,89,185,29,164,30,85,77,213,87,40,82,212,246,35,58,55,98,39,118,61,117,160,215,57,250,247]",
              "sol": "abi.encode(\"112,203,67,83,17,180,89,185,29,164,30,85,77,213,87,40,82,212,246,35,58,55,98,39,118,61,117,160,215,57,250,247\")"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[164,105,27,47,33,170,245,144,253,254,34,165,41,170,28,11,240,224,161,45,189,85,28,133,71,230,80,235,48,200,108,133]",
              "sol": "abi.encode(\"164,105,27,47,33,170,245,144,253,254,34,165,41,170,28,11,240,224,161,45,189,85,28,133,71,230,80,235,48,200,108,133\")"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.823ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[251,66,246,232,121,74,104,166,16,167,170,19,23,117,6,89,3,229,50,182,230,138,88,252,65,11,9,69,104,9,96,96]",
              "sol": "stringToBytes32(\"251,66,246,232,121,74,104,166,16,167,170,19,23,117,6,89,3,229,50,182,230,138,88,252,65,11,9,69,104,9,96,96\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[38,97,100,99,182,248,213,205,153,77,221,64,130,196,218,235,135,106,183,165,170,238,64,253,91,75,140,226,37,49,78,227]",
              "sol": "abi.encode(\"38,97,100,99,182,248,213,205,153,77,221,64,130,196,218,235,135,106,183,165,170,238,64,253,91,75,140,226,37,49,78,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[83,151,228,170,48,186,38,156,225,190,152,229,218,92,213,106,201,137,167,206,180,212,235,117,81,168,253,217,52,7,39,23]",
              "sol": "stringToBytes32(\"83,151,228,170,48,186,38,156,225,190,152,229,218,92,213,106,201,137,167,206,180,212,235,117,81,168,253,217,52,7,39,23\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[246,150,101,251,106,9,220,109,32,180,69,45,211,253,227,155,26,153,33,0,5,24,221,54,195,102,211,176,89,5,15,134]",
              "sol": "abi.encode(\"246,150,101,251,106,9,220,109,32,180,69,45,211,253,227,155,26,153,33,0,5,24,221,54,195,102,211,176,89,5,15,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.824ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[72,217,209,166,51,182,66,59,6,191,133,34,29,96,183,90,180,145,204,141,170,94,9,255,119,205,21,212,76,234,13,59]",
              "sol": "stringToBytes32(\"72,217,209,166,51,182,66,59,6,191,133,34,29,96,183,90,180,145,204,141,170,94,9,255,119,205,21,212,76,234,13,59\")"
            },
            {
              "js": "[76,50,63,70,200,76,42,67,191,45,157,254,216,89,51,201,187,239,233,210,11,101,28,207,127,32,218,216,93,253,178,194]",
              "sol": "abi.encode(\"76,50,63,70,200,76,42,67,191,45,157,254,216,89,51,201,187,239,233,210,11,101,28,207,127,32,218,216,93,253,178,194\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[72,217,209,166,51,182,66,59,6,191,133,34,29,96,183,90,180,145,204,141,170,94,9,255,119,205,21,212,76,234,13,59]",
                "sol": "stringToBytes32(\"72,217,209,166,51,182,66,59,6,191,133,34,29,96,183,90,180,145,204,141,170,94,9,255,119,205,21,212,76,234,13,59\")"
              },
              {
                "js": "[101,21,128,82,158,29,34,80,50,63,177,177,114,226,219,214,254,70,173,247,102,113,58,170,71,52,8,146,133,220,235,15,185]",
                "sol": "bytes33(\"101,21,128,82,158,29,34,80,50,63,177,177,114,226,219,214,254,70,173,247,102,113,58,170,71,52,8,146,133,220,235,15,185\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.825ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[58,50,7,11,45,185,99,59,47,82,10,135,243,189,195,179,23,236,233,217,135,29,87,131,36,225,239,103,229,183,246,217]",
              "sol": "abi.encode(\"58,50,7,11,45,185,99,59,47,82,10,135,243,189,195,179,23,236,233,217,135,29,87,131,36,225,239,103,229,183,246,217\")"
            },
            {
              "js": "[138,187,134,165,84,237,187,246,168,242,0,55,192,190,13,180,205,83,235,32,56,255,65,124,33,208,86,185,36,185,138,178]",
              "sol": "stringToBytes32(\"138,187,134,165,84,237,187,246,168,242,0,55,192,190,13,180,205,83,235,32,56,255,65,124,33,208,86,185,36,185,138,178\")"
            },
            {
              "js": "[217,237,247,211,204,145,24,131,11,30,12,253,198,75,124,90,229,14,248,114,178,133,53,227,106,152,59,20,159,126,185,85]",
              "sol": "abi.encode(\"217,237,247,211,204,145,24,131,11,30,12,253,198,75,124,90,229,14,248,114,178,133,53,227,106,152,59,20,159,126,185,85\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[153,228,14,139,66,233,227,232,238,179,210,124,138,96,253,42,103,247,178,252,62,224,211,217,74,101,7,101,73,215,124,175]",
              "sol": "abi.encode(\"153,228,14,139,66,233,227,232,238,179,210,124,138,96,253,42,103,247,178,252,62,224,211,217,74,101,7,101,73,215,124,175\")"
            },
            {
              "js": "[114,45,188,224,246,184,63,72,199,1,167,113,77,201,171,249,199,7,55,49,109,97,126,225,57,122,22,171,205,204,138,177]",
              "sol": "stringToBytes32(\"114,45,188,224,246,184,63,72,199,1,167,113,77,201,171,249,199,7,55,49,109,97,126,225,57,122,22,171,205,204,138,177\")"
            },
            {
              "js": "[169,192,32,248,19,10,78,253,207,194,177,142,178,173,170,91,59,55,227,60,55,193,246,252,82,116,222,153,189,166,49,105]",
              "sol": "abi.encode(\"169,192,32,248,19,10,78,253,207,194,177,142,178,173,170,91,59,55,227,60,55,193,246,252,82,116,222,153,189,166,49,105\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[189,243,113,40,188,192,222,109,181,187,175,155,152,73,174,137,115,156,250,68,81,129,179,63,76,129,40,156,7,202,203,23]",
              "sol": "abi.encode(\"189,243,113,40,188,192,222,109,181,187,175,155,152,73,174,137,115,156,250,68,81,129,179,63,76,129,40,156,7,202,203,23\")"
            },
            {
              "js": "[120,25,30,94,193,24,173,25,18,172,29,138,222,152,232,24,113,105,235,216,124,196,98,84,196,3,13,84,42,139,13,156]",
              "sol": "stringToBytes32(\"120,25,30,94,193,24,173,25,18,172,29,138,222,152,232,24,113,105,235,216,124,196,98,84,196,3,13,84,42,139,13,156\")"
            },
            {
              "js": "[136,195,19,170,175,164,175,235,139,77,125,108,113,111,137,172,89,10,62,255,84,230,101,233,110,166,165,94,129,206,18,183]",
              "sol": "abi.encode(\"136,195,19,170,175,164,175,235,139,77,125,108,113,111,137,172,89,10,62,255,84,230,101,233,110,166,165,94,129,206,18,183\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[173,22,94,250,182,84,117,169,178,218,87,60,162,134,241,129,213,236,155,120,53,14,154,73,103,32,236,147,6,5,183,28]",
              "sol": "abi.encode(\"173,22,94,250,182,84,117,169,178,218,87,60,162,134,241,129,213,236,155,120,53,14,154,73,103,32,236,147,6,5,183,28\")"
            },
            {
              "js": "[124,49,202,188,48,224,232,168,250,44,96,195,169,175,118,68,192,17,192,77,28,45,170,48,198,191,74,36,89,201,199,248]",
              "sol": "stringToBytes32(\"124,49,202,188,48,224,232,168,250,44,96,195,169,175,118,68,192,17,192,77,28,45,170,48,198,191,74,36,89,201,199,248\")"
            },
            {
              "js": "[167,170,132,163,168,168,224,188,252,163,240,249,110,54,58,180,179,71,101,234,71,120,243,250,98,200,21,165,27,198,49,71]",
              "sol": "abi.encode(\"167,170,132,163,168,168,224,188,252,163,240,249,110,54,58,180,179,71,101,234,71,120,243,250,98,200,21,165,27,198,49,71\")"
            },
            {
              "js": "\"a3skl6\"",
              "sol": "\"a3skl6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[150,194,5,3,63,116,46,209,90,54,234,75,139,138,89,65,44,244,20,49,2,5,7,197,77,126,199,213,176,143,202,215]",
              "sol": "abi.encode(\"150,194,5,3,63,116,46,209,90,54,234,75,139,138,89,65,44,244,20,49,2,5,7,197,77,126,199,213,176,143,202,215\")"
            },
            {
              "js": "[38,134,29,97,85,130,136,100,196,38,232,52,180,206,204,193,68,27,172,255,174,219,127,133,202,248,236,124,60,134,22,90]",
              "sol": "stringToBytes32(\"38,134,29,97,85,130,136,100,196,38,232,52,180,206,204,193,68,27,172,255,174,219,127,133,202,248,236,124,60,134,22,90\")"
            },
            {
              "js": "[198,255,46,82,157,100,148,134,107,4,40,12,220,64,249,218,88,214,175,227,36,197,139,146,104,136,120,228,39,101,118,164]",
              "sol": "abi.encode(\"198,255,46,82,157,100,148,134,107,4,40,12,220,64,249,218,88,214,175,227,36,197,139,146,104,136,120,228,39,101,118,164\")"
            },
            {
              "js": "\"si4ooh\"",
              "sol": "\"si4ooh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[96,148,178,208,61,200,156,155,201,113,56,28,40,242,27,104,159,149,145,140,228,174,69,116,161,113,98,223,132,229,134,16]",
              "sol": "abi.encode(\"96,148,178,208,61,200,156,155,201,113,56,28,40,242,27,104,159,149,145,140,228,174,69,116,161,113,98,223,132,229,134,16\")"
            },
            {
              "js": "[41,79,237,142,49,52,178,213,47,130,132,98,137,168,246,235,159,118,2,48,234,120,117,28,235,211,186,146,91,75,37,43]",
              "sol": "stringToBytes32(\"41,79,237,142,49,52,178,213,47,130,132,98,137,168,246,235,159,118,2,48,234,120,117,28,235,211,186,146,91,75,37,43\")"
            },
            {
              "js": "[254,63,111,126,221,112,177,221,215,170,239,171,197,130,38,128,247,164,138,153,32,146,50,85,233,47,48,39,92,246,172,208]",
              "sol": "abi.encode(\"254,63,111,126,221,112,177,221,215,170,239,171,197,130,38,128,247,164,138,153,32,146,50,85,233,47,48,39,92,246,172,208\")"
            },
            {
              "js": "\"qpj32e\"",
              "sol": "\"qpj32e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[197,25,211,117,50,20,151,207,74,153,213,164,241,235,147,133,26,96,103,217,138,80,156,223,189,30,9,147,153,114,168,213]",
              "sol": "abi.encode(\"197,25,211,117,50,20,151,207,74,153,213,164,241,235,147,133,26,96,103,217,138,80,156,223,189,30,9,147,153,114,168,213\")"
            },
            {
              "js": "[199,209,218,67,24,9,8,239,232,98,7,0,59,111,38,149,18,239,128,3,0,183,167,234,26,170,43,114,173,200,253,51]",
              "sol": "stringToBytes32(\"199,209,218,67,24,9,8,239,232,98,7,0,59,111,38,149,18,239,128,3,0,183,167,234,26,170,43,114,173,200,253,51\")"
            },
            {
              "js": "[124,47,255,30,111,45,125,204,119,98,55,7,170,253,70,104,184,169,150,73,190,105,72,0,113,6,27,73,77,160,205,193]",
              "sol": "abi.encode(\"124,47,255,30,111,45,125,204,119,98,55,7,170,253,70,104,184,169,150,73,190,105,72,0,113,6,27,73,77,160,205,193\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[129,237,169,244,4,183,92,30,132,18,144,188,60,10,227,175,114,157,89,221,23,28,66,77,214,66,0,112,164,166,96,219]",
              "sol": "abi.encode(\"129,237,169,244,4,183,92,30,132,18,144,188,60,10,227,175,114,157,89,221,23,28,66,77,214,66,0,112,164,166,96,219\")"
            },
            {
              "js": "[126,35,104,239,92,57,49,160,86,29,255,143,203,6,174,10,12,117,188,178,238,31,172,254,104,28,25,220,103,97,102,140]",
              "sol": "stringToBytes32(\"126,35,104,239,92,57,49,160,86,29,255,143,203,6,174,10,12,117,188,178,238,31,172,254,104,28,25,220,103,97,102,140\")"
            },
            {
              "js": "[111,185,133,28,21,165,39,165,34,213,101,205,29,18,223,151,252,120,239,37,160,15,241,72,207,201,113,27,163,212,205,94]",
              "sol": "abi.encode(\"111,185,133,28,21,165,39,165,34,213,101,205,29,18,223,151,252,120,239,37,160,15,241,72,207,201,113,27,163,212,205,94\")"
            },
            {
              "js": "\"gfhr2\"",
              "sol": "\"gfhr2\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.834ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[71,96,28,16,227,92,51,109,209,188,175,52,113,197,59,171,63,96,121,133,177,111,9,208,174,224,245,250,55,4,153,149]",
              "sol": "abi.encode(\"71,96,28,16,227,92,51,109,209,188,175,52,113,197,59,171,63,96,121,133,177,111,9,208,174,224,245,250,55,4,153,149\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "[132,171,85,26,189,222,31,77,57,76,31,70,31,251,229,222,243,169,122,37,112,69,110,211,160,43,216,28,193,114,94,233]",
              "sol": "abi.encode(\"132,171,85,26,189,222,31,77,57,76,31,70,31,251,229,222,243,169,122,37,112,69,110,211,160,43,216,28,193,114,94,233\")"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.835ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[62,0,77,229,193,111,135,193,139,34,60,141,152,198,123,158,165,81,211,251,19,200,26,15,5,55,139,106,120,64,156,176]",
              "sol": "stringToBytes32(\"62,0,77,229,193,111,135,193,139,34,60,141,152,198,123,158,165,81,211,251,19,200,26,15,5,55,139,106,120,64,156,176\")"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "[187,73,212,65,92,98,79,35,168,12,21,163,91,250,123,198,35,12,33,66,28,59,223,187,126,34,6,168,78,1,200,233]",
              "sol": "stringToBytes32(\"187,73,212,65,92,98,79,35,168,12,21,163,91,250,123,198,35,12,33,66,28,59,223,187,126,34,6,168,78,1,200,233\")"
            },
            {
              "js": "[215,157,125,131,187,46,180,196,17,162,14,226,236,250,213,72,152,130,146,122,56,24,224,74,46,157,211,234,47,34,181,27]",
              "sol": "stringToBytes32(\"215,157,125,131,187,46,180,196,17,162,14,226,236,250,213,72,152,130,146,122,56,24,224,74,46,157,211,234,47,34,181,27\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.835ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[13,245,243,161,44,147,194,140,190,25,183,76,34,199,224,254,103,186,233,254,97,163,206,220,186,31,110,70,241,85,120,107]",
              "sol": "stringToBytes32(\"13,245,243,161,44,147,194,140,190,25,183,76,34,199,224,254,103,186,233,254,97,163,206,220,186,31,110,70,241,85,120,107\")"
            },
            {
              "js": "[216,94,141,16,102,115,235,187,20,106,236,26,116,36,238,18,116,148,223,237,200]",
              "sol": "abi.encode(\"216,94,141,16,102,115,235,187,20,106,236,26,116,36,238,18,116,148,223,237,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[217,154,172,50,58,27,78,28,212,198,40,169,167,218,69,156,51,217,216,163,248,138,60,42,248,241,167,85,49,255,243,20]",
              "sol": "stringToBytes32(\"217,154,172,50,58,27,78,28,212,198,40,169,167,218,69,156,51,217,216,163,248,138,60,42,248,241,167,85,49,255,243,20\")"
            },
            {
              "js": "[132,146,126,121,57,155,131,65,129,103,165,169,211,186,54,77,203,83,72,243,208,32,202,239,50,247,230,244,23,189,55,5,211,219,151,68,22,90,149,16,248,236,171,160,52,129,161,166,0,203,202,228,80,7,232,140,98,235,191,103,146,122,59,199,150]",
              "sol": "abi.encode(\"132,146,126,121,57,155,131,65,129,103,165,169,211,186,54,77,203,83,72,243,208,32,202,239,50,247,230,244,23,189,55,5,211,219,151,68,22,90,149,16,248,236,171,160,52,129,161,166,0,203,202,228,80,7,232,140,98,235,191,103,146,122,59,199,150\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.836ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.838ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1532892062,49]",
              "sol": "[uint(1532892062),uint(49)]"
            },
            {
              "js": "[[1025,127],[101,33]]",
              "sol": "[[uint(1025),uint(127)],[uint(101),uint(33)]]"
            },
            {
              "js": "[64,95]",
              "sol": "[uint(64),uint(95)]"
            },
            {
              "js": "[15,9]",
              "sol": "[uint(15),uint(9)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.841ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.841ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[255,102,257,200001,60,88,58,26,25,2014223716]",
              "sol": "[uint(255),uint(102),uint(257),uint(200001),uint(60),uint(88),uint(58),uint(26),uint(25),uint(2014223716)]"
            },
            {
              "js": "{\"A\": {\"X\": 1532892064,\"Y\": 102},\"B\": {\"X\": [98,86],\"Y\": [56,128]},\"C\": {\"X\": 61,\"Y\": 28}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1532892064,102),Pairing.G2Point([uint(98),uint(86)],[uint(56),uint(128)]),Pairing.G1Point(61,28))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[32,54,162,1532892063,28,63]",
              "sol": "[uint(32),uint(54),uint(162),uint(1532892063),uint(28),uint(63)]"
            },
            {
              "js": "{\"A\": {\"X\": 162,\"Y\": 19},\"B\": {\"X\": [70,9],\"Y\": [257,162]},\"C\": {\"X\": 33,\"Y\": 129}}",
              "sol": "Verifier.Proof(Pairing.G1Point(162,19),Pairing.G2Point([uint(70),uint(9)],[uint(257),uint(162)]),Pairing.G1Point(33,129))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.844ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.845ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.845ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"accounts[5]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.847ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.847ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "accounts[4]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.848ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.848ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "57",
                "sol": "57"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.849ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.850ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "[200,91,84,114,187,132,112,59,249,40,83,31,42,186,162,211,160,41,59,157,17,253,28,178,157,71,197,250,250,102,171,182]",
              "sol": "abi.encode(\"200,91,84,114,187,132,112,59,249,40,83,31,42,186,162,211,160,41,59,157,17,253,28,178,157,71,197,250,250,102,171,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "70",
                "sol": "70"
              },
              {
                "js": "[200,91,84,114,187,132,112,59,249,40,83,31,42,186,162,211,160,41,59,157,17,253,28,178,157,71,197,250,250,102,171,182]",
                "sol": "abi.encode(\"200,91,84,114,187,132,112,59,249,40,83,31,42,186,162,211,160,41,59,157,17,253,28,178,157,71,197,250,250,102,171,182\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.851ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.852ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[55,158,242,117]",
              "sol": "bytes4(\"55,158,242,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.855ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.855ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.856ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "162",
                "sol": "162"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.857ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "103",
                "sol": "103"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.857ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[182,1,87,182,142,26,179,31,179,179,194,131,22,40,212,110,202,162,29,197,187,160,183,44,108,108,154,0,92,22,182,247]",
              "sol": "abi.encode(\"182,1,87,182,142,26,179,31,179,179,194,131,22,40,212,110,202,162,29,197,187,160,183,44,108,108,154,0,92,22,182,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "[153,122,113,203,0,133,11,14,138,17,161,153,194,190,215,14,185,41,106,184,17,116,81,25,201,113,63,73,156,23,37,193]",
              "sol": "abi.encode(\"153,122,113,203,0,133,11,14,138,17,161,153,194,190,215,14,185,41,106,184,17,116,81,25,201,113,63,73,156,23,37,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.859ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.861ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[160,98]",
              "sol": "[uint(160),uint(98)]"
            },
            {
              "js": "[[1025,256],[87,23]]",
              "sol": "[[uint(1025),uint(256)],[uint(87),uint(23)]]"
            },
            {
              "js": "[2014223714,6]",
              "sol": "[uint(2014223714),uint(6)]"
            },
            {
              "js": "[96,1532892064]",
              "sol": "[uint(96),uint(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.862ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.863ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.864ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.864ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.865ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.866ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.867ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.868ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.868ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.869ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.870ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:48:16.871ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.872ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:48:16.872ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}