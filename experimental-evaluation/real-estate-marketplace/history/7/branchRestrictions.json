,{
  "2020-11-10T18:35:15.226ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:35:30.126ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:35:45.093ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:00.007ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:15.201ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:30.221ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.475ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [95,213,211,158,170,166,181,126,145,84,132,123,90,123,79,125,86,35,128,114,206,202,89,187,15,117,112,22,22,61,88,198],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"95,213,211,158,170,166,181,126,145,84,132,123,90,123,79,125,86,35,128,114,206,202,89,187,15,117,112,22,22,61,88,198\"),57)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.477ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [185,109,122,190,187,147,18,204,14,240,105,46,94,159,60,97,248,241,208,190,150,58,184,99,123,65,150,128,31,173,238,129],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"185,109,122,190,187,147,18,204,14,240,105,46,94,159,60,97,248,241,208,190,150,58,184,99,123,65,150,128,31,173,238,129\"),97)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [214,91,17,111,20,125,170,166,187,29,181,7,123,4,206,149,198,66,18,249,141,46,80,207,7,75,145,242,155,108,50,236],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"214,91,17,111,20,125,170,166,187,29,181,7,123,4,206,149,198,66,18,249,141,46,80,207,7,75,145,242,155,108,50,236\"),95)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.478ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [66,163,188,187,114,81,169,240,170,93,1,27,23,104,233,193,92,216,23,186,203,146,78,76,27,72,150,215,45,184,229,57],\"capacity\": 32}",
              "sol": "Buffer.buffer(abi.encode(\"66,163,188,187,114,81,169,240,170,93,1,27,23,104,233,193,92,216,23,186,203,146,78,76,27,72,150,215,45,184,229,57\"),32)"
            },
            {
              "js": "[234,194,51,33,124,209,197,238,182,174,64,131,173,0,165,156,29,218,188,136,213,145,190,130,177,45,107,240,165,236,231,15]",
              "sol": "abi.encode(\"234,194,51,33,124,209,197,238,182,174,64,131,173,0,165,156,29,218,188,136,213,145,190,130,177,45,107,240,165,236,231,15\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.478ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [103,31,201,254,211,170,239,148,182,55,218,139,126,225,134,165,161,230,216,214,59,193,93,219,62,155,110,70,52,225,23,65],\"capacity\": 22}",
              "sol": "Buffer.buffer(abi.encode(\"103,31,201,254,211,170,239,148,182,55,218,139,126,225,134,165,161,230,216,214,59,193,93,219,62,155,110,70,52,225,23,65\"),22)"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.479ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [114,116,222,89,30,5,89,109,99,169,65,136,82,124,185,35,27,254,34,62,131,116,241,203,107,203,127,190,25,102,189,223],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"114,116,222,89,30,5,89,109,99,169,65,136,82,124,185,35,27,254,34,62,131,116,241,203,107,203,127,190,25,102,189,223\"),1024)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.479ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [241,233,31,122,2,22,225,204,6,253,100,84,202,144,14,163,219,26,14,247,26,164,186,110,245,222,222,21,254,151,57,159],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"241,233,31,122,2,22,225,204,6,253,100,84,202,144,14,163,219,26,14,247,26,164,186,110,245,222,222,21,254,151,57,159\"),256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.480ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [172,144,95,30,113,31,144,158,238,125,162,87,43,21,125,154,198,121,99,2,152,207,102,29,159,86,175,177,194,109,232,30],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"172,144,95,30,113,31,144,158,238,125,162,87,43,21,125,154,198,121,99,2,152,207,102,29,159,86,175,177,194,109,232,30\"),1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.485ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.485ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.486ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 102,\"Y\": 66}",
              "sol": "Pairing.G1Point(102,66)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.487ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 200000,\"Y\": 22}",
              "sol": "Pairing.G1Point(200000,22)"
            },
            {
              "js": "{\"X\": 58,\"Y\": 256}",
              "sol": "Pairing.G1Point(58,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.487ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [2014223714,57],\"Y\": [45,88]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(57)],[uint(45),uint(88)])"
            },
            {
              "js": "{\"X\": [26,31],\"Y\": [8,29]}",
              "sol": "Pairing.G2Point([uint(26),uint(31)],[uint(8),uint(29)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.488ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 30,\"Y\": 54}",
              "sol": "Pairing.G1Point(30,54)"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.488ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 200000,\"Y\": 16},{\"X\": 28,\"Y\": 32},{\"X\": 26,\"Y\": 1532892062},{\"X\": 71,\"Y\": 97},{\"X\": 60,\"Y\": 129},{\"X\": 22,\"Y\": 199999},{\"X\": 10,\"Y\": 103}]",
              "sol": "[Pairing.G1Point(200000,16),Pairing.G1Point(28,32),Pairing.G1Point(26,1532892062),Pairing.G1Point(71,97),Pairing.G1Point(60,129),Pairing.G1Point(22,199999),Pairing.G1Point(10,103)]"
            },
            {
              "js": "[{\"X\": [31,71],\"Y\": [95,88]},{\"X\": [61,6],\"Y\": [7,19]},{\"X\": [58,30],\"Y\": [4,70]},{\"X\": [11,28],\"Y\": [9,46]},{\"X\": [29,32],\"Y\": [161,161]},{\"X\": [58,200000],\"Y\": [10,7]},{\"X\": [46,59],\"Y\": [22,256]}]",
              "sol": "[Pairing.G2Point([uint(31),uint(71)],[uint(95),uint(88)]),Pairing.G2Point([uint(61),uint(6)],[uint(7),uint(19)]),Pairing.G2Point([uint(58),uint(30)],[uint(4),uint(70)]),Pairing.G2Point([uint(11),uint(28)],[uint(9),uint(46)]),Pairing.G2Point([uint(29),uint(32)],[uint(161),uint(161)]),Pairing.G2Point([uint(58),uint(200000)],[uint(10),uint(7)]),Pairing.G2Point([uint(46),uint(59)],[uint(22),uint(256)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 25,\"Y\": 60},{\"X\": 57,\"Y\": 1024},{\"X\": 255,\"Y\": 101},{\"X\": 200001,\"Y\": 69},{\"X\": 69,\"Y\": 33},{\"X\": 31,\"Y\": 128},{\"X\": 200001,\"Y\": 103},{\"X\": 31,\"Y\": 28}]",
                "sol": "[Pairing.G1Point(1532892062,54),Pairing.G1Point(27,102),Pairing.G1Point(21,96),Pairing.G1Point(27,2014223716),Pairing.G1Point(29,49),Pairing.G1Point(58,26),Pairing.G1Point(17,9),Pairing.G1Point(128,1024)]"
              },
              {
                "js": "[{\"X\": [31,71],\"Y\": [95,88]},{\"X\": [61,6],\"Y\": [7,19]},{\"X\": [58,30],\"Y\": [4,70]},{\"X\": [11,28],\"Y\": [9,46]},{\"X\": [29,32],\"Y\": [161,161]},{\"X\": [58,200000],\"Y\": [10,7]},{\"X\": [46,59],\"Y\": [22,256]}]",
                "sol": "[Pairing.G2Point([uint(31),uint(71)],[uint(95),uint(88)]),Pairing.G2Point([uint(61),uint(6)],[uint(7),uint(19)]),Pairing.G2Point([uint(58),uint(30)],[uint(4),uint(70)]),Pairing.G2Point([uint(11),uint(28)],[uint(9),uint(46)]),Pairing.G2Point([uint(29),uint(32)],[uint(161),uint(161)]),Pairing.G2Point([uint(58),uint(200000)],[uint(10),uint(7)]),Pairing.G2Point([uint(46),uint(59)],[uint(22),uint(256)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.494ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 10,\"Y\": 33}",
              "sol": "Pairing.G1Point(10,33)"
            },
            {
              "js": "{\"X\": [25,128],\"Y\": [49,200001]}",
              "sol": "Pairing.G2Point([uint(25),uint(128)],[uint(49),uint(200001)])"
            },
            {
              "js": "{\"X\": 54,\"Y\": 26}",
              "sol": "Pairing.G1Point(54,26)"
            },
            {
              "js": "{\"X\": [48,57],\"Y\": [0,66]}",
              "sol": "Pairing.G2Point([uint(48),uint(57)],[uint(0),uint(66)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.495ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 64,\"Y\": 26}",
              "sol": "Pairing.G1Point(64,26)"
            },
            {
              "js": "{\"X\": [63,86],\"Y\": [200001,17]}",
              "sol": "Pairing.G2Point([uint(63),uint(86)],[uint(200001),uint(17)])"
            },
            {
              "js": "{\"X\": 17,\"Y\": 20}",
              "sol": "Pairing.G1Point(17,20)"
            },
            {
              "js": "{\"X\": [57,55],\"Y\": [20,19]}",
              "sol": "Pairing.G2Point([uint(57),uint(55)],[uint(20),uint(19)])"
            },
            {
              "js": "{\"X\": 23,\"Y\": 29}",
              "sol": "Pairing.G1Point(23,29)"
            },
            {
              "js": "{\"X\": [20,66],\"Y\": [19,200000]}",
              "sol": "Pairing.G2Point([uint(20),uint(66)],[uint(19),uint(200000)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.500ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.501ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.501ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.502ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.503ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.503ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.504ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.505ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.505ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.507ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.507ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.510ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [70,130,104,212,161,25,140,76,143,5,215,223,159,175,217,58,160,223,165,244,87,40,147,225,109,161,163,204,124,141,137,192],\"capacity\": 60}",
              "sol": "Buffer.buffer(abi.encode(\"70,130,104,212,161,25,140,76,143,5,215,223,159,175,217,58,160,223,165,244,87,40,147,225,109,161,163,204,124,141,137,192\"),60)"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.511ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [82,41,200,226,198,181,128,251,214,97,134,127,127,244,67,192,92,116,88,198,46,190,138,20,106,253,179,250,114,232,236,239],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"82,41,200,226,198,181,128,251,214,97,134,127,127,244,67,192,92,116,88,198,46,190,138,20,106,253,179,250,114,232,236,239\"),98)"
            },
            {
              "js": "[87,158,153,241,56,163,76,38,164,115,94,34,53,17,108,177,123,47,153,39,146,55,32,139,149,65,134,183,159,109,132,237]",
              "sol": "abi.encode(\"87,158,153,241,56,163,76,38,164,115,94,34,53,17,108,177,123,47,153,39,146,55,32,139,149,65,134,183,159,109,132,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.511ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [133,189,249,105,125,192,217,124,145,183,82,148,169,230,30,49,59,81,48,196,57,32,254,180,162,196,223,224,237,77,147,244],\"capacity\": 1023}",
              "sol": "Buffer.buffer(abi.encode(\"133,189,249,105,125,192,217,124,145,183,82,148,169,230,30,49,59,81,48,196,57,32,254,180,162,196,223,224,237,77,147,244\"),1023)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.512ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [156,133,57,185,17,102,203,83,180,60,134,172,47,143,196,45,50,20,238,97,19,196,49,131,223,168,232,124,77,116,170,211],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"156,133,57,185,17,102,203,83,180,60,134,172,47,143,196,45,50,20,238,97,19,196,49,131,223,168,232,124,77,116,170,211\"),129)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.513ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[84,199,176,65,113,33,249,89,99,243,89,228,207,79,134,84,1,245,255,54,22,242,156,7,73,251,83,120,211,102,34,157]",
              "sol": "stringToBytes32(\"84,199,176,65,113,33,249,89,99,243,89,228,207,79,134,84,1,245,255,54,22,242,156,7,73,251,83,120,211,102,34,157\")"
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.513ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[96,72,15,54,42,14,173,90,236,218,75,72,68,105,15,207,248,240,207,75,112,242,58,239,6,198,66,76,195,169,12,134]",
              "sol": "stringToBytes32(\"96,72,15,54,42,14,173,90,236,218,75,72,68,105,15,207,248,240,207,75,112,242,58,239,6,198,66,76,195,169,12,134\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[219,48,248,173,20,99,66,207,2,33,33,170,1,236,225,57,14,115,115,219,99,50,119,0,108,135,82,240,109,64,158,253]",
              "sol": "abi.encode(\"219,48,248,173,20,99,66,207,2,33,33,170,1,236,225,57,14,115,115,219,99,50,119,0,108,135,82,240,109,64,158,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.556ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.556ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.558ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.559ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.559ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.559ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.560ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.560ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"2y8xy\"",
              "sol": "\"2y8xy\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.560ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.561ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.561ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "\"3jxgks\"",
              "sol": "\"3jxgks\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.562ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.562ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.563ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.563ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"d4a09\",\"\\x19Ethereum Signed Message:\\n32\",\"d4a09\",\"ERC1820_ACCEPT_MAGIC\",\"3jxgks\",\"Capstones\",\"2y8xy\"]",
              "sol": "[string(\"d4a09\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"d4a09\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"3jxgks\"),string(\"Capstones\"),string(\"2y8xy\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.563ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"2y8xy\",\"3jxgks\",\"Capstones\",\"L\",\"Capstones\",\"0\",\"L\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"2y8xy\"),string(\"3jxgks\"),string(\"Capstones\"),string(\"L\"),string(\"Capstones\"),string(\"0\"),string(\"L\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.564ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "[\"2y8xy\",\"[\",\"P\",\"bv3sna\",\"\\x19Ethereum Signed Message:\\n32\",\"3jxgks\"]",
              "sol": "[string(\"2y8xy\"),string(\"[\"),string(\"P\"),string(\"bv3sna\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"3jxgks\")]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.565ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"bv3sna\",\"L\",\"mkqw7\",\"Capstones\",\"[\"]",
              "sol": "[string(\"bv3sna\"),string(\"L\"),string(\"mkqw7\"),string(\"Capstones\"),string(\"[\")]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.565ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.565ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "[\"d4a09\"]",
              "sol": "[string(\"d4a09\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.566ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.566ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.567ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"mkqw7\"",
              "sol": "\"mkqw7\""
            },
            {
              "js": "[\"mkqw7\",\"Capstones\"]",
              "sol": "[string(\"mkqw7\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.567ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"3jxgks\"",
              "sol": "\"3jxgks\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"L\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.568ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "[\"mkqw7\",\"0\"]",
              "sol": "[string(\"mkqw7\"),string(\"0\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.568ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"2y8xy\"",
              "sol": "\"2y8xy\""
            },
            {
              "js": "[\"bv3sna\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"bv3sna\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.569ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"1i754l\",\"0\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"1i754l\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.569ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"P\",\"3jxgks\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"P\"),string(\"3jxgks\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.570ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"3jxgks\",\"Capstones\",\"d4a09\"]",
              "sol": "[string(\"3jxgks\"),string(\"Capstones\"),string(\"d4a09\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.570ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "[\"Capstones\",\"L\",\"Capstones\"]",
              "sol": "[string(\"Capstones\"),string(\"L\"),string(\"Capstones\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.571ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "[\"bv3sna\",\"[\",\"0\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"bv3sna\"),string(\"[\"),string(\"0\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.571ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"[\",\"L\",\"3jxgks\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"[\"),string(\"L\"),string(\"3jxgks\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.572ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "[\"d4a09\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"d4a09\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.572ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"k4s3uy\",\"2y8xy\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"k4s3uy\"),string(\"2y8xy\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.574ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\",\"L\",\"mkqw7\",\"k4s3uy\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"L\"),string(\"mkqw7\"),string(\"k4s3uy\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.574ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"L\",\"6wkqvj\",\"\\x19Ethereum Signed Message:\\n32\",\"k4s3uy\",\"mkqw7\"]",
              "sol": "[string(\"L\"),string(\"6wkqvj\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"k4s3uy\"),string(\"mkqw7\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.575ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"mkqw7\",\"pigwm\",\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"mkqw7\"),string(\"pigwm\"),string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.575ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"a2wdu\",\"[\",\"pigwm\",\"k4s3uy\",\"sr7fs\"]",
              "sol": "[string(\"a2wdu\"),string(\"[\"),string(\"pigwm\"),string(\"k4s3uy\"),string(\"sr7fs\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.576ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "[[18,43,37,183,165,209,114,177,131,160,234,203,50,249,62,10,190,85,112,160,81,232,31,53,21,19,104,51,13,2,31,250],[17,106,239,179,161,22,142,86,163,68,76,35,122,154,228,251,235,16,196,45,190,21,135,195,114,134,30,108,142,155,26,234],[112,227,74,50,34,17,198,148,40,235,215,101,237,170,199,60,71,97,253,8,56,6,251,27,191,140,24,134,165,1,159,194],[10,109,10,255,129,229,186,255,156,108,220,119,60,239,181,128,165,142,113,254,63,226,214,171,135,163,55,209,240,214,17,224],[106,235,136,2,206,148,191,125,77,147,2,160,179,85,85,164,183,181,199,172,218,125,140,50,28,62,233,94,144,218,119,108]]",
              "sol": "[bytes(abi.encode(\"18,43,37,183,165,209,114,177,131,160,234,203,50,249,62,10,190,85,112,160,81,232,31,53,21,19,104,51,13,2,31,250\")),bytes(abi.encode(\"17,106,239,179,161,22,142,86,163,68,76,35,122,154,228,251,235,16,196,45,190,21,135,195,114,134,30,108,142,155,26,234\")),bytes(abi.encode(\"112,227,74,50,34,17,198,148,40,235,215,101,237,170,199,60,71,97,253,8,56,6,251,27,191,140,24,134,165,1,159,194\")),bytes(abi.encode(\"10,109,10,255,129,229,186,255,156,108,220,119,60,239,181,128,165,142,113,254,63,226,214,171,135,163,55,209,240,214,17,224\")),bytes(abi.encode(\"106,235,136,2,206,148,191,125,77,147,2,160,179,85,85,164,183,181,199,172,218,125,140,50,28,62,233,94,144,218,119,108\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.577ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[146,109,159,253,152,250,24,198,24,89,162,8,15,47,7,21,254,127,26,207,87,205,34,114,229,201,182,1,231,135,191,210],[216,196,193,98,146,166,221,164,252,224,248,77,47,233,123,215,97,44,108,104,79,199,104,5,19,22,218,7,126,127,65,160]]",
              "sol": "[bytes(abi.encode(\"146,109,159,253,152,250,24,198,24,89,162,8,15,47,7,21,254,127,26,207,87,205,34,114,229,201,182,1,231,135,191,210\")),bytes(abi.encode(\"216,196,193,98,146,166,221,164,252,224,248,77,47,233,123,215,97,44,108,104,79,199,104,5,19,22,218,7,126,127,65,160\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.577ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[240,154,169,109,250,165,31,245,252,97,31,241,53,156,60,171,181,49,31,90,153,195,246,31,115,195,88,71,195,196,104,62],[217,205,109,146,36,45,145,87,247,1,198,132,172,121,15,235,120,233,223,212,85,193,5,143,187,21,2,29,56,196,8,25],[215,154,140,171,15,41,194,252,20,119,160,77,159,105,2,216,86,47,226,137,70,53,82,248,201,207,197,20,166,71,190,239],[45,160,164,83,222,191,246,249,101,36,145,18,22,85,184,104,109,118,173,131,92,172,172,240,204,23,142,216,103,16,9,114],[14,48,40,170,195,206,236,169,243,2,131,196,86,38,79,91,233,226,20,151,142,64,96,220,149,1,54,73,5,182,148,146]]",
              "sol": "[bytes(abi.encode(\"240,154,169,109,250,165,31,245,252,97,31,241,53,156,60,171,181,49,31,90,153,195,246,31,115,195,88,71,195,196,104,62\")),bytes(abi.encode(\"217,205,109,146,36,45,145,87,247,1,198,132,172,121,15,235,120,233,223,212,85,193,5,143,187,21,2,29,56,196,8,25\")),bytes(abi.encode(\"215,154,140,171,15,41,194,252,20,119,160,77,159,105,2,216,86,47,226,137,70,53,82,248,201,207,197,20,166,71,190,239\")),bytes(abi.encode(\"45,160,164,83,222,191,246,249,101,36,145,18,22,85,184,104,109,118,173,131,92,172,172,240,204,23,142,216,103,16,9,114\")),bytes(abi.encode(\"14,48,40,170,195,206,236,169,243,2,131,196,86,38,79,91,233,226,20,151,142,64,96,220,149,1,54,73,5,182,148,146\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.578ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"1i754l\"",
              "sol": "\"1i754l\""
            },
            {
              "js": "[[157,6,200,109,2,232,150,128,35,43,54,23,128,9,197,232,117,15,146,98,46,23,30,209,110,25,161,72,222,43,123,20],[126,172,53,92,16,245,96,157,67,54,210,132,146,215,255,150,148,115,82,7,157,7,51,105,28,255,173,126,69,175,27,105],[105,189,62,97,246,92,79,180,211,89,201,245,36,117,164,250,119,200,43,87,47,59,8,114,103,211,33,27,122,158,166,97],[150,226,6,169,204,32,232,21,139,50,220,5,89,235,252,131,41,218,171,59,234,180,238,116,8,58,214,189,99,0,26,160],[196,92,109,91,193,61,173,109,238,74,180,244,168,120,11,71,202,50,176,233,218,143,192,187,181,15,49,98,197,209,18,125],[171,13,180,165,203,26,133,232,61,102,200,178,103,22,52,153,60,215,30,155,140,38,192,152,60,252,9,142,15,203,211,21]]",
              "sol": "[bytes(abi.encode(\"157,6,200,109,2,232,150,128,35,43,54,23,128,9,197,232,117,15,146,98,46,23,30,209,110,25,161,72,222,43,123,20\")),bytes(abi.encode(\"126,172,53,92,16,245,96,157,67,54,210,132,146,215,255,150,148,115,82,7,157,7,51,105,28,255,173,126,69,175,27,105\")),bytes(abi.encode(\"105,189,62,97,246,92,79,180,211,89,201,245,36,117,164,250,119,200,43,87,47,59,8,114,103,211,33,27,122,158,166,97\")),bytes(abi.encode(\"150,226,6,169,204,32,232,21,139,50,220,5,89,235,252,131,41,218,171,59,234,180,238,116,8,58,214,189,99,0,26,160\")),bytes(abi.encode(\"196,92,109,91,193,61,173,109,238,74,180,244,168,120,11,71,202,50,176,233,218,143,192,187,181,15,49,98,197,209,18,125\")),bytes(abi.encode(\"171,13,180,165,203,26,133,232,61,102,200,178,103,22,52,153,60,215,30,155,140,38,192,152,60,252,9,142,15,203,211,21\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.578ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[11,101,15,108,45,171,216,173,56,248,169,92,89,150,55,219,202,195,84,251,91,94,67,230,176,249,228,166,198,72,102,77]]",
              "sol": "[bytes(abi.encode(\"11,101,15,108,45,171,216,173,56,248,169,92,89,150,55,219,202,195,84,251,91,94,67,230,176,249,228,166,198,72,102,77\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.579ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "[[217,33,146,130,27,40,157,86,233,5,74,201,174,65,107,121,52,146,156,81,60,234,150,36,246,222,79,182,128,54,253,7]]",
              "sol": "[bytes(abi.encode(\"217,33,146,130,27,40,157,86,233,5,74,201,174,65,107,121,52,146,156,81,60,234,150,36,246,222,79,182,128,54,253,7\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.580ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[78,17,207,81,182,124,16,173,124,118,166,123,133,63,27,192,196,27,133,74,112,58,221,191,109,92,131,223,98,57,225,209]]",
              "sol": "[bytes(abi.encode(\"78,17,207,81,182,124,16,173,124,118,166,123,133,63,27,192,196,27,133,74,112,58,221,191,109,92,131,223,98,57,225,209\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.580ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[234,223,67,206,219,172,52,254,81,113,103,175,213,162,178,190,96,147,111,73,177,140,5,246,117,14,126,79,147,60,215,78]]",
              "sol": "[bytes(abi.encode(\"234,223,67,206,219,172,52,254,81,113,103,175,213,162,178,190,96,147,111,73,177,140,5,246,117,14,126,79,147,60,215,78\"))]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.581ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[57,124,35,238,23,248,201,48,71,56,208,213,33,171,62,215,198,244,136,47,24,12,161,215,5,210,177,220,89,71,149,42],[66,127,191,78,58,158,255,230,86,114,167,195,236,180,79,60,107,233,209,13,230,64,57,218,234,197,3,50,80,145,246,68]]",
              "sol": "[bytes(abi.encode(\"57,124,35,238,23,248,201,48,71,56,208,213,33,171,62,215,198,244,136,47,24,12,161,215,5,210,177,220,89,71,149,42\")),bytes(abi.encode(\"66,127,191,78,58,158,255,230,86,114,167,195,236,180,79,60,107,233,209,13,230,64,57,218,234,197,3,50,80,145,246,68\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.581ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"pigwm\"",
              "sol": "\"pigwm\""
            },
            {
              "js": "[[24,10,15,112,2,213,199,41,77,164,84,162,138,36,25,140,60,47,197,161,79,151,53,156,61,15,177,120,162,140,44,130],[23,233,1,219,103,142,248,129,36,208,106,177,38,172,74,144,46,129,196,22,10,15,110,182,192,228,148,52,135,61,56,58]]",
              "sol": "[bytes(abi.encode(\"24,10,15,112,2,213,199,41,77,164,84,162,138,36,25,140,60,47,197,161,79,151,53,156,61,15,177,120,162,140,44,130\")),bytes(abi.encode(\"23,233,1,219,103,142,248,129,36,208,106,177,38,172,74,144,46,129,196,22,10,15,110,182,192,228,148,52,135,61,56,58\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.582ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[160,40,113,74,245,248,163,152,187,6,123,75,197,233,60,169,143,41,52,76,182,1,37,22,49,50,245,93,152,149,142,147],[236,92,48,232,183,80,197,18,0,19,249,166,165,125,91,199,165,105,155,7,4,81,168,130,140,29,77,179,227,17,79,38]]",
              "sol": "[bytes(abi.encode(\"160,40,113,74,245,248,163,152,187,6,123,75,197,233,60,169,143,41,52,76,182,1,37,22,49,50,245,93,152,149,142,147\")),bytes(abi.encode(\"236,92,48,232,183,80,197,18,0,19,249,166,165,125,91,199,165,105,155,7,4,81,168,130,140,29,77,179,227,17,79,38\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.583ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[99,216,236,216,202,197,0,44,48,126,194,138,163,243,231,254,11,90,209,252,25,73,144,46,147,195,253,206,159,4,121,98],[127,13,199,84,186,38,29,90,189,92,195,248,62,233,121,255,172,74,220,174,33,64,114,59,150,89,123,123,207,201,180,37]]",
              "sol": "[bytes(abi.encode(\"99,216,236,216,202,197,0,44,48,126,194,138,163,243,231,254,11,90,209,252,25,73,144,46,147,195,253,206,159,4,121,98\")),bytes(abi.encode(\"127,13,199,84,186,38,29,90,189,92,195,248,62,233,121,255,172,74,220,174,33,64,114,59,150,89,123,123,207,201,180,37\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.584ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "[[176,226,0,136,177,1,142,254,40,131,27,66,165,124,188,140,71,175,1,98,148,162,52,17,97,161,13,78,135,74,197,215],[56,233,252,59,81,146,94,39,99,6,32,221,103,128,168,243,159,88,188,226,193,45,205,79,242,187,182,42,142,78,227,243],[14,77,151,244,162,65,214,215,198,5,28,50,236,33,10,254,192,240,81,214,42,130,89,242,222,238,225,2,234,87,9,153]]",
              "sol": "[bytes(abi.encode(\"176,226,0,136,177,1,142,254,40,131,27,66,165,124,188,140,71,175,1,98,148,162,52,17,97,161,13,78,135,74,197,215\")),bytes(abi.encode(\"56,233,252,59,81,146,94,39,99,6,32,221,103,128,168,243,159,88,188,226,193,45,205,79,242,187,182,42,142,78,227,243\")),bytes(abi.encode(\"14,77,151,244,162,65,214,215,198,5,28,50,236,33,10,254,192,240,81,214,42,130,89,242,222,238,225,2,234,87,9,153\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.584ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "[[49,245,162,119,16,255,77,244,226,95,49,148,187,199,192,31,90,32,44,74,57,144,159,234,38,118,119,186,94,180,51,24],[46,37,127,228,14,140,128,18,37,158,196,103,212,221,126,208,67,46,51,205,125,152,27,140,241,132,47,124,163,144,241,241],[121,4,123,209,248,120,7,144,20,46,130,229,114,240,67,2,91,223,21,102,252,162,40,182,88,25,121,83,21,114,109,154]]",
              "sol": "[bytes(abi.encode(\"49,245,162,119,16,255,77,244,226,95,49,148,187,199,192,31,90,32,44,74,57,144,159,234,38,118,119,186,94,180,51,24\")),bytes(abi.encode(\"46,37,127,228,14,140,128,18,37,158,196,103,212,221,126,208,67,46,51,205,125,152,27,140,241,132,47,124,163,144,241,241\")),bytes(abi.encode(\"121,4,123,209,248,120,7,144,20,46,130,229,114,240,67,2,91,223,21,102,252,162,40,182,88,25,121,83,21,114,109,154\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.585ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[20,179,4,247,100,245,148,35,112,180,254,102,24,87,101,200,159,19,48,53,230,35,57,254,160,62,93,215,204,177,96,159],[213,57,13,79,41,113,173,102,86,166,78,149,109,196,168,96,230,61,58,87,141,6,96,72,145,34,143,163,142,77,103,78],[42,130,109,38,229,62,237,234,9,156,57,180,62,126,209,185,180,168,21,228,14,167,167,104,158,9,135,120,192,149,33,154]]",
              "sol": "[bytes(abi.encode(\"20,179,4,247,100,245,148,35,112,180,254,102,24,87,101,200,159,19,48,53,230,35,57,254,160,62,93,215,204,177,96,159\")),bytes(abi.encode(\"213,57,13,79,41,113,173,102,86,166,78,149,109,196,168,96,230,61,58,87,141,6,96,72,145,34,143,163,142,77,103,78\")),bytes(abi.encode(\"42,130,109,38,229,62,237,234,9,156,57,180,62,126,209,185,180,168,21,228,14,167,167,104,158,9,135,120,192,149,33,154\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.585ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"a2wdu\"",
              "sol": "\"a2wdu\""
            },
            {
              "js": "[[247,152,31,98,137,137,156,54,72,99,113,153,186,189,179,34,230,148,60,111,121,36,77,30,116,247,167,140,181,36,149,26],[211,88,171,118,182,113,171,76,129,194,242,2,224,218,187,162,170,223,63,47,147,106,214,159,235,193,91,191,183,155,60,105],[190,119,159,98,228,58,229,69,92,143,207,228,235,14,16,141,4,241,243,70,201,107,21,49,43,176,43,128,36,253,145,145]]",
              "sol": "[bytes(abi.encode(\"247,152,31,98,137,137,156,54,72,99,113,153,186,189,179,34,230,148,60,111,121,36,77,30,116,247,167,140,181,36,149,26\")),bytes(abi.encode(\"211,88,171,118,182,113,171,76,129,194,242,2,224,218,187,162,170,223,63,47,147,106,214,159,235,193,91,191,183,155,60,105\")),bytes(abi.encode(\"190,119,159,98,228,58,229,69,92,143,207,228,235,14,16,141,4,241,243,70,201,107,21,49,43,176,43,128,36,253,145,145\"))]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.586ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[203,93,142,163,179,218,167,163,24,81,77,223,157,96,26,15,88,103,93,236,87,178,178,15,163,199,197,43,4,82,69,97],[170,36,176,238,250,65,81,230,143,84,225,240,106,213,148,190,241,199,34,141,227,157,167,11,253,231,69,79,59,251,41,177],[215,34,85,155,102,54,51,130,235,202,55,22,85,58,232,233,236,180,185,138,10,124,199,232,94,12,62,148,3,145,151,99],[142,140,17,240,210,56,191,83,170,156,36,10,236,239,236,116,228,88,245,146,170,52,82,86,142,86,167,45,218,108,11,228]]",
              "sol": "[bytes(abi.encode(\"203,93,142,163,179,218,167,163,24,81,77,223,157,96,26,15,88,103,93,236,87,178,178,15,163,199,197,43,4,82,69,97\")),bytes(abi.encode(\"170,36,176,238,250,65,81,230,143,84,225,240,106,213,148,190,241,199,34,141,227,157,167,11,253,231,69,79,59,251,41,177\")),bytes(abi.encode(\"215,34,85,155,102,54,51,130,235,202,55,22,85,58,232,233,236,180,185,138,10,124,199,232,94,12,62,148,3,145,151,99\")),bytes(abi.encode(\"142,140,17,240,210,56,191,83,170,156,36,10,236,239,236,116,228,88,245,146,170,52,82,86,142,86,167,45,218,108,11,228\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.587ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "[[67,49,67,8,71,230,55,23,83,39,193,117,165,180,196,227,192,227,27,163,192,125,215,11,125,224,9,138,121,49,13,74],[17,217,187,171,136,118,45,172,38,176,132,49,49,69,236,3,124,9,205,10,220,31,19,43,175,7,94,158,120,142,34,2],[249,206,25,151,103,245,112,184,102,80,174,104,249,100,40,245,2,248,101,89,118,227,51,165,55,16,186,105,85,83,47,1],[33,142,93,164,179,246,233,211,158,254,57,206,57,97,217,240,126,251,124,4,196,250,26,171,214,217,129,83,133,240,40,64]]",
              "sol": "[bytes(abi.encode(\"67,49,67,8,71,230,55,23,83,39,193,117,165,180,196,227,192,227,27,163,192,125,215,11,125,224,9,138,121,49,13,74\")),bytes(abi.encode(\"17,217,187,171,136,118,45,172,38,176,132,49,49,69,236,3,124,9,205,10,220,31,19,43,175,7,94,158,120,142,34,2\")),bytes(abi.encode(\"249,206,25,151,103,245,112,184,102,80,174,104,249,100,40,245,2,248,101,89,118,227,51,165,55,16,186,105,85,83,47,1\")),bytes(abi.encode(\"33,142,93,164,179,246,233,211,158,254,57,206,57,97,217,240,126,251,124,4,196,250,26,171,214,217,129,83,133,240,40,64\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.587ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"1i754l\"",
              "sol": "\"1i754l\""
            },
            {
              "js": "[[189,227,8,216,1,200,209,20,137,42,124,97,82,209,81,2,185,132,19,41,95,198,106,244,158,201,96,213,13,37,148,132],[178,52,238,32,203,136,242,59,231,168,248,151,1,59,90,227,39,125,236,209,57,179,24,120,117,23,2,68,198,21,123,237],[227,44,70,96,1,87,64,132,150,5,46,117,148,106,84,2,21,134,141,209,89,49,252,104,81,96,139,30,202,188,175,34],[144,255,57,37,122,118,119,78,167,139,195,16,64,119,168,141,33,175,239,112,72,38,207,87,135,176,128,189,19,244,223,124]]",
              "sol": "[bytes(abi.encode(\"189,227,8,216,1,200,209,20,137,42,124,97,82,209,81,2,185,132,19,41,95,198,106,244,158,201,96,213,13,37,148,132\")),bytes(abi.encode(\"178,52,238,32,203,136,242,59,231,168,248,151,1,59,90,227,39,125,236,209,57,179,24,120,117,23,2,68,198,21,123,237\")),bytes(abi.encode(\"227,44,70,96,1,87,64,132,150,5,46,117,148,106,84,2,21,134,141,209,89,49,252,104,81,96,139,30,202,188,175,34\")),bytes(abi.encode(\"144,255,57,37,122,118,119,78,167,139,195,16,64,119,168,141,33,175,239,112,72,38,207,87,135,176,128,189,19,244,223,124\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.588ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[93,14,223,207,79,137,210,178,174,173,107,211,180,93,77,245,127,48,7,168,85,143,211,112,173,89,116,41,189,212,183,165],[73,9,174,76,219,82,181,254,247,170,36,47,58,110,188,26,251,33,223,135,210,217,206,42,134,155,215,172,175,28,18,156],[165,158,83,123,52,30,124,99,221,70,106,201,109,102,88,217,42,48,51,55,48,93,30,134,182,196,160,112,232,47,116,235],[122,186,157,71,51,142,130,112,186,166,175,77,97,68,231,73,150,2,21,20,221,19,79,107,161,6,42,202,0,221,95,70]]",
              "sol": "[bytes(abi.encode(\"93,14,223,207,79,137,210,178,174,173,107,211,180,93,77,245,127,48,7,168,85,143,211,112,173,89,116,41,189,212,183,165\")),bytes(abi.encode(\"73,9,174,76,219,82,181,254,247,170,36,47,58,110,188,26,251,33,223,135,210,217,206,42,134,155,215,172,175,28,18,156\")),bytes(abi.encode(\"165,158,83,123,52,30,124,99,221,70,106,201,109,102,88,217,42,48,51,55,48,93,30,134,182,196,160,112,232,47,116,235\")),bytes(abi.encode(\"122,186,157,71,51,142,130,112,186,166,175,77,97,68,231,73,150,2,21,20,221,19,79,107,161,6,42,202,0,221,95,70\"))]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.589ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"k4s3uy\"",
              "sol": "\"k4s3uy\""
            },
            {
              "js": "[[0,185,218,105,16,156,91,219,134,240,39,94,5,68,168,136,42,162,158,114,168,70,11,65,161,148,47,150,12,25,209,231],[17,145,53,117,97,36,115,175,46,245,101,70,8,171,88,221,71,153,101,208,132,64,122,109,147,29,88,223,6,120,59,60],[138,237,8,232,12,234,229,185,161,40,207,81,167,215,5,72,191,45,163,46,43,233,3,204,125,11,101,109,44,143,54,55],[140,64,63,71,120,95,10,130,74,124,68,51,37,92,196,124,183,87,75,33,56,38,74,182,247,73,134,244,21,151,205,6],[146,212,243,21,147,145,103,45,157,172,163,121,150,28,39,124,39,85,14,250,143,218,168,149,13,38,156,237,112,189,4,9]]",
              "sol": "[bytes(abi.encode(\"0,185,218,105,16,156,91,219,134,240,39,94,5,68,168,136,42,162,158,114,168,70,11,65,161,148,47,150,12,25,209,231\")),bytes(abi.encode(\"17,145,53,117,97,36,115,175,46,245,101,70,8,171,88,221,71,153,101,208,132,64,122,109,147,29,88,223,6,120,59,60\")),bytes(abi.encode(\"138,237,8,232,12,234,229,185,161,40,207,81,167,215,5,72,191,45,163,46,43,233,3,204,125,11,101,109,44,143,54,55\")),bytes(abi.encode(\"140,64,63,71,120,95,10,130,74,124,68,51,37,92,196,124,183,87,75,33,56,38,74,182,247,73,134,244,21,151,205,6\")),bytes(abi.encode(\"146,212,243,21,147,145,103,45,157,172,163,121,150,28,39,124,39,85,14,250,143,218,168,149,13,38,156,237,112,189,4,9\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.590ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"2y8xy\"",
              "sol": "\"2y8xy\""
            },
            {
              "js": "[[48,94,159,164,222,94,191,184,181,30,189,33,60,244,99,184,211,229,70,134,150,218,59,249,189,194,249,244,196,193,22,157],[99,185,135,96,231,223,243,65,57,79,212,1,175,11,115,49,250,153,222,27,125,92,23,131,187,138,163,198,206,182,196,105],[32,105,226,23,14,63,103,141,133,136,119,179,44,76,36,242,231,66,174,91,56,194,110,69,222,62,161,240,97,174,114,71],[97,234,229,209,74,176,220,3,141,233,219,146,197,143,215,119,6,54,224,116,208,178,3,26,178,215,163,47,14,56,66,191],[252,89,252,57,95,164,106,246,36,132,4,125,161,15,53,96,83,227,245,136,203,88,49,34,30,40,231,218,39,112,199,75]]",
              "sol": "[bytes(abi.encode(\"48,94,159,164,222,94,191,184,181,30,189,33,60,244,99,184,211,229,70,134,150,218,59,249,189,194,249,244,196,193,22,157\")),bytes(abi.encode(\"99,185,135,96,231,223,243,65,57,79,212,1,175,11,115,49,250,153,222,27,125,92,23,131,187,138,163,198,206,182,196,105\")),bytes(abi.encode(\"32,105,226,23,14,63,103,141,133,136,119,179,44,76,36,242,231,66,174,91,56,194,110,69,222,62,161,240,97,174,114,71\")),bytes(abi.encode(\"97,234,229,209,74,176,220,3,141,233,219,146,197,143,215,119,6,54,224,116,208,178,3,26,178,215,163,47,14,56,66,191\")),bytes(abi.encode(\"252,89,252,57,95,164,106,246,36,132,4,125,161,15,53,96,83,227,245,136,203,88,49,34,30,40,231,218,39,112,199,75\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.591ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[88,209,213,229,244,221,27,38,184,64,120,190,114,10,97,174,208,69,79,71,159,120,223,52,251,15,179,16,103,213,83,222],[196,111,220,243,201,28,36,39,154,23,83,66,83,223,98,120,141,226,41,10,97,78,14,24,218,238,79,109,215,234,32,145],[34,2,99,132,166,21,3,35,229,0,45,65,30,10,77,200,234,189,66,40,12,183,249,196,174,167,179,11,45,174,108,205],[165,85,232,99,159,227,250,54,241,1,146,10,213,1,70,220,232,129,233,105,216,164,37,30,210,21,243,239,17,25,8,135],[7,89,55,105,155,42,80,75,92,154,149,73,217,4,221,18,174,75,209,6,19,0,21,76,113,124,233,191,241,47,114,77]]",
              "sol": "[bytes(abi.encode(\"88,209,213,229,244,221,27,38,184,64,120,190,114,10,97,174,208,69,79,71,159,120,223,52,251,15,179,16,103,213,83,222\")),bytes(abi.encode(\"196,111,220,243,201,28,36,39,154,23,83,66,83,223,98,120,141,226,41,10,97,78,14,24,218,238,79,109,215,234,32,145\")),bytes(abi.encode(\"34,2,99,132,166,21,3,35,229,0,45,65,30,10,77,200,234,189,66,40,12,183,249,196,174,167,179,11,45,174,108,205\")),bytes(abi.encode(\"165,85,232,99,159,227,250,54,241,1,146,10,213,1,70,220,232,129,233,105,216,164,37,30,210,21,243,239,17,25,8,135\")),bytes(abi.encode(\"7,89,55,105,155,42,80,75,92,154,149,73,217,4,221,18,174,75,209,6,19,0,21,76,113,124,233,191,241,47,114,77\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.592ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"k4s3uy\"",
              "sol": "\"k4s3uy\""
            },
            {
              "js": "[[144,175,185,6,47,43,165,71,55,143,215,254,196,54,54,197,153,39,208,196,136,46,130,147,92,56,214,49,217,67,235,161],[224,92,41,218,20,222,203,27,192,193,118,246,76,241,121,52,78,16,92,170,181,191,168,233,221,233,29,252,84,253,65,233],[179,187,198,252,2,181,75,232,35,80,40,129,99,248,156,34,132,250,55,191,56,210,151,101,57,53,158,212,56,71,213,75],[181,155,53,37,143,52,12,0,176,178,148,38,222,24,244,153,188,11,200,95,183,107,245,126,10,159,114,14,197,15,122,10],[72,174,51,7,141,133,143,99,216,224,79,79,70,14,251,73,243,176,55,149,33,110,63,80,92,151,97,154,224,82,137,217]]",
              "sol": "[bytes(abi.encode(\"144,175,185,6,47,43,165,71,55,143,215,254,196,54,54,197,153,39,208,196,136,46,130,147,92,56,214,49,217,67,235,161\")),bytes(abi.encode(\"224,92,41,218,20,222,203,27,192,193,118,246,76,241,121,52,78,16,92,170,181,191,168,233,221,233,29,252,84,253,65,233\")),bytes(abi.encode(\"179,187,198,252,2,181,75,232,35,80,40,129,99,248,156,34,132,250,55,191,56,210,151,101,57,53,158,212,56,71,213,75\")),bytes(abi.encode(\"181,155,53,37,143,52,12,0,176,178,148,38,222,24,244,153,188,11,200,95,183,107,245,126,10,159,114,14,197,15,122,10\")),bytes(abi.encode(\"72,174,51,7,141,133,143,99,216,224,79,79,70,14,251,73,243,176,55,149,33,110,63,80,92,151,97,154,224,82,137,217\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.593ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[186]",
              "sol": "bytes1(\"186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.593ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.593ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.594ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.594ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.594ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.595ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"1i754l\"",
              "sol": "\"1i754l\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.595ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"a2wdu\"",
              "sol": "\"a2wdu\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.595ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"a2wdu\"",
              "sol": "\"a2wdu\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.596ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"6wkqvj\"",
              "sol": "\"6wkqvj\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.596ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"gwt3nn\"",
              "sol": "\"gwt3nn\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.596ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"k4s3uy\"",
              "sol": "\"k4s3uy\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.597ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.597ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"sr7fs\"",
              "sol": "\"sr7fs\""
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.599ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.599ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"g97v3\"",
              "sol": "\"g97v3\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.600ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.601ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"gwt3nn\",\"mkqw7\",\"sr7fs\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"gwt3nn\"),string(\"mkqw7\"),string(\"sr7fs\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.602ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[26,150,73,85,40,83,71,12,59,150,189,79,181,8,129,181,129,209,118,25,24,6,247,29,227,94,179,243,59,66,154,135],[165,213,22,190,136,183,205,212,212,219,83,99,66,54,37,44,19,14,238,99,216,46,134,6,28,119,137,188,85,218,51,60],[11,128,175,23,133,204,109,3,24,140,121,227,135,76,21,213,46,152,240,80,238,123,27,3,135,213,48,16,147,184,211,22],[146,174,146,145,251,169,161,70,64,156,236,178,84,249,195,111,118,31,42,225,41,94,25,37,162,185,10,32,178,251,78,65],[177,169,71,239,58,13,217,169,232,254,147,207,121,228,184,225,143,248,206,226,187,205,174,254,156,76,110,119,205,220,219,144],[35,102,229,166,254,25,7,51,99,225,78,172,122,243,218,163,99,15,97,107,209,160,151,59,46,246,12,37,20,236,152,113],[32,150,205,74,115,97,250,157,45,99,21,65,72,225,119,16,8,29,100,206,196,180,36,248,212,194,46,32,5,203,116,130],[211,241,111,89,121,149,244,140,27,92,225,78,96,57,139,7,14,215,87,108,51,79,26,27,160,3,129,223,172,182,126,104],[89,81,119,197,241,49,169,140,120,65,223,33,135,68,92,66,138,26,127,214,107,20,118,192,25,84,253,189,79,9,6,148]]",
              "sol": "[bytes(abi.encode(\"26,150,73,85,40,83,71,12,59,150,189,79,181,8,129,181,129,209,118,25,24,6,247,29,227,94,179,243,59,66,154,135\")),bytes(abi.encode(\"165,213,22,190,136,183,205,212,212,219,83,99,66,54,37,44,19,14,238,99,216,46,134,6,28,119,137,188,85,218,51,60\")),bytes(abi.encode(\"11,128,175,23,133,204,109,3,24,140,121,227,135,76,21,213,46,152,240,80,238,123,27,3,135,213,48,16,147,184,211,22\")),bytes(abi.encode(\"146,174,146,145,251,169,161,70,64,156,236,178,84,249,195,111,118,31,42,225,41,94,25,37,162,185,10,32,178,251,78,65\")),bytes(abi.encode(\"177,169,71,239,58,13,217,169,232,254,147,207,121,228,184,225,143,248,206,226,187,205,174,254,156,76,110,119,205,220,219,144\")),bytes(abi.encode(\"35,102,229,166,254,25,7,51,99,225,78,172,122,243,218,163,99,15,97,107,209,160,151,59,46,246,12,37,20,236,152,113\")),bytes(abi.encode(\"32,150,205,74,115,97,250,157,45,99,21,65,72,225,119,16,8,29,100,206,196,180,36,248,212,194,46,32,5,203,116,130\")),bytes(abi.encode(\"211,241,111,89,121,149,244,140,27,92,225,78,96,57,139,7,14,215,87,108,51,79,26,27,160,3,129,223,172,182,126,104\")),bytes(abi.encode(\"89,81,119,197,241,49,169,140,120,65,223,33,135,68,92,66,138,26,127,214,107,20,118,192,25,84,253,189,79,9,6,148\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.603ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.604ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[82,122,172,253,173,159,66,140,209,103,33,85,62,189,24,189,16,149,91,67,101,142,163,49,179,51,67,157,95,127,251,201]",
              "sol": "stringToBytes32(\"82,122,172,253,173,159,66,140,209,103,33,85,62,189,24,189,16,149,91,67,101,142,163,49,179,51,67,157,95,127,251,201\")"
            },
            {
              "js": "[121,145,232,64,2,86,81,34,3,251,48,4,218,151,111,55,76,179,227,96,17,242,100,86,77,27,90,194,125,225,100,56]",
              "sol": "stringToBytes32(\"121,145,232,64,2,86,81,34,3,251,48,4,218,151,111,55,76,179,227,96,17,242,100,86,77,27,90,194,125,225,100,56\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.604ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[86,179,19,34,22,4,183,97,255,72,25,182,207,101,164,135,18,108,214,47,32,215,241,236,47,89,39,150,48,25,88,90]",
              "sol": "stringToBytes32(\"86,179,19,34,22,4,183,97,255,72,25,182,207,101,164,135,18,108,214,47,32,215,241,236,47,89,39,150,48,25,88,90\")"
            },
            {
              "js": "[227,200,198,104,36,193,137,19,89,151,145,79,16,107,227,25,166,203,118,185,252,223,70,215,234,162,191,207,220,241,193,134]",
              "sol": "abi.encode(\"227,200,198,104,36,193,137,19,89,151,145,79,16,107,227,25,166,203,118,185,252,223,70,215,234,162,191,207,220,241,193,134\")"
            },
            {
              "js": "[179,208,163,225,44,236,223,226,171,193,62,196,228,75,252,99,27,43,44,122,141,74,206,134,140,218,86,173,171,195,119,135]",
              "sol": "abi.encode(\"179,208,163,225,44,236,223,226,171,193,62,196,228,75,252,99,27,43,44,122,141,74,206,134,140,218,86,173,171,195,119,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.605ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[16,127,62,255,136,65,78,172,141,4,224,86,206,35,192,185,167,102,42,69,155,180,157,248,99,54,14,221,146,46,63,39]",
              "sol": "abi.encode(\"16,127,62,255,136,65,78,172,141,4,224,86,206,35,192,185,167,102,42,69,155,180,157,248,99,54,14,221,146,46,63,39\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[50,41,246,217,117,189,220,254,34,134,119,175,54,59,20,148,238,108,203,200,107,179,159,115,139,211,27,153,104,176,166,112]",
              "sol": "abi.encode(\"50,41,246,217,117,189,220,254,34,134,119,175,54,59,20,148,238,108,203,200,107,179,159,115,139,211,27,153,104,176,166,112\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.606ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[202,188,89,96,167,66,79,141,154,120,184,187,88,15,80,55,188,97,34,62,104,61,183,76,240,44,63,27,221,123,215,153]",
              "sol": "stringToBytes32(\"202,188,89,96,167,66,79,141,154,120,184,187,88,15,80,55,188,97,34,62,104,61,183,76,240,44,63,27,221,123,215,153\")"
            },
            {
              "js": "\"pigwm\"",
              "sol": "\"pigwm\""
            },
            {
              "js": "[222,219,179,35,172,20,65,131,222,214,112,95,111,78,230,54,133,178,152,154,3,204,215,239,15,101,61,166,238,128,131,55]",
              "sol": "abi.encode(\"222,219,179,35,172,20,65,131,222,214,112,95,111,78,230,54,133,178,152,154,3,204,215,239,15,101,61,166,238,128,131,55\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[230,89,145,240,8,193,176,3,57,27,45,144,46,9,79,72,16,94,218,185,240,121,206,189,185,80,81,128,19,95,120,108]",
              "sol": "stringToBytes32(\"230,89,145,240,8,193,176,3,57,27,45,144,46,9,79,72,16,94,218,185,240,121,206,189,185,80,81,128,19,95,120,108\")"
            },
            {
              "js": "\"3jxgks\"",
              "sol": "\"3jxgks\""
            },
            {
              "js": "[194,203,104,23,105,57,69,179,7,235,132,245,230,154,90,224,190,59,146,9,167,214,230,175,250,103,115,53,45,221,81,236]",
              "sol": "abi.encode(\"194,203,104,23,105,57,69,179,7,235,132,245,230,154,90,224,190,59,146,9,167,214,230,175,250,103,115,53,45,221,81,236\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.607ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[91,148,97,13,110,2,51,103,69,180,209,165,73,50,83,250,13,249,89,158,203,224,46,96,91,159,108,163,132,191,106,19]",
              "sol": "stringToBytes32(\"91,148,97,13,110,2,51,103,69,180,209,165,73,50,83,250,13,249,89,158,203,224,46,96,91,159,108,163,132,191,106,19\")"
            },
            {
              "js": "[49,163,130,231,15,186,8,41,37,155,186,153,141,65,59,99,201,64,85,80,189,10,24,143,209,167,0,18,72,27,207,223]",
              "sol": "abi.encode(\"49,163,130,231,15,186,8,41,37,155,186,153,141,65,59,99,201,64,85,80,189,10,24,143,209,167,0,18,72,27,207,223\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[91,148,97,13,110,2,51,103,69,180,209,165,73,50,83,250,13,249,89,158,203,224,46,96,91,159,108,163,132,191,106,19]",
                "sol": "stringToBytes32(\"91,148,97,13,110,2,51,103,69,180,209,165,73,50,83,250,13,249,89,158,203,224,46,96,91,159,108,163,132,191,106,19\")"
              },
              {
                "js": "[13,142,118,182,114,36,218,166,189,42,120,202,48,124,3,121,158,169,242,6,178,53,64,190,96,186,48,65,116,4,96,110,4]",
                "sol": "bytes33(\"13,142,118,182,114,36,218,166,189,42,120,202,48,124,3,121,158,169,242,6,178,53,64,190,96,186,48,65,116,4,96,110,4\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.608ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[155,100,6,233,98,253,86,15,108,161,69,110,57,46,250,49,20,15,188,246,215,81,209,109,198,24,48,73,7,133,28,193]",
              "sol": "abi.encode(\"155,100,6,233,98,253,86,15,108,161,69,110,57,46,250,49,20,15,188,246,215,81,209,109,198,24,48,73,7,133,28,193\")"
            },
            {
              "js": "[165,228,123,253,46,203,143,44,136,246,129,42,227,152,189,219,251,71,40,28,229,230,65,49,3,149,74,165,34,38,95,163]",
              "sol": "stringToBytes32(\"165,228,123,253,46,203,143,44,136,246,129,42,227,152,189,219,251,71,40,28,229,230,65,49,3,149,74,165,34,38,95,163\")"
            },
            {
              "js": "[80,40,35,223,227,30,51,242,127,122,156,77,156,160,138,42,63,235,100,60,209,89,244,163,252,135,97,188,242,41,2,135]",
              "sol": "abi.encode(\"80,40,35,223,227,30,51,242,127,122,156,77,156,160,138,42,63,235,100,60,209,89,244,163,252,135,97,188,242,41,2,135\")"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[169,148,160,181,182,47,112,191,126,244,211,139,16,126,145,252,14,153,14,8,1,87,162,17,126,191,44,88,128,115,211,116]",
              "sol": "abi.encode(\"169,148,160,181,182,47,112,191,126,244,211,139,16,126,145,252,14,153,14,8,1,87,162,17,126,191,44,88,128,115,211,116\")"
            },
            {
              "js": "[216,229,236,120,80,69,181,37,32,14,15,148,149,56,18,109,195,251,212,248,46,83,219,212,203,90,8,209,150,137,59,129]",
              "sol": "stringToBytes32(\"216,229,236,120,80,69,181,37,32,14,15,148,149,56,18,109,195,251,212,248,46,83,219,212,203,90,8,209,150,137,59,129\")"
            },
            {
              "js": "[29,149,43,111,93,238,174,120,79,6,248,8,106,160,99,2,149,146,193,135,204,237,189,229,54,241,157,57,43,79,37,82]",
              "sol": "abi.encode(\"29,149,43,111,93,238,174,120,79,6,248,8,106,160,99,2,149,146,193,135,204,237,189,229,54,241,157,57,43,79,37,82\")"
            },
            {
              "js": "\"d4a09\"",
              "sol": "\"d4a09\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[181,216,97,132,250,141,166,184,32,80,216,206,210,168,76,213,70,71,199,49,66,79,126,174,243,186,200,229,136,22,90,51]",
              "sol": "abi.encode(\"181,216,97,132,250,141,166,184,32,80,216,206,210,168,76,213,70,71,199,49,66,79,126,174,243,186,200,229,136,22,90,51\")"
            },
            {
              "js": "[217,177,133,18,247,172,67,185,81,230,16,118,30,113,38,14,81,189,155,45,67,178,86,172,69,34,102,53,174,217,130,93]",
              "sol": "stringToBytes32(\"217,177,133,18,247,172,67,185,81,230,16,118,30,113,38,14,81,189,155,45,67,178,86,172,69,34,102,53,174,217,130,93\")"
            },
            {
              "js": "[169,226,211,184,51,218,134,227,48,92,207,165,57,110,86,29,16,164,48,109,132,17,232,90,150,63,72,126,237,88,199,189]",
              "sol": "abi.encode(\"169,226,211,184,51,218,134,227,48,92,207,165,57,110,86,29,16,164,48,109,132,17,232,90,150,63,72,126,237,88,199,189\")"
            },
            {
              "js": "\"sr7fs\"",
              "sol": "\"sr7fs\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[69,164,182,188,91,225,204,204,102,121,35,117,219,131,191,143,183,123,167,224,69,92,151,40,36,172,65,86,192,87,225,107]",
              "sol": "abi.encode(\"69,164,182,188,91,225,204,204,102,121,35,117,219,131,191,143,183,123,167,224,69,92,151,40,36,172,65,86,192,87,225,107\")"
            },
            {
              "js": "[74,172,81,208,245,89,26,243,193,234,109,164,247,233,159,128,119,241,222,78,252,222,37,106,245,202,96,77,75,126,20,236]",
              "sol": "stringToBytes32(\"74,172,81,208,245,89,26,243,193,234,109,164,247,233,159,128,119,241,222,78,252,222,37,106,245,202,96,77,75,126,20,236\")"
            },
            {
              "js": "[204,218,112,106,44,137,143,63,231,100,169,147,235,117,160,180,131,133,11,61,201,154,103,133,225,236,79,182,174,102,7,188]",
              "sol": "abi.encode(\"204,218,112,106,44,137,143,63,231,100,169,147,235,117,160,180,131,133,11,61,201,154,103,133,225,236,79,182,174,102,7,188\")"
            },
            {
              "js": "\"bv3sna\"",
              "sol": "\"bv3sna\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[1,234,21,159,55,152,87,222,57,33,1,82,57,5,110,23,92,5,153,231,206,55,252,84,25,254,227,157,90,231,192,19]",
              "sol": "abi.encode(\"1,234,21,159,55,152,87,222,57,33,1,82,57,5,110,23,92,5,153,231,206,55,252,84,25,254,227,157,90,231,192,19\")"
            },
            {
              "js": "[198,102,255,26,113,154,238,233,32,247,13,252,151,46,35,182,95,135,215,228,24,191,22,84,168,155,246,168,174,132,170,138]",
              "sol": "stringToBytes32(\"198,102,255,26,113,154,238,233,32,247,13,252,151,46,35,182,95,135,215,228,24,191,22,84,168,155,246,168,174,132,170,138\")"
            },
            {
              "js": "[231,25,210,218,135,13,92,193,233,94,234,241,102,172,93,10,5,95,90,99,127,126,123,127,157,115,75,225,241,149,141,22]",
              "sol": "abi.encode(\"231,25,210,218,135,13,92,193,233,94,234,241,102,172,93,10,5,95,90,99,127,126,123,127,157,115,75,225,241,149,141,22\")"
            },
            {
              "js": "\"a2wdu\"",
              "sol": "\"a2wdu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[63,18,55,183,247,208,25,219,247,10,64,41,167,157,117,255,114,128,225,173,66,36,12,100,158,150,95,117,19,39,15,183]",
              "sol": "abi.encode(\"63,18,55,183,247,208,25,219,247,10,64,41,167,157,117,255,114,128,225,173,66,36,12,100,158,150,95,117,19,39,15,183\")"
            },
            {
              "js": "[27,207,227,30,151,51,28,30,217,154,70,37,188,232,89,19,181,245,113,208,130,168,30,88,219,182,158,195,45,115,252,100]",
              "sol": "stringToBytes32(\"27,207,227,30,151,51,28,30,217,154,70,37,188,232,89,19,181,245,113,208,130,168,30,88,219,182,158,195,45,115,252,100\")"
            },
            {
              "js": "[148,252,0,248,217,35,185,12,111,164,31,22,179,121,94,182,65,93,128,159,36,106,129,113,8,195,227,191,86,167,57,139]",
              "sol": "abi.encode(\"148,252,0,248,217,35,185,12,111,164,31,22,179,121,94,182,65,93,128,159,36,106,129,113,8,195,227,191,86,167,57,139\")"
            },
            {
              "js": "\"pigwm\"",
              "sol": "\"pigwm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[16,151,123,167,172,84,135,156,224,246,228,126,107,157,43,182,107,59,77,247,205,142,110,95,217,176,83,179,112,123,54,101]",
              "sol": "abi.encode(\"16,151,123,167,172,84,135,156,224,246,228,126,107,157,43,182,107,59,77,247,205,142,110,95,217,176,83,179,112,123,54,101\")"
            },
            {
              "js": "[204,192,192,50,222,176,183,170,191,103,123,94,149,21,167,82,174,189,226,77,3,246,120,77,244,233,255,124,113,18,210,18]",
              "sol": "stringToBytes32(\"204,192,192,50,222,176,183,170,191,103,123,94,149,21,167,82,174,189,226,77,3,246,120,77,244,233,255,124,113,18,210,18\")"
            },
            {
              "js": "[124,136,196,171,13,114,193,154,41,34,101,100,84,108,6,140,155,245,253,191,241,121,1,95,181,215,218,183,6,196,156,59]",
              "sol": "abi.encode(\"124,136,196,171,13,114,193,154,41,34,101,100,84,108,6,140,155,245,253,191,241,121,1,95,181,215,218,183,6,196,156,59\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[223,82,162,212,93,190,228,72,61,145,21,169,141,170,107,187,85,165,62,95,249,191,101,124,110,22,240,42,183,219,91,82]",
              "sol": "abi.encode(\"223,82,162,212,93,190,228,72,61,145,21,169,141,170,107,187,85,165,62,95,249,191,101,124,110,22,240,42,183,219,91,82\")"
            },
            {
              "js": "[89,213,185,65,91,34,29,5,62,140,233,171,198,129,32,205,68,19,110,240,159,66,33,206,10,213,134,122,232,87,18,142]",
              "sol": "stringToBytes32(\"89,213,185,65,91,34,29,5,62,140,233,171,198,129,32,205,68,19,110,240,159,66,33,206,10,213,134,122,232,87,18,142\")"
            },
            {
              "js": "[248,9,183,165,105,39,126,26,19,84,115,131,61,3,49,213,97,42,189,244,233,90,66,79,41,117,127,86,126,109,214,187]",
              "sol": "abi.encode(\"248,9,183,165,105,39,126,26,19,84,115,131,61,3,49,213,97,42,189,244,233,90,66,79,41,117,127,86,126,109,214,187\")"
            },
            {
              "js": "\"pigwm\"",
              "sol": "\"pigwm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.619ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[171,23,86,182,194,219,105,186,204,118,95,103,166,180,248,244,235,41,80,198,115,223,170,124,126,193,105,42,60,204,99,203]",
              "sol": "abi.encode(\"171,23,86,182,194,219,105,186,204,118,95,103,166,180,248,244,235,41,80,198,115,223,170,124,126,193,105,42,60,204,99,203\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "[174,159,48,65,21,129,127,8,108,253,226,225,115,247,121,234,55,191,121,29,97,180,21,186,88,137,70,77,71,135,254,160]",
              "sol": "abi.encode(\"174,159,48,65,21,129,127,8,108,253,226,225,115,247,121,234,55,191,121,29,97,180,21,186,88,137,70,77,71,135,254,160\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.620ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[238,34,159,225,107,248,31,14,101,156,117,155,77,131,14,172,238,79,123,253,167,194,242,166,165,30,77,132,182,60,146,165]",
              "sol": "stringToBytes32(\"238,34,159,225,107,248,31,14,101,156,117,155,77,131,14,172,238,79,123,253,167,194,242,166,165,30,77,132,182,60,146,165\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[230,38,153,40,195,131,176,222,21,219,144,200,94,251,87,31,7,206,88,86,160,97,84,175,14,196,166,15,82,36,18,205]",
              "sol": "stringToBytes32(\"230,38,153,40,195,131,176,222,21,219,144,200,94,251,87,31,7,206,88,86,160,97,84,175,14,196,166,15,82,36,18,205\")"
            },
            {
              "js": "[191,21,124,156,163,167,39,132,246,110,127,193,147,101,188,203,116,42,226,217,250,250,196,216,65,82,227,55,183,177,180,178]",
              "sol": "stringToBytes32(\"191,21,124,156,163,167,39,132,246,110,127,193,147,101,188,203,116,42,226,217,250,250,196,216,65,82,227,55,183,177,180,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.621ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[53,185,105,115,218,96,233,0,0,82,210,88,63,193,34,224,207,32,31,230,190,177,43,171,63,210,167,7,23,218,13,138]",
              "sol": "stringToBytes32(\"53,185,105,115,218,96,233,0,0,82,210,88,63,193,34,224,207,32,31,230,190,177,43,171,63,210,167,7,23,218,13,138\")"
            },
            {
              "js": "[13,7,183,136,44,218,142,213,253,154,217,52,91,19,141,43,199,45,164,29,21,213,72,115,17,55,48,37,53,195,205,9,42,22,217,46,109,93,178,20,113,88,245,157,78,216,86,179,124,119,43,109,69,223,1,127,172,106,172,104,103,27,108,197,249,168,26,59,183,63,182]",
              "sol": "abi.encode(\"13,7,183,136,44,218,142,213,253,154,217,52,91,19,141,43,199,45,164,29,21,213,72,115,17,55,48,37,53,195,205,9,42,22,217,46,109,93,178,20,113,88,245,157,78,216,86,179,124,119,43,109,69,223,1,127,172,106,172,104,103,27,108,197,249,168,26,59,183,63,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[156,172,56,77,9,215,23,111,40,139,14,188,202,111,219,25,233,248,145,148,172,195,100,161,36,195,241,67,150,182,93,119]",
              "sol": "stringToBytes32(\"156,172,56,77,9,215,23,111,40,139,14,188,202,111,219,25,233,248,145,148,172,195,100,161,36,195,241,67,150,182,93,119\")"
            },
            {
              "js": "[239,100,247,228,48,251,153,9,145,164,104,154,38,213,193,123,195,209,135,172,195,26,89,255,59,63,28,222,141,238,155,0,134,4,155,208,38,35,34,33,70,24,179,161,97,161,32,201,29,47,72,243,247,216,176,209,141,128,178,26,140,111,108,166,190]",
              "sol": "abi.encode(\"239,100,247,228,48,251,153,9,145,164,104,154,38,213,193,123,195,209,135,172,195,26,89,255,59,63,28,222,141,238,155,0,134,4,155,208,38,35,34,33,70,24,179,161,97,161,32,201,29,47,72,243,247,216,176,209,141,128,178,26,140,111,108,166,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.622ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.623ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[60,10]",
              "sol": "[uint(60),uint(10)]"
            },
            {
              "js": "[[1025,25],[45,20]]",
              "sol": "[[uint(1025),uint(25)],[uint(45),uint(20)]]"
            },
            {
              "js": "[64,101]",
              "sol": "[uint(64),uint(101)]"
            },
            {
              "js": "[200000,1532892064]",
              "sol": "[uint(200000),uint(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.626ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.626ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[25,26,162,101,29,7,128,6,31]",
              "sol": "[uint(25),uint(26),uint(162),uint(101),uint(29),uint(7),uint(128),uint(6),uint(31)]"
            },
            {
              "js": "{\"A\": {\"X\": 86,\"Y\": 96},\"B\": {\"X\": [27,17],\"Y\": [160,101]},\"C\": {\"X\": 19,\"Y\": 1024}}",
              "sol": "Verifier.Proof(Pairing.G1Point(86,96),Pairing.G2Point([uint(27),uint(17)],[uint(160),uint(101)]),Pairing.G1Point(19,1024))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[200000,65,33,57,69,1,49,18,33,18]",
              "sol": "[uint(200000),uint(65),uint(33),uint(57),uint(69),uint(1),uint(49),uint(18),uint(33),uint(18)]"
            },
            {
              "js": "{\"A\": {\"X\": 128,\"Y\": 16},\"B\": {\"X\": [11,2014223716],\"Y\": [25,46]},\"C\": {\"X\": 19,\"Y\": 22}}",
              "sol": "Verifier.Proof(Pairing.G1Point(128,16),Pairing.G2Point([uint(11),uint(2014223716)],[uint(25),uint(46)]),Pairing.G1Point(19,22))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.631ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.632ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.632ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "48",
                "sol": "48"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"accounts[2]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.634ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.635ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "accounts[9]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.636ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.636ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.637ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.638ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "[124,81,187,206,81,171,3,92,166,47,162,48,187,93,121,236,192,115,113,219,87,79,162,152,11,53,184,16,142,77,240,242]",
              "sol": "abi.encode(\"124,81,187,206,81,171,3,92,166,47,162,48,187,93,121,236,192,115,113,219,87,79,162,152,11,53,184,16,142,77,240,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "[124,81,187,206,81,171,3,92,166,47,162,48,187,93,121,236,192,115,113,219,87,79,162,152,11,53,184,16,142,77,240,242]",
                "sol": "abi.encode(\"124,81,187,206,81,171,3,92,166,47,162,48,187,93,121,236,192,115,113,219,87,79,162,152,11,53,184,16,142,77,240,242\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.640ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.641ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[92,155,96,51]",
              "sol": "bytes4(\"92,155,96,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.642ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.643ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.643ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1025",
                "sol": "1025"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.644ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "127",
                "sol": "127"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.644ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[62,211,73,56,75,132,171,193,89,151,187,144,54,164,140,241,58,26,16,146,44,80,62,138,76,149,216,29,3,38,224,234]",
              "sol": "abi.encode(\"62,211,73,56,75,132,171,193,89,151,187,144,54,164,140,241,58,26,16,146,44,80,62,138,76,149,216,29,3,38,224,234\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "[93,210,220,5,90,217,197,251,74,252,76,19,198,131,227,218,3,81,155,112,121,117,39,78,40,247,70,224,73,52,57,248]",
              "sol": "abi.encode(\"93,210,220,5,90,217,197,251,74,252,76,19,198,131,227,218,3,81,155,112,121,117,39,78,40,247,70,224,73,52,57,248\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.646ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.649ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[56,88]",
              "sol": "[uint(56),uint(88)]"
            },
            {
              "js": "[[103,58],[9,17]]",
              "sol": "[[uint(103),uint(58)],[uint(9),uint(17)]]"
            },
            {
              "js": "[17,60]",
              "sol": "[uint(17),uint(60)]"
            },
            {
              "js": "[128,127]",
              "sol": "[uint(128),uint(127)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.650ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.651ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.652ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.652ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.653ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.654ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.656ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.656ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.656ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.658ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.659ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:36:45.660ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.661ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:36:45.661ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}