,{
  "2020-11-13T12:42:45.885ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:43:00.920ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:43:16.035ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:43:31.049ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:43:46.002ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:01.301ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.687ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [67,179,19,71,247,78,126,226,55,230,180,241,226,171,135,250,57,98,126,190,124,186,177,79,6,19,82,140,166,103,95,127],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"67,179,19,71,247,78,126,226,55,230,180,241,226,171,135,250,57,98,126,190,124,186,177,79,6,19,82,140,166,103,95,127\"),199999)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.688ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [46,177,167,169,191,58,180,174,183,217,0,53,73,92,160,119,208,71,81,95,240,238,87,145,119,192,39,48,12,117,49,5],\"capacity\": 18}",
              "sol": "Buffer.buffer(abi.encode(\"46,177,167,169,191,58,180,174,183,217,0,53,73,92,160,119,208,71,81,95,240,238,87,145,119,192,39,48,12,117,49,5\"),18)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [190,57,203,231,1,149,99,254,244,232,31,10,149,134,163,110,146,185,130,247,51,217,44,177,185,235,228,143,80,161,151,176],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"190,57,203,231,1,149,99,254,244,232,31,10,149,134,163,110,146,185,130,247,51,217,44,177,185,235,228,143,80,161,151,176\"),69)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.689ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [249,248,16,51,244,129,172,252,4,165,144,22,169,96,88,195,32,230,64,139,251,18,65,3,193,108,18,208,159,14,54,201],\"capacity\": 31}",
              "sol": "Buffer.buffer(abi.encode(\"249,248,16,51,244,129,172,252,4,165,144,22,169,96,88,195,32,230,64,139,251,18,65,3,193,108,18,208,159,14,54,201\"),31)"
            },
            {
              "js": "[0,240,129,180,118,50,129,20,64,45,209,194,64,177,176,140,60,252,36,23,61,1,103,56,161,158,186,202,230,82,219,134]",
              "sol": "abi.encode(\"0,240,129,180,118,50,129,20,64,45,209,194,64,177,176,140,60,252,36,23,61,1,103,56,161,158,186,202,230,82,219,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.690ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [244,185,222,104,133,137,163,14,82,100,93,186,184,123,104,239,177,37,217,74,198,129,161,154,94,137,165,131,138,171,34,3],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"244,185,222,104,133,137,163,14,82,100,93,186,184,123,104,239,177,37,217,74,198,129,161,154,94,137,165,131,138,171,34,3\"),129)"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.690ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [159,182,28,186,72,14,253,56,158,170,94,92,166,228,171,59,0,154,230,119,39,192,69,11,120,49,0,176,40,67,59,90],\"capacity\": 200001}",
              "sol": "Buffer.buffer(abi.encode(\"159,182,28,186,72,14,253,56,158,170,94,92,166,228,171,59,0,154,230,119,39,192,69,11,120,49,0,176,40,67,59,90\"),200001)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.691ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [222,194,174,117,106,196,93,139,109,96,57,41,5,227,7,77,217,249,225,143,153,106,203,38,129,98,235,54,20,6,164,177],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"222,194,174,117,106,196,93,139,109,96,57,41,5,227,7,77,217,249,225,143,153,106,203,38,129,98,235,54,20,6,164,177\"),21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.691ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [196,193,55,222,67,53,202,1,231,148,22,173,95,195,44,101,98,0,86,240,14,198,102,121,48,100,182,112,207,198,65,173],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"196,193,55,222,67,53,202,1,231,148,22,173,95,195,44,101,98,0,86,240,14,198,102,121,48,100,182,112,207,198,65,173\"),160)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.699ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.699ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.701ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 95,\"Y\": 2014223716}",
              "sol": "Pairing.G1Point(95,2014223716)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.702ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 1023,\"Y\": 18}",
              "sol": "Pairing.G1Point(1023,18)"
            },
            {
              "js": "{\"X\": 257,\"Y\": 30}",
              "sol": "Pairing.G1Point(257,30)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.702ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [9,162],\"Y\": [2,55]}",
              "sol": "Pairing.G2Point([uint(9),uint(162)],[uint(2),uint(55)])"
            },
            {
              "js": "{\"X\": [257,56],\"Y\": [48,70]}",
              "sol": "Pairing.G2Point([uint(257),uint(56)],[uint(48),uint(70)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.703ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 87,\"Y\": 59}",
              "sol": "Pairing.G1Point(87,59)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.704ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 56,\"Y\": 162},{\"X\": 57,\"Y\": 60},{\"X\": 87,\"Y\": 20},{\"X\": 23,\"Y\": 30},{\"X\": 6,\"Y\": 97},{\"X\": 101,\"Y\": 18},{\"X\": 31,\"Y\": 4},{\"X\": 18,\"Y\": 199999},{\"X\": 11,\"Y\": 128}]",
              "sol": "[Pairing.G1Point(56,162),Pairing.G1Point(57,60),Pairing.G1Point(87,20),Pairing.G1Point(23,30),Pairing.G1Point(6,97),Pairing.G1Point(101,18),Pairing.G1Point(31,4),Pairing.G1Point(18,199999),Pairing.G1Point(11,128)]"
            },
            {
              "js": "[{\"X\": [31,9],\"Y\": [20,46]},{\"X\": [2014223716,57],\"Y\": [200001,102]},{\"X\": [66,1532892064],\"Y\": [2,70]},{\"X\": [96,32],\"Y\": [1532892062,15]},{\"X\": [33,1532892062],\"Y\": [66,26]},{\"X\": [5,1],\"Y\": [66,162]},{\"X\": [18,2014223716],\"Y\": [1024,30]},{\"X\": [86,3],\"Y\": [7,54]},{\"X\": [70,96],\"Y\": [46,3]}]",
              "sol": "[Pairing.G2Point([uint(31),uint(9)],[uint(20),uint(46)]),Pairing.G2Point([uint(2014223716),uint(57)],[uint(200001),uint(102)]),Pairing.G2Point([uint(66),uint(1532892064)],[uint(2),uint(70)]),Pairing.G2Point([uint(96),uint(32)],[uint(1532892062),uint(15)]),Pairing.G2Point([uint(33),uint(1532892062)],[uint(66),uint(26)]),Pairing.G2Point([uint(5),uint(1)],[uint(66),uint(162)]),Pairing.G2Point([uint(18),uint(2014223716)],[uint(1024),uint(30)]),Pairing.G2Point([uint(86),uint(3)],[uint(7),uint(54)]),Pairing.G2Point([uint(70),uint(96)],[uint(46),uint(3)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 5,\"Y\": 48},{\"X\": 64,\"Y\": 25},{\"X\": 257,\"Y\": 1023},{\"X\": 0,\"Y\": 257},{\"X\": 3,\"Y\": 18},{\"X\": 61,\"Y\": 2014223715},{\"X\": 60,\"Y\": 102},{\"X\": 1025,\"Y\": 69},{\"X\": 103,\"Y\": 2},{\"X\": 5,\"Y\": 2014223715}]",
                "sol": "[Pairing.G1Point(129,56),Pairing.G1Point(87,1024),Pairing.G1Point(127,10),Pairing.G1Point(101,60),Pairing.G1Point(254,70),Pairing.G1Point(160,1532892063),Pairing.G1Point(96,31),Pairing.G1Point(28,59),Pairing.G1Point(59,129),Pairing.G1Point(24,23)]"
              },
              {
                "js": "[{\"X\": [31,9],\"Y\": [20,46]},{\"X\": [2014223716,57],\"Y\": [200001,102]},{\"X\": [66,1532892064],\"Y\": [2,70]},{\"X\": [96,32],\"Y\": [1532892062,15]},{\"X\": [33,1532892062],\"Y\": [66,26]},{\"X\": [5,1],\"Y\": [66,162]},{\"X\": [18,2014223716],\"Y\": [1024,30]},{\"X\": [86,3],\"Y\": [7,54]},{\"X\": [70,96],\"Y\": [46,3]}]",
                "sol": "[Pairing.G2Point([uint(31),uint(9)],[uint(20),uint(46)]),Pairing.G2Point([uint(2014223716),uint(57)],[uint(200001),uint(102)]),Pairing.G2Point([uint(66),uint(1532892064)],[uint(2),uint(70)]),Pairing.G2Point([uint(96),uint(32)],[uint(1532892062),uint(15)]),Pairing.G2Point([uint(33),uint(1532892062)],[uint(66),uint(26)]),Pairing.G2Point([uint(5),uint(1)],[uint(66),uint(162)]),Pairing.G2Point([uint(18),uint(2014223716)],[uint(1024),uint(30)]),Pairing.G2Point([uint(86),uint(3)],[uint(7),uint(54)]),Pairing.G2Point([uint(70),uint(96)],[uint(46),uint(3)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.713ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 57,\"Y\": 17}",
              "sol": "Pairing.G1Point(57,17)"
            },
            {
              "js": "{\"X\": [21,4],\"Y\": [1024,254]}",
              "sol": "Pairing.G2Point([uint(21),uint(4)],[uint(1024),uint(254)])"
            },
            {
              "js": "{\"X\": 9,\"Y\": 24}",
              "sol": "Pairing.G1Point(9,24)"
            },
            {
              "js": "{\"X\": [7,21],\"Y\": [1532892064,29]}",
              "sol": "Pairing.G2Point([uint(7),uint(21)],[uint(1532892064),uint(29)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.714ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 70,\"Y\": 97}",
              "sol": "Pairing.G1Point(70,97)"
            },
            {
              "js": "{\"X\": [256,3],\"Y\": [47,23]}",
              "sol": "Pairing.G2Point([uint(256),uint(3)],[uint(47),uint(23)])"
            },
            {
              "js": "{\"X\": 88,\"Y\": 69}",
              "sol": "Pairing.G1Point(88,69)"
            },
            {
              "js": "{\"X\": [3,46],\"Y\": [5,160]}",
              "sol": "Pairing.G2Point([uint(3),uint(46)],[uint(5),uint(160)])"
            },
            {
              "js": "{\"X\": 2,\"Y\": 19}",
              "sol": "Pairing.G1Point(2,19)"
            },
            {
              "js": "{\"X\": [2014223714,45],\"Y\": [10,70]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(45)],[uint(10),uint(70)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.722ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.723ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.723ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.724ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.724ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.725ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.726ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.726ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.728ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.729ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.729ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.733ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [70,124,11,84,26,98,68,244,243,64,127,38,90,92,221,4,132,192,174,220,42,181,163,112,247,91,125,96,68,182,214,113],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"70,124,11,84,26,98,68,244,243,64,127,38,90,92,221,4,132,192,174,220,42,181,163,112,247,91,125,96,68,182,214,113\"),65)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.734ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [9,41,179,199,3,252,21,167,59,149,130,60,147,199,46,101,43,239,216,241,248,244,166,38,63,44,249,255,248,126,211,73],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"9,41,179,199,3,252,21,167,59,149,130,60,147,199,46,101,43,239,216,241,248,244,166,38,63,44,249,255,248,126,211,73\"),1532892062)"
            },
            {
              "js": "[169,206,109,127,245,219,212,128,243,30,246,20,51,77,138,238,239,80,152,192,219,122,58,223,88,5,3,210,1,182,251,155]",
              "sol": "abi.encode(\"169,206,109,127,245,219,212,128,243,30,246,20,51,77,138,238,239,80,152,192,219,122,58,223,88,5,3,210,1,182,251,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.734ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [228,116,65,26,195,99,234,13,100,147,50,183,254,128,88,219,155,60,99,35,11,0,168,43,26,187,227,118,41,62,182,158],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"228,116,65,26,195,99,234,13,100,147,50,183,254,128,88,219,155,60,99,35,11,0,168,43,26,187,227,118,41,62,182,158\"),1)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.735ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [246,222,25,97,20,188,191,159,121,0,140,181,9,244,158,132,216,116,89,39,250,231,247,142,102,54,226,21,41,44,227,64],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"246,222,25,97,20,188,191,159,121,0,140,181,9,244,158,132,216,116,89,39,250,231,247,142,102,54,226,21,41,44,227,64\"),2)"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.737ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[55,114,0,225,233,67,126,235,88,88,93,114,103,213,49,229,28,132,81,35,131,154,25,199,170,120,247,105,122,15,18,225]",
              "sol": "stringToBytes32(\"55,114,0,225,233,67,126,235,88,88,93,114,103,213,49,229,28,132,81,35,131,154,25,199,170,120,247,105,122,15,18,225\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.738ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[118,223,99,123,1,255,170,224,69,209,79,199,16,188,10,141,166,63,46,123,152,141,59,145,236,248,108,228,189,64,163,223]",
              "sol": "stringToBytes32(\"118,223,99,123,1,255,170,224,69,209,79,199,16,188,10,141,166,63,46,123,152,141,59,145,236,248,108,228,189,64,163,223\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[253,206,204,131,134,100,99,223,210,94,144,226,79,247,27,31,111,55,78,83,226,246,238,77,89,198,27,245,152,102,42,166]",
              "sol": "abi.encode(\"253,206,204,131,134,100,99,223,210,94,144,226,79,247,27,31,111,55,78,83,226,246,238,77,89,198,27,245,152,102,42,166\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.831ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.832ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.836ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.840ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.841ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.843ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.844ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.856ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.857ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.858ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.859ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.860ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.861ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.863ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"jmv21g\"",
              "sol": "\"jmv21g\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.864ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "[\"0\",\"[\"]",
              "sol": "[string(\"0\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.865ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"agpr8d\",\"Capstones\",\"49vjhd\",\"35gio\"]",
              "sol": "[string(\"agpr8d\"),string(\"Capstones\"),string(\"49vjhd\"),string(\"35gio\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.866ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"c0azn\"",
              "sol": "\"c0azn\""
            },
            {
              "js": "[\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\",\"49vjhd\",\"L\",\"agpr8d\"]",
              "sol": "[string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\"),string(\"49vjhd\"),string(\"L\"),string(\"agpr8d\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.867ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.867ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"57p5en\"",
              "sol": "\"57p5en\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.868ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.868ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"agpr8d\"",
              "sol": "\"agpr8d\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.869ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"tdjhe\"]",
              "sol": "[string(\"tdjhe\")]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.869ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "[\"Capstones\",\"L\"]",
              "sol": "[string(\"Capstones\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.870ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"vafyga\",\"[\"]",
              "sol": "[string(\"vafyga\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.870ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "[\"L\",\"P\"]",
              "sol": "[string(\"L\"),string(\"P\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.871ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"57p5en\"",
              "sol": "\"57p5en\""
            },
            {
              "js": "[\"agpr8d\",\"ohcdyo\"]",
              "sol": "[string(\"agpr8d\"),string(\"ohcdyo\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.871ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"49vjhd\"",
              "sol": "\"49vjhd\""
            },
            {
              "js": "[\"P\",\"57p5en\",\"0\"]",
              "sol": "[string(\"P\"),string(\"57p5en\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.872ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"[\",\"ohcdyo\",\"P\"]",
              "sol": "[string(\"[\"),string(\"ohcdyo\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.873ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"c0azn\"",
              "sol": "\"c0azn\""
            },
            {
              "js": "[\"Capstones\",\"agpr8d\",\"L\"]",
              "sol": "[string(\"Capstones\"),string(\"agpr8d\"),string(\"L\")]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.873ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"35gio\"",
              "sol": "\"35gio\""
            },
            {
              "js": "[\"Capstones\",\"L\",\"4bx8ip\"]",
              "sol": "[string(\"Capstones\"),string(\"L\"),string(\"4bx8ip\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.874ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"49vjhd\",\"57p5en\",\"c0azn\",\"vafyga\"]",
              "sol": "[string(\"49vjhd\"),string(\"57p5en\"),string(\"c0azn\"),string(\"vafyga\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.874ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"49vjhd\",\"vafyga\",\"\\x19Ethereum Signed Message:\\n32\",\"vafyga\"]",
              "sol": "[string(\"49vjhd\"),string(\"vafyga\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"vafyga\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.875ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"35gio\",\"vafyga\",\"vafyga\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"35gio\"),string(\"vafyga\"),string(\"vafyga\")]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.875ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"c0azn\",\"agpr8d\",\"57p5en\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"c0azn\"),string(\"agpr8d\"),string(\"57p5en\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.876ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"wg5p5\"",
              "sol": "\"wg5p5\""
            },
            {
              "js": "[\"sdjjek\",\"ERC1820_ACCEPT_MAGIC\",\"[\",\"Capstones\",\"4bx8ip\"]",
              "sol": "[string(\"sdjjek\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"[\"),string(\"Capstones\"),string(\"4bx8ip\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.877ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"sdjjek\"",
              "sol": "\"sdjjek\""
            },
            {
              "js": "[\"L\",\"ERC1820_ACCEPT_MAGIC\",\"ERC1820_ACCEPT_MAGIC\",\"c0azn\",\"49vjhd\"]",
              "sol": "[string(\"L\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"c0azn\"),string(\"49vjhd\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.878ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"49vjhd\"",
              "sol": "\"49vjhd\""
            },
            {
              "js": "[\"ohcdyo\",\"P\",\"ohcdyo\",\"agpr8d\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"ohcdyo\"),string(\"P\"),string(\"ohcdyo\"),string(\"agpr8d\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.878ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"tdjhe\",\"P\",\"49vjhd\",\"[\",\"L\"]",
              "sol": "[string(\"tdjhe\"),string(\"P\"),string(\"49vjhd\"),string(\"[\"),string(\"L\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.879ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"57p5en\"",
              "sol": "\"57p5en\""
            },
            {
              "js": "[[82,226,32,70,180,130,253,77,54,133,97,42,22,74,168,188,184,9,85,57,135,87,202,82,41,134,168,95,60,158,37,18],[71,246,29,237,19,184,106,135,1,73,84,138,135,252,139,221,248,236,116,81,44,17,199,86,194,130,48,204,123,255,143,114],[227,11,224,162,81,99,118,100,146,158,180,240,134,95,144,12,167,206,171,116,95,197,172,132,10,194,144,82,175,251,169,118],[108,183,251,150,128,207,237,101,208,84,99,83,176,149,49,119,1,38,76,90,132,62,100,248,226,76,48,24,250,211,210,173],[141,148,43,145,14,111,121,149,46,207,132,47,134,248,79,26,129,45,172,142,70,148,186,215,223,204,93,139,216,129,47,117]]",
              "sol": "[bytes(abi.encode(\"82,226,32,70,180,130,253,77,54,133,97,42,22,74,168,188,184,9,85,57,135,87,202,82,41,134,168,95,60,158,37,18\")),bytes(abi.encode(\"71,246,29,237,19,184,106,135,1,73,84,138,135,252,139,221,248,236,116,81,44,17,199,86,194,130,48,204,123,255,143,114\")),bytes(abi.encode(\"227,11,224,162,81,99,118,100,146,158,180,240,134,95,144,12,167,206,171,116,95,197,172,132,10,194,144,82,175,251,169,118\")),bytes(abi.encode(\"108,183,251,150,128,207,237,101,208,84,99,83,176,149,49,119,1,38,76,90,132,62,100,248,226,76,48,24,250,211,210,173\")),bytes(abi.encode(\"141,148,43,145,14,111,121,149,46,207,132,47,134,248,79,26,129,45,172,142,70,148,186,215,223,204,93,139,216,129,47,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.880ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[195,178,68,222,205,28,84,98,166,133,140,183,246,72,200,50,29,65,131,124,234,16,82,87,200,241,220,190,166,99,38,135],[147,110,89,228,152,125,4,1,56,78,249,212,172,225,70,250,130,153,34,117,146,99,175,250,100,235,88,84,171,142,234,138],[38,64,164,13,178,102,26,229,158,208,71,220,248,74,13,115,212,255,111,252,176,146,232,43,7,111,52,193,100,94,17,199]]",
              "sol": "[bytes(abi.encode(\"195,178,68,222,205,28,84,98,166,133,140,183,246,72,200,50,29,65,131,124,234,16,82,87,200,241,220,190,166,99,38,135\")),bytes(abi.encode(\"147,110,89,228,152,125,4,1,56,78,249,212,172,225,70,250,130,153,34,117,146,99,175,250,100,235,88,84,171,142,234,138\")),bytes(abi.encode(\"38,64,164,13,178,102,26,229,158,208,71,220,248,74,13,115,212,255,111,252,176,146,232,43,7,111,52,193,100,94,17,199\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.880ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "[[71,53,219,203,254,20,223,199,43,30,160,236,113,102,180,151,156,192,241,148,78,148,22,13,208,205,41,13,202,88,109,150],[159,245,239,34,140,12,196,62,207,101,226,235,34,221,194,171,52,82,112,151,214,6,174,10,199,205,140,32,34,193,147,162],[123,106,211,209,43,170,115,70,119,23,59,118,218,180,234,234,40,252,105,139,66,104,117,151,132,73,15,127,82,200,57,136],[168,1,206,54,34,41,138,21,92,30,79,201,175,173,158,197,154,128,113,171,18,219,177,196,115,128,117,60,119,26,118,49],[235,161,239,76,116,52,127,182,27,247,47,62,48,53,54,144,174,133,177,60,0,99,132,78,105,237,226,253,99,190,129,196],[61,39,184,252,144,70,140,138,212,65,85,69,165,66,234,85,2,191,46,184,19,22,177,66,221,40,156,253,164,46,170,45],[213,115,117,253,150,32,18,84,250,114,164,204,251,212,135,195,46,72,245,91,27,113,74,116,84,105,68,2,69,153,214,99],[198,170,152,248,207,30,217,242,173,123,136,108,22,127,72,76,96,242,177,16,232,50,216,67,97,247,159,222,55,51,92,116]]",
              "sol": "[bytes(abi.encode(\"71,53,219,203,254,20,223,199,43,30,160,236,113,102,180,151,156,192,241,148,78,148,22,13,208,205,41,13,202,88,109,150\")),bytes(abi.encode(\"159,245,239,34,140,12,196,62,207,101,226,235,34,221,194,171,52,82,112,151,214,6,174,10,199,205,140,32,34,193,147,162\")),bytes(abi.encode(\"123,106,211,209,43,170,115,70,119,23,59,118,218,180,234,234,40,252,105,139,66,104,117,151,132,73,15,127,82,200,57,136\")),bytes(abi.encode(\"168,1,206,54,34,41,138,21,92,30,79,201,175,173,158,197,154,128,113,171,18,219,177,196,115,128,117,60,119,26,118,49\")),bytes(abi.encode(\"235,161,239,76,116,52,127,182,27,247,47,62,48,53,54,144,174,133,177,60,0,99,132,78,105,237,226,253,99,190,129,196\")),bytes(abi.encode(\"61,39,184,252,144,70,140,138,212,65,85,69,165,66,234,85,2,191,46,184,19,22,177,66,221,40,156,253,164,46,170,45\")),bytes(abi.encode(\"213,115,117,253,150,32,18,84,250,114,164,204,251,212,135,195,46,72,245,91,27,113,74,116,84,105,68,2,69,153,214,99\")),bytes(abi.encode(\"198,170,152,248,207,30,217,242,173,123,136,108,22,127,72,76,96,242,177,16,232,50,216,67,97,247,159,222,55,51,92,116\"))]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.881ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "[[111,143,185,158,206,4,96,233,192,93,82,141,17,67,235,130,113,140,109,168,121,174,245,126,85,162,44,183,0,243,43,239],[176,239,183,232,205,189,125,172,162,119,161,109,113,238,136,37,89,202,50,225,16,127,200,95,29,191,93,52,171,46,7,235],[37,123,137,48,255,3,101,15,46,241,191,111,43,68,162,219,91,196,76,137,9,132,129,203,155,52,56,32,50,6,123,149],[102,118,146,77,147,85,152,179,143,211,117,143,19,138,97,127,112,46,113,116,128,26,203,80,130,220,60,0,204,140,211,208],[36,83,253,39,198,189,164,146,190,41,190,164,35,107,109,193,129,41,202,96,191,143,173,212,149,54,209,175,61,99,229,100],[226,105,80,89,192,165,150,88,95,236,101,219,165,254,147,150,246,92,117,172,232,21,86,4,67,84,203,47,217,18,69,118],[216,100,117,74,124,243,241,239,115,93,78,199,71,68,100,91,17,211,242,219,29,132,37,73,146,238,171,10,0,36,207,11],[241,143,173,198,53,156,19,11,162,163,249,65,188,24,172,20,111,149,121,75,19,84,150,11,66,204,46,195,32,47,99,184]]",
              "sol": "[bytes(abi.encode(\"111,143,185,158,206,4,96,233,192,93,82,141,17,67,235,130,113,140,109,168,121,174,245,126,85,162,44,183,0,243,43,239\")),bytes(abi.encode(\"176,239,183,232,205,189,125,172,162,119,161,109,113,238,136,37,89,202,50,225,16,127,200,95,29,191,93,52,171,46,7,235\")),bytes(abi.encode(\"37,123,137,48,255,3,101,15,46,241,191,111,43,68,162,219,91,196,76,137,9,132,129,203,155,52,56,32,50,6,123,149\")),bytes(abi.encode(\"102,118,146,77,147,85,152,179,143,211,117,143,19,138,97,127,112,46,113,116,128,26,203,80,130,220,60,0,204,140,211,208\")),bytes(abi.encode(\"36,83,253,39,198,189,164,146,190,41,190,164,35,107,109,193,129,41,202,96,191,143,173,212,149,54,209,175,61,99,229,100\")),bytes(abi.encode(\"226,105,80,89,192,165,150,88,95,236,101,219,165,254,147,150,246,92,117,172,232,21,86,4,67,84,203,47,217,18,69,118\")),bytes(abi.encode(\"216,100,117,74,124,243,241,239,115,93,78,199,71,68,100,91,17,211,242,219,29,132,37,73,146,238,171,10,0,36,207,11\")),bytes(abi.encode(\"241,143,173,198,53,156,19,11,162,163,249,65,188,24,172,20,111,149,121,75,19,84,150,11,66,204,46,195,32,47,99,184\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.882ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[194,120,78,67,209,10,58,70,210,3,95,186,167,173,0,124,251,78,206,144,34,238,107,210,237,31,244,235,63,86,64,1]]",
              "sol": "[bytes(abi.encode(\"194,120,78,67,209,10,58,70,210,3,95,186,167,173,0,124,251,78,206,144,34,238,107,210,237,31,244,235,63,86,64,1\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.882ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[95,75,21,192,12,152,37,91,159,105,160,164,191,133,105,211,135,183,110,229,251,234,161,171,98,148,14,96,20,156,43,145]]",
              "sol": "[bytes(abi.encode(\"95,75,21,192,12,152,37,91,159,105,160,164,191,133,105,211,135,183,110,229,251,234,161,171,98,148,14,96,20,156,43,145\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.883ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[99,212,227,6,195,16,66,186,89,130,197,242,173,151,206,123,242,35,52,87,60,64,87,34,61,5,156,83,249,247,201,31]]",
              "sol": "[bytes(abi.encode(\"99,212,227,6,195,16,66,186,89,130,197,242,173,151,206,123,242,35,52,87,60,64,87,34,61,5,156,83,249,247,201,31\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.883ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"jmv21g\"",
              "sol": "\"jmv21g\""
            },
            {
              "js": "[[185,229,112,135,253,45,253,21,225,232,242,196,206,223,48,31,191,58,224,29,123,31,249,166,238,160,115,40,14,145,233,216]]",
              "sol": "[bytes(abi.encode(\"185,229,112,135,253,45,253,21,225,232,242,196,206,223,48,31,191,58,224,29,123,31,249,166,238,160,115,40,14,145,233,216\"))]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.884ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ohcdyo\"",
              "sol": "\"ohcdyo\""
            },
            {
              "js": "[[106,213,129,157,37,189,237,212,2,196,129,185,252,110,201,27,72,245,89,94,244,131,79,173,111,16,76,24,83,220,63,189],[177,55,93,92,13,33,61,179,70,148,130,17,204,189,97,85,120,211,193,182,186,174,67,9,30,147,8,61,181,75,25,27]]",
              "sol": "[bytes(abi.encode(\"106,213,129,157,37,189,237,212,2,196,129,185,252,110,201,27,72,245,89,94,244,131,79,173,111,16,76,24,83,220,63,189\")),bytes(abi.encode(\"177,55,93,92,13,33,61,179,70,148,130,17,204,189,97,85,120,211,193,182,186,174,67,9,30,147,8,61,181,75,25,27\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.884ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[33,107,248,54,14,22,131,73,208,22,134,128,58,227,103,31,34,207,110,74,189,147,166,106,79,231,98,66,130,141,200,175],[219,139,43,110,222,123,198,71,141,147,215,191,87,92,124,35,244,41,36,188,206,216,203,200,88,115,133,142,223,141,216,39]]",
              "sol": "[bytes(abi.encode(\"33,107,248,54,14,22,131,73,208,22,134,128,58,227,103,31,34,207,110,74,189,147,166,106,79,231,98,66,130,141,200,175\")),bytes(abi.encode(\"219,139,43,110,222,123,198,71,141,147,215,191,87,92,124,35,244,41,36,188,206,216,203,200,88,115,133,142,223,141,216,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.885ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[225,169,188,231,143,136,122,206,138,102,125,247,20,31,86,153,100,221,65,159,220,69,233,41,234,67,223,161,79,12,199,14],[21,122,62,245,78,33,150,159,114,0,223,210,18,25,57,179,186,56,98,233,160,239,9,160,8,107,253,155,73,246,68,70]]",
              "sol": "[bytes(abi.encode(\"225,169,188,231,143,136,122,206,138,102,125,247,20,31,86,153,100,221,65,159,220,69,233,41,234,67,223,161,79,12,199,14\")),bytes(abi.encode(\"21,122,62,245,78,33,150,159,114,0,223,210,18,25,57,179,186,56,98,233,160,239,9,160,8,107,253,155,73,246,68,70\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.886ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[235,146,103,220,197,126,41,96,69,76,42,250,237,115,60,190,80,32,237,92,114,30,219,250,137,85,21,94,9,175,110,106],[19,84,91,219,159,104,80,202,85,35,43,153,253,64,91,37,234,224,109,114,200,250,95,238,59,23,114,10,219,9,249,159]]",
              "sol": "[bytes(abi.encode(\"235,146,103,220,197,126,41,96,69,76,42,250,237,115,60,190,80,32,237,92,114,30,219,250,137,85,21,94,9,175,110,106\")),bytes(abi.encode(\"19,84,91,219,159,104,80,202,85,35,43,153,253,64,91,37,234,224,109,114,200,250,95,238,59,23,114,10,219,9,249,159\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.886ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[158,31,39,40,170,77,235,4,82,55,6,19,242,22,92,85,118,155,234,54,23,255,241,106,244,109,196,253,0,192,2,192],[64,186,84,204,159,251,141,51,43,41,76,126,164,168,40,8,58,60,60,214,58,79,191,19,106,244,115,25,38,102,240,109],[56,247,28,119,195,210,38,206,70,255,33,235,140,192,83,253,68,191,105,5,108,189,70,189,205,48,42,190,39,128,148,62]]",
              "sol": "[bytes(abi.encode(\"158,31,39,40,170,77,235,4,82,55,6,19,242,22,92,85,118,155,234,54,23,255,241,106,244,109,196,253,0,192,2,192\")),bytes(abi.encode(\"64,186,84,204,159,251,141,51,43,41,76,126,164,168,40,8,58,60,60,214,58,79,191,19,106,244,115,25,38,102,240,109\")),bytes(abi.encode(\"56,247,28,119,195,210,38,206,70,255,33,235,140,192,83,253,68,191,105,5,108,189,70,189,205,48,42,190,39,128,148,62\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.887ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[174,103,14,246,142,188,243,124,221,234,65,113,58,84,36,49,228,31,111,73,52,211,144,89,41,90,243,235,202,174,103,43],[64,27,180,36,143,94,142,165,235,191,250,204,100,140,220,171,64,97,54,109,196,47,23,214,59,27,172,50,106,239,106,167],[195,8,211,177,219,153,44,2,212,20,172,72,107,211,44,60,42,192,97,33,204,135,81,224,210,211,119,174,41,138,222,195]]",
              "sol": "[bytes(abi.encode(\"174,103,14,246,142,188,243,124,221,234,65,113,58,84,36,49,228,31,111,73,52,211,144,89,41,90,243,235,202,174,103,43\")),bytes(abi.encode(\"64,27,180,36,143,94,142,165,235,191,250,204,100,140,220,171,64,97,54,109,196,47,23,214,59,27,172,50,106,239,106,167\")),bytes(abi.encode(\"195,8,211,177,219,153,44,2,212,20,172,72,107,211,44,60,42,192,97,33,204,135,81,224,210,211,119,174,41,138,222,195\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.887ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"jmv21g\"",
              "sol": "\"jmv21g\""
            },
            {
              "js": "[[116,214,199,32,177,172,143,184,40,242,5,76,224,43,250,110,6,245,179,220,90,92,15,93,59,70,98,61,113,7,102,136],[114,219,142,251,180,87,7,208,69,139,82,236,21,178,148,230,118,146,157,180,35,78,253,145,192,225,120,178,10,250,155,146],[178,39,142,153,13,45,22,58,152,95,101,91,152,106,51,245,176,55,155,160,90,12,139,70,20,255,178,140,70,198,197,59]]",
              "sol": "[bytes(abi.encode(\"116,214,199,32,177,172,143,184,40,242,5,76,224,43,250,110,6,245,179,220,90,92,15,93,59,70,98,61,113,7,102,136\")),bytes(abi.encode(\"114,219,142,251,180,87,7,208,69,139,82,236,21,178,148,230,118,146,157,180,35,78,253,145,192,225,120,178,10,250,155,146\")),bytes(abi.encode(\"178,39,142,153,13,45,22,58,152,95,101,91,152,106,51,245,176,55,155,160,90,12,139,70,20,255,178,140,70,198,197,59\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.888ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[76,217,148,213,164,94,84,233,83,36,188,235,145,233,201,98,83,60,4,187,124,227,25,193,97,61,184,45,94,116,199,128],[154,139,138,210,20,212,220,138,197,209,160,168,97,192,173,73,203,198,62,120,68,31,222,214,217,242,170,205,198,168,64,18],[139,196,43,157,40,92,103,49,85,50,98,107,148,183,195,95,104,111,221,206,0,185,25,32,15,8,93,35,229,177,34,254]]",
              "sol": "[bytes(abi.encode(\"76,217,148,213,164,94,84,233,83,36,188,235,145,233,201,98,83,60,4,187,124,227,25,193,97,61,184,45,94,116,199,128\")),bytes(abi.encode(\"154,139,138,210,20,212,220,138,197,209,160,168,97,192,173,73,203,198,62,120,68,31,222,214,217,242,170,205,198,168,64,18\")),bytes(abi.encode(\"139,196,43,157,40,92,103,49,85,50,98,107,148,183,195,95,104,111,221,206,0,185,25,32,15,8,93,35,229,177,34,254\"))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.889ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"agpr8d\"",
              "sol": "\"agpr8d\""
            },
            {
              "js": "[[227,181,53,164,251,60,127,181,168,10,219,134,49,15,250,248,226,209,56,102,47,81,175,208,200,241,153,252,16,226,235,85],[1,161,123,102,202,206,151,115,191,75,186,231,117,14,46,6,162,207,72,128,248,3,76,104,121,55,106,66,244,246,25,32],[82,178,124,14,146,113,118,12,179,88,240,161,135,126,23,139,100,247,85,64,197,135,54,220,235,28,126,241,114,183,243,164],[33,188,136,94,14,90,86,0,78,55,32,19,136,200,97,100,137,139,159,233,173,135,219,40,106,79,37,250,225,8,38,72]]",
              "sol": "[bytes(abi.encode(\"227,181,53,164,251,60,127,181,168,10,219,134,49,15,250,248,226,209,56,102,47,81,175,208,200,241,153,252,16,226,235,85\")),bytes(abi.encode(\"1,161,123,102,202,206,151,115,191,75,186,231,117,14,46,6,162,207,72,128,248,3,76,104,121,55,106,66,244,246,25,32\")),bytes(abi.encode(\"82,178,124,14,146,113,118,12,179,88,240,161,135,126,23,139,100,247,85,64,197,135,54,220,235,28,126,241,114,183,243,164\")),bytes(abi.encode(\"33,188,136,94,14,90,86,0,78,55,32,19,136,200,97,100,137,139,159,233,173,135,219,40,106,79,37,250,225,8,38,72\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.889ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[107,93,40,209,202,167,204,224,137,82,16,67,67,138,232,199,201,113,192,203,16,185,134,71,237,246,189,13,142,194,2,67],[208,116,227,19,27,174,165,249,165,173,87,114,198,216,132,74,163,162,145,11,178,131,73,184,0,135,205,164,43,243,169,65],[185,79,27,212,163,165,78,24,32,175,155,20,211,232,140,239,61,117,148,50,130,65,253,65,150,168,76,97,241,238,233,187],[201,69,117,244,217,62,176,174,197,5,51,140,161,18,32,96,202,11,99,166,253,181,183,219,88,21,231,61,254,85,34,72]]",
              "sol": "[bytes(abi.encode(\"107,93,40,209,202,167,204,224,137,82,16,67,67,138,232,199,201,113,192,203,16,185,134,71,237,246,189,13,142,194,2,67\")),bytes(abi.encode(\"208,116,227,19,27,174,165,249,165,173,87,114,198,216,132,74,163,162,145,11,178,131,73,184,0,135,205,164,43,243,169,65\")),bytes(abi.encode(\"185,79,27,212,163,165,78,24,32,175,155,20,211,232,140,239,61,117,148,50,130,65,253,65,150,168,76,97,241,238,233,187\")),bytes(abi.encode(\"201,69,117,244,217,62,176,174,197,5,51,140,161,18,32,96,202,11,99,166,253,181,183,219,88,21,231,61,254,85,34,72\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.890ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"ohcdyo\"",
              "sol": "\"ohcdyo\""
            },
            {
              "js": "[[186,254,32,157,163,141,145,249,192,216,36,79,66,236,86,67,205,98,110,14,220,240,83,227,176,240,90,97,210,195,193,121],[60,68,159,47,199,51,60,139,197,137,126,32,140,212,81,235,228,40,118,48,52,43,72,197,215,235,24,19,231,247,220,175],[87,187,72,254,11,19,0,88,15,211,114,3,52,211,254,200,63,84,66,4,122,114,166,251,89,54,33,192,179,118,1,191],[168,99,121,193,196,189,84,152,116,43,235,112,33,137,18,145,240,73,54,141,201,11,50,74,68,104,169,146,151,177,83,134]]",
              "sol": "[bytes(abi.encode(\"186,254,32,157,163,141,145,249,192,216,36,79,66,236,86,67,205,98,110,14,220,240,83,227,176,240,90,97,210,195,193,121\")),bytes(abi.encode(\"60,68,159,47,199,51,60,139,197,137,126,32,140,212,81,235,228,40,118,48,52,43,72,197,215,235,24,19,231,247,220,175\")),bytes(abi.encode(\"87,187,72,254,11,19,0,88,15,211,114,3,52,211,254,200,63,84,66,4,122,114,166,251,89,54,33,192,179,118,1,191\")),bytes(abi.encode(\"168,99,121,193,196,189,84,152,116,43,235,112,33,137,18,145,240,73,54,141,201,11,50,74,68,104,169,146,151,177,83,134\"))]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.890ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "[[216,137,132,47,169,142,44,16,6,11,213,53,105,103,149,219,147,196,130,143,3,72,216,5,108,225,137,159,185,138,154,166],[130,194,173,69,55,35,255,78,48,36,184,105,37,159,183,72,238,32,251,102,43,118,208,10,20,161,72,211,13,240,225,243],[129,25,131,171,61,163,92,2,49,46,102,5,181,13,126,155,16,211,221,145,144,87,7,247,5,162,206,190,47,245,106,236],[189,192,66,213,98,103,248,226,112,194,130,162,46,3,50,100,75,132,148,78,124,137,17,118,210,212,132,95,204,134,204,143]]",
              "sol": "[bytes(abi.encode(\"216,137,132,47,169,142,44,16,6,11,213,53,105,103,149,219,147,196,130,143,3,72,216,5,108,225,137,159,185,138,154,166\")),bytes(abi.encode(\"130,194,173,69,55,35,255,78,48,36,184,105,37,159,183,72,238,32,251,102,43,118,208,10,20,161,72,211,13,240,225,243\")),bytes(abi.encode(\"129,25,131,171,61,163,92,2,49,46,102,5,181,13,126,155,16,211,221,145,144,87,7,247,5,162,206,190,47,245,106,236\")),bytes(abi.encode(\"189,192,66,213,98,103,248,226,112,194,130,162,46,3,50,100,75,132,148,78,124,137,17,118,210,212,132,95,204,134,204,143\"))]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.891ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[168,109,95,148,248,143,6,117,140,122,196,179,52,205,155,135,71,71,107,62,45,3,71,119,129,120,60,219,206,160,165,183],[154,252,69,152,203,137,130,128,254,20,207,176,227,36,218,128,146,20,141,243,15,198,169,77,1,13,177,186,158,181,48,59],[171,137,66,230,205,222,14,119,232,127,77,234,89,27,81,162,40,59,217,13,22,111,212,93,54,165,139,160,39,230,15,168],[197,125,126,65,75,79,6,231,4,154,80,121,198,149,107,180,131,111,33,189,28,13,72,157,156,46,101,181,200,74,113,195],[84,25,57,18,240,142,211,128,144,88,230,72,70,251,83,83,235,130,58,247,168,160,162,210,180,62,60,182,15,38,200,161]]",
              "sol": "[bytes(abi.encode(\"168,109,95,148,248,143,6,117,140,122,196,179,52,205,155,135,71,71,107,62,45,3,71,119,129,120,60,219,206,160,165,183\")),bytes(abi.encode(\"154,252,69,152,203,137,130,128,254,20,207,176,227,36,218,128,146,20,141,243,15,198,169,77,1,13,177,186,158,181,48,59\")),bytes(abi.encode(\"171,137,66,230,205,222,14,119,232,127,77,234,89,27,81,162,40,59,217,13,22,111,212,93,54,165,139,160,39,230,15,168\")),bytes(abi.encode(\"197,125,126,65,75,79,6,231,4,154,80,121,198,149,107,180,131,111,33,189,28,13,72,157,156,46,101,181,200,74,113,195\")),bytes(abi.encode(\"84,25,57,18,240,142,211,128,144,88,230,72,70,251,83,83,235,130,58,247,168,160,162,210,180,62,60,182,15,38,200,161\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.892ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"vafyga\"",
              "sol": "\"vafyga\""
            },
            {
              "js": "[[244,181,254,69,227,63,223,217,197,102,147,218,107,69,178,0,221,138,106,92,112,250,233,57,204,235,48,156,216,8,56,244],[85,174,66,169,71,163,252,144,156,50,163,248,32,53,183,54,243,232,40,81,137,142,71,155,49,132,63,26,220,29,226,107],[28,99,174,148,252,148,242,87,205,111,96,89,127,103,45,145,43,91,19,15,239,217,159,177,17,76,32,229,243,167,48,180],[64,169,183,6,137,40,171,227,243,155,131,70,29,191,177,7,103,29,126,50,253,244,17,248,91,218,11,44,131,58,4,80],[132,164,242,239,66,239,252,136,202,149,154,250,16,5,162,57,57,255,29,148,68,38,217,90,50,196,68,205,101,83,148,194]]",
              "sol": "[bytes(abi.encode(\"244,181,254,69,227,63,223,217,197,102,147,218,107,69,178,0,221,138,106,92,112,250,233,57,204,235,48,156,216,8,56,244\")),bytes(abi.encode(\"85,174,66,169,71,163,252,144,156,50,163,248,32,53,183,54,243,232,40,81,137,142,71,155,49,132,63,26,220,29,226,107\")),bytes(abi.encode(\"28,99,174,148,252,148,242,87,205,111,96,89,127,103,45,145,43,91,19,15,239,217,159,177,17,76,32,229,243,167,48,180\")),bytes(abi.encode(\"64,169,183,6,137,40,171,227,243,155,131,70,29,191,177,7,103,29,126,50,253,244,17,248,91,218,11,44,131,58,4,80\")),bytes(abi.encode(\"132,164,242,239,66,239,252,136,202,149,154,250,16,5,162,57,57,255,29,148,68,38,217,90,50,196,68,205,101,83,148,194\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.893ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"35gio\"",
              "sol": "\"35gio\""
            },
            {
              "js": "[[141,230,10,122,100,112,164,4,33,239,15,163,87,56,170,149,195,227,139,7,199,220,78,100,8,78,122,21,244,14,219,157],[98,210,173,14,7,166,225,239,22,183,28,39,65,101,74,200,137,209,175,237,237,7,30,106,237,90,176,194,61,197,66,253],[76,21,230,211,181,226,83,14,72,250,119,222,166,0,165,3,162,228,83,198,174,34,57,20,1,129,16,139,186,94,215,104],[197,153,248,156,55,223,43,194,231,179,80,100,153,225,75,202,110,2,10,171,176,110,177,19,224,120,72,242,106,202,16,221],[149,222,225,4,9,144,219,100,74,19,90,94,58,236,115,200,47,138,229,67,149,17,141,17,178,9,19,249,3,196,186,138]]",
              "sol": "[bytes(abi.encode(\"141,230,10,122,100,112,164,4,33,239,15,163,87,56,170,149,195,227,139,7,199,220,78,100,8,78,122,21,244,14,219,157\")),bytes(abi.encode(\"98,210,173,14,7,166,225,239,22,183,28,39,65,101,74,200,137,209,175,237,237,7,30,106,237,90,176,194,61,197,66,253\")),bytes(abi.encode(\"76,21,230,211,181,226,83,14,72,250,119,222,166,0,165,3,162,228,83,198,174,34,57,20,1,129,16,139,186,94,215,104\")),bytes(abi.encode(\"197,153,248,156,55,223,43,194,231,179,80,100,153,225,75,202,110,2,10,171,176,110,177,19,224,120,72,242,106,202,16,221\")),bytes(abi.encode(\"149,222,225,4,9,144,219,100,74,19,90,94,58,236,115,200,47,138,229,67,149,17,141,17,178,9,19,249,3,196,186,138\"))]"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.893ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "[[160,149,154,78,55,150,63,38,85,144,200,141,76,99,66,99,77,42,222,158,203,143,50,155,84,196,47,160,142,226,67,235],[174,3,170,217,152,66,81,219,152,201,165,177,128,39,124,253,17,251,115,253,144,179,252,130,117,184,195,215,171,25,252,109],[202,199,7,31,244,241,250,150,240,254,226,5,93,74,184,103,132,210,201,40,237,214,229,40,160,235,224,224,165,232,163,197],[118,119,70,168,86,213,81,201,20,135,128,4,182,237,215,195,175,144,148,65,41,182,231,166,230,111,113,103,189,219,18,33],[13,43,26,50,60,111,72,22,86,252,40,94,164,63,92,11,157,243,223,15,170,211,94,193,24,203,204,132,108,136,94,228]]",
              "sol": "[bytes(abi.encode(\"160,149,154,78,55,150,63,38,85,144,200,141,76,99,66,99,77,42,222,158,203,143,50,155,84,196,47,160,142,226,67,235\")),bytes(abi.encode(\"174,3,170,217,152,66,81,219,152,201,165,177,128,39,124,253,17,251,115,253,144,179,252,130,117,184,195,215,171,25,252,109\")),bytes(abi.encode(\"202,199,7,31,244,241,250,150,240,254,226,5,93,74,184,103,132,210,201,40,237,214,229,40,160,235,224,224,165,232,163,197\")),bytes(abi.encode(\"118,119,70,168,86,213,81,201,20,135,128,4,182,237,215,195,175,144,148,65,41,182,231,166,230,111,113,103,189,219,18,33\")),bytes(abi.encode(\"13,43,26,50,60,111,72,22,86,252,40,94,164,63,92,11,157,243,223,15,170,211,94,193,24,203,204,132,108,136,94,228\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.894ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[184]",
              "sol": "bytes1(\"184\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.894ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.895ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.895ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.895ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.896ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.896ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"4bx8ip\"",
              "sol": "\"4bx8ip\""
            },
            {
              "js": "\"ohcdyo\"",
              "sol": "\"ohcdyo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.898ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"vpqcef\"",
              "sol": "\"vpqcef\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.899ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"agpr8d\"",
              "sol": "\"agpr8d\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.899ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"49vjhd\"",
              "sol": "\"49vjhd\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.900ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"ohcdyo\"",
              "sol": "\"ohcdyo\""
            },
            {
              "js": "\"c0azn\"",
              "sol": "\"c0azn\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"agpr8d\"",
              "sol": "\"agpr8d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.900ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"35gio\"",
              "sol": "\"35gio\""
            },
            {
              "js": "\"sdjjek\"",
              "sol": "\"sdjjek\""
            },
            {
              "js": "\"sdjjek\"",
              "sol": "\"sdjjek\""
            },
            {
              "js": "\"c0azn\"",
              "sol": "\"c0azn\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.901ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"57p5en\"",
              "sol": "\"57p5en\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.901ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ohcdyo\"",
              "sol": "\"ohcdyo\""
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.902ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"jmv21g\"",
              "sol": "\"jmv21g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.902ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.903ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.904ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"[\",\"tdjhe\",\"L\",\"Capstones\",\"vafyga\",\"[\",\"35gio\",\"Capstones\",\"[\"]",
              "sol": "[string(\"[\"),string(\"tdjhe\"),string(\"L\"),string(\"Capstones\"),string(\"vafyga\"),string(\"[\"),string(\"35gio\"),string(\"Capstones\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.904ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[203,163,192,167,54,186,39,39,134,17,199,186,118,215,212,215,54,21,132,145,132,146,44,199,111,239,214,110,121,21,27,107],[65,111,89,143,12,41,79,1,189,161,248,81,162,186,60,146,96,197,96,67,33,223,130,68,231,155,135,17,126,185,143,248],[170,72,111,225,15,49,186,27,9,190,27,223,211,237,21,232,204,110,73,183,252,135,127,175,227,105,33,179,87,208,104,221]]",
              "sol": "[bytes(abi.encode(\"203,163,192,167,54,186,39,39,134,17,199,186,118,215,212,215,54,21,132,145,132,146,44,199,111,239,214,110,121,21,27,107\")),bytes(abi.encode(\"65,111,89,143,12,41,79,1,189,161,248,81,162,186,60,146,96,197,96,67,33,223,130,68,231,155,135,17,126,185,143,248\")),bytes(abi.encode(\"170,72,111,225,15,49,186,27,9,190,27,223,211,237,21,232,204,110,73,183,252,135,127,175,227,105,33,179,87,208,104,221\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.905ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.906ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[2,81,194,176,115,151,147,162,0,21,35,174,182,232,133,54,238,65,223,205,23,246,104,189,170,32,92,89,97,221,218,67]",
              "sol": "stringToBytes32(\"2,81,194,176,115,151,147,162,0,21,35,174,182,232,133,54,238,65,223,205,23,246,104,189,170,32,92,89,97,221,218,67\")"
            },
            {
              "js": "[156,1,150,167,39,103,144,110,176,42,174,169,8,91,25,239,1,224,112,10,55,53,209,130,51,102,66,242,206,213,179,83]",
              "sol": "stringToBytes32(\"156,1,150,167,39,103,144,110,176,42,174,169,8,91,25,239,1,224,112,10,55,53,209,130,51,102,66,242,206,213,179,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.906ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[163,134,132,100,233,1,213,76,3,80,222,55,188,223,227,247,123,28,180,88,215,205,94,246,79,165,144,245,106,192,24,216]",
              "sol": "stringToBytes32(\"163,134,132,100,233,1,213,76,3,80,222,55,188,223,227,247,123,28,180,88,215,205,94,246,79,165,144,245,106,192,24,216\")"
            },
            {
              "js": "[232,24,29,14,173,234,88,61,51,193,64,85,82,196,228,108,222,99,152,155,66,142,114,24,162,243,11,1,3,184,228,189]",
              "sol": "abi.encode(\"232,24,29,14,173,234,88,61,51,193,64,85,82,196,228,108,222,99,152,155,66,142,114,24,162,243,11,1,3,184,228,189\")"
            },
            {
              "js": "[133,93,20,49,158,66,230,179,39,177,33,152,253,95,110,192,19,151,78,255,7,35,115,24,218,100,38,58,128,253,232,72]",
              "sol": "abi.encode(\"133,93,20,49,158,66,230,179,39,177,33,152,253,95,110,192,19,151,78,255,7,35,115,24,218,100,38,58,128,253,232,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.907ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[76,110,216,212,50,149,158,2,215,51,55,211,1,226,50,40,167,254,172,137,252,231,151,244,250,92,77,100,204,111,169,80]",
              "sol": "abi.encode(\"76,110,216,212,50,149,158,2,215,51,55,211,1,226,50,40,167,254,172,137,252,231,151,244,250,92,77,100,204,111,169,80\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[149,188,148,144,48,46,137,144,165,130,234,228,10,74,223,100,241,145,154,243,130,114,24,82,24,130,132,115,183,184,40,231]",
              "sol": "abi.encode(\"149,188,148,144,48,46,137,144,165,130,234,228,10,74,223,100,241,145,154,243,130,114,24,82,24,130,132,115,183,184,40,231\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.908ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[21,209,124,186,33,117,56,58,147,83,63,205,198,226,222,95,232,97,185,26,82,253,68,215,45,54,87,37,184,237,1,207]",
              "sol": "stringToBytes32(\"21,209,124,186,33,117,56,58,147,83,63,205,198,226,222,95,232,97,185,26,82,253,68,215,45,54,87,37,184,237,1,207\")"
            },
            {
              "js": "\"agpr8d\"",
              "sol": "\"agpr8d\""
            },
            {
              "js": "[9,136,99,13,152,106,140,209,234,144,223,236,127,156,168,113,105,114,111,210,158,19,166,142,172,131,152,4,13,175,38,53]",
              "sol": "abi.encode(\"9,136,99,13,152,106,140,209,234,144,223,236,127,156,168,113,105,114,111,210,158,19,166,142,172,131,152,4,13,175,38,53\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[73,144,71,122,61,137,228,245,107,85,42,99,99,237,105,118,94,42,153,198,21,246,93,9,208,2,229,118,37,219,127,39]",
              "sol": "stringToBytes32(\"73,144,71,122,61,137,228,245,107,85,42,99,99,237,105,118,94,42,153,198,21,246,93,9,208,2,229,118,37,219,127,39\")"
            },
            {
              "js": "\"vpqcef\"",
              "sol": "\"vpqcef\""
            },
            {
              "js": "[209,31,216,181,37,173,48,156,180,77,232,48,22,9,174,212,181,210,204,65,84,89,150,158,9,109,148,249,217,168,63,118]",
              "sol": "abi.encode(\"209,31,216,181,37,173,48,156,180,77,232,48,22,9,174,212,181,210,204,65,84,89,150,158,9,109,148,249,217,168,63,118\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.909ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[238,82,218,2,126,166,229,38,172,109,135,68,246,106,249,215,71,115,37,243,85,243,238,78,94,37,193,161,150,177,212,126]",
              "sol": "stringToBytes32(\"238,82,218,2,126,166,229,38,172,109,135,68,246,106,249,215,71,115,37,243,85,243,238,78,94,37,193,161,150,177,212,126\")"
            },
            {
              "js": "[167,96,225,145,80,252,254,32,220,34,228,205,45,159,223,141,81,228,254,140,45,38,246,179,93,130,121,156,241,121,129,253]",
              "sol": "abi.encode(\"167,96,225,145,80,252,254,32,220,34,228,205,45,159,223,141,81,228,254,140,45,38,246,179,93,130,121,156,241,121,129,253\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[238,82,218,2,126,166,229,38,172,109,135,68,246,106,249,215,71,115,37,243,85,243,238,78,94,37,193,161,150,177,212,126]",
                "sol": "stringToBytes32(\"238,82,218,2,126,166,229,38,172,109,135,68,246,106,249,215,71,115,37,243,85,243,238,78,94,37,193,161,150,177,212,126\")"
              },
              {
                "js": "[141,201,189,152,147,57,51,206,229,212,88,112,205,90,54,139,186,159,234,136,56,66,146,191,5,84,45,223,41,136,53,57,230]",
                "sol": "bytes33(\"141,201,189,152,147,57,51,206,229,212,88,112,205,90,54,139,186,159,234,136,56,66,146,191,5,84,45,223,41,136,53,57,230\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.911ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[97,236,48,201,142,81,132,10,197,212,196,155,170,112,21,213,158,45,241,58,90,61,151,101,17,240,197,40,67,251,12,68]",
              "sol": "abi.encode(\"97,236,48,201,142,81,132,10,197,212,196,155,170,112,21,213,158,45,241,58,90,61,151,101,17,240,197,40,67,251,12,68\")"
            },
            {
              "js": "[138,0,59,225,122,105,229,252,57,24,247,203,175,87,199,158,57,15,119,152,228,17,106,16,112,53,89,223,61,250,121,21]",
              "sol": "stringToBytes32(\"138,0,59,225,122,105,229,252,57,24,247,203,175,87,199,158,57,15,119,152,228,17,106,16,112,53,89,223,61,250,121,21\")"
            },
            {
              "js": "[68,173,73,108,239,207,218,208,196,218,195,237,137,200,67,75,6,24,14,64,222,203,88,140,147,233,99,255,174,113,248,37]",
              "sol": "abi.encode(\"68,173,73,108,239,207,218,208,196,218,195,237,137,200,67,75,6,24,14,64,222,203,88,140,147,233,99,255,174,113,248,37\")"
            },
            {
              "js": "\"tdjhe\"",
              "sol": "\"tdjhe\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[30,168,239,9,44,95,161,168,106,74,185,223,100,175,174,35,228,235,191,190,26,16,222,156,228,243,33,151,177,126,82,32]",
              "sol": "abi.encode(\"30,168,239,9,44,95,161,168,106,74,185,223,100,175,174,35,228,235,191,190,26,16,222,156,228,243,33,151,177,126,82,32\")"
            },
            {
              "js": "[128,106,134,80,244,242,113,181,38,118,154,84,188,34,45,22,216,204,115,67,67,79,135,37,255,244,32,50,46,85,153,66]",
              "sol": "stringToBytes32(\"128,106,134,80,244,242,113,181,38,118,154,84,188,34,45,22,216,204,115,67,67,79,135,37,255,244,32,50,46,85,153,66\")"
            },
            {
              "js": "[21,29,253,174,230,170,65,33,227,188,169,91,155,189,140,20,233,189,82,35,236,227,122,84,57,145,53,88,235,38,7,155]",
              "sol": "abi.encode(\"21,29,253,174,230,170,65,33,227,188,169,91,155,189,140,20,233,189,82,35,236,227,122,84,57,145,53,88,235,38,7,155\")"
            },
            {
              "js": "\"c0azn\"",
              "sol": "\"c0azn\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[203,215,9,72,216,232,221,134,66,174,86,2,82,156,8,92,70,210,250,139,127,177,250,250,111,78,41,98,165,150,12,54]",
              "sol": "abi.encode(\"203,215,9,72,216,232,221,134,66,174,86,2,82,156,8,92,70,210,250,139,127,177,250,250,111,78,41,98,165,150,12,54\")"
            },
            {
              "js": "[78,46,76,161,55,128,172,119,49,171,86,161,176,27,187,175,33,126,153,60,120,171,216,94,7,131,190,73,227,105,69,21]",
              "sol": "stringToBytes32(\"78,46,76,161,55,128,172,119,49,171,86,161,176,27,187,175,33,126,153,60,120,171,216,94,7,131,190,73,227,105,69,21\")"
            },
            {
              "js": "[193,76,74,217,52,10,70,203,68,169,158,72,1,59,78,177,67,247,253,203,83,80,193,95,242,46,170,92,78,8,241,164]",
              "sol": "abi.encode(\"193,76,74,217,52,10,70,203,68,169,158,72,1,59,78,177,67,247,253,203,83,80,193,95,242,46,170,92,78,8,241,164\")"
            },
            {
              "js": "\"jmv21g\"",
              "sol": "\"jmv21g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[70,200,236,65,152,53,2,61,196,228,254,61,237,247,44,61,38,254,101,242,240,42,91,64,3,140,224,51,141,205,146,30]",
              "sol": "abi.encode(\"70,200,236,65,152,53,2,61,196,228,254,61,237,247,44,61,38,254,101,242,240,42,91,64,3,140,224,51,141,205,146,30\")"
            },
            {
              "js": "[115,120,144,103,23,62,13,84,169,96,180,144,89,134,224,68,226,66,240,183,94,255,165,40,63,186,4,50,13,98,14,253]",
              "sol": "stringToBytes32(\"115,120,144,103,23,62,13,84,169,96,180,144,89,134,224,68,226,66,240,183,94,255,165,40,63,186,4,50,13,98,14,253\")"
            },
            {
              "js": "[176,59,45,213,6,4,183,98,163,153,63,117,194,135,93,25,164,204,27,200,15,86,151,204,165,174,194,130,211,198,73,56]",
              "sol": "abi.encode(\"176,59,45,213,6,4,183,98,163,153,63,117,194,135,93,25,164,204,27,200,15,86,151,204,165,174,194,130,211,198,73,56\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[124,32,180,235,123,248,28,246,255,248,37,121,54,76,129,1,149,33,218,116,43,49,200,108,128,255,48,183,31,166,111,4]",
              "sol": "abi.encode(\"124,32,180,235,123,248,28,246,255,248,37,121,54,76,129,1,149,33,218,116,43,49,200,108,128,255,48,183,31,166,111,4\")"
            },
            {
              "js": "[216,246,243,14,44,101,208,14,37,4,56,179,185,104,27,94,186,53,205,51,96,237,12,227,215,236,15,52,106,228,215,0]",
              "sol": "stringToBytes32(\"216,246,243,14,44,101,208,14,37,4,56,179,185,104,27,94,186,53,205,51,96,237,12,227,215,236,15,52,106,228,215,0\")"
            },
            {
              "js": "[38,212,69,111,198,120,2,218,67,50,11,6,146,124,8,4,239,67,97,29,53,217,191,102,222,115,28,46,123,84,173,61]",
              "sol": "abi.encode(\"38,212,69,111,198,120,2,218,67,50,11,6,146,124,8,4,239,67,97,29,53,217,191,102,222,115,28,46,123,84,173,61\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[170,237,23,196,6,165,66,124,217,41,88,204,20,89,145,173,217,48,112,52,77,124,251,67,86,62,96,190,21,98,249,41]",
              "sol": "abi.encode(\"170,237,23,196,6,165,66,124,217,41,88,204,20,89,145,173,217,48,112,52,77,124,251,67,86,62,96,190,21,98,249,41\")"
            },
            {
              "js": "[254,24,0,44,80,215,42,254,98,88,9,27,7,183,60,218,2,47,61,227,129,3,174,3,231,118,178,202,148,105,176,49]",
              "sol": "stringToBytes32(\"254,24,0,44,80,215,42,254,98,88,9,27,7,183,60,218,2,47,61,227,129,3,174,3,231,118,178,202,148,105,176,49\")"
            },
            {
              "js": "[21,34,75,241,247,43,50,66,7,139,233,175,203,159,190,221,156,35,233,29,109,146,25,21,93,32,174,145,83,106,39,93]",
              "sol": "abi.encode(\"21,34,75,241,247,43,50,66,7,139,233,175,203,159,190,221,156,35,233,29,109,146,25,21,93,32,174,145,83,106,39,93\")"
            },
            {
              "js": "\"57p5en\"",
              "sol": "\"57p5en\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[2,148,106,192,152,227,136,226,87,29,143,170,67,80,148,199,158,190,188,18,54,142,223,190,207,26,15,148,7,246,104,57]",
              "sol": "abi.encode(\"2,148,106,192,152,227,136,226,87,29,143,170,67,80,148,199,158,190,188,18,54,142,223,190,207,26,15,148,7,246,104,57\")"
            },
            {
              "js": "[196,185,93,76,30,28,207,48,124,29,154,195,78,78,215,141,154,42,229,84,64,165,40,74,215,39,142,124,255,254,94,241]",
              "sol": "stringToBytes32(\"196,185,93,76,30,28,207,48,124,29,154,195,78,78,215,141,154,42,229,84,64,165,40,74,215,39,142,124,255,254,94,241\")"
            },
            {
              "js": "[6,14,254,227,183,105,212,208,110,225,251,187,111,5,77,54,107,238,79,102,77,22,100,94,125,96,86,199,105,220,233,193]",
              "sol": "abi.encode(\"6,14,254,227,183,105,212,208,110,225,251,187,111,5,77,54,107,238,79,102,77,22,100,94,125,96,86,199,105,220,233,193\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[118,127,17,29,16,46,233,162,215,140,198,140,19,43,243,223,157,245,39,78,91,241,207,33,150,105,185,146,243,207,153,119]",
              "sol": "abi.encode(\"118,127,17,29,16,46,233,162,215,140,198,140,19,43,243,223,157,245,39,78,91,241,207,33,150,105,185,146,243,207,153,119\")"
            },
            {
              "js": "[7,124,32,204,230,135,234,247,43,154,21,60,60,186,25,27,221,90,136,153,74,11,17,130,205,228,21,31,240,66,64,33]",
              "sol": "stringToBytes32(\"7,124,32,204,230,135,234,247,43,154,21,60,60,186,25,27,221,90,136,153,74,11,17,130,205,228,21,31,240,66,64,33\")"
            },
            {
              "js": "[92,26,111,199,134,98,104,158,81,154,29,127,97,152,21,41,165,28,99,199,227,137,199,71,126,93,182,93,21,66,137,186]",
              "sol": "abi.encode(\"92,26,111,199,134,98,104,158,81,154,29,127,97,152,21,41,165,28,99,199,227,137,199,71,126,93,182,93,21,66,137,186\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.921ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[83,219,19,61,59,127,196,122,132,36,215,50,146,84,169,95,94,97,74,122,18,11,36,210,16,212,86,26,1,112,205,78]",
              "sol": "abi.encode(\"83,219,19,61,59,127,196,122,132,36,215,50,146,84,169,95,94,97,74,122,18,11,36,210,16,212,86,26,1,112,205,78\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "[255,236,8,50,105,134,115,59,56,196,194,191,28,253,103,86,171,100,102,133,137,14,49,231,77,44,217,251,192,62,195,11]",
              "sol": "abi.encode(\"255,236,8,50,105,134,115,59,56,196,194,191,28,253,103,86,171,100,102,133,137,14,49,231,77,44,217,251,192,62,195,11\")"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.922ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[98,199,194,168,59,72,226,135,186,136,90,17,204,36,217,223,138,128,44,204,196,62,33,225,114,178,151,50,64,51,216,18]",
              "sol": "stringToBytes32(\"98,199,194,168,59,72,226,135,186,136,90,17,204,36,217,223,138,128,44,204,196,62,33,225,114,178,151,50,64,51,216,18\")"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "[12,166,93,44,69,74,87,254,158,80,143,176,19,242,252,254,123,236,63,56,14,132,81,109,178,215,75,139,241,41,102,216]",
              "sol": "stringToBytes32(\"12,166,93,44,69,74,87,254,158,80,143,176,19,242,252,254,123,236,63,56,14,132,81,109,178,215,75,139,241,41,102,216\")"
            },
            {
              "js": "[222,76,89,152,25,173,86,50,89,216,13,10,251,45,133,178,54,15,67,146,222,18,170,40,193,136,128,136,243,104,72,196]",
              "sol": "stringToBytes32(\"222,76,89,152,25,173,86,50,89,216,13,10,251,45,133,178,54,15,67,146,222,18,170,40,193,136,128,136,243,104,72,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.923ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[238,48,255,25,238,158,164,201,42,164,51,141,126,212,208,196,22,97,200,81,60,53,128,174,254,93,42,72,108,155,93,92]",
              "sol": "stringToBytes32(\"238,48,255,25,238,158,164,201,42,164,51,141,126,212,208,196,22,97,200,81,60,53,128,174,254,93,42,72,108,155,93,92\")"
            },
            {
              "js": "[252,255,106,204,126,190,25,99,56,233,73,79,4,245,36,201,20]",
              "sol": "abi.encode(\"252,255,106,204,126,190,25,99,56,233,73,79,4,245,36,201,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[149,3,91,111,206,19,56,56,189,59,65,72,235,100,190,214,123,79,104,152,150,137,194,192,251,158,99,253,129,172,153,147]",
              "sol": "stringToBytes32(\"149,3,91,111,206,19,56,56,189,59,65,72,235,100,190,214,123,79,104,152,150,137,194,192,251,158,99,253,129,172,153,147\")"
            },
            {
              "js": "[247,175,195,246,104,138,174,26,243,194,250,157,74,202,239,95,199,22,93,77,199,10,117,87,10,158,216,79,103,85,182,45,247,90,100,243,194,177,36,126,54,234,37,177,96,126,93,231,197,232,210,186,142,118,126,92,159,91,242,8,111,23,84,170,200]",
              "sol": "abi.encode(\"247,175,195,246,104,138,174,26,243,194,250,157,74,202,239,95,199,22,93,77,199,10,117,87,10,158,216,79,103,85,182,45,247,90,100,243,194,177,36,126,54,234,37,177,96,126,93,231,197,232,210,186,142,118,126,92,159,91,242,8,111,23,84,170,200\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.926ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.928ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1024,16]",
              "sol": "[uint(1024),uint(16)]"
            },
            {
              "js": "[[1,59],[4,26]]",
              "sol": "[[uint(1),uint(59)],[uint(4),uint(26)]]"
            },
            {
              "js": "[162,129]",
              "sol": "[uint(162),uint(129)]"
            },
            {
              "js": "[128,2014223714]",
              "sol": "[uint(128),uint(2014223714)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.931ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.931ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[27,45,63,4,10,63,10,128]",
              "sol": "[uint(27),uint(45),uint(63),uint(4),uint(10),uint(63),uint(10),uint(128)]"
            },
            {
              "js": "{\"A\": {\"X\": 3,\"Y\": 2014223716},\"B\": {\"X\": [6,21],\"Y\": [0,33]},\"C\": {\"X\": 199999,\"Y\": 63}}",
              "sol": "Verifier.Proof(Pairing.G1Point(3,2014223716),Pairing.G2Point([uint(6),uint(21)],[uint(0),uint(33)]),Pairing.G1Point(199999,63))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[32]",
              "sol": "[uint(32)]"
            },
            {
              "js": "{\"A\": {\"X\": 22,\"Y\": 48},\"B\": {\"X\": [11,18],\"Y\": [56,129]},\"C\": {\"X\": 88,\"Y\": 1024}}",
              "sol": "Verifier.Proof(Pairing.G1Point(22,48),Pairing.G2Point([uint(11),uint(18)],[uint(56),uint(129)]),Pairing.G1Point(88,1024))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.934ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.935ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.935ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"accounts[0]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.937ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.938ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.938ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.939ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.942ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.944ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[66,0,235,49,162,232,200,202,137,219,255,16,117,220,68,192,59,101,39,188,139,206,95,33,253,80,153,16,171,254,225,181]",
              "sol": "abi.encode(\"66,0,235,49,162,232,200,202,137,219,255,16,117,220,68,192,59,101,39,188,139,206,95,33,253,80,153,16,171,254,225,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[66,0,235,49,162,232,200,202,137,219,255,16,117,220,68,192,59,101,39,188,139,206,95,33,253,80,153,16,171,254,225,181]",
                "sol": "abi.encode(\"66,0,235,49,162,232,200,202,137,219,255,16,117,220,68,192,59,101,39,188,139,206,95,33,253,80,153,16,171,254,225,181\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.945ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.946ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[104,201,98,51]",
              "sol": "bytes4(\"104,201,98,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.948ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.949ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.949ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.950ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.951ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "[178,138,180,144,107,67,164,145,136,214,188,82,136,113,25,148,90,187,114,215,203,213,151,31,163,66,142,44,25,170,145,132]",
              "sol": "abi.encode(\"178,138,180,144,107,67,164,145,136,214,188,82,136,113,25,148,90,187,114,215,203,213,151,31,163,66,142,44,25,170,145,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "[24,244,247,122,245,149,56,75,254,158,19,197,151,249,104,238,128,93,238,110,116,255,208,28,223,12,183,244,13,134,126,198]",
              "sol": "abi.encode(\"24,244,247,122,245,149,56,75,254,158,19,197,151,249,104,238,128,93,238,110,116,255,208,28,223,12,183,244,13,134,126,198\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.952ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "54",
                "sol": "54"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.955ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[97,103]",
              "sol": "[uint(97),uint(103)]"
            },
            {
              "js": "[[129,15],[54,33]]",
              "sol": "[[uint(129),uint(15)],[uint(54),uint(33)]]"
            },
            {
              "js": "[19,29]",
              "sol": "[uint(19),uint(29)]"
            },
            {
              "js": "[9,1024]",
              "sol": "[uint(9),uint(1024)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.957ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.958ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.959ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.960ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.960ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.962ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.963ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.964ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.964ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.966ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.967ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "45",
                "sol": "45"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:44:16.968ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.969ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:44:16.969ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}