,{
  "2020-11-13T16:09:51.724ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[131,27,235,99,189,80,116,38,246,111,75,41,125,142,55,22,205,220,70,47,191,68,113,146,8,232,255,112,194,156,71,61]",
              "sol": "abi.encode(\"131,27,235,99,189,80,116,38,246,111,75,41,125,142,55,22,205,220,70,47,191,68,113,146,8,232,255,112,194,156,71,61\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:00.782ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[161,134,24,211,190,182,70,18,156,121,219,75,232,113,136,232,105,104,126,218,27,9,212,168,186,242,163,194,17,128,94,106]",
              "sol": "abi.encode(\"161,134,24,211,190,182,70,18,156,121,219,75,232,113,136,232,105,104,126,218,27,9,212,168,186,242,163,194,17,128,94,106\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:10.126ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[248,92,27,10,146,164,195,251,47,127,139,84,46,19,137,123,110,34,150,127,155,38,109,118,207,231,138,234,225,73,126,54]",
              "sol": "abi.encode(\"248,92,27,10,146,164,195,251,47,127,139,84,46,19,137,123,110,34,150,127,155,38,109,118,207,231,138,234,225,73,126,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:19.344ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[238,56,150,160,222,24,104,98,148,152,79,203,111,4,63,183,152,190,4,45,70,64,43,201,48,33,230,215,95,226,147,124]",
              "sol": "abi.encode(\"238,56,150,160,222,24,104,98,148,152,79,203,111,4,63,183,152,190,4,45,70,64,43,201,48,33,230,215,95,226,147,124\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:28.501ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[103,33,174,109,162,74,148,183,43,112,252,23,199,22,55,60,160,118,158,175,240,185,26,131,177,84,3,250,232,45,76,11]",
              "sol": "abi.encode(\"103,33,174,109,162,74,148,183,43,112,252,23,199,22,55,60,160,118,158,175,240,185,26,131,177,84,3,250,232,45,76,11\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:37.673ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[100,250,73,21,195,0,186,225,156,19,5,29,58,113,136,214,160,61,130,189,99,213,96,140,162,31,187,111,247,192,193,241]",
              "sol": "abi.encode(\"100,250,73,21,195,0,186,225,156,19,5,29,58,113,136,214,160,61,130,189,99,213,96,140,162,31,187,111,247,192,193,241\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:46.823ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[9,48,95,228,33,9,172,154,45,36,92,4,0,149,242,82,205,9,231,253,120,181,48,117,52,4,62,23,111,117,9,255]",
              "sol": "abi.encode(\"9,48,95,228,33,9,172,154,45,36,92,4,0,149,242,82,205,9,231,253,120,181,48,117,52,4,62,23,111,117,9,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:10:56.198ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[32,226,17,67,60,86,169,161,238,212,18,127,65,28,117,96,238,8,191,241,106,253,225,140,152,27,50,88,223,96,136,101,163,42,44,134,34,138,120,143,64,218,4,178,203,221,23,49,147,150,171,45,139,90,158,113,121,161,254,97,156,245,65,206]",
              "sol": "abi.encode(\"32,226,17,67,60,86,169,161,238,212,18,127,65,28,117,96,238,8,191,241,106,253,225,140,152,27,50,88,223,96,136,101,163,42,44,134,34,138,120,143,64,218,4,178,203,221,23,49,147,150,171,45,139,90,158,113,121,161,254,97,156,245,65,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:05.344ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[253,134,215,156,159,31,146,165,183,135,157,166,90,136,67,79,232,88,115,17,39,253,240,249,164,8,87,107]",
              "sol": "abi.encode(\"253,134,215,156,159,31,146,165,183,135,157,166,90,136,67,79,232,88,115,17,39,253,240,249,164,8,87,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:14.706ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1,105,109,87,115,209,130,103,62,187,67,171,63,98,138,33,198,119,225,56,98,218,109,203,150,147,120,123,198,157,50,106,194,79,51,250,76,83,202,43,98,17,231,210,221,33,249,6,122,191,84,250,165,13,109,203,71,204,149,174,4,166,144,89,146,181,244,239,32,219,253,33,141,171,253,201,240,104,192,244,103,160,252,204,50,126,184,18,98,140,15,222,74,231,103,49,81,148,179,44,66,154,83,27,111,150,154,139,104,7,52,11,56,165,217,178,180,155,178,162,246,3,3,143,141,71,1,92,103,5,117,175,174,149,88,229,184,15,110,244,10,210,136,6,254,85,21,114,25,159,74,167,98,110,104,10,223,183,91,90,207,22,53,38,240,183,42,212,178,243,74,215,22,130,108,243,250,225,87,12,134,226,60,185,42,126,215,145,168,169,176,53,92,226,237,52,61,90,200,253,157,208,214,169,94,215,233,99,128,0,59,111,3,225,216,53,11,113,231,7,91,188,115,247,112,175,54,235,25,48,65,135,65,160,22,81,185,168,214,5,233,48,1,126,127,71,80,18,171,51,26,165,117,92,135]",
              "sol": "abi.encode(\"1,105,109,87,115,209,130,103,62,187,67,171,63,98,138,33,198,119,225,56,98,218,109,203,150,147,120,123,198,157,50,106,194,79,51,250,76,83,202,43,98,17,231,210,221,33,249,6,122,191,84,250,165,13,109,203,71,204,149,174,4,166,144,89,146,181,244,239,32,219,253,33,141,171,253,201,240,104,192,244,103,160,252,204,50,126,184,18,98,140,15,222,74,231,103,49,81,148,179,44,66,154,83,27,111,150,154,139,104,7,52,11,56,165,217,178,180,155,178,162,246,3,3,143,141,71,1,92,103,5,117,175,174,149,88,229,184,15,110,244,10,210,136,6,254,85,21,114,25,159,74,167,98,110,104,10,223,183,91,90,207,22,53,38,240,183,42,212,178,243,74,215,22,130,108,243,250,225,87,12,134,226,60,185,42,126,215,145,168,169,176,53,92,226,237,52,61,90,200,253,157,208,214,169,94,215,233,99,128,0,59,111,3,225,216,53,11,113,231,7,91,188,115,247,112,175,54,235,25,48,65,135,65,160,22,81,185,168,214,5,233,48,1,126,127,71,80,18,171,51,26,165,117,92,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:23.900ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[35]",
              "sol": "abi.encode(\"35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:32.992ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[182]",
              "sol": "abi.encode(\"182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:42.467ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[18,128,99,172,127,69,115,119,203,252,98,58,148,89,171,41,91,236,65,224,219,203,232,177,8,156,150,214,77,246,252,90,140,127,247,83,212,148,143,96,251,98,108,247,109,168,8,69,43,163,182,98,51,178,20,28,53,56,80,58,22,160,62,52]",
              "sol": "abi.encode(\"18,128,99,172,127,69,115,119,203,252,98,58,148,89,171,41,91,236,65,224,219,203,232,177,8,156,150,214,77,246,252,90,140,127,247,83,212,148,143,96,251,98,108,247,109,168,8,69,43,163,182,98,51,178,20,28,53,56,80,58,22,160,62,52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:11:51.635ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[198,103,132,190,106,116,168,5,4,172,51,62,24,137,122,139,51,165,77,31,2,7,85,148,197,152,126,141,228,58,27,116,130,159,135,54,142,30,103,252,238,16,172,190,47,118,161,22,228,18,56,208,87,241,106,22,113,48,91,169,13,182,170,73,3,97]",
              "sol": "abi.encode(\"198,103,132,190,106,116,168,5,4,172,51,62,24,137,122,139,51,165,77,31,2,7,85,148,197,152,126,141,228,58,27,116,130,159,135,54,142,30,103,252,238,16,172,190,47,118,161,22,228,18,56,208,87,241,106,22,113,48,91,169,13,182,170,73,3,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:31.715ZMockERC20.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.440ZAccount.proxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proxy(address,bytes) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[209,134,211,49,0,27,230,206,232,159,30,171,83,75,50,66,121,126,10,224,254,246,172,189,198,7,188,203,65,131,193,68]",
              "sol": "abi.encode(\"209,134,211,49,0,27,230,206,232,159,30,171,83,75,50,66,121,126,10,224,254,246,172,189,198,7,188,203,65,131,193,68\")"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proxy(address,bytes) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[209,134,211,49,0,27,230,206,232,159,30,171,83,75,50,66,121,126,10,224,254,246,172,189,198,7,188,203,65,131,193,68]",
                "sol": "abi.encode(\"209,134,211,49,0,27,230,206,232,159,30,171,83,75,50,66,121,126,10,224,254,246,172,189,198,7,188,203,65,131,193,68\")"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.451ZAccount.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "[255,119,57,50,2,157,139,26,140,237,167,149,51,125,230,93,105,242,212,73,80,156,124,12,223,44,23,34,225,107,53,49]",
              "sol": "stringToBytes32(\"255,119,57,50,2,157,139,26,140,237,167,149,51,125,230,93,105,242,212,73,80,156,124,12,223,44,23,34,225,107,53,49\")"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.453ZAccount.addService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addService(uint256) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addService(uint256) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.459ZAccount.removeService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute removeService(uint8) WHEN msg.sender==beneficiary,services!=0",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail removeService(uint8) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.466ZAccount.updateMetadata": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateMetadata(bytes32) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "[130,233,218,16,100,3,194,166,248,123,31,209,26,14,99,43,103,70,218,120,250,76,210,248,63,226,243,132,93,252,107,10]",
              "sol": "stringToBytes32(\"130,233,218,16,100,3,194,166,248,123,31,209,26,14,99,43,103,70,218,120,250,76,210,248,63,226,243,132,93,252,107,10\")"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateMetadata(bytes32) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "[130,233,218,16,100,3,194,166,248,123,31,209,26,14,99,43,103,70,218,120,250,76,210,248,63,226,243,132,93,252,107,10]",
                "sol": "stringToBytes32(\"130,233,218,16,100,3,194,166,248,123,31,209,26,14,99,43,103,70,218,120,250,76,210,248,63,226,243,132,93,252,107,10\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.473ZAccount.requestService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute requestService(uint256,string) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail requestService(uint256,string) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "\"IsLibrary\"",
                "sol": "\"IsLibrary\""
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.474ZAccount.creator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute creator()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.475ZConvergentBeta.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.477ZConvergentBeta.setBaseAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setBaseAccount(address) WHEN msg.sender==_owner,_newBaseAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setBaseAccount(address) when NOT comply with: _newBaseAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.481ZConvergentBeta.createAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "[198,194,43,169,100,41,64,109,108,139,32,246,17,27,112,72,227,248,232,62,9,4,206,185,109,135,163,67,68,247,83,96]",
              "sol": "stringToBytes32(\"198,194,43,169,100,41,64,109,108,139,32,246,17,27,112,72,227,248,232,62,9,4,206,185,109,135,163,67,68,247,83,96\")"
            },
            {
              "js": "\"qnvjzn\"",
              "sol": "\"qnvjzn\""
            },
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.482ZConvergentBeta.upgradeAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute upgradeAccount(address) WHEN msg.sender==accountToCreator",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.483ZConvergentBeta.getImplementationForAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getImplementationForAccount(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.483ZDoubleCurveToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.484ZDoubleCurveToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "59-61",
          "restrictions": [
            "_preMint > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint>0,initialized!=true",
          "parameters": [
            {
              "js": "contractDoubleCurveToken.address",
              "sol": "contractDoubleCurveToken.address"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_preMint <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint<=0,initialized!=true",
          "parameters": [
            {
              "js": "contractAccount.address",
              "sol": "contractAccount.address"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.487ZDoubleCurveToken.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-82",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset==0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[8],gasPrice:27}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"27\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[8],gasPrice:27}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"27\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "80-82",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset!=0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[9],gasPrice:11}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"11\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[9],gasPrice:11}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"11\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.503ZDoubleCurveToken.buy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "104-106",
          "restrictions": [
            "msg.value > cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value>cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[5],value:256,gasPrice:18}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"256\",\"gasPrice\":\"18\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:256,gasPrice:18}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":256,\"gasPrice\":18}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.value <= cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value<=cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[5],value:256,gasPrice:17}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"256\",\"gasPrice\":\"17\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:256,gasPrice:17}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":256,\"gasPrice\":17}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "107-110",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[4],gasPrice:97}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"97\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:97}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":97}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.518ZDoubleCurveToken.sell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "135-139",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[6],gasPrice:1532892062}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"1532892062\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:1532892062}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":1532892062}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "137-139",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[8],gasPrice:11}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"11\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:11}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":11}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.529ZDoubleCurveToken.priceToBuy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute priceToBuy(uint256)",
          "parameters": [
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.530ZDoubleCurveToken.returnForSell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute returnForSell(uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.530ZDoubleCurveToken.amountToReserve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amountToReserve(uint256) WHEN spreadD>0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail amountToReserve(uint256) when NOT comply with: spreadD > 0",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.534ZDoubleCurveToken.currentPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute currentPrice() WHEN slopeD>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail currentPrice() when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.537ZDoubleCurveToken.marketCap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute marketCap() WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.539ZProxyDoubleCurveToken.testsolveForY": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsolveForY(uint256) WHEN slopeD>0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsolveForY(uint256) when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:12:39.543ZProxyDoubleCurveToken.testcurveIntegral": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcurveIntegral(uint256) WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.544ZGasPriceOracle.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:12:39.545ZGasPriceOracle.setGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setGasPrice(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}