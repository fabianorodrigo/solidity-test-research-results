,{
  "2020-11-13T16:31:31.498ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[73,136,16,237,164,201,13,188,147,44,138,8,158,111,224,59,159,114,100,207,204,21,109,218,184,191,45,238,228,245,237,178]",
              "sol": "abi.encode(\"73,136,16,237,164,201,13,188,147,44,138,8,158,111,224,59,159,114,100,207,204,21,109,218,184,191,45,238,228,245,237,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:31:40.873ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[50,132,198,190,28,130,150,88,173,235,11,23,246,25,179,199,242,29,100,44,224,143,49,18,248,41,145,92,133,37,23,210]",
              "sol": "abi.encode(\"50,132,198,190,28,130,150,88,173,235,11,23,246,25,179,199,242,29,100,44,224,143,49,18,248,41,145,92,133,37,23,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:31:49.995ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[4,48,167,146,200,52,214,120,81,48,160,135,47,179,6,167,135,103,204,196,193,42,184,167,0,14,141,161,162,220,10,3]",
              "sol": "abi.encode(\"4,48,167,146,200,52,214,120,81,48,160,135,47,179,6,167,135,103,204,196,193,42,184,167,0,14,141,161,162,220,10,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:31:59.167ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[141,92,24,155,235,78,91,167,237,177,233,118,149,172,84,215,62,140,60,61,44,237,235,175,250,155,191,24,104,186,41,186]",
              "sol": "abi.encode(\"141,92,24,155,235,78,91,167,237,177,233,118,149,172,84,215,62,140,60,61,44,237,235,175,250,155,191,24,104,186,41,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:08.352ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[147,200,30,245,43,38,249,234,166,92,81,200,98,162,41,150,7,137,110,51,138,10,214,127,70,237,123,21,157,156,61,168]",
              "sol": "abi.encode(\"147,200,30,245,43,38,249,234,166,92,81,200,98,162,41,150,7,137,110,51,138,10,214,127,70,237,123,21,157,156,61,168\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:17.583ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[226,17,84,149,52,178,117,4,161,139,61,26,144,190,55,44,176,244,78,250,16,122,228,167,172,235,49,224,241,142,3,15]",
              "sol": "abi.encode(\"226,17,84,149,52,178,117,4,161,139,61,26,144,190,55,44,176,244,78,250,16,122,228,167,172,235,49,224,241,142,3,15\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:26.794ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[82,42,159,3,41,56,181,175,172,130,235,229,92,10,108,220,217,47,73,157,107,104,251,65,53,39,232,164,47,54,183,179]",
              "sol": "abi.encode(\"82,42,159,3,41,56,181,175,172,130,235,229,92,10,108,220,217,47,73,157,107,104,251,65,53,39,232,164,47,54,183,179\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:36.040ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[29,171,241,124,243,205,11,15,167,227,122,61,237,8,154,36,200,7,73]",
              "sol": "abi.encode(\"29,171,241,124,243,205,11,15,167,227,122,61,237,8,154,36,200,7,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:45.190ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[79,189,205]",
              "sol": "abi.encode(\"79,189,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:32:54.337ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[240,34,226,217,190,87,225,253,125,175,70,28,217,202,109,94,144]",
              "sol": "abi.encode(\"240,34,226,217,190,87,225,253,125,175,70,28,217,202,109,94,144\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:33:03.471ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[114]",
              "sol": "abi.encode(\"114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:33:12.758ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[104,168,247,30,203,138,43,245,146,137,79,229,153,142,84,185,130,105,136,236,186,107,117,179,113,226,135,110]",
              "sol": "abi.encode(\"104,168,247,30,203,138,43,245,146,137,79,229,153,142,84,185,130,105,136,236,186,107,117,179,113,226,135,110\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:33:21.908ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[252,5,40]",
              "sol": "abi.encode(\"252,5,40\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:33:31.112ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[112,213,195,214,168,80,58,175,12,81,77,28,158,41,174,204,13,197,94,150,3,203,24,117,39,63,27,228,198,118,252,208,211,179,155,221,103,16,168,88,199,120,4,252,77,55,174,190,114,232,74,86,169,191,189,247,113,68,99,94,159,38,125,252,197,38,79,119,62,142,210,98,225,217,174,250,110,116,1,97,200,241,199,242,219,97,112,48,241,94,41,233,116,98,218,248,223,159,24,217,254,207,75,8,205,63,222,126,37,40,11,139,106,149,52,102,245,143,139,114,46,158,91,95,45,154,166,201,73,0,217,49,197,61,171,53,120,128,5,11,240,153,131,223,89,232,181,226,79,102,127,247,114,112,133,104,80,126,34,177,69,81,96,66,32,198,105,69,239,218,223,33,173,209,124,66,115,40,223,97,162,71,209,37,218,191,144,77,235,89,154,116,196,123,107,139,203,75,221,226,141,154,53,11,22,209,222,24,135,98,204,10,35,31,57,183,237,149,58,154,107,124,198,219,188,65,147,183,75,49,86,197,105,11,0,196,76,105,201,231,9,75,65,56,38,93,176,1,9,167,144,171,98,255,147]",
              "sol": "abi.encode(\"112,213,195,214,168,80,58,175,12,81,77,28,158,41,174,204,13,197,94,150,3,203,24,117,39,63,27,228,198,118,252,208,211,179,155,221,103,16,168,88,199,120,4,252,77,55,174,190,114,232,74,86,169,191,189,247,113,68,99,94,159,38,125,252,197,38,79,119,62,142,210,98,225,217,174,250,110,116,1,97,200,241,199,242,219,97,112,48,241,94,41,233,116,98,218,248,223,159,24,217,254,207,75,8,205,63,222,126,37,40,11,139,106,149,52,102,245,143,139,114,46,158,91,95,45,154,166,201,73,0,217,49,197,61,171,53,120,128,5,11,240,153,131,223,89,232,181,226,79,102,127,247,114,112,133,104,80,126,34,177,69,81,96,66,32,198,105,69,239,218,223,33,173,209,124,66,115,40,223,97,162,71,209,37,218,191,144,77,235,89,154,116,196,123,107,139,203,75,221,226,141,154,53,11,22,209,222,24,135,98,204,10,35,31,57,183,237,149,58,154,107,124,198,219,188,65,147,183,75,49,86,197,105,11,0,196,76,105,201,231,9,75,65,56,38,93,176,1,9,167,144,171,98,255,147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:11.097ZMockERC20.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.873ZAccount.proxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proxy(address,bytes) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[32,78,69,129,112,196,54,184,47,234,9,161,144,223,73,197,203,91,214,171,250,109,16,134,115,96,94,62,82,4,166,28]",
              "sol": "abi.encode(\"32,78,69,129,112,196,54,184,47,234,9,161,144,223,73,197,203,91,214,171,250,109,16,134,115,96,94,62,82,4,166,28\")"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proxy(address,bytes) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[32,78,69,129,112,196,54,184,47,234,9,161,144,223,73,197,203,91,214,171,250,109,16,134,115,96,94,62,82,4,166,28]",
                "sol": "abi.encode(\"32,78,69,129,112,196,54,184,47,234,9,161,144,223,73,197,203,91,214,171,250,109,16,134,115,96,94,62,82,4,166,28\")"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.881ZAccount.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[62,25,3,174,38,219,164,226,17,138,8,127,254,28,184,200,101,94,66,54,115,187,223,50,241,52,160,240,242,225,227,54]",
              "sol": "stringToBytes32(\"62,25,3,174,38,219,164,226,17,138,8,127,254,28,184,200,101,94,66,54,115,187,223,50,241,52,160,240,242,225,227,54\")"
            },
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.883ZAccount.addService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addService(uint256) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addService(uint256) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.890ZAccount.removeService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute removeService(uint8) WHEN msg.sender==beneficiary,services!=0",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail removeService(uint8) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.898ZAccount.updateMetadata": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateMetadata(bytes32) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "[12,158,217,207,134,108,47,211,232,149,173,165,68,233,78,228,61,117,51,250,225,90,70,128,249,205,196,40,42,230,200,124]",
              "sol": "stringToBytes32(\"12,158,217,207,134,108,47,211,232,149,173,165,68,233,78,228,61,117,51,250,225,90,70,128,249,205,196,40,42,230,200,124\")"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateMetadata(bytes32) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "[12,158,217,207,134,108,47,211,232,149,173,165,68,233,78,228,61,117,51,250,225,90,70,128,249,205,196,40,42,230,200,124]",
                "sol": "stringToBytes32(\"12,158,217,207,134,108,47,211,232,149,173,165,68,233,78,228,61,117,51,250,225,90,70,128,249,205,196,40,42,230,200,124\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.905ZAccount.requestService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute requestService(uint256,string) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail requestService(uint256,string) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.906ZAccount.creator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute creator()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.907ZConvergentBeta.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.908ZConvergentBeta.setBaseAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setBaseAccount(address) WHEN msg.sender==_owner,_newBaseAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setBaseAccount(address) when NOT comply with: _newBaseAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.913ZConvergentBeta.createAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[51,185,33,33,50,91,128,112,213,138,110,178,56,22,226,188,149,186,119,168,186,85,32,0,7,187,254,70,25,176,34,198]",
              "sol": "stringToBytes32(\"51,185,33,33,50,91,128,112,213,138,110,178,56,22,226,188,149,186,119,168,186,85,32,0,7,187,254,70,25,176,34,198\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.913ZConvergentBeta.upgradeAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute upgradeAccount(address) WHEN msg.sender==accountToCreator",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.914ZConvergentBeta.getImplementationForAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getImplementationForAccount(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.915ZDoubleCurveToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.915ZDoubleCurveToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "59-61",
          "restrictions": [
            "_preMint > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint>0,initialized!=true",
          "parameters": [
            {
              "js": "contractAccount.address",
              "sol": "contractAccount.address"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_preMint <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint<=0,initialized!=true",
          "parameters": [
            {
              "js": "contractMockERC20.address",
              "sol": "contractMockERC20.address"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "\"22x8c\"",
              "sol": "\"22x8c\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.920ZDoubleCurveToken.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-82",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset==0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[6],gasPrice:64}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"64\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[6],gasPrice:64}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"64\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "80-82",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset!=0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[9],gasPrice:255}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"255\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[9],gasPrice:255}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"255\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.937ZDoubleCurveToken.buy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "104-106",
          "restrictions": [
            "msg.value > cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value>cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[1],value:9999,gasPrice:2}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"9999\",\"gasPrice\":\"2\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:9999,gasPrice:2}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":9999,\"gasPrice\":2}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.value <= cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value<=cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[4],value:1532892064,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"1532892064\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:1532892064,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":1532892064,\"gasPrice\":0}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "107-110",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[3],gasPrice:1532892063}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"1532892063\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:1532892063}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":1532892063}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.953ZDoubleCurveToken.sell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "135-139",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[2],gasPrice:2}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"2\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:2}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":2}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "137-139",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[2],gasPrice:9}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"9\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:9}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":9}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.963ZDoubleCurveToken.priceToBuy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute priceToBuy(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.964ZDoubleCurveToken.returnForSell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute returnForSell(uint256)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.964ZDoubleCurveToken.amountToReserve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amountToReserve(uint256) WHEN spreadD>0",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail amountToReserve(uint256) when NOT comply with: spreadD > 0",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.968ZDoubleCurveToken.currentPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute currentPrice() WHEN slopeD>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail currentPrice() when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.972ZDoubleCurveToken.marketCap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute marketCap() WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.974ZProxyDoubleCurveToken.testsolveForY": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsolveForY(uint256) WHEN slopeD>0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsolveForY(uint256) when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:34:18.979ZProxyDoubleCurveToken.testcurveIntegral": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcurveIntegral(uint256) WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.980ZGasPriceOracle.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:34:18.981ZGasPriceOracle.setGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setGasPrice(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}