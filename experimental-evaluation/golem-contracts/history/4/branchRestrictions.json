,{
  "2020-11-10T11:47:16.236ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:47:22.648ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+709",
              "sol": "block.number+709"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+709+166",
              "sol": "block.number+709+166"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709",
                "sol": "block.number+709"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709+166",
                "sol": "block.number+709+166"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709",
                "sol": "block.number+709"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709+166",
                "sol": "block.number+709+166"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709+166",
                "sol": "block.number+709+166"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709",
                "sol": "block.number+709"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+709",
                "sol": "block.number+709"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:47:29.073ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:47:35.708ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:47:42.264ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:47:42.265ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:47:55.460ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:02.218ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.963ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.964ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.965ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.965ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.966ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.966ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.967ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.968ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.969ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.970ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.971ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.971ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.972ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.973ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.974ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.974ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.975ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.977ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.978ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.978ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:99}",
              "sol": "{\"from\":\"0x0\",\"value\":\"99\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:99}",
                "sol": "{\"from\":\"0x0\",\"value\":\"99\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.984ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.985ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.990ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.990ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.990ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.991ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.991ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[46,101,120,20,114,62,147,202,13,22,210,64,24,61,74,203,99,48,198,11,236,210,238,122,196,147,131,219,133,36,144,228]",
              "sol": "stringToBytes32(\"46,101,120,20,114,62,147,202,13,22,210,64,24,61,74,203,99,48,198,11,236,210,238,122,196,147,131,219,133,36,144,228\")"
            },
            {
              "js": "[223,151,62,32,100,215,55,36,27,147,156,122,190,242,18,117,224,54,118,233,149,231,77,82,114,177,171,161,41,173,230,225]",
              "sol": "stringToBytes32(\"223,151,62,32,100,215,55,36,27,147,156,122,190,242,18,117,224,54,118,233,149,231,77,82,114,177,171,161,41,173,230,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.991ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[17,126,27,62,56,161,7,167,152,217,33,183,154,101,99,35,126,233,196,233]",
              "sol": "abi.encode(\"17,126,27,62,56,161,7,167,152,217,33,183,154,101,99,35,126,233,196,233\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[16,43,235,48,170,172,7,166,79,76,14,30,153,253,191,186,127,225,187,69,94]",
                "sol": "bytes21(\"16,43,235,48,170,172,7,166,79,76,14,30,153,253,191,186,127,225,187,69,94\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.993ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[229,115,128,26,185,211,218,199,133,249,221,53,82,222,204,229,41,76,94,242,158,11,48,218,200,234,188,253,194,9,164,17]",
              "sol": "stringToBytes32(\"229,115,128,26,185,211,218,199,133,249,221,53,82,222,204,229,41,76,94,242,158,11,48,218,200,234,188,253,194,9,164,17\")"
            },
            {
              "js": "[134,65,108,106,194,6,95,20,152,174,39,211,34,154,131,224,2,162,121,228,146,42,9,130,232,82,21,47,37,244,117,228]",
              "sol": "stringToBytes32(\"134,65,108,106,194,6,95,20,152,174,39,211,34,154,131,224,2,162,121,228,146,42,9,130,232,82,21,47,37,244,117,228\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.993ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.993ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.994ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.995ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.995ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.996ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:08.997ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:08.998ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.000ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.001ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[38,176,25,5,243,242,140,230,233,89,249,65,197,70,172,148,155,104,37,122,20,217,198,39,43,175,110,106,51,53,73,238],[203,165,41,21,63,150,2,1,251,27,92,163,235,13,124,242,205,162,59,242,63,168,129,17,230,9,42,180,155,42,55,42],[243,143,60,195,140,97,204,33,29,141,201,140,234,206,36,180,25,3,151,210,230,8,25,185,66,115,55,38,241,125,118,19],[78,193,71,101,211,126,63,185,39,152,200,62,225,119,17,39,123,148,20,51,26,124,223,60,93,2,51,238,182,77,235,110],[57,192,82,228,217,187,39,175,52,216,137,133,33,180,94,138,199,112,9,214,194,247,130,166,127,179,35,66,75,79,171,161],[138,114,47,170,180,73,127,128,112,157,232,177,170,156,77,93,67,208,36,236,131,127,34,233,7,175,75,124,159,102,113,136],[230,40,234,28,93,164,166,33,29,234,239,2,50,20,108,243,84,138,153,195,79,211,53,169,51,47,37,249,167,228,136,226]]",
              "sol": "[bytes32(stringToBytes32(\"38,176,25,5,243,242,140,230,233,89,249,65,197,70,172,148,155,104,37,122,20,217,198,39,43,175,110,106,51,53,73,238\")),bytes32(stringToBytes32(\"203,165,41,21,63,150,2,1,251,27,92,163,235,13,124,242,205,162,59,242,63,168,129,17,230,9,42,180,155,42,55,42\")),bytes32(stringToBytes32(\"243,143,60,195,140,97,204,33,29,141,201,140,234,206,36,180,25,3,151,210,230,8,25,185,66,115,55,38,241,125,118,19\")),bytes32(stringToBytes32(\"78,193,71,101,211,126,63,185,39,152,200,62,225,119,17,39,123,148,20,51,26,124,223,60,93,2,51,238,182,77,235,110\")),bytes32(stringToBytes32(\"57,192,82,228,217,187,39,175,52,216,137,133,33,180,94,138,199,112,9,214,194,247,130,166,127,179,35,66,75,79,171,161\")),bytes32(stringToBytes32(\"138,114,47,170,180,73,127,128,112,157,232,177,170,156,77,93,67,208,36,236,131,127,34,233,7,175,75,124,159,102,113,136\")),bytes32(stringToBytes32(\"230,40,234,28,93,164,166,33,29,234,239,2,50,20,108,243,84,138,153,195,79,211,53,169,51,47,37,249,167,228,136,226\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-386",
              "sol": "block.timestamp-386"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[38,176,25,5,243,242,140,230,233,89,249,65,197,70,172,148,155,104,37,122,20,217,198,39,43,175,110,106,51,53,73,238],[203,165,41,21,63,150,2,1,251,27,92,163,235,13,124,242,205,162,59,242,63,168,129,17,230,9,42,180,155,42,55,42],[243,143,60,195,140,97,204,33,29,141,201,140,234,206,36,180,25,3,151,210,230,8,25,185,66,115,55,38,241,125,118,19],[78,193,71,101,211,126,63,185,39,152,200,62,225,119,17,39,123,148,20,51,26,124,223,60,93,2,51,238,182,77,235,110],[57,192,82,228,217,187,39,175,52,216,137,133,33,180,94,138,199,112,9,214,194,247,130,166,127,179,35,66,75,79,171,161],[138,114,47,170,180,73,127,128,112,157,232,177,170,156,77,93,67,208,36,236,131,127,34,233,7,175,75,124,159,102,113,136],[230,40,234,28,93,164,166,33,29,234,239,2,50,20,108,243,84,138,153,195,79,211,53,169,51,47,37,249,167,228,136,226]]",
                "sol": "[bytes32(stringToBytes32(\"38,176,25,5,243,242,140,230,233,89,249,65,197,70,172,148,155,104,37,122,20,217,198,39,43,175,110,106,51,53,73,238\")),bytes32(stringToBytes32(\"203,165,41,21,63,150,2,1,251,27,92,163,235,13,124,242,205,162,59,242,63,168,129,17,230,9,42,180,155,42,55,42\")),bytes32(stringToBytes32(\"243,143,60,195,140,97,204,33,29,141,201,140,234,206,36,180,25,3,151,210,230,8,25,185,66,115,55,38,241,125,118,19\")),bytes32(stringToBytes32(\"78,193,71,101,211,126,63,185,39,152,200,62,225,119,17,39,123,148,20,51,26,124,223,60,93,2,51,238,182,77,235,110\")),bytes32(stringToBytes32(\"57,192,82,228,217,187,39,175,52,216,137,133,33,180,94,138,199,112,9,214,194,247,130,166,127,179,35,66,75,79,171,161\")),bytes32(stringToBytes32(\"138,114,47,170,180,73,127,128,112,157,232,177,170,156,77,93,67,208,36,236,131,127,34,233,7,175,75,124,159,102,113,136\")),bytes32(stringToBytes32(\"230,40,234,28,93,164,166,33,29,234,239,2,50,20,108,243,84,138,153,195,79,211,53,169,51,47,37,249,167,228,136,226\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.002ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "[148,200,238,76,84,83,123,45,153,77,225,93,89,140,145,70,28,210,42,146,51,5,96,245,81,231,126,65,88,32,173,91]",
              "sol": "abi.encode(\"148,200,238,76,84,83,123,45,153,77,225,93,89,140,145,70,28,210,42,146,51,5,96,245,81,231,126,65,88,32,173,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "[148,200,238,76,84,83,123,45,153,77,225,93,89,140,145,70,28,210,42,146,51,5,96,245,81,231,126,65,88,32,173,91]",
                "sol": "abi.encode(\"148,200,238,76,84,83,123,45,153,77,225,93,89,140,145,70,28,210,42,146,51,5,96,245,81,231,126,65,88,32,173,91\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.003ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.004ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.004ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.004ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.005ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.005ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.005ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.007ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.007ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.008ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.008ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.009ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.009ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.009ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[61,188,89,115,141,155,179,29,220,190,240,67,133,169,105,73,242,35,226,3,197,85,96,251,166,143,173,182,176,105,153,214]",
              "sol": "abi.encode(\"61,188,89,115,141,155,179,29,220,190,240,67,133,169,105,73,242,35,226,3,197,85,96,251,166,143,173,182,176,105,153,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.010ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.010ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.012ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229]",
              "sol": "stringToBytes32(\"14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156]",
              "sol": "stringToBytes32(\"185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156\")"
            },
            {
              "js": "[226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232]",
              "sol": "stringToBytes32(\"226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229]",
                "sol": "stringToBytes32(\"14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156]",
                "sol": "stringToBytes32(\"185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156\")"
              },
              {
                "js": "[226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232]",
                "sol": "stringToBytes32(\"226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229]",
                "sol": "stringToBytes32(\"14,69,220,141,208,183,159,44,71,157,106,174,170,172,132,240,98,56,176,173,97,84,183,55,127,157,131,197,168,44,192,229\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156]",
                "sol": "stringToBytes32(\"185,235,208,115,70,222,84,162,245,154,21,40,120,117,125,143,102,62,47,250,165,185,51,163,12,154,61,178,29,246,14,156\")"
              },
              {
                "js": "[226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232]",
                "sol": "stringToBytes32(\"226,228,22,95,3,57,6,195,165,141,39,75,40,248,53,149,12,133,194,48,188,120,61,95,110,160,71,244,248,22,215,232\")"
              },
              {
                "js": 4,
                "sol": 4
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.014ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1337,159,0,3]",
              "sol": "[uint256(1337),uint256(159),uint256(0),uint256(3)]"
            },
            {
              "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
              "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
            },
            {
              "js": "[161,101,5,15]",
              "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
            },
            {
              "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
              "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
            },
            {
              "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
              "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1337,159,0,3]",
                "sol": "[uint256(1337),uint256(159),uint256(0),uint256(3)]"
              },
              {
                "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
                "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
              },
              {
                "js": "[161,101,5,15]",
                "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
              },
              {
                "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
                "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
              },
              {
                "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
                "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[14,0,256,21,99]",
                "sol": "[3,160,1001,1337,1000]"
              },
              {
                "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
                "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
              },
              {
                "js": "[161,101,5,15]",
                "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
              },
              {
                "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
                "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
              },
              {
                "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
                "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[4,1336,10000,1337,1001]",
                "sol": "[15,1000,1,17,6]"
              },
              {
                "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
                "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
              },
              {
                "js": "[161,101,5,15]",
                "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
              },
              {
                "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
                "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
              },
              {
                "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
                "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[18,100,17,255,0]",
                "sol": "[18,100,9999,1,1337]"
              },
              {
                "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
                "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
              },
              {
                "js": "[161,101,5,15]",
                "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
              },
              {
                "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
                "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
              },
              {
                "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
                "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[6,15,18,10001,4]",
                "sol": "[999,10,14,9999,11]"
              },
              {
                "js": "[[159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185],[145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31],[100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89],[228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41]]",
                "sol": "[bytes32(stringToBytes32(\"159,7,47,36,159,146,171,0,84,240,4,17,31,54,103,36,188,154,93,52,107,211,55,190,45,161,100,51,51,68,121,185\")),bytes32(stringToBytes32(\"145,236,87,51,65,229,249,104,134,90,176,222,1,237,251,108,48,178,59,161,165,201,4,254,78,201,48,206,255,182,231,31\")),bytes32(stringToBytes32(\"100,166,183,58,39,245,74,3,120,26,230,17,160,5,219,79,222,111,188,15,132,18,101,107,2,223,158,109,31,155,179,89\")),bytes32(stringToBytes32(\"228,105,34,15,46,71,245,233,243,156,5,149,108,211,53,0,137,134,221,165,19,229,31,104,101,157,70,29,70,26,28,41\"))]"
              },
              {
                "js": "[161,101,5,15]",
                "sol": "[uint8(161),uint8(101),uint8(5),uint8(15)]"
              },
              {
                "js": "[[60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94],[16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147],[204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100],[70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253]]",
                "sol": "[bytes32(stringToBytes32(\"60,225,197,107,0,1,164,240,190,7,37,62,103,69,78,112,65,220,218,207,170,220,104,117,250,231,188,105,208,199,148,94\")),bytes32(stringToBytes32(\"16,103,112,142,217,169,222,163,187,223,236,185,44,8,27,153,87,36,146,22,188,29,228,37,109,188,13,56,222,161,51,147\")),bytes32(stringToBytes32(\"204,90,35,227,173,164,11,181,64,134,121,2,7,221,141,163,45,227,55,0,210,237,88,9,224,136,26,128,15,63,223,100\")),bytes32(stringToBytes32(\"70,111,10,106,15,119,183,236,205,49,246,69,59,205,189,86,22,70,67,179,158,240,183,33,31,55,4,119,82,180,82,253\"))]"
              },
              {
                "js": "[[112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99],[108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81],[34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195],[96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91]]",
                "sol": "[bytes32(stringToBytes32(\"112,203,189,180,135,236,80,60,29,193,12,60,100,58,212,197,82,124,34,169,130,39,189,142,169,7,43,24,108,216,125,99\")),bytes32(stringToBytes32(\"108,54,200,128,32,90,110,143,61,72,166,110,21,207,74,139,165,254,142,204,182,193,186,156,70,28,61,158,100,67,169,81\")),bytes32(stringToBytes32(\"34,169,120,85,8,219,161,116,181,236,82,139,91,227,138,106,252,145,73,39,91,197,0,227,9,21,139,140,32,224,120,195\")),bytes32(stringToBytes32(\"96,219,224,62,197,247,115,69,106,123,40,204,61,73,187,198,121,125,155,169,20,68,15,198,33,255,37,122,14,168,6,91\"))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.020ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239]",
              "sol": "stringToBytes32(\"25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182]",
              "sol": "stringToBytes32(\"237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182\")"
            },
            {
              "js": "[254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203]",
              "sol": "stringToBytes32(\"254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "[25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239]",
                "sol": "stringToBytes32(\"25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182]",
                "sol": "stringToBytes32(\"237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182\")"
              },
              {
                "js": "[254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203]",
                "sol": "stringToBytes32(\"254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "[25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239]",
                "sol": "stringToBytes32(\"25,53,225,64,252,243,118,163,169,65,15,232,156,107,234,26,189,42,31,134,28,238,231,133,119,184,75,225,145,29,70,239\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182]",
                "sol": "stringToBytes32(\"237,88,201,68,126,140,149,65,137,222,179,244,60,152,240,53,129,79,53,108,158,42,99,93,176,125,122,138,22,124,174,182\")"
              },
              {
                "js": "[254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203]",
                "sol": "stringToBytes32(\"254,158,76,108,165,116,70,240,78,220,34,87,117,54,224,47,68,36,249,183,22,204,40,45,189,217,74,131,222,106,23,203\")"
              },
              {
                "js": 160,
                "sol": 160
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.021ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.022ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[83,241,107,41,164,230,228,163,92,148,233,245,224,57,130,19,95,184,246,44,182,163,140,214,96,84,122,141,15,36,80,242]",
              "sol": "stringToBytes32(\"83,241,107,41,164,230,228,163,92,148,233,245,224,57,130,19,95,184,246,44,182,163,140,214,96,84,122,141,15,36,80,242\")"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[223,35,59,112,9,89,132,168,7,204,29,134,240,71,130,21,52,149,255,53,52,50,214,255,40,128,81,243,128,106,39,91]",
              "sol": "stringToBytes32(\"223,35,59,112,9,89,132,168,7,204,29,134,240,71,130,21,52,149,255,53,52,50,214,255,40,128,81,243,128,106,39,91\")"
            },
            {
              "js": "[50,53,162,88,220,112,141,53,20,123,152,215,8,209,1,184,110,151,93,29,250,200,248,237,108,147,87,110,76,81,106,227]",
              "sol": "stringToBytes32(\"50,53,162,88,220,112,141,53,20,123,152,215,8,209,1,184,110,151,93,29,250,200,248,237,108,147,87,110,76,81,106,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.023ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.024ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:48:09.024ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:48:09.025ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}