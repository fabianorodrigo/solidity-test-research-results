,{
  "2020-11-11T05:32:02.808ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:09.216ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+746",
              "sol": "block.number+746"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+746+543",
              "sol": "block.number+746+543"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746",
                "sol": "block.number+746"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746+543",
                "sol": "block.number+746+543"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746",
                "sol": "block.number+746"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746+543",
                "sol": "block.number+746+543"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746+543",
                "sol": "block.number+746+543"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746",
                "sol": "block.number+746"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+746",
                "sol": "block.number+746"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:16.003ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:22.543ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:29.357ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:29.357ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:43.008ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:49.768ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.673ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.674ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.674ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": 19,
                "sol": 19
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.675ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.676ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.676ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.677ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.678ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.679ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.679ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.679ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.680ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.681ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.684ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.685ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.685ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.685ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.687ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.689ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.689ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:10001}",
              "sol": "{\"from\":\"0x0\",\"value\":\"10001\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:10001}",
                "sol": "{\"from\":\"0x0\",\"value\":\"10001\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.695ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.696ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.702ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.703ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.703ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.704ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.704ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[83,113,207,209,123,60,176,54,28,225,214,204,178,17,235,237,203,203,242,3,234,44,236,14,69,4,49,117,114,168,84,224]",
              "sol": "stringToBytes32(\"83,113,207,209,123,60,176,54,28,225,214,204,178,17,235,237,203,203,242,3,234,44,236,14,69,4,49,117,114,168,84,224\")"
            },
            {
              "js": "[139,195,173,152,185,113,195,126,204,198,53,235,134,199,219,5,255,177,242,245,183,158,145,139,115,97,244,223,227,180,197,84]",
              "sol": "stringToBytes32(\"139,195,173,152,185,113,195,126,204,198,53,235,134,199,219,5,255,177,242,245,183,158,145,139,115,97,244,223,227,180,197,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.705ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[70,167,222,175,209,63,6,240,156,145,80,27,169,37,68,51,178,33,83,204]",
              "sol": "abi.encode(\"70,167,222,175,209,63,6,240,156,145,80,27,169,37,68,51,178,33,83,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[10,22,246,43,253,214,199,101,204,254,241,0,14,156,132,57,166,99,69,143,33]",
                "sol": "bytes21(\"10,22,246,43,253,214,199,101,204,254,241,0,14,156,132,57,166,99,69,143,33\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.706ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[191,135,204,158,193,179,54,95,123,83,60,212,77,125,1,102,232,174,134,14,21,242,159,168,239,115,115,97,244,39,253,87]",
              "sol": "stringToBytes32(\"191,135,204,158,193,179,54,95,123,83,60,212,77,125,1,102,232,174,134,14,21,242,159,168,239,115,115,97,244,39,253,87\")"
            },
            {
              "js": "[76,95,166,254,58,228,18,81,156,45,236,143,18,37,168,109,171,133,34,252,181,119,56,213,68,126,170,210,90,167,205,224]",
              "sol": "stringToBytes32(\"76,95,166,254,58,228,18,81,156,45,236,143,18,37,168,109,171,133,34,252,181,119,56,213,68,126,170,210,90,167,205,224\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.707ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.707ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.708ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.709ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.709ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.709ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.709ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.711ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.713ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.713ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[174,172,175,179,205,28,150,53,112,62,123,141,31,38,79,135,29,121,199,161,39,24,115,171,0,50,234,29,33,254,75,85],[150,252,222,13,46,151,69,177,122,236,228,37,37,51,12,183,188,112,95,185,240,26,149,186,183,213,131,171,49,165,238,178],[127,251,198,54,114,240,85,71,122,180,168,185,25,151,110,67,141,214,50,192,243,41,150,167,152,27,58,198,216,4,122,68],[71,4,222,255,50,187,19,200,59,112,103,204,189,24,127,57,64,209,254,242,150,181,107,186,77,167,89,219,28,80,156,156]]",
              "sol": "[bytes32(stringToBytes32(\"174,172,175,179,205,28,150,53,112,62,123,141,31,38,79,135,29,121,199,161,39,24,115,171,0,50,234,29,33,254,75,85\")),bytes32(stringToBytes32(\"150,252,222,13,46,151,69,177,122,236,228,37,37,51,12,183,188,112,95,185,240,26,149,186,183,213,131,171,49,165,238,178\")),bytes32(stringToBytes32(\"127,251,198,54,114,240,85,71,122,180,168,185,25,151,110,67,141,214,50,192,243,41,150,167,152,27,58,198,216,4,122,68\")),bytes32(stringToBytes32(\"71,4,222,255,50,187,19,200,59,112,103,204,189,24,127,57,64,209,254,242,150,181,107,186,77,167,89,219,28,80,156,156\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-916",
              "sol": "block.timestamp-916"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[174,172,175,179,205,28,150,53,112,62,123,141,31,38,79,135,29,121,199,161,39,24,115,171,0,50,234,29,33,254,75,85],[150,252,222,13,46,151,69,177,122,236,228,37,37,51,12,183,188,112,95,185,240,26,149,186,183,213,131,171,49,165,238,178],[127,251,198,54,114,240,85,71,122,180,168,185,25,151,110,67,141,214,50,192,243,41,150,167,152,27,58,198,216,4,122,68],[71,4,222,255,50,187,19,200,59,112,103,204,189,24,127,57,64,209,254,242,150,181,107,186,77,167,89,219,28,80,156,156]]",
                "sol": "[bytes32(stringToBytes32(\"174,172,175,179,205,28,150,53,112,62,123,141,31,38,79,135,29,121,199,161,39,24,115,171,0,50,234,29,33,254,75,85\")),bytes32(stringToBytes32(\"150,252,222,13,46,151,69,177,122,236,228,37,37,51,12,183,188,112,95,185,240,26,149,186,183,213,131,171,49,165,238,178\")),bytes32(stringToBytes32(\"127,251,198,54,114,240,85,71,122,180,168,185,25,151,110,67,141,214,50,192,243,41,150,167,152,27,58,198,216,4,122,68\")),bytes32(stringToBytes32(\"71,4,222,255,50,187,19,200,59,112,103,204,189,24,127,57,64,209,254,242,150,181,107,186,77,167,89,219,28,80,156,156\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.714ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[255,12,158,21,206,96,10,140,41,198,255,215,2,97,243,124,22,244,39,73,191,148,216,18,113,74,102,147,67,7,220,144]",
              "sol": "abi.encode(\"255,12,158,21,206,96,10,140,41,198,255,215,2,97,243,124,22,244,39,73,191,148,216,18,113,74,102,147,67,7,220,144\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[255,12,158,21,206,96,10,140,41,198,255,215,2,97,243,124,22,244,39,73,191,148,216,18,113,74,102,147,67,7,220,144]",
                "sol": "abi.encode(\"255,12,158,21,206,96,10,140,41,198,255,215,2,97,243,124,22,244,39,73,191,148,216,18,113,74,102,147,67,7,220,144\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.716ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.716ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.716ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.717ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.717ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.717ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.718ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.718ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.719ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.720ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.721ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.721ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.722ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.722ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "[20,112,157,137,193,54,251,17,79,235,242,165,41,61,189,189,187,45,39,213,209,148,122,140,123,97,228,243,200,211,14,2]",
              "sol": "abi.encode(\"20,112,157,137,193,54,251,17,79,235,242,165,41,61,189,189,187,45,39,213,209,148,122,140,123,97,228,243,200,211,14,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.723ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.723ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.724ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "[25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50]",
              "sol": "stringToBytes32(\"25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142]",
              "sol": "stringToBytes32(\"91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142\")"
            },
            {
              "js": "[58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227]",
              "sol": "stringToBytes32(\"58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227\")"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50]",
                "sol": "stringToBytes32(\"25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142]",
                "sol": "stringToBytes32(\"91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142\")"
              },
              {
                "js": "[58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227]",
                "sol": "stringToBytes32(\"58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227\")"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50]",
                "sol": "stringToBytes32(\"25,214,17,201,51,46,195,154,59,72,206,97,97,189,71,158,151,51,3,102,116,39,39,169,232,198,200,154,42,32,208,50\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142]",
                "sol": "stringToBytes32(\"91,110,76,92,245,189,239,230,89,67,61,164,246,185,209,150,124,18,145,28,165,128,241,253,28,218,8,222,251,217,208,142\")"
              },
              {
                "js": "[58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227]",
                "sol": "stringToBytes32(\"58,15,133,94,89,227,214,44,25,225,224,207,52,10,175,242,164,193,241,204,153,241,172,40,237,161,213,85,68,67,171,227\")"
              },
              {
                "js": 102,
                "sol": 102
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.726ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[159,159,101,16,20,4,255,16]",
              "sol": "[uint256(159),uint256(159),uint256(101),uint256(16),uint256(20),uint256(4),uint256(255),uint256(16)]"
            },
            {
              "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
              "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
            },
            {
              "js": "[100,159,82,101,160,16,161,160]",
              "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
            },
            {
              "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
              "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
            },
            {
              "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
              "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[159,159,101,16,20,4,255,16]",
                "sol": "[uint256(159),uint256(159),uint256(101),uint256(16),uint256(20),uint256(4),uint256(255),uint256(16)]"
              },
              {
                "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
                "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
              },
              {
                "js": "[100,159,82,101,160,16,161,160]",
                "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
              },
              {
                "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
                "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
              },
              {
                "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
                "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[82,18,6,1000,1001,999,18,1,15]",
                "sol": "[1,11,20,1000,256,10000,10000,20,1]"
              },
              {
                "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
                "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
              },
              {
                "js": "[100,159,82,101,160,16,161,160]",
                "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
              },
              {
                "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
                "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
              },
              {
                "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
                "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[2,19,101,999,18,15,9999,4,5]",
                "sol": "[1337,1001,11,1,101,81,17,5,1000]"
              },
              {
                "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
                "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
              },
              {
                "js": "[100,159,82,101,160,16,161,160]",
                "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
              },
              {
                "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
                "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
              },
              {
                "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
                "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[18,1,999,99,1,15,102,1,10]",
                "sol": "[1336,256,999,1000,160,10000,99,159,11]"
              },
              {
                "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
                "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
              },
              {
                "js": "[100,159,82,101,160,16,161,160]",
                "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
              },
              {
                "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
                "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
              },
              {
                "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
                "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[255,255,1338,99,100,10001,81,20,9999]",
                "sol": "[0,101,161,18,18,3,160,100,1337]"
              },
              {
                "js": "[[60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169],[131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217],[213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169],[250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239],[113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137],[40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237],[139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224],[46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18]]",
                "sol": "[bytes32(stringToBytes32(\"60,79,109,43,96,142,96,159,198,200,226,167,33,72,37,139,136,149,136,11,27,172,145,22,175,108,192,232,67,181,255,169\")),bytes32(stringToBytes32(\"131,126,116,157,10,149,150,67,111,199,99,30,241,221,253,232,249,124,101,163,151,80,217,227,124,54,86,179,60,201,30,217\")),bytes32(stringToBytes32(\"213,8,113,146,217,234,74,51,158,90,83,91,175,104,34,138,116,254,34,127,94,61,188,149,126,202,6,210,230,99,197,169\")),bytes32(stringToBytes32(\"250,36,238,168,142,244,129,229,43,1,83,182,55,9,159,94,105,135,163,203,150,217,216,222,84,87,163,16,38,27,20,239\")),bytes32(stringToBytes32(\"113,131,246,251,66,169,101,231,7,118,229,215,145,195,137,245,156,103,174,18,27,193,234,110,117,205,138,117,51,13,8,137\")),bytes32(stringToBytes32(\"40,69,253,116,217,33,154,175,72,39,79,142,28,116,164,220,212,177,52,43,152,69,119,238,12,4,234,164,174,56,225,237\")),bytes32(stringToBytes32(\"139,28,92,44,45,246,120,247,2,88,212,67,115,149,27,144,247,232,175,218,100,2,215,5,95,56,3,184,42,1,141,224\")),bytes32(stringToBytes32(\"46,20,17,65,101,209,243,198,171,134,66,240,222,94,95,94,143,66,29,172,107,92,252,44,193,203,75,168,63,49,11,18\"))]"
              },
              {
                "js": "[100,159,82,101,160,16,161,160]",
                "sol": "[uint8(100),uint8(159),uint8(82),uint8(101),uint8(160),uint8(16),uint8(161),uint8(160)]"
              },
              {
                "js": "[[242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123],[184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153],[87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24],[213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0],[63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215],[92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81],[135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80],[232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217]]",
                "sol": "[bytes32(stringToBytes32(\"242,52,60,87,55,175,201,81,225,172,114,136,247,145,131,74,192,138,18,48,84,38,44,131,151,219,237,206,83,243,190,123\")),bytes32(stringToBytes32(\"184,57,104,226,201,209,101,193,39,133,133,200,99,159,176,82,65,55,14,188,134,182,100,101,94,255,3,201,220,145,74,153\")),bytes32(stringToBytes32(\"87,170,28,54,50,67,208,85,58,162,190,78,95,231,228,156,76,125,53,163,115,57,132,86,216,203,59,51,244,197,140,24\")),bytes32(stringToBytes32(\"213,8,144,127,147,128,11,234,78,17,23,182,17,8,20,36,155,113,6,176,5,178,151,237,35,11,117,28,192,206,224,0\")),bytes32(stringToBytes32(\"63,36,114,109,244,87,241,50,96,228,167,13,163,19,53,224,226,173,46,153,40,164,209,220,137,233,235,207,198,2,2,215\")),bytes32(stringToBytes32(\"92,44,144,226,181,196,203,216,22,92,214,166,241,46,224,97,161,71,46,99,150,237,30,117,191,21,103,35,144,250,22,81\")),bytes32(stringToBytes32(\"135,195,210,160,93,175,57,23,32,204,176,66,4,179,159,168,162,192,80,148,152,75,78,50,237,153,89,185,173,79,56,80\")),bytes32(stringToBytes32(\"232,172,63,36,169,237,9,203,242,82,159,196,248,45,132,110,224,56,55,2,218,35,175,148,201,111,246,65,114,206,209,217\"))]"
              },
              {
                "js": "[[23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65],[221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10],[199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51],[246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130],[71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254],[63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113],[160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144],[156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171]]",
                "sol": "[bytes32(stringToBytes32(\"23,212,219,152,76,217,26,148,144,40,253,180,45,116,209,205,45,125,99,72,57,207,42,122,15,194,1,96,84,138,19,65\")),bytes32(stringToBytes32(\"221,141,235,232,11,39,24,126,177,100,141,182,184,83,189,172,130,219,13,228,11,157,111,114,124,89,154,25,201,101,33,10\")),bytes32(stringToBytes32(\"199,151,164,137,18,210,141,230,135,239,250,115,219,124,144,214,225,209,141,227,240,204,50,181,154,222,237,116,91,160,252,51\")),bytes32(stringToBytes32(\"246,248,129,238,150,120,8,254,131,121,65,103,231,251,161,245,229,205,68,62,55,184,15,230,42,131,35,29,144,61,13,130\")),bytes32(stringToBytes32(\"71,119,116,211,65,191,97,214,68,131,121,46,124,187,49,116,136,111,55,226,161,165,50,23,90,78,239,65,105,105,4,254\")),bytes32(stringToBytes32(\"63,165,237,52,38,178,7,66,163,171,219,145,242,193,143,195,43,20,201,206,249,107,131,81,98,79,63,172,134,157,23,113\")),bytes32(stringToBytes32(\"160,239,7,68,30,20,79,208,157,212,17,232,106,64,208,18,33,171,6,29,223,59,219,241,12,175,255,235,15,70,80,144\")),bytes32(stringToBytes32(\"156,208,148,110,79,128,156,35,25,47,150,226,52,232,166,110,244,24,115,65,98,0,67,79,196,235,100,85,198,224,123,171\"))]"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.735ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236]",
              "sol": "stringToBytes32(\"19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202]",
              "sol": "stringToBytes32(\"40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202\")"
            },
            {
              "js": "[49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164]",
              "sol": "stringToBytes32(\"49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236]",
                "sol": "stringToBytes32(\"19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236\")"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202]",
                "sol": "stringToBytes32(\"40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202\")"
              },
              {
                "js": "[49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164]",
                "sol": "stringToBytes32(\"49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236]",
                "sol": "stringToBytes32(\"19,39,123,76,143,188,242,135,56,119,135,134,25,248,131,251,83,101,75,240,75,26,249,170,222,190,33,153,113,72,54,236\")"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202]",
                "sol": "stringToBytes32(\"40,172,1,159,13,43,121,110,66,94,84,206,61,17,180,124,139,111,86,97,218,226,88,175,119,244,219,139,0,8,20,202\")"
              },
              {
                "js": "[49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164]",
                "sol": "stringToBytes32(\"49,214,159,196,160,152,41,35,97,150,234,228,180,139,114,178,160,57,227,113,36,128,188,251,99,75,147,196,156,203,148,164\")"
              },
              {
                "js": 2,
                "sol": 2
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.737ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.739ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "[67,217,17,102,23,231,207,161,192,86,39,59,43,146,241,160,34,216,240,136,184,24,183,108,141,253,56,86,221,226,68,161]",
              "sol": "stringToBytes32(\"67,217,17,102,23,231,207,161,192,86,39,59,43,146,241,160,34,216,240,136,184,24,183,108,141,253,56,86,221,226,68,161\")"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[45,46,48,121,189,42,93,46,12,134,182,63,45,124,90,12,180,221,118,39,89,67,28,65,109,191,103,120,14,75,200,169]",
              "sol": "stringToBytes32(\"45,46,48,121,189,42,93,46,12,134,182,63,45,124,90,12,180,221,118,39,89,67,28,65,109,191,103,120,14,75,200,169\")"
            },
            {
              "js": "[215,91,152,23,59,121,33,177,136,72,64,173,117,53,18,84,229,215,192,83,6,84,229,165,200,102,170,97,233,138,245,94]",
              "sol": "stringToBytes32(\"215,91,152,23,59,121,33,177,136,72,64,173,117,53,18,84,229,215,192,83,6,84,229,165,200,102,170,97,233,138,245,94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.739ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.740ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:32:56.740ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:32:56.741ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}