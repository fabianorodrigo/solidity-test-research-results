const truffleAssert = require('truffle-assertions');
const Faucet = artifacts.require("Faucet");
const GNTDeposit = artifacts.require("GNTDeposit");
const GNTPaymentChannels = artifacts.require("GNTPaymentChannels");
const GNTAllocation = artifacts.require("GNTAllocation");
const GolemNetworkToken = artifacts.require("GolemNetworkToken");
const GolemNetworkTokenBatching = artifacts.require("GolemNetworkTokenBatching");
const BasicToken = artifacts.require("BasicToken");
const BurnableToken = artifacts.require("BurnableToken");
const SafeMath = artifacts.require("SafeMath");
const StandardToken = artifacts.require("StandardToken");
const Gate = artifacts.require("Gate");
const TokenProxy = artifacts.require("TokenProxy");
const ProxySafeMath = artifacts.require("ProxySafeMath");

contract("GNTDeposit",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractBasicToken = null;
  let contractStandardToken = null;
  let contractBurnableToken = null;
  let contractGNTAllocation = null;
  let contractGolemNetworkToken = null;
  let contractGNTPaymentChannels = null;
  let contractFaucet = null;
  let contractTokenProxy = null;
  let contractGate = null;
  let contractGolemNetworkTokenBatching = null;
  let contractGNTDeposit = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    BasicToken.link("SafeMath",contractSafeMath.address);
    contractBasicToken = await BasicToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BasicToken.new({from: accounts[0]}');
    contractStandardToken = await StandardToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: StandardToken.new({from: accounts[0]}');
    contractBurnableToken = await BurnableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BurnableToken.new({from: accounts[0]}');
    contractGNTAllocation = await GNTAllocation.new(accounts[3],{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTAllocation.new(accounts[3],{from:accounts[0]}');
    contractGolemNetworkToken = await GolemNetworkToken.new(accounts[7],accounts[7],(await web3.eth.getBlockNumber())+159,(await web3.eth.getBlockNumber())+159+656,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkToken.new(accounts[7],accounts[7],(await web3.eth.getBlockNumber())+159,(await web3.eth.getBlockNumber())+159+656,{from:accounts[0]}');
    contractGNTPaymentChannels = await GNTPaymentChannels.new(accounts[0],82,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTPaymentChannels.new(accounts[0],82,{from:accounts[0]}');
    contractFaucet = await Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]}');
    contractTokenProxy = await TokenProxy.new(contractBasicToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProxy.new(contractBasicToken.address,{from:accounts[0]}');
    contractGate = await Gate.new(contractBurnableToken.address,accounts[6],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Gate.new(contractBurnableToken.address,accounts[6],{from:accounts[0]}');
    contractGolemNetworkTokenBatching = await GolemNetworkTokenBatching.new(contractTokenProxy.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkTokenBatching.new(contractTokenProxy.address,{from:accounts[0]}');
    contractGNTDeposit = await GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[0],accounts[6],10000,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[0],accounts[6],10000,{from:accounts[0]}');
  });
  
  it('Should execute balanceOf(address)', async () => {
    let result = await contractGNTDeposit.balanceOf(accounts[5],{from: accounts[0]});
  });
  it('Should execute isLocked(address)', async () => {
    let result = await contractGNTDeposit.isLocked(accounts[6],{from: accounts[0]});
  });
  it('Should execute isTimeLocked(address)', async () => {
    let result = await contractGNTDeposit.isTimeLocked(accounts[6],{from: accounts[0]});
  });
  it('Should execute isUnlocked(address)', async () => {
    let result = await contractGNTDeposit.isUnlocked(accounts[5],{from: accounts[0]});
  });
  it('Should execute getTimelock(address)', async () => {
    let result = await contractGNTDeposit.getTimelock(accounts[1],{from: accounts[0]});
  });
  it('Should execute isDepositPossible(address,uint256)', async () => {
    let result = await contractGNTDeposit.isDepositPossible(accounts[8], 5,{from: accounts[0]});
  });
  it('Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferConcent(accounts[6],{from: accounts[0]});
  });
  it('Should fail transferConcent(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent(accounts[6],{from: accounts[9]}),'revert');
  });
  it('Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferColdwallet(accounts[0],{from: accounts[0]});
  });
  it('Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet(accounts[0],{from: accounts[9]}),'revert');
  });
  it('Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositsTotal(100,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositsTotal(100,{from: accounts[9]}),'revert');
  });
  it('Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositAmount(1337,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositAmount(1337,{from: accounts[9]}),'revert');
  });
  it('Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setDailyReimbursementLimit(1,{from: accounts[0]});
  });
  it('Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setDailyReimbursementLimit(1,{from: accounts[9]}),'revert');
  });
  it('Should execute unlock()', async () => {
    let result = await contractGNTDeposit.unlock({from: accounts[0]});
  });
  it('Should execute lock()', async () => {
    let result = await contractGNTDeposit.lock({from: accounts[0]});
  });
  it('Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true', async () => {
    let result = await contractGNTDeposit.onTokenReceived(accounts[0], 1001, [25,156,181,14,32,147,26,91,246,115,66,100,109,9,144,21,179,87,139,238,143,49,112,214,40,234,227,35,78,169,151,229],{from: accounts[0]});
  });
  it('Should execute withdraw(address)', async () => {
    let result = await contractGNTDeposit.withdraw(accounts[8],{from: accounts[0]});
  });
  it('Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[9], 2,{from: accounts[0]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[9], 2,{from: accounts[9]}),'revert');
  });
  it('Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[2], 9,{from: accounts[0]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[2], 9,{from: accounts[9]}),'revert');
  });
  it('Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[0], 256, [249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172], 20, [214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252], [99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180], 82,{from: accounts[0]});
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[0], 256, [249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172], 20, [214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252], [99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180], 82,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[0], 256, [249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172], 20, [214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252], [99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180], 257,{from: accounts[0]}),'revert');
  });
  it('Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount', async () => {
    let result = await contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [1336,99,160,2,1000,257,1337,11,6], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[0]});
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [1336,99,160,2,1000,257,1337,11,6], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [101,18,9,161,9999,159,9999,15,1,21], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[0]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [1000,2,1,4,16,10,100,14,21,3], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[0]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [16,5,11,161,100,82,19,9,10000,159], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[0]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[6], accounts[4], [161,9999,1000,83,14,10001,101,161,999,9], [[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]], [16,20,10,9,255,10,2,159,82], [[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]], [[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]], 5, 999,{from: accounts[0]}),'revert');
  });
  it('Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 3, [60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96], 3, [177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200], [72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42], 0,{from: accounts[0]});
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 3, [60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96], 3, [177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200], [72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42], 0,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 3, [60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96], 3, [177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200], [72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42], 4,{from: accounts[0]}),'revert');
  });
  it('Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent', async () => {
    let result = await contractGNTDeposit.reimburseForCommunication(accounts[7], 1338,{from: accounts[0]});
  });
  it('Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForCommunication(accounts[7], 1338,{from: accounts[9]}),'revert');
  });
  it('Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)', async () => {
    let result = await contractGNTDeposit._isValidSignature(accounts[2], accounts[0], 1337, [179,85,20,245,232,32,150,119,58,143,80,70,115,201,29,137,49,133,169,107,57,141,158,227,140,116,10,62,29,228,18,38], 16, [2,19,101,51,87,251,153,25,242,187,203,127,22,254,37,218,122,157,88,137,71,252,130,16,156,97,115,129,194,116,195,89], [5,181,56,93,78,61,215,44,172,153,214,189,223,171,9,122,166,26,134,225,166,97,101,226,115,253,218,201,81,54,183,69],{from: accounts[0]});
  });
  it('Should execute owner()', async () => {
    let result = await contractGNTDeposit.owner({from: accounts[0]});
  });
  it('Should execute isOwner()', async () => {
    let result = await contractGNTDeposit.isOwner({from: accounts[0]});
  });
  it('Should execute renounceOwnership() WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.renounceOwnership({from: accounts[0]});
  });
  it('Should fail renounceOwnership() when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.renounceOwnership({from: accounts[9]}),'revert');
  });
  it('Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferOwnership(accounts[4],{from: accounts[0]});
  });
  it('Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership(accounts[4],{from: accounts[9]}),'revert');
  });
  it('Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
});
