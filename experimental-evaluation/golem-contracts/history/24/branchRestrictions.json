,{
  "2020-11-13T01:10:13.853ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:20.280ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+427",
              "sol": "block.number+427"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+427+792",
              "sol": "block.number+427+792"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427",
                "sol": "block.number+427"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427+792",
                "sol": "block.number+427+792"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427",
                "sol": "block.number+427"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427+792",
                "sol": "block.number+427+792"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427+792",
                "sol": "block.number+427+792"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427",
                "sol": "block.number+427"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+427",
                "sol": "block.number+427"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:10:26.790ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:33.166ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:39.619ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:46.339ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:46.340ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:10:59.559ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.290ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.291ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.291ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": 12,
                "sol": 12
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.292ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.293ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.294ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.295ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.295ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.296ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.297ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.297ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.298ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.299ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.301ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.302ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.302ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.302ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.304ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.306ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.306ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:3}",
              "sol": "{\"from\":\"0x0\",\"value\":\"3\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:3}",
                "sol": "{\"from\":\"0x0\",\"value\":\"3\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.311ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.312ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.316ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.317ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.317ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.317ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.318ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[189,88,41,122,95,32,235,13,223,199,80,199,85,152,163,108,181,124,151,193,2,192,26,1,153,94,41,14,173,63,73,226]",
              "sol": "stringToBytes32(\"189,88,41,122,95,32,235,13,223,199,80,199,85,152,163,108,181,124,151,193,2,192,26,1,153,94,41,14,173,63,73,226\")"
            },
            {
              "js": "[45,79,172,109,73,247,29,221,208,73,90,7,65,90,106,62,55,0,21,124,136,9,230,89,127,223,226,16,251,165,93,142]",
              "sol": "stringToBytes32(\"45,79,172,109,73,247,29,221,208,73,90,7,65,90,106,62,55,0,21,124,136,9,230,89,127,223,226,16,251,165,93,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.318ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "[48,181,24,75,100,112,203,247,240,170,232,0,16,118,67,181,227,241,37,72]",
              "sol": "abi.encode(\"48,181,24,75,100,112,203,247,240,170,232,0,16,118,67,181,227,241,37,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "[132,65,193,60,52,4,122,52,38,44,158,147,138,112,70,38,246,157,126,142,171]",
                "sol": "bytes21(\"132,65,193,60,52,4,122,52,38,44,158,147,138,112,70,38,246,157,126,142,171\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.320ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[179,202,205,40,183,21,192,190,54,164,169,113,139,187,2,44,88,15,11,81,213,212,160,56,92,67,172,66,206,124,196,217]",
              "sol": "stringToBytes32(\"179,202,205,40,183,21,192,190,54,164,169,113,139,187,2,44,88,15,11,81,213,212,160,56,92,67,172,66,206,124,196,217\")"
            },
            {
              "js": "[125,184,24,177,128,34,245,130,221,170,219,44,188,222,50,77,41,50,13,246,72,134,145,148,229,116,218,228,188,202,78,202]",
              "sol": "stringToBytes32(\"125,184,24,177,128,34,245,130,221,170,219,44,188,222,50,77,41,50,13,246,72,134,145,148,229,116,218,228,188,202,78,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.320ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.321ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.323ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.324ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.324ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.324ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.325ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.326ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.327ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.328ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[88,227,228,94,211,237,88,36,123,142,181,134,182,73,126,172,184,78,19,230,69,168,12,30,87,220,20,142,215,233,91,121],[101,24,161,250,187,45,153,83,190,132,34,132,67,224,1,136,110,66,90,75,37,119,89,93,204,43,214,147,185,179,13,45],[100,132,46,182,149,165,214,225,197,22,182,89,220,228,128,202,245,149,154,70,12,204,187,129,167,111,55,46,73,41,135,38],[242,38,110,144,146,18,248,136,3,141,91,174,91,44,59,116,159,4,65,181,241,157,176,149,23,217,0,4,39,151,121,86],[181,151,216,236,135,150,133,237,220,226,95,234,136,180,116,31,181,162,28,64,205,112,230,126,95,19,97,83,112,24,38,238]]",
              "sol": "[bytes32(stringToBytes32(\"88,227,228,94,211,237,88,36,123,142,181,134,182,73,126,172,184,78,19,230,69,168,12,30,87,220,20,142,215,233,91,121\")),bytes32(stringToBytes32(\"101,24,161,250,187,45,153,83,190,132,34,132,67,224,1,136,110,66,90,75,37,119,89,93,204,43,214,147,185,179,13,45\")),bytes32(stringToBytes32(\"100,132,46,182,149,165,214,225,197,22,182,89,220,228,128,202,245,149,154,70,12,204,187,129,167,111,55,46,73,41,135,38\")),bytes32(stringToBytes32(\"242,38,110,144,146,18,248,136,3,141,91,174,91,44,59,116,159,4,65,181,241,157,176,149,23,217,0,4,39,151,121,86\")),bytes32(stringToBytes32(\"181,151,216,236,135,150,133,237,220,226,95,234,136,180,116,31,181,162,28,64,205,112,230,126,95,19,97,83,112,24,38,238\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-146",
              "sol": "block.timestamp-146"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[88,227,228,94,211,237,88,36,123,142,181,134,182,73,126,172,184,78,19,230,69,168,12,30,87,220,20,142,215,233,91,121],[101,24,161,250,187,45,153,83,190,132,34,132,67,224,1,136,110,66,90,75,37,119,89,93,204,43,214,147,185,179,13,45],[100,132,46,182,149,165,214,225,197,22,182,89,220,228,128,202,245,149,154,70,12,204,187,129,167,111,55,46,73,41,135,38],[242,38,110,144,146,18,248,136,3,141,91,174,91,44,59,116,159,4,65,181,241,157,176,149,23,217,0,4,39,151,121,86],[181,151,216,236,135,150,133,237,220,226,95,234,136,180,116,31,181,162,28,64,205,112,230,126,95,19,97,83,112,24,38,238]]",
                "sol": "[bytes32(stringToBytes32(\"88,227,228,94,211,237,88,36,123,142,181,134,182,73,126,172,184,78,19,230,69,168,12,30,87,220,20,142,215,233,91,121\")),bytes32(stringToBytes32(\"101,24,161,250,187,45,153,83,190,132,34,132,67,224,1,136,110,66,90,75,37,119,89,93,204,43,214,147,185,179,13,45\")),bytes32(stringToBytes32(\"100,132,46,182,149,165,214,225,197,22,182,89,220,228,128,202,245,149,154,70,12,204,187,129,167,111,55,46,73,41,135,38\")),bytes32(stringToBytes32(\"242,38,110,144,146,18,248,136,3,141,91,174,91,44,59,116,159,4,65,181,241,157,176,149,23,217,0,4,39,151,121,86\")),bytes32(stringToBytes32(\"181,151,216,236,135,150,133,237,220,226,95,234,136,180,116,31,181,162,28,64,205,112,230,126,95,19,97,83,112,24,38,238\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.329ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "[46,170,156,100,218,67,84,113,86,49,3,175,186,201,231,201,101,42,187,137,175,24,228,125,155,56,182,198,18,142,55,194]",
              "sol": "abi.encode(\"46,170,156,100,218,67,84,113,86,49,3,175,186,201,231,201,101,42,187,137,175,24,228,125,155,56,182,198,18,142,55,194\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "[46,170,156,100,218,67,84,113,86,49,3,175,186,201,231,201,101,42,187,137,175,24,228,125,155,56,182,198,18,142,55,194]",
                "sol": "abi.encode(\"46,170,156,100,218,67,84,113,86,49,3,175,186,201,231,201,101,42,187,137,175,24,228,125,155,56,182,198,18,142,55,194\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.331ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.331ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.332ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.332ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.332ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.333ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.333ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.334ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.334ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.335ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.335ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.336ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.336ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.336ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[175,70,67,163,241,84,42,87,219,118,219,232,210,248,27,121,23,119,136,125,199,35,71,37,108,36,170,54,241,132,119,47]",
              "sol": "abi.encode(\"175,70,67,163,241,84,42,87,219,118,219,232,210,248,27,121,23,119,136,125,199,35,71,37,108,36,170,54,241,132,119,47\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.337ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.337ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.338ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "[9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209]",
              "sol": "stringToBytes32(\"9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209\")"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240]",
              "sol": "stringToBytes32(\"34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240\")"
            },
            {
              "js": "[31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94]",
              "sol": "stringToBytes32(\"31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94\")"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "[9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209]",
                "sol": "stringToBytes32(\"9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209\")"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240]",
                "sol": "stringToBytes32(\"34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240\")"
              },
              {
                "js": "[31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94]",
                "sol": "stringToBytes32(\"31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94\")"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "[9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209]",
                "sol": "stringToBytes32(\"9,64,102,131,96,51,249,90,149,199,172,91,197,107,226,80,221,122,19,143,197,11,180,80,61,200,63,71,255,200,110,209\")"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240]",
                "sol": "stringToBytes32(\"34,73,164,49,56,57,104,139,251,53,170,152,118,223,10,89,172,168,251,159,16,228,109,45,88,168,234,89,137,34,167,240\")"
              },
              {
                "js": "[31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94]",
                "sol": "stringToBytes32(\"31,131,90,220,226,255,244,48,185,253,39,108,67,245,97,85,166,28,33,84,232,62,18,89,73,169,91,240,234,131,134,94\")"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.340ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[82,1,257,2,82,257,100]",
              "sol": "[uint256(82),uint256(1),uint256(257),uint256(2),uint256(82),uint256(257),uint256(100)]"
            },
            {
              "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
              "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
            },
            {
              "js": "[6,3,160,161,81,6,19]",
              "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
            },
            {
              "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
              "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
            },
            {
              "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
              "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[82,1,257,2,82,257,100]",
                "sol": "[uint256(82),uint256(1),uint256(257),uint256(2),uint256(82),uint256(257),uint256(100)]"
              },
              {
                "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
                "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
              },
              {
                "js": "[6,3,160,161,81,6,19]",
                "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
              },
              {
                "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
                "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
              },
              {
                "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
                "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[83,15,99,19,19,5,1338,99]",
                "sol": "[6,16,160,6,6,256,255,4]"
              },
              {
                "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
                "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
              },
              {
                "js": "[6,3,160,161,81,6,19]",
                "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
              },
              {
                "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
                "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
              },
              {
                "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
                "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10,159,20,6,82,20,255,1000]",
                "sol": "[10,6,1336,1,100,1000,6,999]"
              },
              {
                "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
                "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
              },
              {
                "js": "[6,3,160,161,81,6,19]",
                "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
              },
              {
                "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
                "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
              },
              {
                "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
                "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1337,15,159,0,161,6,16,1337]",
                "sol": "[160,5,999,100,9999,100,1001,0]"
              },
              {
                "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
                "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
              },
              {
                "js": "[6,3,160,161,81,6,19]",
                "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
              },
              {
                "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
                "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
              },
              {
                "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
                "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[0,999,1337,159,10000,15,2,17]",
                "sol": "[6,256,100,83,81,101,0,19]"
              },
              {
                "js": "[[150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168],[165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207],[142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114],[126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0],[150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63],[51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158],[152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173]]",
                "sol": "[bytes32(stringToBytes32(\"150,237,181,143,210,30,122,11,68,131,248,150,142,119,82,3,121,81,238,47,244,177,4,21,89,93,195,53,213,123,152,168\")),bytes32(stringToBytes32(\"165,87,108,105,34,7,155,106,242,91,140,135,19,111,43,13,13,83,151,82,217,138,73,165,134,193,160,109,127,163,84,207\")),bytes32(stringToBytes32(\"142,63,248,25,254,37,24,31,233,250,233,166,241,233,68,29,237,247,36,232,173,176,158,107,30,185,79,110,85,211,91,114\")),bytes32(stringToBytes32(\"126,132,152,53,78,205,182,94,99,88,108,92,100,125,103,173,25,56,142,134,47,75,6,164,87,166,109,245,31,172,245,0\")),bytes32(stringToBytes32(\"150,86,11,43,200,158,10,234,105,50,126,176,123,87,25,240,58,108,187,79,49,175,240,132,187,124,232,112,178,104,28,63\")),bytes32(stringToBytes32(\"51,206,148,61,63,73,237,32,70,204,4,52,236,183,96,201,130,196,200,171,122,49,214,130,126,38,47,21,174,194,231,158\")),bytes32(stringToBytes32(\"152,31,31,94,33,215,251,70,189,116,12,138,204,121,47,40,243,211,95,88,29,241,219,7,96,220,118,84,130,244,79,173\"))]"
              },
              {
                "js": "[6,3,160,161,81,6,19]",
                "sol": "[uint8(6),uint8(3),uint8(160),uint8(161),uint8(81),uint8(6),uint8(19)]"
              },
              {
                "js": "[[144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112],[200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143],[255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2],[207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124],[105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231],[197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219],[121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117]]",
                "sol": "[bytes32(stringToBytes32(\"144,112,35,85,68,140,77,246,40,227,190,116,44,87,133,180,199,169,102,215,9,24,195,122,108,28,204,203,183,227,28,112\")),bytes32(stringToBytes32(\"200,137,8,149,236,25,174,159,0,105,229,114,54,27,27,246,85,88,180,140,121,113,33,214,166,217,230,45,185,135,17,143\")),bytes32(stringToBytes32(\"255,244,180,7,14,84,205,186,11,115,136,195,19,181,17,79,123,160,68,240,197,243,182,245,131,87,74,190,252,65,21,2\")),bytes32(stringToBytes32(\"207,53,121,13,103,62,104,114,217,62,15,68,172,172,194,32,23,17,115,210,11,188,245,249,64,150,136,208,19,28,207,124\")),bytes32(stringToBytes32(\"105,237,102,58,80,169,24,194,238,74,50,253,218,7,78,39,119,89,130,71,40,223,108,21,154,87,38,218,19,98,203,231\")),bytes32(stringToBytes32(\"197,112,22,237,158,58,148,158,168,96,198,118,156,149,158,163,25,38,17,154,178,91,202,248,14,167,183,238,132,171,171,219\")),bytes32(stringToBytes32(\"121,244,251,99,162,111,40,228,36,3,160,234,134,62,64,0,250,200,109,168,104,239,54,195,48,130,216,149,219,27,143,117\"))]"
              },
              {
                "js": "[[175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175],[251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13],[199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3],[3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0],[24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251],[20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122],[6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106]]",
                "sol": "[bytes32(stringToBytes32(\"175,204,79,215,154,63,37,200,242,159,91,5,222,226,75,118,167,213,247,125,100,103,110,249,133,69,183,41,10,119,44,175\")),bytes32(stringToBytes32(\"251,176,241,221,69,50,37,122,18,245,133,140,63,182,114,154,3,97,107,245,14,78,4,182,209,1,167,100,145,89,198,13\")),bytes32(stringToBytes32(\"199,53,220,83,98,236,9,22,60,147,84,124,139,64,153,140,190,210,215,229,167,125,126,201,249,186,83,117,239,83,86,3\")),bytes32(stringToBytes32(\"3,54,42,106,81,211,139,253,96,90,26,71,50,232,134,27,87,66,3,21,84,171,228,254,154,85,71,135,50,164,160,0\")),bytes32(stringToBytes32(\"24,86,139,184,138,45,243,196,244,130,145,112,7,63,24,18,243,134,33,177,187,165,27,157,239,25,184,8,80,0,225,251\")),bytes32(stringToBytes32(\"20,194,105,45,0,15,231,195,68,187,148,10,227,175,33,254,191,130,126,178,40,238,61,91,47,104,21,10,252,8,229,122\")),bytes32(stringToBytes32(\"6,138,226,9,49,198,117,42,155,160,156,85,79,109,35,180,179,161,109,69,93,134,23,172,5,161,106,126,191,13,128,106\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.346ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216]",
              "sol": "stringToBytes32(\"43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174]",
              "sol": "stringToBytes32(\"213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174\")"
            },
            {
              "js": "[97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132]",
              "sol": "stringToBytes32(\"97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216]",
                "sol": "stringToBytes32(\"43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174]",
                "sol": "stringToBytes32(\"213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174\")"
              },
              {
                "js": "[97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132]",
                "sol": "stringToBytes32(\"97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216]",
                "sol": "stringToBytes32(\"43,114,70,18,241,41,188,196,144,185,247,231,51,14,80,247,7,110,110,224,195,209,226,55,103,162,34,252,41,3,246,216\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174]",
                "sol": "stringToBytes32(\"213,146,12,114,218,7,81,138,70,64,87,110,102,175,105,249,69,219,200,245,241,102,35,216,8,82,45,156,67,18,74,174\")"
              },
              {
                "js": "[97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132]",
                "sol": "stringToBytes32(\"97,40,162,215,230,80,247,202,150,242,0,225,52,218,95,180,48,239,169,1,94,114,37,235,162,152,58,252,205,218,98,132\")"
              },
              {
                "js": 15,
                "sol": 15
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.349ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.350ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[133,20,36,80,37,189,110,56,84,215,80,243,105,79,70,230,218,118,193,8,9,197,113,99,220,42,157,114,12,83,85,153]",
              "sol": "stringToBytes32(\"133,20,36,80,37,189,110,56,84,215,80,243,105,79,70,230,218,118,193,8,9,197,113,99,220,42,157,114,12,83,85,153\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[32,124,10,143,1,111,122,23,112,83,204,189,53,250,163,34,153,75,19,118,57,144,135,134,104,15,207,206,240,80,1,81]",
              "sol": "stringToBytes32(\"32,124,10,143,1,111,122,23,112,83,204,189,53,250,163,34,153,75,19,118,57,144,135,134,104,15,207,206,240,80,1,81\")"
            },
            {
              "js": "[143,158,149,112,34,83,141,75,156,70,209,144,40,129,21,182,113,12,45,179,246,2,240,170,166,169,29,75,241,14,149,146]",
              "sol": "stringToBytes32(\"143,158,149,112,34,83,141,75,156,70,209,144,40,129,21,182,113,12,45,179,246,2,240,170,166,169,29,75,241,14,149,146\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.350ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.351ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T01:11:06.351ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T01:11:06.352ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}