,{
  "2020-11-11T18:13:36.263ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:13:42.716ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+943",
              "sol": "block.number+943"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+943+863",
              "sol": "block.number+943+863"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943",
                "sol": "block.number+943"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943+863",
                "sol": "block.number+943+863"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943",
                "sol": "block.number+943"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943+863",
                "sol": "block.number+943+863"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943+863",
                "sol": "block.number+943+863"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943",
                "sol": "block.number+943"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+943",
                "sol": "block.number+943"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:13:49.322ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:13:55.808ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:02.300ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:08.995ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:15.767ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:22.458ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.484ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.485ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.486ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": 83,
                "sol": 83
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.486ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.487ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.488ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.488ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.489ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.490ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.497ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.498ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.499ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.500ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.501ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.502ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.502ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.503ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.506ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.508ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.508ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:9999}",
              "sol": "{\"from\":\"0x0\",\"value\":\"9999\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:9999}",
                "sol": "{\"from\":\"0x0\",\"value\":\"9999\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.514ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.515ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.520ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.520ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.520ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.521ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.522ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[70,98,219,13,175,39,25,144,45,120,20,161,65,234,101,184,80,108,153,124,31,41,126,87,185,28,123,114,25,112,230,19]",
              "sol": "stringToBytes32(\"70,98,219,13,175,39,25,144,45,120,20,161,65,234,101,184,80,108,153,124,31,41,126,87,185,28,123,114,25,112,230,19\")"
            },
            {
              "js": "[62,8,25,63,14,187,239,77,35,14,116,174,198,52,58,104,255,170,89,187,142,197,59,7,105,174,39,182,189,107,160,241]",
              "sol": "stringToBytes32(\"62,8,25,63,14,187,239,77,35,14,116,174,198,52,58,104,255,170,89,187,142,197,59,7,105,174,39,182,189,107,160,241\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.522ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[158,207,141,41,37,195,105,192,25,227,80,76,98,89,91,102,11,88,232,92]",
              "sol": "abi.encode(\"158,207,141,41,37,195,105,192,25,227,80,76,98,89,91,102,11,88,232,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[71,113,26,27,147,163,170,244,203,142,175,221,178,166,206,134,168,73,19,131,124]",
                "sol": "bytes21(\"71,113,26,27,147,163,170,244,203,142,175,221,178,166,206,134,168,73,19,131,124\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.523ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[26,176,79,85,118,171,120,49,199,228,230,99,227,189,232,0,179,168,48,173,116,154,86,133,64,86,30,151,25,69,113,98]",
              "sol": "stringToBytes32(\"26,176,79,85,118,171,120,49,199,228,230,99,227,189,232,0,179,168,48,173,116,154,86,133,64,86,30,151,25,69,113,98\")"
            },
            {
              "js": "[67,221,59,205,150,48,203,75,153,25,141,178,151,28,209,249,131,53,64,147,246,115,1,230,115,201,87,15,236,19,46,217]",
              "sol": "stringToBytes32(\"67,221,59,205,150,48,203,75,153,25,141,178,151,28,209,249,131,53,64,147,246,115,1,230,115,201,87,15,236,19,46,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.524ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.524ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.525ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.526ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.526ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.526ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.527ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.528ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.529ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.530ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[85,118,128,28,99,228,32,28,51,168,48,114,62,185,153,108,17,243,137,0,222,199,168,95,80,146,64,161,237,112,112,59],[200,188,199,35,194,57,169,7,173,3,216,64,35,237,224,80,73,136,84,249,12,126,19,217,121,193,120,67,15,26,99,158]]",
              "sol": "[bytes32(stringToBytes32(\"85,118,128,28,99,228,32,28,51,168,48,114,62,185,153,108,17,243,137,0,222,199,168,95,80,146,64,161,237,112,112,59\")),bytes32(stringToBytes32(\"200,188,199,35,194,57,169,7,173,3,216,64,35,237,224,80,73,136,84,249,12,126,19,217,121,193,120,67,15,26,99,158\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-850",
              "sol": "block.timestamp-850"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[85,118,128,28,99,228,32,28,51,168,48,114,62,185,153,108,17,243,137,0,222,199,168,95,80,146,64,161,237,112,112,59],[200,188,199,35,194,57,169,7,173,3,216,64,35,237,224,80,73,136,84,249,12,126,19,217,121,193,120,67,15,26,99,158]]",
                "sol": "[bytes32(stringToBytes32(\"85,118,128,28,99,228,32,28,51,168,48,114,62,185,153,108,17,243,137,0,222,199,168,95,80,146,64,161,237,112,112,59\")),bytes32(stringToBytes32(\"200,188,199,35,194,57,169,7,173,3,216,64,35,237,224,80,73,136,84,249,12,126,19,217,121,193,120,67,15,26,99,158\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.531ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[13,90,121,32,70,34,92,113,72,128,236,123,86,103,98,227,83,86,73,189,226,166,90,16,157,203,43,109,119,96,236,169]",
              "sol": "abi.encode(\"13,90,121,32,70,34,92,113,72,128,236,123,86,103,98,227,83,86,73,189,226,166,90,16,157,203,43,109,119,96,236,169\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[13,90,121,32,70,34,92,113,72,128,236,123,86,103,98,227,83,86,73,189,226,166,90,16,157,203,43,109,119,96,236,169]",
                "sol": "abi.encode(\"13,90,121,32,70,34,92,113,72,128,236,123,86,103,98,227,83,86,73,189,226,166,90,16,157,203,43,109,119,96,236,169\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.533ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.533ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.534ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.534ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.534ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.535ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.535ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.536ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.537ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.537ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.538ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.538ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.539ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.539ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[183,153,249,198,3,21,88,4,113,64,242,184,42,154,241,105,247,46,10,75,11,210,141,176,124,133,6,223,23,141,94,214]",
              "sol": "abi.encode(\"183,153,249,198,3,21,88,4,113,64,242,184,42,154,241,105,247,46,10,75,11,210,141,176,124,133,6,223,23,141,94,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.540ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.540ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.543ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "[174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175]",
              "sol": "stringToBytes32(\"174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80]",
              "sol": "stringToBytes32(\"122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80\")"
            },
            {
              "js": "[166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151]",
              "sol": "stringToBytes32(\"166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151\")"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "[174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175]",
                "sol": "stringToBytes32(\"174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80]",
                "sol": "stringToBytes32(\"122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80\")"
              },
              {
                "js": "[166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151]",
                "sol": "stringToBytes32(\"166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151\")"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "[174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175]",
                "sol": "stringToBytes32(\"174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80]",
                "sol": "stringToBytes32(\"122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80\")"
              },
              {
                "js": "[166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151]",
                "sol": "stringToBytes32(\"166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151\")"
              },
              {
                "js": 1001,
                "sol": 1001
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.545ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[160,19,19,9,19,21,19,10,1336,3]",
              "sol": "[uint256(160),uint256(19),uint256(19),uint256(9),uint256(19),uint256(21),uint256(19),uint256(10),uint256(1336),uint256(3)]"
            },
            {
              "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
              "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
            },
            {
              "js": "[19,99,9,1,0,2,11,99,1,21]",
              "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
            },
            {
              "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
              "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
            },
            {
              "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
              "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[160,19,19,9,19,21,19,10,1336,3]",
                "sol": "[uint256(160),uint256(19),uint256(19),uint256(9),uint256(19),uint256(21),uint256(19),uint256(10),uint256(1336),uint256(3)]"
              },
              {
                "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
                "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
              },
              {
                "js": "[19,99,9,1,0,2,11,99,1,21]",
                "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
              },
              {
                "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
                "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
              },
              {
                "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
                "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9999,1000,5,21,81,15,19,81,1000,21,100]",
                "sol": "[10001,10001,257,99,9,3,18,101,3,17,1337]"
              },
              {
                "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
                "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
              },
              {
                "js": "[19,99,9,1,0,2,11,99,1,21]",
                "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
              },
              {
                "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
                "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
              },
              {
                "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
                "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[100,10001,9,9,99,99,1000,82,256,82,21]",
                "sol": "[16,1001,99,1001,10001,256,1000,160,255,161,9]"
              },
              {
                "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
                "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
              },
              {
                "js": "[19,99,9,1,0,2,11,99,1,21]",
                "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
              },
              {
                "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
                "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
              },
              {
                "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
                "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1001,99,1337,17,256,10000,160,9,11,82,9]",
                "sol": "[9999,999,18,21,21,5,160,14,1336,16,9]"
              },
              {
                "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
                "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
              },
              {
                "js": "[19,99,9,1,0,2,11,99,1,21]",
                "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
              },
              {
                "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
                "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
              },
              {
                "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
                "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[5,0,1000,21,9,160,1000,100,20,15,256]",
                "sol": "[1000,1337,10,1001,15,9,9,83,21,18,4]"
              },
              {
                "js": "[[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]]",
                "sol": "[bytes32(stringToBytes32(\"99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122\")),bytes32(stringToBytes32(\"221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249\")),bytes32(stringToBytes32(\"92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26\")),bytes32(stringToBytes32(\"34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242\")),bytes32(stringToBytes32(\"215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149\")),bytes32(stringToBytes32(\"99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76\")),bytes32(stringToBytes32(\"233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80\")),bytes32(stringToBytes32(\"246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19\")),bytes32(stringToBytes32(\"182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185\")),bytes32(stringToBytes32(\"79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174\"))]"
              },
              {
                "js": "[19,99,9,1,0,2,11,99,1,21]",
                "sol": "[uint8(19),uint8(99),uint8(9),uint8(1),uint8(0),uint8(2),uint8(11),uint8(99),uint8(1),uint8(21)]"
              },
              {
                "js": "[[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]]",
                "sol": "[bytes32(stringToBytes32(\"214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55\")),bytes32(stringToBytes32(\"194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216\")),bytes32(stringToBytes32(\"136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94\")),bytes32(stringToBytes32(\"11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9\")),bytes32(stringToBytes32(\"189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75\")),bytes32(stringToBytes32(\"85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244\")),bytes32(stringToBytes32(\"186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168\")),bytes32(stringToBytes32(\"116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212\")),bytes32(stringToBytes32(\"233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60\")),bytes32(stringToBytes32(\"21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22\"))]"
              },
              {
                "js": "[[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]]",
                "sol": "[bytes32(stringToBytes32(\"171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60\")),bytes32(stringToBytes32(\"64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20\")),bytes32(stringToBytes32(\"44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34\")),bytes32(stringToBytes32(\"115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97\")),bytes32(stringToBytes32(\"208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98\")),bytes32(stringToBytes32(\"125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203\")),bytes32(stringToBytes32(\"89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230\")),bytes32(stringToBytes32(\"98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226\")),bytes32(stringToBytes32(\"125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28\")),bytes32(stringToBytes32(\"240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76\"))]"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.553ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54]",
              "sol": "stringToBytes32(\"91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54\")"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115]",
              "sol": "stringToBytes32(\"97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115\")"
            },
            {
              "js": "[89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13]",
              "sol": "stringToBytes32(\"89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54]",
                "sol": "stringToBytes32(\"91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54\")"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115]",
                "sol": "stringToBytes32(\"97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115\")"
              },
              {
                "js": "[89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13]",
                "sol": "stringToBytes32(\"89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54]",
                "sol": "stringToBytes32(\"91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54\")"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115]",
                "sol": "stringToBytes32(\"97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115\")"
              },
              {
                "js": "[89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13]",
                "sol": "stringToBytes32(\"89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13\")"
              },
              {
                "js": 5,
                "sol": 5
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.554ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.555ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[216,91,147,89,118,106,13,233,254,107,65,99,228,52,18,106,7,119,215,146,83,116,105,197,105,1,39,80,209,197,234,154]",
              "sol": "stringToBytes32(\"216,91,147,89,118,106,13,233,254,107,65,99,228,52,18,106,7,119,215,146,83,116,105,197,105,1,39,80,209,197,234,154\")"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[238,250,0,122,138,22,253,120,182,27,14,93,57,77,203,175,128,138,87,114,66,194,204,172,235,156,26,247,243,221,236,139]",
              "sol": "stringToBytes32(\"238,250,0,122,138,22,253,120,182,27,14,93,57,77,203,175,128,138,87,114,66,194,204,172,235,156,26,247,243,221,236,139\")"
            },
            {
              "js": "[216,249,96,201,149,118,76,9,203,35,132,234,126,226,239,249,82,159,103,199,46,137,55,216,240,89,80,35,201,133,135,122]",
              "sol": "stringToBytes32(\"216,249,96,201,149,118,76,9,203,35,132,234,126,226,239,249,82,159,103,199,46,137,55,216,240,89,80,35,201,133,135,122\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.556ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.556ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T18:14:29.556ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T18:14:29.557ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}