,{
  "2020-11-12T11:49:55.157ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:01.600ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+177",
              "sol": "block.number+177"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+177+94",
              "sol": "block.number+177+94"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177",
                "sol": "block.number+177"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177+94",
                "sol": "block.number+177+94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177",
                "sol": "block.number+177"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177+94",
                "sol": "block.number+177+94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177+94",
                "sol": "block.number+177+94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177",
                "sol": "block.number+177"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+177",
                "sol": "block.number+177"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:07.992ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:14.571ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:21.046ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:27.558ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:34.163ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:40.804ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.591ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.592ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.593ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": 2,
                "sol": 2
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.593ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.595ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.595ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.596ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.597ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.598ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.598ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.598ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.599ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.600ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.602ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.603ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.603ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.604ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.606ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.607ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.608ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:10}",
              "sol": "{\"from\":\"0x0\",\"value\":\"10\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:10}",
                "sol": "{\"from\":\"0x0\",\"value\":\"10\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.612ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.613ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.617ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.617ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.618ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.618ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.618ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "[12,90,71,28,125,141,76,149,118,255,160,99,106,128,10,51,156,189,9,32,208,118,183,90,142,116,41,234,146,217,191,127]",
              "sol": "stringToBytes32(\"12,90,71,28,125,141,76,149,118,255,160,99,106,128,10,51,156,189,9,32,208,118,183,90,142,116,41,234,146,217,191,127\")"
            },
            {
              "js": "[250,51,57,1,96,47,46,190,96,248,80,135,255,163,186,28,131,46,103,91,162,62,106,125,147,208,121,27,106,93,114,90]",
              "sol": "stringToBytes32(\"250,51,57,1,96,47,46,190,96,248,80,135,255,163,186,28,131,46,103,91,162,62,106,125,147,208,121,27,106,93,114,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.619ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[244,194,210,105,67,174,202,90,214,66,165,128,234,105,11,161,50,158,241,74]",
              "sol": "abi.encode(\"244,194,210,105,67,174,202,90,214,66,165,128,234,105,11,161,50,158,241,74\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[189,149,208,203,244,172,234,98,82,249,21,235,8,179,101,109,172,80,109,109,126]",
                "sol": "bytes21(\"189,149,208,203,244,172,234,98,82,249,21,235,8,179,101,109,172,80,109,109,126\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.620ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[74,193,100,212,250,94,235,151,115,184,253,178,144,74,244,69,153,205,233,95,10,156,25,21,230,193,24,42,7,5,30,121]",
              "sol": "stringToBytes32(\"74,193,100,212,250,94,235,151,115,184,253,178,144,74,244,69,153,205,233,95,10,156,25,21,230,193,24,42,7,5,30,121\")"
            },
            {
              "js": "[214,69,12,203,193,162,17,188,46,148,125,230,161,220,156,246,235,196,130,164,33,91,163,193,81,243,111,193,91,225,240,3]",
              "sol": "stringToBytes32(\"214,69,12,203,193,162,17,188,46,148,125,230,161,220,156,246,235,196,130,164,33,91,163,193,81,243,111,193,91,225,240,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.620ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.621ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.622ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.623ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.623ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.623ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.623ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.624ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.626ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.627ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[36,6,219,55,247,198,195,162,63,84,74,209,110,154,150,47,45,155,197,118,249,210,23,102,84,204,100,109,47,205,213,222],[13,219,247,88,76,107,35,177,185,88,176,141,49,144,224,127,124,17,179,76,254,150,140,249,52,91,26,167,202,151,142,254]]",
              "sol": "[bytes32(stringToBytes32(\"36,6,219,55,247,198,195,162,63,84,74,209,110,154,150,47,45,155,197,118,249,210,23,102,84,204,100,109,47,205,213,222\")),bytes32(stringToBytes32(\"13,219,247,88,76,107,35,177,185,88,176,141,49,144,224,127,124,17,179,76,254,150,140,249,52,91,26,167,202,151,142,254\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-870",
              "sol": "block.timestamp-870"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[36,6,219,55,247,198,195,162,63,84,74,209,110,154,150,47,45,155,197,118,249,210,23,102,84,204,100,109,47,205,213,222],[13,219,247,88,76,107,35,177,185,88,176,141,49,144,224,127,124,17,179,76,254,150,140,249,52,91,26,167,202,151,142,254]]",
                "sol": "[bytes32(stringToBytes32(\"36,6,219,55,247,198,195,162,63,84,74,209,110,154,150,47,45,155,197,118,249,210,23,102,84,204,100,109,47,205,213,222\")),bytes32(stringToBytes32(\"13,219,247,88,76,107,35,177,185,88,176,141,49,144,224,127,124,17,179,76,254,150,140,249,52,91,26,167,202,151,142,254\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.628ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "[143,176,146,165,134,130,181,76,155,107,200,52,63,206,117,211,26,19,192,67,50,58,252,98,57,23,14,187,1,201,145,178]",
              "sol": "abi.encode(\"143,176,146,165,134,130,181,76,155,107,200,52,63,206,117,211,26,19,192,67,50,58,252,98,57,23,14,187,1,201,145,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "[143,176,146,165,134,130,181,76,155,107,200,52,63,206,117,211,26,19,192,67,50,58,252,98,57,23,14,187,1,201,145,178]",
                "sol": "abi.encode(\"143,176,146,165,134,130,181,76,155,107,200,52,63,206,117,211,26,19,192,67,50,58,252,98,57,23,14,187,1,201,145,178\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.629ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.630ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.630ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.630ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.630ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.631ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.631ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.632ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.632ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.633ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.634ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.634ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.634ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.635ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "[192,194,194,134,251,125,212,114,49,83,36,151,88,71,77,178,120,70,247,23,199,235,30,176,176,227,127,82,254,42,53,57]",
              "sol": "abi.encode(\"192,194,194,134,251,125,212,114,49,83,36,151,88,71,77,178,120,70,247,23,199,235,30,176,176,227,127,82,254,42,53,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.635ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.636ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.637ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173]",
              "sol": "stringToBytes32(\"72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195]",
              "sol": "stringToBytes32(\"91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195\")"
            },
            {
              "js": "[26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168]",
              "sol": "stringToBytes32(\"26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173]",
                "sol": "stringToBytes32(\"72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195]",
                "sol": "stringToBytes32(\"91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195\")"
              },
              {
                "js": "[26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168]",
                "sol": "stringToBytes32(\"26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173]",
                "sol": "stringToBytes32(\"72,172,207,139,120,122,9,241,105,68,46,243,86,19,213,17,95,178,137,10,221,233,250,72,50,94,18,18,24,201,223,173\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195]",
                "sol": "stringToBytes32(\"91,147,48,124,12,173,190,162,94,221,34,207,105,78,180,54,119,27,170,161,22,186,110,180,140,235,114,128,46,5,149,195\")"
              },
              {
                "js": "[26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168]",
                "sol": "stringToBytes32(\"26,234,223,135,112,61,46,212,42,9,121,62,228,160,114,234,21,205,212,33,133,254,122,98,147,224,229,221,91,136,197,168\")"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.638ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[6,2,160,9999,83]",
              "sol": "[uint256(6),uint256(2),uint256(160),uint256(9999),uint256(83)]"
            },
            {
              "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
              "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
            },
            {
              "js": "[1,9,255,9,4]",
              "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
            },
            {
              "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
              "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
            },
            {
              "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
              "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[6,2,160,9999,83]",
                "sol": "[uint256(6),uint256(2),uint256(160),uint256(9999),uint256(83)]"
              },
              {
                "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
                "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
              },
              {
                "js": "[1,9,255,9,4]",
                "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
              },
              {
                "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
                "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
              },
              {
                "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
                "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[256,16,9999,2,16,159]",
                "sol": "[5,19,101,1000,99,5]"
              },
              {
                "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
                "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
              },
              {
                "js": "[1,9,255,9,4]",
                "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
              },
              {
                "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
                "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
              },
              {
                "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
                "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9,101,82,1000,256,15]",
                "sol": "[999,100,4,82,10001,18]"
              },
              {
                "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
                "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
              },
              {
                "js": "[1,9,255,9,4]",
                "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
              },
              {
                "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
                "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
              },
              {
                "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
                "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1338,256,161,11,2,10]",
                "sol": "[9999,6,1,9,256,161]"
              },
              {
                "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
                "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
              },
              {
                "js": "[1,9,255,9,4]",
                "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
              },
              {
                "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
                "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
              },
              {
                "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
                "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[255,6,9,1000,18,10]",
                "sol": "[10,19,101,99,2,10]"
              },
              {
                "js": "[[20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192],[111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240],[127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68],[63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35],[66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246]]",
                "sol": "[bytes32(stringToBytes32(\"20,218,228,241,38,122,100,188,34,96,16,187,76,230,147,204,97,13,194,34,29,186,218,204,199,72,39,209,161,16,228,192\")),bytes32(stringToBytes32(\"111,113,11,206,52,206,226,152,78,103,194,113,223,194,2,145,0,89,42,74,43,219,155,114,249,3,22,239,207,208,33,240\")),bytes32(stringToBytes32(\"127,190,115,94,20,12,140,238,44,8,47,125,100,229,233,131,199,170,118,102,208,107,70,61,158,140,233,187,136,245,209,68\")),bytes32(stringToBytes32(\"63,107,99,154,154,185,195,109,92,167,83,147,229,96,34,97,114,151,7,37,226,196,45,193,110,118,150,215,250,110,14,35\")),bytes32(stringToBytes32(\"66,212,219,13,21,64,245,73,146,41,34,193,179,121,31,128,42,96,49,152,79,71,146,77,160,134,106,238,49,75,132,246\"))]"
              },
              {
                "js": "[1,9,255,9,4]",
                "sol": "[uint8(1),uint8(9),uint8(255),uint8(9),uint8(4)]"
              },
              {
                "js": "[[119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64],[156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15],[191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7],[42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140],[121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89]]",
                "sol": "[bytes32(stringToBytes32(\"119,88,28,43,243,25,109,58,20,241,181,58,156,30,67,218,240,193,175,110,181,214,90,233,146,33,221,155,233,33,179,64\")),bytes32(stringToBytes32(\"156,218,128,174,130,216,36,68,39,90,21,62,173,15,126,175,40,113,240,251,82,132,92,50,181,88,7,105,21,96,202,15\")),bytes32(stringToBytes32(\"191,162,173,206,6,5,49,130,28,255,167,126,230,236,75,10,65,51,207,52,249,3,230,20,75,116,203,107,138,16,72,7\")),bytes32(stringToBytes32(\"42,114,129,204,158,141,108,50,238,158,9,38,1,225,75,198,88,238,54,8,239,59,166,105,130,60,205,91,85,67,58,140\")),bytes32(stringToBytes32(\"121,19,219,122,33,158,2,64,208,123,72,134,193,35,1,253,6,238,104,84,25,216,186,145,161,173,47,111,149,213,38,89\"))]"
              },
              {
                "js": "[[12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94],[102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105],[200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11],[126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152],[117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104]]",
                "sol": "[bytes32(stringToBytes32(\"12,43,207,220,78,110,118,252,159,147,188,145,74,110,4,76,140,252,190,237,126,148,104,196,167,14,193,167,20,254,143,94\")),bytes32(stringToBytes32(\"102,189,53,156,221,134,135,78,214,196,182,80,89,164,189,193,120,3,253,180,18,72,165,35,31,214,158,201,78,41,246,105\")),bytes32(stringToBytes32(\"200,63,10,95,2,2,242,199,199,212,82,227,179,79,177,255,61,66,181,125,0,23,79,230,218,63,228,177,68,10,211,11\")),bytes32(stringToBytes32(\"126,194,153,73,2,50,196,178,29,20,210,3,76,186,47,176,125,52,119,223,137,64,255,48,102,40,193,235,197,125,45,152\")),bytes32(stringToBytes32(\"117,70,14,32,79,247,13,8,70,75,79,88,24,251,63,145,29,76,231,73,59,37,153,199,236,155,58,126,255,56,196,104\"))]"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.643ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127]",
              "sol": "stringToBytes32(\"242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127\")"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215]",
              "sol": "stringToBytes32(\"130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215\")"
            },
            {
              "js": "[159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115]",
              "sol": "stringToBytes32(\"159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127]",
                "sol": "stringToBytes32(\"242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127\")"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215]",
                "sol": "stringToBytes32(\"130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215\")"
              },
              {
                "js": "[159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115]",
                "sol": "stringToBytes32(\"159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115\")"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127]",
                "sol": "stringToBytes32(\"242,169,210,156,121,245,62,141,34,53,69,181,129,64,172,30,172,7,28,213,72,154,245,31,200,134,0,130,102,35,0,127\")"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215]",
                "sol": "stringToBytes32(\"130,73,141,102,86,178,67,103,104,5,166,28,139,83,82,127,70,55,47,133,6,91,10,168,26,65,229,210,90,193,242,215\")"
              },
              {
                "js": "[159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115]",
                "sol": "stringToBytes32(\"159,23,151,243,90,252,102,220,251,78,189,153,239,152,204,29,197,73,201,185,54,158,90,42,185,129,176,136,61,173,196,115\")"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.644ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.645ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[234,184,105,209,99,84,183,198,196,28,205,255,168,105,20,206,157,218,239,159,183,211,233,231,248,52,83,151,5,63,143,52]",
              "sol": "stringToBytes32(\"234,184,105,209,99,84,183,198,196,28,205,255,168,105,20,206,157,218,239,159,183,211,233,231,248,52,83,151,5,63,143,52\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[220,52,164,98,60,172,148,29,160,150,213,215,237,242,158,134,6,99,252,71,12,56,241,61,76,13,2,203,146,105,141,224]",
              "sol": "stringToBytes32(\"220,52,164,98,60,172,148,29,160,150,213,215,237,242,158,134,6,99,252,71,12,56,241,61,76,13,2,203,146,105,141,224\")"
            },
            {
              "js": "[100,241,178,222,60,36,32,81,136,168,59,223,255,49,213,31,206,132,22,83,56,182,222,178,207,16,52,167,68,21,226,192]",
              "sol": "stringToBytes32(\"100,241,178,222,60,36,32,81,136,168,59,223,255,49,213,31,206,132,22,83,56,182,222,178,207,16,52,167,68,21,226,192\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.646ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.646ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:50:47.646ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T11:50:47.647ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}