,{
  "2020-11-10T20:24:54.535ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:00.749ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+978",
              "sol": "block.number+978"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+978+495",
              "sol": "block.number+978+495"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978",
                "sol": "block.number+978"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978+495",
                "sol": "block.number+978+495"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978",
                "sol": "block.number+978"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978+495",
                "sol": "block.number+978+495"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978+495",
                "sol": "block.number+978+495"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978",
                "sol": "block.number+978"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+978",
                "sol": "block.number+978"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:07.297ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:13.703ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:20.148ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:26.640ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:33.372ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:40.014ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.753ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.755ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.755ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": 257,
                "sol": 257
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.756ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.756ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.757ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.758ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.758ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.759ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.761ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.761ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.761ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.763ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.764ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.765ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.765ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.765ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.767ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.768ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.769ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:1336}",
              "sol": "{\"from\":\"0x0\",\"value\":\"1336\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:1336}",
                "sol": "{\"from\":\"0x0\",\"value\":\"1336\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.775ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.776ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.781ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.781ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.781ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.781ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.782ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[55,168,146,140,13,238,72,235,197,31,119,63,122,97,210,82,67,44,57,50,83,223,122,6,135,77,124,219,181,88,34,236]",
              "sol": "stringToBytes32(\"55,168,146,140,13,238,72,235,197,31,119,63,122,97,210,82,67,44,57,50,83,223,122,6,135,77,124,219,181,88,34,236\")"
            },
            {
              "js": "[69,201,19,206,165,248,207,165,222,255,197,171,67,155,117,23,138,245,93,148,162,243,83,55,217,77,46,243,104,25,208,1]",
              "sol": "stringToBytes32(\"69,201,19,206,165,248,207,165,222,255,197,171,67,155,117,23,138,245,93,148,162,243,83,55,217,77,46,243,104,25,208,1\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.782ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[211,41,161,167,112,27,144,180,238,103,63,33,79,242,30,205,47,50,21,196]",
              "sol": "abi.encode(\"211,41,161,167,112,27,144,180,238,103,63,33,79,242,30,205,47,50,21,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[234,144,172,98,40,106,95,206,222,164,88,125,86,212,6,129,93,218,210,21,220]",
                "sol": "bytes21(\"234,144,172,98,40,106,95,206,222,164,88,125,86,212,6,129,93,218,210,21,220\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.783ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[31,84,18,118,23,113,214,77,250,121,48,187,224,179,205,176,170,105,74,176,78,29,27,182,138,34,254,148,168,149,168,15]",
              "sol": "stringToBytes32(\"31,84,18,118,23,113,214,77,250,121,48,187,224,179,205,176,170,105,74,176,78,29,27,182,138,34,254,148,168,149,168,15\")"
            },
            {
              "js": "[113,110,242,46,173,19,96,230,138,110,47,92,136,161,209,74,157,43,174,152,86,206,8,205,178,137,76,152,7,80,64,10]",
              "sol": "stringToBytes32(\"113,110,242,46,173,19,96,230,138,110,47,92,136,161,209,74,157,43,174,152,86,206,8,205,178,137,76,152,7,80,64,10\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.784ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.784ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.785ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.785ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.786ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.786ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.787ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.789ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.791ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.792ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[112,147,88,60,148,95,179,4,72,90,75,205,228,50,162,226,169,62,249,142,151,80,251,202,75,38,203,214,203,156,21,19],[201,187,231,251,5,171,218,52,63,249,121,101,205,146,41,109,239,220,164,69,124,170,90,194,251,9,110,216,4,58,232,36],[5,75,167,35,93,192,72,73,236,145,214,165,228,109,236,56,26,82,208,245,149,12,155,81,143,17,71,83,14,216,195,60],[137,220,84,242,139,165,110,93,73,112,183,24,32,221,166,79,4,195,201,187,200,230,101,30,235,169,97,115,96,235,241,21],[211,192,66,47,251,177,7,212,217,240,83,91,207,177,15,86,250,174,204,39,56,84,225,211,13,233,4,123,239,97,171,118],[91,195,121,48,102,116,178,56,178,93,204,0,199,9,194,87,173,6,164,180,208,181,119,45,253,167,252,171,159,80,185,217],[163,139,185,212,29,117,232,5,38,45,232,121,116,183,200,219,124,212,64,78,115,168,162,82,249,245,138,36,221,249,234,248],[39,122,198,78,127,104,255,181,134,141,69,149,71,165,27,202,42,50,88,192,70,132,130,95,147,253,77,74,156,166,24,210]]",
              "sol": "[bytes32(stringToBytes32(\"112,147,88,60,148,95,179,4,72,90,75,205,228,50,162,226,169,62,249,142,151,80,251,202,75,38,203,214,203,156,21,19\")),bytes32(stringToBytes32(\"201,187,231,251,5,171,218,52,63,249,121,101,205,146,41,109,239,220,164,69,124,170,90,194,251,9,110,216,4,58,232,36\")),bytes32(stringToBytes32(\"5,75,167,35,93,192,72,73,236,145,214,165,228,109,236,56,26,82,208,245,149,12,155,81,143,17,71,83,14,216,195,60\")),bytes32(stringToBytes32(\"137,220,84,242,139,165,110,93,73,112,183,24,32,221,166,79,4,195,201,187,200,230,101,30,235,169,97,115,96,235,241,21\")),bytes32(stringToBytes32(\"211,192,66,47,251,177,7,212,217,240,83,91,207,177,15,86,250,174,204,39,56,84,225,211,13,233,4,123,239,97,171,118\")),bytes32(stringToBytes32(\"91,195,121,48,102,116,178,56,178,93,204,0,199,9,194,87,173,6,164,180,208,181,119,45,253,167,252,171,159,80,185,217\")),bytes32(stringToBytes32(\"163,139,185,212,29,117,232,5,38,45,232,121,116,183,200,219,124,212,64,78,115,168,162,82,249,245,138,36,221,249,234,248\")),bytes32(stringToBytes32(\"39,122,198,78,127,104,255,181,134,141,69,149,71,165,27,202,42,50,88,192,70,132,130,95,147,253,77,74,156,166,24,210\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-543",
              "sol": "block.timestamp-543"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[112,147,88,60,148,95,179,4,72,90,75,205,228,50,162,226,169,62,249,142,151,80,251,202,75,38,203,214,203,156,21,19],[201,187,231,251,5,171,218,52,63,249,121,101,205,146,41,109,239,220,164,69,124,170,90,194,251,9,110,216,4,58,232,36],[5,75,167,35,93,192,72,73,236,145,214,165,228,109,236,56,26,82,208,245,149,12,155,81,143,17,71,83,14,216,195,60],[137,220,84,242,139,165,110,93,73,112,183,24,32,221,166,79,4,195,201,187,200,230,101,30,235,169,97,115,96,235,241,21],[211,192,66,47,251,177,7,212,217,240,83,91,207,177,15,86,250,174,204,39,56,84,225,211,13,233,4,123,239,97,171,118],[91,195,121,48,102,116,178,56,178,93,204,0,199,9,194,87,173,6,164,180,208,181,119,45,253,167,252,171,159,80,185,217],[163,139,185,212,29,117,232,5,38,45,232,121,116,183,200,219,124,212,64,78,115,168,162,82,249,245,138,36,221,249,234,248],[39,122,198,78,127,104,255,181,134,141,69,149,71,165,27,202,42,50,88,192,70,132,130,95,147,253,77,74,156,166,24,210]]",
                "sol": "[bytes32(stringToBytes32(\"112,147,88,60,148,95,179,4,72,90,75,205,228,50,162,226,169,62,249,142,151,80,251,202,75,38,203,214,203,156,21,19\")),bytes32(stringToBytes32(\"201,187,231,251,5,171,218,52,63,249,121,101,205,146,41,109,239,220,164,69,124,170,90,194,251,9,110,216,4,58,232,36\")),bytes32(stringToBytes32(\"5,75,167,35,93,192,72,73,236,145,214,165,228,109,236,56,26,82,208,245,149,12,155,81,143,17,71,83,14,216,195,60\")),bytes32(stringToBytes32(\"137,220,84,242,139,165,110,93,73,112,183,24,32,221,166,79,4,195,201,187,200,230,101,30,235,169,97,115,96,235,241,21\")),bytes32(stringToBytes32(\"211,192,66,47,251,177,7,212,217,240,83,91,207,177,15,86,250,174,204,39,56,84,225,211,13,233,4,123,239,97,171,118\")),bytes32(stringToBytes32(\"91,195,121,48,102,116,178,56,178,93,204,0,199,9,194,87,173,6,164,180,208,181,119,45,253,167,252,171,159,80,185,217\")),bytes32(stringToBytes32(\"163,139,185,212,29,117,232,5,38,45,232,121,116,183,200,219,124,212,64,78,115,168,162,82,249,245,138,36,221,249,234,248\")),bytes32(stringToBytes32(\"39,122,198,78,127,104,255,181,134,141,69,149,71,165,27,202,42,50,88,192,70,132,130,95,147,253,77,74,156,166,24,210\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.793ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[166,11,217,140,248,162,143,124,234,80,38,222,208,127,90,247,106,217,110,132,227,233,249,149,207,72,244,32,44,5,3,34]",
              "sol": "abi.encode(\"166,11,217,140,248,162,143,124,234,80,38,222,208,127,90,247,106,217,110,132,227,233,249,149,207,72,244,32,44,5,3,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[166,11,217,140,248,162,143,124,234,80,38,222,208,127,90,247,106,217,110,132,227,233,249,149,207,72,244,32,44,5,3,34]",
                "sol": "abi.encode(\"166,11,217,140,248,162,143,124,234,80,38,222,208,127,90,247,106,217,110,132,227,233,249,149,207,72,244,32,44,5,3,34\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.795ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.795ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.795ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.796ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.796ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.796ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.797ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.798ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.799ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.800ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.800ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.801ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.801ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.801ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[4,71,71,64,57,233,1,250,152,45,154,116,163,125,153,89,92,193,89,106,35,213,51,43,224,205,219,247,238,37,63,155]",
              "sol": "abi.encode(\"4,71,71,64,57,233,1,250,152,45,154,116,163,125,153,89,92,193,89,106,35,213,51,43,224,205,219,247,238,37,63,155\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.802ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.802ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.803ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "[219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51]",
              "sol": "stringToBytes32(\"219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30]",
              "sol": "stringToBytes32(\"185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30\")"
            },
            {
              "js": "[19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38]",
              "sol": "stringToBytes32(\"19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "[219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51]",
                "sol": "stringToBytes32(\"219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30]",
                "sol": "stringToBytes32(\"185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30\")"
              },
              {
                "js": "[19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38]",
                "sol": "stringToBytes32(\"19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38\")"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "[219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51]",
                "sol": "stringToBytes32(\"219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30]",
                "sol": "stringToBytes32(\"185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30\")"
              },
              {
                "js": "[19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38]",
                "sol": "stringToBytes32(\"19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38\")"
              },
              {
                "js": 1000,
                "sol": 1000
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.807ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1001,1,1336,257,20,999,17,256,83]",
              "sol": "[uint256(1001),uint256(1),uint256(1336),uint256(257),uint256(20),uint256(999),uint256(17),uint256(256),uint256(83)]"
            },
            {
              "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
              "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
            },
            {
              "js": "[100,100,0,10,2,10,10,11,82]",
              "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
            },
            {
              "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
              "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
            },
            {
              "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
              "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1001,1,1336,257,20,999,17,256,83]",
                "sol": "[uint256(1001),uint256(1),uint256(1336),uint256(257),uint256(20),uint256(999),uint256(17),uint256(256),uint256(83)]"
              },
              {
                "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
                "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
              },
              {
                "js": "[100,100,0,10,2,10,10,11,82]",
                "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
              },
              {
                "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
                "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
              },
              {
                "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
                "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[101,999,1338,1001,160,10,6,4,82,999]",
                "sol": "[9999,19,257,15,2,10,10001,4,100,6]"
              },
              {
                "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
                "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
              },
              {
                "js": "[100,100,0,10,2,10,10,11,82]",
                "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
              },
              {
                "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
                "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
              },
              {
                "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
                "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[21,1,159,19,1,99,159,6,0,10000]",
                "sol": "[1,9999,161,3,255,82,2,0,160,1001]"
              },
              {
                "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
                "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
              },
              {
                "js": "[100,100,0,10,2,10,10,11,82]",
                "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
              },
              {
                "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
                "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
              },
              {
                "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
                "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[17,999,1001,159,0,160,999,15,256,9999]",
                "sol": "[99,10001,10,1000,11,160,19,16,1000,3]"
              },
              {
                "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
                "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
              },
              {
                "js": "[100,100,0,10,2,10,10,11,82]",
                "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
              },
              {
                "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
                "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
              },
              {
                "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
                "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[2,160,257,3,160,10,160,255,3,4]",
                "sol": "[1,159,101,1,9,160,160,21,4,161]"
              },
              {
                "js": "[[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]]",
                "sol": "[bytes32(stringToBytes32(\"220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212\")),bytes32(stringToBytes32(\"224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197\")),bytes32(stringToBytes32(\"40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125\")),bytes32(stringToBytes32(\"105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169\")),bytes32(stringToBytes32(\"21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10\")),bytes32(stringToBytes32(\"210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148\")),bytes32(stringToBytes32(\"29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169\")),bytes32(stringToBytes32(\"175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15\")),bytes32(stringToBytes32(\"253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57\"))]"
              },
              {
                "js": "[100,100,0,10,2,10,10,11,82]",
                "sol": "[uint8(100),uint8(100),uint8(0),uint8(10),uint8(2),uint8(10),uint8(10),uint8(11),uint8(82)]"
              },
              {
                "js": "[[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]]",
                "sol": "[bytes32(stringToBytes32(\"13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42\")),bytes32(stringToBytes32(\"161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151\")),bytes32(stringToBytes32(\"176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121\")),bytes32(stringToBytes32(\"18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235\")),bytes32(stringToBytes32(\"100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220\")),bytes32(stringToBytes32(\"87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169\")),bytes32(stringToBytes32(\"225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229\")),bytes32(stringToBytes32(\"55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18\")),bytes32(stringToBytes32(\"119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126\"))]"
              },
              {
                "js": "[[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]]",
                "sol": "[bytes32(stringToBytes32(\"73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55\")),bytes32(stringToBytes32(\"17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102\")),bytes32(stringToBytes32(\"246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50\")),bytes32(stringToBytes32(\"119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90\")),bytes32(stringToBytes32(\"71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185\")),bytes32(stringToBytes32(\"176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159\")),bytes32(stringToBytes32(\"162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93\")),bytes32(stringToBytes32(\"118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16\")),bytes32(stringToBytes32(\"60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141\"))]"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.815ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "[80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147]",
              "sol": "stringToBytes32(\"80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106]",
              "sol": "stringToBytes32(\"215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106\")"
            },
            {
              "js": "[28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144]",
              "sol": "stringToBytes32(\"28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "[80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147]",
                "sol": "stringToBytes32(\"80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147\")"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106]",
                "sol": "stringToBytes32(\"215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106\")"
              },
              {
                "js": "[28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144]",
                "sol": "stringToBytes32(\"28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "[80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147]",
                "sol": "stringToBytes32(\"80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147\")"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106]",
                "sol": "stringToBytes32(\"215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106\")"
              },
              {
                "js": "[28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144]",
                "sol": "stringToBytes32(\"28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144\")"
              },
              {
                "js": 1338,
                "sol": 1338
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.817ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.818ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[226,122,192,242,48,26,27,234,30,43,91,54,206,168,148,57,255,27,72,29,64,211,231,82,241,79,2,162,5,114,133,81]",
              "sol": "stringToBytes32(\"226,122,192,242,48,26,27,234,30,43,91,54,206,168,148,57,255,27,72,29,64,211,231,82,241,79,2,162,5,114,133,81\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[118,162,138,216,133,223,66,106,167,149,169,119,86,140,27,97,84,145,68,68,140,128,10,76,43,17,176,107,221,31,94,248]",
              "sol": "stringToBytes32(\"118,162,138,216,133,223,66,106,167,149,169,119,86,140,27,97,84,145,68,68,140,128,10,76,43,17,176,107,221,31,94,248\")"
            },
            {
              "js": "[146,35,54,231,25,12,61,79,50,177,88,106,124,34,55,176,242,177,30,32,141,173,199,84,79,84,23,95,187,77,212,59]",
              "sol": "stringToBytes32(\"146,35,54,231,25,12,61,79,50,177,88,106,124,34,55,176,242,177,30,32,141,173,199,84,79,84,23,95,187,77,212,59\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.819ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.819ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T20:25:46.819ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T20:25:46.820ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}