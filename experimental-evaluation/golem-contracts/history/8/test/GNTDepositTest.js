const truffleAssert = require('truffle-assertions');
const Faucet = artifacts.require("Faucet");
const GNTDeposit = artifacts.require("GNTDeposit");
const GNTPaymentChannels = artifacts.require("GNTPaymentChannels");
const GNTAllocation = artifacts.require("GNTAllocation");
const GolemNetworkToken = artifacts.require("GolemNetworkToken");
const GolemNetworkTokenBatching = artifacts.require("GolemNetworkTokenBatching");
const BasicToken = artifacts.require("BasicToken");
const BurnableToken = artifacts.require("BurnableToken");
const SafeMath = artifacts.require("SafeMath");
const StandardToken = artifacts.require("StandardToken");
const Gate = artifacts.require("Gate");
const TokenProxy = artifacts.require("TokenProxy");
const ProxySafeMath = artifacts.require("ProxySafeMath");

contract("GNTDeposit",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractBasicToken = null;
  let contractStandardToken = null;
  let contractBurnableToken = null;
  let contractGNTAllocation = null;
  let contractGolemNetworkToken = null;
  let contractGNTPaymentChannels = null;
  let contractFaucet = null;
  let contractTokenProxy = null;
  let contractGate = null;
  let contractGolemNetworkTokenBatching = null;
  let contractGNTDeposit = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    BasicToken.link("SafeMath",contractSafeMath.address);
    contractBasicToken = await BasicToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BasicToken.new({from: accounts[0]}');
    contractStandardToken = await StandardToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: StandardToken.new({from: accounts[0]}');
    contractBurnableToken = await BurnableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BurnableToken.new({from: accounts[0]}');
    contractGNTAllocation = await GNTAllocation.new(accounts[8],{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTAllocation.new(accounts[8],{from:accounts[0]}');
    contractGolemNetworkToken = await GolemNetworkToken.new(accounts[5],accounts[7],(await web3.eth.getBlockNumber())+978,(await web3.eth.getBlockNumber())+978+495,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkToken.new(accounts[5],accounts[7],(await web3.eth.getBlockNumber())+978,(await web3.eth.getBlockNumber())+978+495,{from:accounts[0]}');
    contractGNTPaymentChannels = await GNTPaymentChannels.new(accounts[5],10000,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTPaymentChannels.new(accounts[5],10000,{from:accounts[0]}');
    contractFaucet = await Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]}');
    contractTokenProxy = await TokenProxy.new(contractBurnableToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProxy.new(contractBurnableToken.address,{from:accounts[0]}');
    contractGate = await Gate.new(contractBurnableToken.address,accounts[1],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Gate.new(contractBurnableToken.address,accounts[1],{from:accounts[0]}');
    contractGolemNetworkTokenBatching = await GolemNetworkTokenBatching.new(contractStandardToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkTokenBatching.new(contractStandardToken.address,{from:accounts[0]}');
    contractGNTDeposit = await GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[4],accounts[6],2,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[4],accounts[6],2,{from:accounts[0]}');
  });
  
  it('Should execute balanceOf(address)', async () => {
    let result = await contractGNTDeposit.balanceOf(accounts[5],{from: accounts[0]});
  });
  it('Should execute isLocked(address)', async () => {
    let result = await contractGNTDeposit.isLocked(accounts[7],{from: accounts[0]});
  });
  it('Should execute isTimeLocked(address)', async () => {
    let result = await contractGNTDeposit.isTimeLocked(accounts[5],{from: accounts[0]});
  });
  it('Should execute isUnlocked(address)', async () => {
    let result = await contractGNTDeposit.isUnlocked(accounts[4],{from: accounts[0]});
  });
  it('Should execute getTimelock(address)', async () => {
    let result = await contractGNTDeposit.getTimelock(accounts[9],{from: accounts[0]});
  });
  it('Should execute isDepositPossible(address,uint256)', async () => {
    let result = await contractGNTDeposit.isDepositPossible(accounts[3], 1338,{from: accounts[0]});
  });
  it('Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferConcent(accounts[4],{from: accounts[0]});
  });
  it('Should fail transferConcent(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent(accounts[4],{from: accounts[9]}),'revert');
  });
  it('Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferColdwallet(accounts[8],{from: accounts[0]});
  });
  it('Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet(accounts[8],{from: accounts[9]}),'revert');
  });
  it('Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositsTotal(255,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositsTotal(255,{from: accounts[9]}),'revert');
  });
  it('Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositAmount(10,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositAmount(10,{from: accounts[9]}),'revert');
  });
  it('Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setDailyReimbursementLimit(1338,{from: accounts[0]});
  });
  it('Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setDailyReimbursementLimit(1338,{from: accounts[9]}),'revert');
  });
  it('Should execute unlock()', async () => {
    let result = await contractGNTDeposit.unlock({from: accounts[0]});
  });
  it('Should execute lock()', async () => {
    let result = await contractGNTDeposit.lock({from: accounts[0]});
  });
  it('Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true', async () => {
    let result = await contractGNTDeposit.onTokenReceived(accounts[4], 17, [4,71,71,64,57,233,1,250,152,45,154,116,163,125,153,89,92,193,89,106,35,213,51,43,224,205,219,247,238,37,63,155],{from: accounts[0]});
  });
  it('Should execute withdraw(address)', async () => {
    let result = await contractGNTDeposit.withdraw(accounts[9],{from: accounts[0]});
  });
  it('Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[3], 20,{from: accounts[4]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[3], 20,{from: accounts[9]}),'revert');
  });
  it('Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[7], 1000,{from: accounts[4]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[7], 1000,{from: accounts[9]}),'revert');
  });
  it('Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[3], 999, [219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51], 11, [185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30], [19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38], 16,{from: accounts[4]});
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[3], 999, [219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51], 11, [185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30], [19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38], 16,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[3], 999, [219,36,121,162,240,72,66,89,104,70,96,91,251,230,211,178,16,251,123,76,197,187,197,226,22,202,162,233,80,189,9,51], 11, [185,49,6,194,221,2,204,147,91,65,32,138,70,26,11,80,124,181,99,187,230,158,41,54,87,158,251,106,82,68,122,30], [19,17,59,146,166,67,26,190,1,138,18,234,242,10,110,180,86,38,226,161,48,79,140,188,146,214,42,40,108,47,181,38], 1000,{from: accounts[4]}),'revert');
  });
  it('Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount', async () => {
    let result = await contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [1001,1,1336,257,20,999,17,256,83], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[4]});
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [1001,1,1336,257,20,999,17,256,83], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [101,999,1338,1001,160,10,6,4,82,999], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[4]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [21,1,159,19,1,99,159,6,0,10000], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[4]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [17,999,1001,159,0,160,999,15,256,9999], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[4]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[5], accounts[0], [2,160,257,3,160,10,160,255,3,4], [[220,16,210,178,218,207,41,12,69,173,117,147,19,203,85,251,106,67,0,170,24,83,214,101,91,95,113,190,150,70,198,212],[224,141,64,107,80,88,225,223,24,243,166,122,135,204,121,240,229,54,137,253,99,118,220,130,236,93,145,12,70,162,80,197],[40,91,124,152,130,69,106,214,96,242,216,143,177,154,29,219,242,216,189,96,136,254,51,230,236,171,153,84,108,26,30,125],[105,201,95,46,15,103,7,37,54,117,65,27,1,48,188,190,232,227,24,46,121,213,216,191,72,145,2,91,102,116,71,169],[21,148,1,106,5,62,5,146,72,60,134,56,45,85,62,73,166,90,216,229,147,57,11,70,102,166,213,103,113,155,249,10],[210,29,47,133,189,143,187,227,50,13,131,240,113,99,155,77,230,234,232,142,221,22,148,5,232,112,186,23,241,7,158,148],[29,212,82,26,67,14,133,138,125,137,87,43,162,210,245,134,170,223,105,65,95,120,101,53,224,101,220,225,132,113,225,169],[175,33,26,25,101,229,21,33,121,169,218,153,9,56,21,171,63,235,71,125,3,189,71,99,132,124,203,10,192,143,162,15],[253,255,255,214,98,246,238,242,160,89,220,67,137,48,184,251,129,84,206,191,7,190,192,226,19,227,70,250,98,94,76,57]], [100,100,0,10,2,10,10,11,82], [[13,1,41,146,69,122,22,87,136,240,35,10,6,221,72,61,112,199,13,252,39,171,231,72,110,172,160,154,94,46,103,42],[161,96,161,41,78,36,94,127,125,55,193,35,141,189,195,198,252,45,123,60,35,77,242,148,255,241,2,163,204,40,166,151],[176,98,37,233,74,217,154,209,39,235,235,153,117,90,212,172,86,111,54,244,49,38,57,79,222,198,21,78,14,53,232,121],[18,40,182,24,24,57,185,121,65,157,244,86,97,232,171,214,154,89,101,84,231,212,213,129,86,96,127,120,104,84,54,235],[100,219,66,190,246,149,4,47,56,168,207,61,124,225,234,228,200,209,104,137,98,140,208,200,251,39,105,111,54,187,151,220],[87,216,81,168,62,81,232,47,204,180,100,68,127,227,146,22,58,103,1,179,26,4,233,230,126,76,184,16,175,254,216,169],[225,247,50,128,198,89,168,126,110,249,205,175,209,197,152,126,228,12,222,203,196,106,249,146,161,188,175,122,166,53,64,229],[55,161,153,129,161,226,102,167,236,26,183,250,190,104,172,140,232,46,198,160,167,204,36,193,218,37,65,30,58,1,251,18],[119,165,136,29,197,54,12,107,54,194,193,91,238,114,209,204,201,209,247,254,230,78,186,128,18,117,125,197,155,216,250,126]], [[73,211,216,118,211,245,10,69,92,154,160,46,213,85,119,200,75,181,54,96,145,176,18,14,101,113,95,78,17,54,135,55],[17,70,234,190,247,246,14,50,135,52,129,225,64,169,6,222,126,129,201,74,3,163,14,96,140,10,139,67,206,56,125,102],[246,192,193,253,51,106,189,85,185,113,148,88,45,107,220,196,208,130,45,48,249,34,212,115,57,32,113,133,47,7,49,50],[119,217,98,129,5,230,47,50,176,244,222,39,43,187,230,126,133,205,226,7,149,16,96,145,229,11,206,39,67,190,254,90],[71,139,93,246,113,84,209,1,192,36,34,195,170,157,106,17,142,74,205,169,90,130,2,119,104,153,74,164,217,5,170,185],[176,124,242,221,4,150,223,36,232,105,21,100,136,93,193,3,188,104,180,39,89,121,85,44,172,81,158,92,88,134,125,159],[162,127,90,139,98,21,152,132,242,195,41,40,104,189,75,233,240,102,17,132,246,74,23,26,65,221,61,11,79,133,39,93],[118,135,116,60,71,141,119,180,136,10,186,161,52,140,193,84,34,192,225,92,203,119,35,226,86,58,127,89,220,71,124,16],[60,119,38,184,241,138,153,53,21,136,113,227,170,160,115,128,60,135,57,44,206,124,8,141,245,172,161,174,155,202,212,141]], 1, 21,{from: accounts[4]}),'revert');
  });
  it('Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForVerificationCosts(accounts[7], 1337, [80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147], 16, [215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106], [28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144], 4,{from: accounts[4]});
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[7], 1337, [80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147], 16, [215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106], [28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144], 4,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[7], 1337, [80,92,31,93,128,68,146,69,36,158,113,253,74,161,12,74,219,167,190,61,90,26,101,152,161,221,57,185,79,199,47,147], 16, [215,114,205,145,46,245,99,248,83,213,97,191,166,42,45,195,155,19,100,215,87,174,251,20,134,250,12,151,149,234,240,106], [28,86,142,10,123,234,93,26,117,41,206,245,121,74,115,146,112,81,193,180,182,118,157,235,210,26,202,169,45,252,227,144], 1338,{from: accounts[4]}),'revert');
  });
  it('Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent', async () => {
    let result = await contractGNTDeposit.reimburseForCommunication(accounts[7], 100,{from: accounts[4]});
  });
  it('Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForCommunication(accounts[7], 100,{from: accounts[9]}),'revert');
  });
  it('Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)', async () => {
    let result = await contractGNTDeposit._isValidSignature(accounts[4], accounts[4], 0, [226,122,192,242,48,26,27,234,30,43,91,54,206,168,148,57,255,27,72,29,64,211,231,82,241,79,2,162,5,114,133,81], 14, [118,162,138,216,133,223,66,106,167,149,169,119,86,140,27,97,84,145,68,68,140,128,10,76,43,17,176,107,221,31,94,248], [146,35,54,231,25,12,61,79,50,177,88,106,124,34,55,176,242,177,30,32,141,173,199,84,79,84,23,95,187,77,212,59],{from: accounts[0]});
  });
  it('Should execute owner()', async () => {
    let result = await contractGNTDeposit.owner({from: accounts[0]});
  });
  it('Should execute isOwner()', async () => {
    let result = await contractGNTDeposit.isOwner({from: accounts[0]});
  });
  it('Should execute renounceOwnership() WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.renounceOwnership({from: accounts[0]});
  });
  it('Should fail renounceOwnership() when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.renounceOwnership({from: accounts[9]}),'revert');
  });
  it('Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferOwnership(accounts[9],{from: accounts[0]});
  });
  it('Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership(accounts[9],{from: accounts[9]}),'revert');
  });
  it('Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
});
