,{
  "2020-11-10T09:30:58.428ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:04.816ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+570",
              "sol": "block.number+570"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+570+389",
              "sol": "block.number+570+389"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570",
                "sol": "block.number+570"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570+389",
                "sol": "block.number+570+389"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570",
                "sol": "block.number+570"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570+389",
                "sol": "block.number+570+389"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570+389",
                "sol": "block.number+570+389"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570",
                "sol": "block.number+570"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+570",
                "sol": "block.number+570"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:11.222ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:17.748ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:24.254ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:31.008ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:37.655ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:44.337ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.340ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.341ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.341ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": 257,
                "sol": 257
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.342ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.343ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.343ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.344ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.345ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.346ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.346ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.346ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.347ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.349ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.351ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.352ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.352ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.352ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.354ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.355ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.356ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:100}",
              "sol": "{\"from\":\"0x0\",\"value\":\"100\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:100}",
                "sol": "{\"from\":\"0x0\",\"value\":\"100\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.362ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.363ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.368ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.369ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.369ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.369ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.370ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[228,207,173,92,142,56,215,157,100,18,95,223,162,24,6,234,52,199,92,162,191,233,121,148,15,1,124,190,97,94,135,183]",
              "sol": "stringToBytes32(\"228,207,173,92,142,56,215,157,100,18,95,223,162,24,6,234,52,199,92,162,191,233,121,148,15,1,124,190,97,94,135,183\")"
            },
            {
              "js": "[240,111,179,77,183,94,55,237,180,113,136,3,235,91,201,81,21,238,70,119,30,123,140,23,180,148,232,3,155,233,193,57]",
              "sol": "stringToBytes32(\"240,111,179,77,183,94,55,237,180,113,136,3,235,91,201,81,21,238,70,119,30,123,140,23,180,148,232,3,155,233,193,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.370ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "[49,177,184,36,122,24,133,93,138,125,125,188,193,55,213,4,255,119,52,71]",
              "sol": "abi.encode(\"49,177,184,36,122,24,133,93,138,125,125,188,193,55,213,4,255,119,52,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "[76,255,16,233,185,248,167,63,168,240,212,0,44,116,131,223,5,162,129,196,228]",
                "sol": "bytes21(\"76,255,16,233,185,248,167,63,168,240,212,0,44,116,131,223,5,162,129,196,228\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.371ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[146,93,162,253,129,155,143,211,250,134,88,213,15,97,71,43,55,13,238,117,208,178,198,180,178,130,70,171,164,35,237,120]",
              "sol": "stringToBytes32(\"146,93,162,253,129,155,143,211,250,134,88,213,15,97,71,43,55,13,238,117,208,178,198,180,178,130,70,171,164,35,237,120\")"
            },
            {
              "js": "[106,78,66,88,116,131,82,40,108,163,55,176,62,119,81,216,139,49,175,156,204,22,207,161,25,18,238,243,88,125,30,15]",
              "sol": "stringToBytes32(\"106,78,66,88,116,131,82,40,108,163,55,176,62,119,81,216,139,49,175,156,204,22,207,161,25,18,238,243,88,125,30,15\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.372ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.372ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.373ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.374ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.374ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.374ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.375ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.377ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.378ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.379ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[68,185,240,109,11,33,190,61,100,50,227,54,51,144,221,81,71,196,131,78,73,36,131,175,169,54,137,30,168,223,211,178],[118,39,87,190,131,60,106,2,31,16,76,172,164,124,113,225,197,124,179,12,157,151,29,231,143,23,245,22,177,250,194,195],[140,214,97,147,249,134,126,9,118,30,88,172,114,131,41,211,236,142,202,13,67,69,132,64,73,226,77,40,166,242,8,165]]",
              "sol": "[bytes32(stringToBytes32(\"68,185,240,109,11,33,190,61,100,50,227,54,51,144,221,81,71,196,131,78,73,36,131,175,169,54,137,30,168,223,211,178\")),bytes32(stringToBytes32(\"118,39,87,190,131,60,106,2,31,16,76,172,164,124,113,225,197,124,179,12,157,151,29,231,143,23,245,22,177,250,194,195\")),bytes32(stringToBytes32(\"140,214,97,147,249,134,126,9,118,30,88,172,114,131,41,211,236,142,202,13,67,69,132,64,73,226,77,40,166,242,8,165\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-944",
              "sol": "block.timestamp-944"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[68,185,240,109,11,33,190,61,100,50,227,54,51,144,221,81,71,196,131,78,73,36,131,175,169,54,137,30,168,223,211,178],[118,39,87,190,131,60,106,2,31,16,76,172,164,124,113,225,197,124,179,12,157,151,29,231,143,23,245,22,177,250,194,195],[140,214,97,147,249,134,126,9,118,30,88,172,114,131,41,211,236,142,202,13,67,69,132,64,73,226,77,40,166,242,8,165]]",
                "sol": "[bytes32(stringToBytes32(\"68,185,240,109,11,33,190,61,100,50,227,54,51,144,221,81,71,196,131,78,73,36,131,175,169,54,137,30,168,223,211,178\")),bytes32(stringToBytes32(\"118,39,87,190,131,60,106,2,31,16,76,172,164,124,113,225,197,124,179,12,157,151,29,231,143,23,245,22,177,250,194,195\")),bytes32(stringToBytes32(\"140,214,97,147,249,134,126,9,118,30,88,172,114,131,41,211,236,142,202,13,67,69,132,64,73,226,77,40,166,242,8,165\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.380ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[248,7,141,139,76,33,23,55,189,25,101,227,125,199,230,26,171,200,127,2,247,173,75,91,26,125,195,147,85,186,69,100]",
              "sol": "abi.encode(\"248,7,141,139,76,33,23,55,189,25,101,227,125,199,230,26,171,200,127,2,247,173,75,91,26,125,195,147,85,186,69,100\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[248,7,141,139,76,33,23,55,189,25,101,227,125,199,230,26,171,200,127,2,247,173,75,91,26,125,195,147,85,186,69,100]",
                "sol": "abi.encode(\"248,7,141,139,76,33,23,55,189,25,101,227,125,199,230,26,171,200,127,2,247,173,75,91,26,125,195,147,85,186,69,100\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.382ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.382ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.382ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.382ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.383ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.383ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.383ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.384ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.386ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.386ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.387ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.387ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.388ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.388ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[237,22,45,0,176,133,115,241,61,186,107,214,80,223,33,18,175,167,178,120,253,108,153,254,127,62,23,56,143,138,108,148]",
              "sol": "abi.encode(\"237,22,45,0,176,133,115,241,61,186,107,214,80,223,33,18,175,167,178,120,253,108,153,254,127,62,23,56,143,138,108,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.388ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.389ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.390ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234]",
              "sol": "stringToBytes32(\"223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234\")"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "[1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83]",
              "sol": "stringToBytes32(\"1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83\")"
            },
            {
              "js": "[244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5]",
              "sol": "stringToBytes32(\"244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234]",
                "sol": "stringToBytes32(\"223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234\")"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "[1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83]",
                "sol": "stringToBytes32(\"1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83\")"
              },
              {
                "js": "[244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5]",
                "sol": "stringToBytes32(\"244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234]",
                "sol": "stringToBytes32(\"223,75,33,158,224,105,68,32,134,202,217,16,31,48,54,28,46,252,110,239,168,198,255,10,159,127,86,50,88,23,173,234\")"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "[1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83]",
                "sol": "stringToBytes32(\"1,4,200,33,210,225,20,248,209,137,15,58,190,7,238,212,120,74,248,17,187,46,192,14,95,106,221,220,199,122,55,83\")"
              },
              {
                "js": "[244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5]",
                "sol": "stringToBytes32(\"244,140,218,87,223,125,196,158,85,142,43,54,123,70,129,144,117,198,189,134,118,158,175,97,238,190,240,45,79,175,180,5\")"
              },
              {
                "js": 20,
                "sol": 20
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.391ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[15,9999,100]",
              "sol": "[uint256(15),uint256(9999),uint256(100)]"
            },
            {
              "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
              "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
            },
            {
              "js": "[16,82,10]",
              "sol": "[uint8(16),uint8(82),uint8(10)]"
            },
            {
              "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
              "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
            },
            {
              "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
              "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[15,9999,100]",
                "sol": "[uint256(15),uint256(9999),uint256(100)]"
              },
              {
                "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
                "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
              },
              {
                "js": "[16,82,10]",
                "sol": "[uint8(16),uint8(82),uint8(10)]"
              },
              {
                "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
                "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
              },
              {
                "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
                "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[3,4,3,4]",
                "sol": "[160,160,83,17]"
              },
              {
                "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
                "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
              },
              {
                "js": "[16,82,10]",
                "sol": "[uint8(16),uint8(82),uint8(10)]"
              },
              {
                "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
                "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
              },
              {
                "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
                "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[160,159,9999,1336]",
                "sol": "[83,1338,19,1336]"
              },
              {
                "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
                "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
              },
              {
                "js": "[16,82,10]",
                "sol": "[uint8(16),uint8(82),uint8(10)]"
              },
              {
                "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
                "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
              },
              {
                "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
                "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[99,83,21,160]",
                "sol": "[11,256,18,1000]"
              },
              {
                "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
                "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
              },
              {
                "js": "[16,82,10]",
                "sol": "[uint8(16),uint8(82),uint8(10)]"
              },
              {
                "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
                "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
              },
              {
                "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
                "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1338,16,3,1337]",
                "sol": "[15,1338,18,1]"
              },
              {
                "js": "[[45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47],[211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78],[151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32]]",
                "sol": "[bytes32(stringToBytes32(\"45,162,213,223,181,139,227,201,181,199,87,237,132,149,193,251,71,196,241,22,81,102,161,54,63,182,144,85,165,12,160,47\")),bytes32(stringToBytes32(\"211,245,236,69,69,70,110,184,141,52,123,168,41,157,52,209,151,20,190,55,8,156,228,18,145,41,32,19,131,9,43,78\")),bytes32(stringToBytes32(\"151,212,46,234,117,56,236,238,224,154,155,179,103,83,198,144,60,13,128,75,61,254,97,60,46,151,2,91,11,68,8,32\"))]"
              },
              {
                "js": "[16,82,10]",
                "sol": "[uint8(16),uint8(82),uint8(10)]"
              },
              {
                "js": "[[57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98],[69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166],[203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50]]",
                "sol": "[bytes32(stringToBytes32(\"57,36,202,211,78,118,51,1,42,217,111,201,225,181,15,88,222,41,17,46,236,204,127,253,196,102,213,216,242,22,29,98\")),bytes32(stringToBytes32(\"69,76,253,2,246,137,106,205,96,38,231,116,175,178,142,183,139,91,255,135,65,141,218,46,27,137,148,253,181,242,121,166\")),bytes32(stringToBytes32(\"203,176,152,196,59,68,34,104,41,154,219,241,184,199,33,77,190,25,83,10,121,104,226,168,151,222,104,88,223,53,139,50\"))]"
              },
              {
                "js": "[[108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32],[124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170],[134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49]]",
                "sol": "[bytes32(stringToBytes32(\"108,105,89,19,230,161,114,134,255,20,112,64,13,232,141,59,162,20,212,81,58,41,210,43,129,229,171,96,211,135,167,32\")),bytes32(stringToBytes32(\"124,74,133,122,122,158,178,222,25,23,116,228,98,7,113,124,92,171,235,48,79,19,11,49,17,105,5,156,167,158,212,170\")),bytes32(stringToBytes32(\"134,245,147,220,231,243,172,186,241,216,200,162,24,82,207,51,205,45,147,17,124,106,152,138,169,118,79,190,243,153,160,49\"))]"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.397ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250]",
              "sol": "stringToBytes32(\"212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250\")"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229]",
              "sol": "stringToBytes32(\"32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229\")"
            },
            {
              "js": "[244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62]",
              "sol": "stringToBytes32(\"244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250]",
                "sol": "stringToBytes32(\"212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229]",
                "sol": "stringToBytes32(\"32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229\")"
              },
              {
                "js": "[244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62]",
                "sol": "stringToBytes32(\"244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250]",
                "sol": "stringToBytes32(\"212,50,229,139,73,213,44,171,18,69,109,242,79,177,103,111,164,99,52,28,174,125,222,12,18,205,29,125,77,16,126,250\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229]",
                "sol": "stringToBytes32(\"32,22,153,137,95,203,27,255,102,166,129,148,220,131,210,78,163,247,252,208,69,45,237,181,56,2,63,14,249,154,34,229\")"
              },
              {
                "js": "[244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62]",
                "sol": "stringToBytes32(\"244,54,165,70,185,55,220,180,153,146,198,222,83,43,233,221,218,133,77,79,172,81,227,154,249,25,116,11,109,86,202,62\")"
              },
              {
                "js": 4,
                "sol": 4
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.400ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.401ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[213,172,228,99,16,159,26,172,11,247,130,224,82,188,245,237,65,14,36,0,57,142,194,137,19,137,244,90,16,65,16,207]",
              "sol": "stringToBytes32(\"213,172,228,99,16,159,26,172,11,247,130,224,82,188,245,237,65,14,36,0,57,142,194,137,19,137,244,90,16,65,16,207\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[241,69,126,90,238,186,162,205,99,63,239,216,166,192,144,138,212,202,18,53,50,75,51,161,110,226,43,151,213,163,156,65]",
              "sol": "stringToBytes32(\"241,69,126,90,238,186,162,205,99,63,239,216,166,192,144,138,212,202,18,53,50,75,51,161,110,226,43,151,213,163,156,65\")"
            },
            {
              "js": "[81,170,2,145,52,148,102,192,154,149,203,31,158,246,199,44,213,88,40,120,71,213,80,158,93,249,62,232,245,14,213,232]",
              "sol": "stringToBytes32(\"81,170,2,145,52,148,102,192,154,149,203,31,158,246,199,44,213,88,40,120,71,213,80,158,93,249,62,232,245,14,213,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.402ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.402ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:31:51.402ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:31:51.403ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}