const truffleAssert = require('truffle-assertions');
const Faucet = artifacts.require("Faucet");
const GNTDeposit = artifacts.require("GNTDeposit");
const GNTPaymentChannels = artifacts.require("GNTPaymentChannels");
const GNTAllocation = artifacts.require("GNTAllocation");
const GolemNetworkToken = artifacts.require("GolemNetworkToken");
const GolemNetworkTokenBatching = artifacts.require("GolemNetworkTokenBatching");
const BasicToken = artifacts.require("BasicToken");
const BurnableToken = artifacts.require("BurnableToken");
const SafeMath = artifacts.require("SafeMath");
const StandardToken = artifacts.require("StandardToken");
const Gate = artifacts.require("Gate");
const TokenProxy = artifacts.require("TokenProxy");
const ProxySafeMath = artifacts.require("ProxySafeMath");

contract("GNTDeposit",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractBasicToken = null;
  let contractStandardToken = null;
  let contractBurnableToken = null;
  let contractGNTAllocation = null;
  let contractGolemNetworkToken = null;
  let contractGNTPaymentChannels = null;
  let contractFaucet = null;
  let contractTokenProxy = null;
  let contractGate = null;
  let contractGolemNetworkTokenBatching = null;
  let contractGNTDeposit = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    BasicToken.link("SafeMath",contractSafeMath.address);
    contractBasicToken = await BasicToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BasicToken.new({from: accounts[0]}');
    contractStandardToken = await StandardToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: StandardToken.new({from: accounts[0]}');
    contractBurnableToken = await BurnableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BurnableToken.new({from: accounts[0]}');
    contractGNTAllocation = await GNTAllocation.new(accounts[8],{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTAllocation.new(accounts[8],{from:accounts[0]}');
    contractGolemNetworkToken = await GolemNetworkToken.new(accounts[7],accounts[4],(await web3.eth.getBlockNumber())+619,(await web3.eth.getBlockNumber())+619+720,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkToken.new(accounts[7],accounts[4],(await web3.eth.getBlockNumber())+619,(await web3.eth.getBlockNumber())+619+720,{from:accounts[0]}');
    contractGNTPaymentChannels = await GNTPaymentChannels.new(accounts[3],10000,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTPaymentChannels.new(accounts[3],10000,{from:accounts[0]}');
    contractFaucet = await Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]}');
    contractTokenProxy = await TokenProxy.new(contractBurnableToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProxy.new(contractBurnableToken.address,{from:accounts[0]}');
    contractGate = await Gate.new(contractStandardToken.address,accounts[8],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Gate.new(contractStandardToken.address,accounts[8],{from:accounts[0]}');
    contractGolemNetworkTokenBatching = await GolemNetworkTokenBatching.new(contractBasicToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkTokenBatching.new(contractBasicToken.address,{from:accounts[0]}');
    contractGNTDeposit = await GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[8],accounts[0],82,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[8],accounts[0],82,{from:accounts[0]}');
  });
  
  it('Should execute balanceOf(address)', async () => {
    let result = await contractGNTDeposit.balanceOf(accounts[7],{from: accounts[0]});
  });
  it('Should execute isLocked(address)', async () => {
    let result = await contractGNTDeposit.isLocked(accounts[4],{from: accounts[0]});
  });
  it('Should execute isTimeLocked(address)', async () => {
    let result = await contractGNTDeposit.isTimeLocked(accounts[4],{from: accounts[0]});
  });
  it('Should execute isUnlocked(address)', async () => {
    let result = await contractGNTDeposit.isUnlocked(accounts[0],{from: accounts[0]});
  });
  it('Should execute getTimelock(address)', async () => {
    let result = await contractGNTDeposit.getTimelock(accounts[2],{from: accounts[0]});
  });
  it('Should execute isDepositPossible(address,uint256)', async () => {
    let result = await contractGNTDeposit.isDepositPossible(accounts[4], 10000,{from: accounts[0]});
  });
  it('Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferConcent(accounts[3],{from: accounts[0]});
  });
  it('Should fail transferConcent(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent(accounts[3],{from: accounts[9]}),'revert');
  });
  it('Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferColdwallet(accounts[3],{from: accounts[0]});
  });
  it('Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet(accounts[3],{from: accounts[9]}),'revert');
  });
  it('Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositsTotal(1,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositsTotal(1,{from: accounts[9]}),'revert');
  });
  it('Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositAmount(20,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositAmount(20,{from: accounts[9]}),'revert');
  });
  it('Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setDailyReimbursementLimit(1001,{from: accounts[0]});
  });
  it('Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setDailyReimbursementLimit(1001,{from: accounts[9]}),'revert');
  });
  it('Should execute unlock()', async () => {
    let result = await contractGNTDeposit.unlock({from: accounts[0]});
  });
  it('Should execute lock()', async () => {
    let result = await contractGNTDeposit.lock({from: accounts[0]});
  });
  it('Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true', async () => {
    let result = await contractGNTDeposit.onTokenReceived(accounts[4], 6, [69,206,53,232,173,227,2,83,224,203,96,98,131,43,41,34,31,224,167,169,132,227,110,179,209,108,195,204,119,96,252,166],{from: accounts[0]});
  });
  it('Should execute withdraw(address)', async () => {
    let result = await contractGNTDeposit.withdraw(accounts[7],{from: accounts[0]});
  });
  it('Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[1], 160,{from: accounts[8]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[1], 160,{from: accounts[9]}),'revert');
  });
  it('Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[0], 11,{from: accounts[8]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[0], 11,{from: accounts[9]}),'revert');
  });
  it('Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[4], 101, [84,92,148,39,8,67,220,68,214,110,167,162,155,224,64,237,43,222,235,80,215,42,36,17,57,86,127,74,77,195,117,195], 82, [188,156,45,58,68,225,247,33,38,35,55,254,140,186,60,83,184,142,128,191,50,74,167,96,10,117,106,49,5,24,213,171], [47,103,250,17,213,60,99,64,133,221,207,65,78,68,195,219,16,76,248,165,172,131,179,81,221,186,109,201,88,27,20,120], 6,{from: accounts[8]});
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[4], 101, [84,92,148,39,8,67,220,68,214,110,167,162,155,224,64,237,43,222,235,80,215,42,36,17,57,86,127,74,77,195,117,195], 82, [188,156,45,58,68,225,247,33,38,35,55,254,140,186,60,83,184,142,128,191,50,74,167,96,10,117,106,49,5,24,213,171], [47,103,250,17,213,60,99,64,133,221,207,65,78,68,195,219,16,76,248,165,172,131,179,81,221,186,109,201,88,27,20,120], 6,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[5], accounts[4], 101, [84,92,148,39,8,67,220,68,214,110,167,162,155,224,64,237,43,222,235,80,215,42,36,17,57,86,127,74,77,195,117,195], 82, [188,156,45,58,68,225,247,33,38,35,55,254,140,186,60,83,184,142,128,191,50,74,167,96,10,117,106,49,5,24,213,171], [47,103,250,17,213,60,99,64,133,221,207,65,78,68,195,219,16,76,248,165,172,131,179,81,221,186,109,201,88,27,20,120], 102,{from: accounts[8]}),'revert');
  });
  it('Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount', async () => {
    let result = await contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [1,100,161,3,82,257,100,257,999,9999], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[8]});
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [1,100,161,3,82,257,100,257,999,9999], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [160,257,10,5,10,999,21,161,10001,99,1336], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[8]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [14,999,18,4,5,1000,3,21,18,20,160], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[8]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [1338,255,10000,6,9,18,1337,82,3,9,81], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[8]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[4], accounts[3], [19,16,17,9,2,159,11,1000,10001,19,1], [[59,234,141,61,252,152,137,156,80,199,204,67,76,188,106,191,68,189,211,121,93,141,140,139,3,129,107,241,119,193,226,142],[20,197,178,149,131,162,13,186,90,244,244,228,211,210,19,172,111,88,91,196,133,243,155,222,53,9,30,158,133,193,109,14],[141,132,93,48,7,10,119,150,219,130,181,32,74,113,112,29,162,182,210,55,126,180,116,238,196,75,219,203,118,7,228,143],[100,75,99,20,145,8,88,87,138,251,64,213,163,54,42,200,205,62,131,163,140,129,165,156,222,189,175,179,109,103,132,90],[251,134,177,134,244,127,0,248,71,77,123,181,41,220,217,140,30,105,128,229,107,98,3,22,63,134,81,156,4,100,111,62],[170,197,71,1,27,43,16,56,126,179,168,116,10,190,26,160,199,162,70,66,95,19,11,62,116,40,34,28,11,68,45,251],[82,153,88,22,16,197,239,90,37,190,238,195,78,169,10,0,18,238,110,135,2,163,39,53,248,119,164,239,124,44,247,61],[8,74,148,151,5,77,68,146,224,91,170,125,203,233,117,201,225,185,101,86,79,75,83,210,54,109,234,102,220,234,206,250],[141,79,123,51,203,186,132,172,253,20,28,241,64,136,72,90,102,48,139,192,104,65,104,136,216,120,1,206,208,9,101,4],[162,91,85,158,114,209,119,79,111,194,164,9,196,92,87,190,234,222,159,68,49,25,26,251,181,241,162,238,84,20,79,144]], [81,21,0,1,81,6,255,81,1,255], [[72,13,164,208,166,13,58,37,39,46,125,42,50,232,25,247,89,14,78,52,3,201,30,22,151,80,103,219,139,119,27,135],[1,102,248,193,63,139,245,172,86,42,189,47,139,49,92,238,110,17,244,63,66,27,13,169,47,194,78,200,11,191,148,36],[74,59,16,88,41,170,139,236,249,217,228,221,41,137,111,40,209,8,235,62,7,230,202,16,130,126,231,199,53,79,242,160],[254,73,77,183,55,230,79,99,66,51,157,134,159,198,91,81,64,120,152,242,50,56,103,20,103,60,165,162,180,195,24,133],[211,48,56,86,237,55,202,20,83,254,144,209,19,129,155,45,122,1,101,132,218,157,25,191,162,34,152,164,114,224,201,135],[163,221,206,94,30,52,67,66,32,53,32,56,240,61,0,67,134,61,112,167,192,67,231,178,140,144,122,64,17,65,130,139],[3,16,173,1,97,178,202,11,38,179,219,175,78,105,10,137,249,81,98,241,50,234,61,177,40,221,230,168,144,82,6,46],[120,82,171,151,12,21,211,144,5,186,99,9,123,230,237,236,220,36,156,51,193,11,45,172,85,232,126,70,137,104,243,60],[255,228,145,4,223,163,58,9,29,62,153,198,71,102,65,203,116,156,154,232,90,56,6,246,71,80,90,32,28,47,115,19],[112,82,202,225,63,89,205,110,183,45,210,122,130,141,92,255,20,63,128,40,86,254,132,130,102,110,143,82,110,5,136,3]], [[7,177,65,67,50,114,45,77,187,207,183,143,147,44,34,246,30,20,170,201,242,30,36,107,8,251,183,85,163,246,38,79],[13,248,76,117,184,69,73,74,215,93,73,170,217,255,242,115,168,114,163,59,125,196,237,248,21,213,44,44,14,172,214,54],[32,156,107,253,72,149,39,162,4,156,87,173,147,143,134,22,161,102,231,14,208,158,130,46,232,246,20,193,187,252,81,167],[163,250,220,88,249,89,70,153,187,154,169,255,32,55,94,111,86,70,204,141,48,174,55,173,168,186,108,158,244,237,62,78],[162,28,215,225,189,160,36,119,148,245,154,35,40,225,69,104,89,184,246,214,204,217,162,193,44,183,229,151,127,12,205,97],[170,103,236,179,126,12,142,182,232,6,216,96,7,33,239,244,1,59,96,40,230,175,120,185,212,17,25,219,145,198,1,110],[134,2,121,96,198,61,34,68,45,160,72,22,63,68,170,60,240,176,123,171,94,218,92,182,80,68,170,164,36,124,164,154],[164,19,113,253,231,64,42,66,20,44,50,62,244,233,50,245,145,158,73,99,4,22,180,232,241,195,25,195,27,133,40,30],[119,223,98,41,9,118,251,78,10,237,26,125,74,146,142,61,67,175,255,86,46,115,161,253,123,156,131,22,125,24,41,62],[255,66,196,115,119,88,23,14,154,31,184,179,134,66,94,103,60,226,114,67,29,196,157,51,189,213,246,148,35,145,87,142]], 1338, 255,{from: accounts[8]}),'revert');
  });
  it('Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 99, [142,128,44,20,82,236,48,63,230,181,19,204,220,194,76,111,72,188,72,235,127,216,50,84,205,125,201,83,190,215,83,168], 18, [0,118,129,90,248,57,72,90,190,246,129,71,109,224,86,249,6,95,216,36,65,193,208,25,114,34,142,146,111,205,239,107], [93,171,124,109,125,9,135,98,118,52,113,74,127,156,162,204,166,170,105,168,8,206,79,24,10,240,221,134,216,239,192,45], 11,{from: accounts[8]});
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 99, [142,128,44,20,82,236,48,63,230,181,19,204,220,194,76,111,72,188,72,235,127,216,50,84,205,125,201,83,190,215,83,168], 18, [0,118,129,90,248,57,72,90,190,246,129,71,109,224,86,249,6,95,216,36,65,193,208,25,114,34,142,146,111,205,239,107], [93,171,124,109,125,9,135,98,118,52,113,74,127,156,162,204,166,170,105,168,8,206,79,24,10,240,221,134,216,239,192,45], 11,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[6], 99, [142,128,44,20,82,236,48,63,230,181,19,204,220,194,76,111,72,188,72,235,127,216,50,84,205,125,201,83,190,215,83,168], 18, [0,118,129,90,248,57,72,90,190,246,129,71,109,224,86,249,6,95,216,36,65,193,208,25,114,34,142,146,111,205,239,107], [93,171,124,109,125,9,135,98,118,52,113,74,127,156,162,204,166,170,105,168,8,206,79,24,10,240,221,134,216,239,192,45], 100,{from: accounts[8]}),'revert');
  });
  it('Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent', async () => {
    let result = await contractGNTDeposit.reimburseForCommunication(accounts[5], 1000,{from: accounts[8]});
  });
  it('Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForCommunication(accounts[5], 1000,{from: accounts[9]}),'revert');
  });
  it('Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)', async () => {
    let result = await contractGNTDeposit._isValidSignature(accounts[0], accounts[4], 81, [30,143,221,214,212,105,223,115,94,217,142,14,190,51,11,18,143,224,68,96,169,41,103,223,7,241,25,248,101,104,229,63], 16, [70,245,243,90,54,159,20,191,173,193,254,5,27,72,70,1,54,132,211,190,169,13,130,248,131,235,37,100,122,77,232,96], [118,145,177,252,160,211,12,215,14,49,110,61,52,107,229,239,160,29,53,124,160,200,113,187,94,116,171,254,173,189,143,168],{from: accounts[0]});
  });
  it('Should execute owner()', async () => {
    let result = await contractGNTDeposit.owner({from: accounts[0]});
  });
  it('Should execute isOwner()', async () => {
    let result = await contractGNTDeposit.isOwner({from: accounts[0]});
  });
  it('Should execute renounceOwnership() WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.renounceOwnership({from: accounts[0]});
  });
  it('Should fail renounceOwnership() when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.renounceOwnership({from: accounts[9]}),'revert');
  });
  it('Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferOwnership(accounts[7],{from: accounts[0]});
  });
  it('Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership(accounts[7],{from: accounts[9]}),'revert');
  });
  it('Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
});
