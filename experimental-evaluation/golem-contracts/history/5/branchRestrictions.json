,{
  "2020-11-10T13:56:45.973ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:56:52.450ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+90",
              "sol": "block.number+90"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+90+745",
              "sol": "block.number+90+745"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90",
                "sol": "block.number+90"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90+745",
                "sol": "block.number+90+745"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90",
                "sol": "block.number+90"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90+745",
                "sol": "block.number+90+745"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90+745",
                "sol": "block.number+90+745"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90",
                "sol": "block.number+90"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+90",
                "sol": "block.number+90"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:56:59.014ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:05.432ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:11.892ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:18.408ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:25.208ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:31.924ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.670ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.671ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.672ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": 160,
                "sol": 160
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.672ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.673ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.673ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.674ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.675ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.676ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.676ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.676ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.677ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.679ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.680ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.681ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.682ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.682ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.684ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.685ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.686ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:19}",
              "sol": "{\"from\":\"0x0\",\"value\":\"19\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:19}",
                "sol": "{\"from\":\"0x0\",\"value\":\"19\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.691ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.692ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.697ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.698ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.698ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.698ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.699ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[175,2,249,155,68,35,113,126,69,139,204,238,223,41,12,241,178,105,175,114,180,25,26,22,228,199,252,54,218,24,5,174]",
              "sol": "stringToBytes32(\"175,2,249,155,68,35,113,126,69,139,204,238,223,41,12,241,178,105,175,114,180,25,26,22,228,199,252,54,218,24,5,174\")"
            },
            {
              "js": "[120,245,97,224,155,89,141,191,45,103,219,133,122,136,74,33,41,87,241,91,241,17,47,245,138,134,219,125,199,13,207,138]",
              "sol": "stringToBytes32(\"120,245,97,224,155,89,141,191,45,103,219,133,122,136,74,33,41,87,241,91,241,17,47,245,138,134,219,125,199,13,207,138\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.699ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "[215,193,9,168,31,159,122,26,230,27,237,205,185,74,230,200,122,206,205,164]",
              "sol": "abi.encode(\"215,193,9,168,31,159,122,26,230,27,237,205,185,74,230,200,122,206,205,164\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "[199,254,173,67,9,148,125,47,244,195,56,183,255,87,142,232,18,209,3,145,137]",
                "sol": "bytes21(\"199,254,173,67,9,148,125,47,244,195,56,183,255,87,142,232,18,209,3,145,137\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.702ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[7,6,40,116,228,53,174,17,219,92,253,121,3,1,16,10,65,148,164,5,252,245,28,181,121,203,207,197,22,120,47,178]",
              "sol": "stringToBytes32(\"7,6,40,116,228,53,174,17,219,92,253,121,3,1,16,10,65,148,164,5,252,245,28,181,121,203,207,197,22,120,47,178\")"
            },
            {
              "js": "[83,100,102,147,10,221,139,44,55,40,107,48,239,139,174,140,171,120,122,236,139,216,65,231,120,43,137,203,82,16,168,34]",
              "sol": "stringToBytes32(\"83,100,102,147,10,221,139,44,55,40,107,48,239,139,174,140,171,120,122,236,139,216,65,231,120,43,137,203,82,16,168,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.702ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.702ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.703ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.704ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.704ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.704ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.705ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.706ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.708ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.709ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[238,122,23,134,225,105,146,60,157,214,23,30,74,160,55,120,210,47,167,187,134,199,246,215,111,219,240,15,52,26,142,118],[178,48,155,132,208,207,247,210,94,12,214,69,249,128,148,137,103,138,79,163,164,129,151,189,38,189,197,112,73,77,133,98],[53,83,68,72,18,96,22,255,205,48,233,137,212,216,153,61,220,53,204,140,213,66,180,152,65,98,14,148,34,136,175,77],[188,226,50,185,229,8,143,236,238,229,13,172,8,213,136,164,216,242,245,183,50,114,165,154,189,57,216,217,191,166,47,98],[91,23,184,204,109,132,35,178,105,166,176,204,160,11,2,183,215,241,240,124,58,60,150,111,145,93,175,242,25,127,139,31],[108,37,14,25,110,21,209,171,166,71,188,136,13,228,81,233,229,81,199,250,84,142,107,250,96,55,46,76,160,56,18,25],[108,184,179,54,43,98,203,144,5,217,154,121,149,116,66,243,237,109,12,167,101,37,150,48,81,191,11,113,226,230,83,11]]",
              "sol": "[bytes32(stringToBytes32(\"238,122,23,134,225,105,146,60,157,214,23,30,74,160,55,120,210,47,167,187,134,199,246,215,111,219,240,15,52,26,142,118\")),bytes32(stringToBytes32(\"178,48,155,132,208,207,247,210,94,12,214,69,249,128,148,137,103,138,79,163,164,129,151,189,38,189,197,112,73,77,133,98\")),bytes32(stringToBytes32(\"53,83,68,72,18,96,22,255,205,48,233,137,212,216,153,61,220,53,204,140,213,66,180,152,65,98,14,148,34,136,175,77\")),bytes32(stringToBytes32(\"188,226,50,185,229,8,143,236,238,229,13,172,8,213,136,164,216,242,245,183,50,114,165,154,189,57,216,217,191,166,47,98\")),bytes32(stringToBytes32(\"91,23,184,204,109,132,35,178,105,166,176,204,160,11,2,183,215,241,240,124,58,60,150,111,145,93,175,242,25,127,139,31\")),bytes32(stringToBytes32(\"108,37,14,25,110,21,209,171,166,71,188,136,13,228,81,233,229,81,199,250,84,142,107,250,96,55,46,76,160,56,18,25\")),bytes32(stringToBytes32(\"108,184,179,54,43,98,203,144,5,217,154,121,149,116,66,243,237,109,12,167,101,37,150,48,81,191,11,113,226,230,83,11\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-231",
              "sol": "block.timestamp-231"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[238,122,23,134,225,105,146,60,157,214,23,30,74,160,55,120,210,47,167,187,134,199,246,215,111,219,240,15,52,26,142,118],[178,48,155,132,208,207,247,210,94,12,214,69,249,128,148,137,103,138,79,163,164,129,151,189,38,189,197,112,73,77,133,98],[53,83,68,72,18,96,22,255,205,48,233,137,212,216,153,61,220,53,204,140,213,66,180,152,65,98,14,148,34,136,175,77],[188,226,50,185,229,8,143,236,238,229,13,172,8,213,136,164,216,242,245,183,50,114,165,154,189,57,216,217,191,166,47,98],[91,23,184,204,109,132,35,178,105,166,176,204,160,11,2,183,215,241,240,124,58,60,150,111,145,93,175,242,25,127,139,31],[108,37,14,25,110,21,209,171,166,71,188,136,13,228,81,233,229,81,199,250,84,142,107,250,96,55,46,76,160,56,18,25],[108,184,179,54,43,98,203,144,5,217,154,121,149,116,66,243,237,109,12,167,101,37,150,48,81,191,11,113,226,230,83,11]]",
                "sol": "[bytes32(stringToBytes32(\"238,122,23,134,225,105,146,60,157,214,23,30,74,160,55,120,210,47,167,187,134,199,246,215,111,219,240,15,52,26,142,118\")),bytes32(stringToBytes32(\"178,48,155,132,208,207,247,210,94,12,214,69,249,128,148,137,103,138,79,163,164,129,151,189,38,189,197,112,73,77,133,98\")),bytes32(stringToBytes32(\"53,83,68,72,18,96,22,255,205,48,233,137,212,216,153,61,220,53,204,140,213,66,180,152,65,98,14,148,34,136,175,77\")),bytes32(stringToBytes32(\"188,226,50,185,229,8,143,236,238,229,13,172,8,213,136,164,216,242,245,183,50,114,165,154,189,57,216,217,191,166,47,98\")),bytes32(stringToBytes32(\"91,23,184,204,109,132,35,178,105,166,176,204,160,11,2,183,215,241,240,124,58,60,150,111,145,93,175,242,25,127,139,31\")),bytes32(stringToBytes32(\"108,37,14,25,110,21,209,171,166,71,188,136,13,228,81,233,229,81,199,250,84,142,107,250,96,55,46,76,160,56,18,25\")),bytes32(stringToBytes32(\"108,184,179,54,43,98,203,144,5,217,154,121,149,116,66,243,237,109,12,167,101,37,150,48,81,191,11,113,226,230,83,11\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.711ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[105,225,39,239,124,194,33,215,121,154,180,177,44,89,130,245,103,16,148,235,217,47,227,37,149,120,199,254,126,97,159,48]",
              "sol": "abi.encode(\"105,225,39,239,124,194,33,215,121,154,180,177,44,89,130,245,103,16,148,235,217,47,227,37,149,120,199,254,126,97,159,48\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[105,225,39,239,124,194,33,215,121,154,180,177,44,89,130,245,103,16,148,235,217,47,227,37,149,120,199,254,126,97,159,48]",
                "sol": "abi.encode(\"105,225,39,239,124,194,33,215,121,154,180,177,44,89,130,245,103,16,148,235,217,47,227,37,149,120,199,254,126,97,159,48\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.712ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.712ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.713ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.713ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.713ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.715ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.715ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.716ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.717ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.717ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.718ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.718ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.718ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.719ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[66,157,69,49,231,179,47,223,85,172,85,202,75,139,108,69,231,60,13,105,71,1,249,61,71,173,70,31,17,96,190,185]",
              "sol": "abi.encode(\"66,157,69,49,231,179,47,223,85,172,85,202,75,139,108,69,231,60,13,105,71,1,249,61,71,173,70,31,17,96,190,185\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.719ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.720ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.721ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "[208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32]",
              "sol": "stringToBytes32(\"208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32\")"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96]",
              "sol": "stringToBytes32(\"79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96\")"
            },
            {
              "js": "[208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82]",
              "sol": "stringToBytes32(\"208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82\")"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "[208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32]",
                "sol": "stringToBytes32(\"208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96]",
                "sol": "stringToBytes32(\"79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96\")"
              },
              {
                "js": "[208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82]",
                "sol": "stringToBytes32(\"208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82\")"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "[208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32]",
                "sol": "stringToBytes32(\"208,242,153,167,83,71,14,52,230,97,109,96,48,191,126,108,140,153,198,8,77,193,171,156,190,35,201,225,114,185,101,32\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96]",
                "sol": "stringToBytes32(\"79,74,67,159,46,116,185,249,19,111,202,136,186,10,240,207,93,177,114,3,217,103,114,155,117,151,108,190,39,110,157,96\")"
              },
              {
                "js": "[208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82]",
                "sol": "stringToBytes32(\"208,29,147,97,215,249,104,141,231,49,70,253,174,153,25,207,147,122,254,31,144,130,227,78,219,8,146,252,2,231,135,82\")"
              },
              {
                "js": 1338,
                "sol": 1338
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.723ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1000,999]",
              "sol": "[uint256(1000),uint256(999)]"
            },
            {
              "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
              "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
            },
            {
              "js": "[16,81]",
              "sol": "[uint8(16),uint8(81)]"
            },
            {
              "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
              "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
            },
            {
              "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
              "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1000,999]",
                "sol": "[uint256(1000),uint256(999)]"
              },
              {
                "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
                "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
              },
              {
                "js": "[16,81]",
                "sol": "[uint8(16),uint8(81)]"
              },
              {
                "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
                "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
              },
              {
                "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
                "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[5,6,19]",
                "sol": "[257,100,100]"
              },
              {
                "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
                "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
              },
              {
                "js": "[16,81]",
                "sol": "[uint8(16),uint8(81)]"
              },
              {
                "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
                "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
              },
              {
                "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
                "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[0,2,1001]",
                "sol": "[161,18,83]"
              },
              {
                "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
                "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
              },
              {
                "js": "[16,81]",
                "sol": "[uint8(16),uint8(81)]"
              },
              {
                "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
                "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
              },
              {
                "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
                "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[14,159,100]",
                "sol": "[9999,159,83]"
              },
              {
                "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
                "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
              },
              {
                "js": "[16,81]",
                "sol": "[uint8(16),uint8(81)]"
              },
              {
                "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
                "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
              },
              {
                "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
                "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[161,21,20]",
                "sol": "[3,255,3]"
              },
              {
                "js": "[[183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40],[9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240]]",
                "sol": "[bytes32(stringToBytes32(\"183,13,127,218,162,121,15,179,194,104,201,160,151,34,143,64,209,80,177,209,232,174,15,57,141,48,136,119,254,28,91,40\")),bytes32(stringToBytes32(\"9,68,180,120,124,224,32,187,62,156,253,164,105,32,197,0,18,114,68,175,133,239,227,200,43,216,50,94,74,195,16,240\"))]"
              },
              {
                "js": "[16,81]",
                "sol": "[uint8(16),uint8(81)]"
              },
              {
                "js": "[[106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91],[140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199]]",
                "sol": "[bytes32(stringToBytes32(\"106,235,220,170,83,18,178,164,118,86,29,176,118,106,244,173,215,89,203,19,198,5,24,188,130,13,93,88,127,30,26,91\")),bytes32(stringToBytes32(\"140,156,48,76,68,197,136,103,7,84,152,177,173,129,168,45,172,186,81,244,186,109,75,64,103,182,227,237,50,181,141,199\"))]"
              },
              {
                "js": "[[231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65],[186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71]]",
                "sol": "[bytes32(stringToBytes32(\"231,164,211,66,233,32,165,144,84,223,115,26,180,1,31,169,71,26,57,65,178,214,92,50,17,13,114,207,252,11,70,65\")),bytes32(stringToBytes32(\"186,160,66,30,218,53,0,176,4,91,224,38,103,177,162,182,8,31,30,225,119,202,136,229,180,86,7,121,100,148,210,71\"))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.726ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115]",
              "sol": "stringToBytes32(\"147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165]",
              "sol": "stringToBytes32(\"102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165\")"
            },
            {
              "js": "[148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175]",
              "sol": "stringToBytes32(\"148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115]",
                "sol": "stringToBytes32(\"147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165]",
                "sol": "stringToBytes32(\"102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165\")"
              },
              {
                "js": "[148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175]",
                "sol": "stringToBytes32(\"148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115]",
                "sol": "stringToBytes32(\"147,253,91,106,161,61,6,147,177,32,122,104,190,52,0,87,220,122,221,31,146,159,106,165,133,164,117,214,197,231,80,115\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165]",
                "sol": "stringToBytes32(\"102,63,131,240,74,222,46,54,91,140,218,130,108,114,176,15,93,9,133,67,66,97,145,110,161,31,2,173,188,128,126,165\")"
              },
              {
                "js": "[148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175]",
                "sol": "stringToBytes32(\"148,79,112,160,233,164,180,60,53,120,21,215,163,226,87,241,232,136,211,5,149,214,141,239,169,136,170,87,28,20,238,175\")"
              },
              {
                "js": 12,
                "sol": 12
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.729ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.730ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "[14,129,204,45,210,252,210,57,165,152,203,190,54,255,52,247,240,47,21,230,66,218,52,36,51,200,211,58,17,126,31,45]",
              "sol": "stringToBytes32(\"14,129,204,45,210,252,210,57,165,152,203,190,54,255,52,247,240,47,21,230,66,218,52,36,51,200,211,58,17,126,31,45\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[157,171,173,202,252,245,160,175,184,247,117,63,54,237,74,139,109,102,111,184,57,73,2,233,222,192,84,192,125,253,83,35]",
              "sol": "stringToBytes32(\"157,171,173,202,252,245,160,175,184,247,117,63,54,237,74,139,109,102,111,184,57,73,2,233,222,192,84,192,125,253,83,35\")"
            },
            {
              "js": "[199,248,69,134,161,253,154,129,156,44,159,2,183,9,47,179,70,243,233,53,89,254,41,26,48,135,11,200,211,63,39,178]",
              "sol": "stringToBytes32(\"199,248,69,134,161,253,154,129,156,44,159,2,183,9,47,179,70,243,233,53,89,254,41,26,48,135,11,200,211,63,39,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.730ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.731ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:57:38.731ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:57:38.732ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}