,{
  "2020-11-13T04:08:58.541ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:04.940ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+622",
              "sol": "block.number+622"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+622+8",
              "sol": "block.number+622+8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622",
                "sol": "block.number+622"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622+8",
                "sol": "block.number+622+8"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622",
                "sol": "block.number+622"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622+8",
                "sol": "block.number+622+8"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622+8",
                "sol": "block.number+622+8"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622",
                "sol": "block.number+622"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+622",
                "sol": "block.number+622"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:11.392ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:17.832ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:24.438ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:30.961ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:37.549ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:44.146ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.885ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.887ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.887ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": 16,
                "sol": 16
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.888ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.889ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.890ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.891ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.892ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.901ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.902ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.902ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.903ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.905ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.906ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.908ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.909ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.909ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.913ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.915ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.920ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:21}",
              "sol": "{\"from\":\"0x0\",\"value\":\"21\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:21}",
                "sol": "{\"from\":\"0x0\",\"value\":\"21\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.927ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.928ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.934ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.935ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.935ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.935ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.936ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[129,76,199,190,37,123,171,179,162,49,75,57,89,109,16,46,127,121,76,135,172,37,203,41,52,222,160,161,222,151,241,43]",
              "sol": "stringToBytes32(\"129,76,199,190,37,123,171,179,162,49,75,57,89,109,16,46,127,121,76,135,172,37,203,41,52,222,160,161,222,151,241,43\")"
            },
            {
              "js": "[119,161,190,76,219,56,217,244,249,111,97,235,237,55,133,55,47,39,44,241,180,199,145,249,185,228,9,176,54,89,101,67]",
              "sol": "stringToBytes32(\"119,161,190,76,219,56,217,244,249,111,97,235,237,55,133,55,47,39,44,241,180,199,145,249,185,228,9,176,54,89,101,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.936ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "[40,59,30,108,39,217,106,75,216,143,37,215,98,126,119,173,244,66,219,189]",
              "sol": "abi.encode(\"40,59,30,108,39,217,106,75,216,143,37,215,98,126,119,173,244,66,219,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "[98,151,51,146,56,43,17,45,106,122,241,220,201,247,242,78,82,224,149,111,111]",
                "sol": "bytes21(\"98,151,51,146,56,43,17,45,106,122,241,220,201,247,242,78,82,224,149,111,111\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.938ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[132,82,252,24,91,154,104,107,237,132,32,178,58,181,203,17,237,149,124,243,144,103,233,162,46,177,245,81,2,217,96,20]",
              "sol": "stringToBytes32(\"132,82,252,24,91,154,104,107,237,132,32,178,58,181,203,17,237,149,124,243,144,103,233,162,46,177,245,81,2,217,96,20\")"
            },
            {
              "js": "[100,33,249,18,217,110,52,203,72,110,222,105,82,33,154,109,210,74,230,200,159,67,118,73,248,101,224,85,64,18,17,0]",
              "sol": "stringToBytes32(\"100,33,249,18,217,110,52,203,72,110,222,105,82,33,154,109,210,74,230,200,159,67,118,73,248,101,224,85,64,18,17,0\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.938ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.938ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.941ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.941ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.942ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.942ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.943ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.947ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.950ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.952ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[194,164,141,200,0,124,202,107,188,79,98,234,129,116,221,143,252,59,209,19,94,43,78,192,72,183,73,161,83,96,118,236],[245,209,22,99,254,72,130,122,208,104,146,190,44,32,252,223,8,167,144,217,93,139,57,150,157,45,158,191,189,163,254,139],[60,170,135,230,62,241,87,25,193,246,117,67,202,87,1,140,217,180,21,113,41,244,44,123,140,88,216,26,47,254,244,10],[44,101,237,125,93,198,19,154,200,36,206,193,191,190,53,77,254,86,195,2,60,243,12,40,48,214,164,200,172,239,188,221],[209,161,155,238,245,214,73,13,87,4,70,239,59,34,245,110,167,145,55,240,236,5,127,70,115,40,161,67,107,32,191,245],[85,68,195,23,7,176,103,126,69,210,64,109,193,113,207,19,139,71,118,87,185,146,233,101,234,230,185,190,216,34,68,111],[166,255,11,137,255,146,111,45,229,229,85,62,141,51,167,88,206,106,101,204,157,53,209,202,138,204,17,156,29,206,122,150],[149,181,230,31,152,17,34,213,142,195,250,137,79,242,18,190,99,71,226,239,255,173,152,148,226,30,27,166,42,15,177,4],[196,19,153,28,134,232,162,142,158,150,55,205,29,108,26,224,117,29,13,90,134,91,66,91,138,86,144,147,14,59,169,56]]",
              "sol": "[bytes32(stringToBytes32(\"194,164,141,200,0,124,202,107,188,79,98,234,129,116,221,143,252,59,209,19,94,43,78,192,72,183,73,161,83,96,118,236\")),bytes32(stringToBytes32(\"245,209,22,99,254,72,130,122,208,104,146,190,44,32,252,223,8,167,144,217,93,139,57,150,157,45,158,191,189,163,254,139\")),bytes32(stringToBytes32(\"60,170,135,230,62,241,87,25,193,246,117,67,202,87,1,140,217,180,21,113,41,244,44,123,140,88,216,26,47,254,244,10\")),bytes32(stringToBytes32(\"44,101,237,125,93,198,19,154,200,36,206,193,191,190,53,77,254,86,195,2,60,243,12,40,48,214,164,200,172,239,188,221\")),bytes32(stringToBytes32(\"209,161,155,238,245,214,73,13,87,4,70,239,59,34,245,110,167,145,55,240,236,5,127,70,115,40,161,67,107,32,191,245\")),bytes32(stringToBytes32(\"85,68,195,23,7,176,103,126,69,210,64,109,193,113,207,19,139,71,118,87,185,146,233,101,234,230,185,190,216,34,68,111\")),bytes32(stringToBytes32(\"166,255,11,137,255,146,111,45,229,229,85,62,141,51,167,88,206,106,101,204,157,53,209,202,138,204,17,156,29,206,122,150\")),bytes32(stringToBytes32(\"149,181,230,31,152,17,34,213,142,195,250,137,79,242,18,190,99,71,226,239,255,173,152,148,226,30,27,166,42,15,177,4\")),bytes32(stringToBytes32(\"196,19,153,28,134,232,162,142,158,150,55,205,29,108,26,224,117,29,13,90,134,91,66,91,138,86,144,147,14,59,169,56\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-374",
              "sol": "block.timestamp-374"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[194,164,141,200,0,124,202,107,188,79,98,234,129,116,221,143,252,59,209,19,94,43,78,192,72,183,73,161,83,96,118,236],[245,209,22,99,254,72,130,122,208,104,146,190,44,32,252,223,8,167,144,217,93,139,57,150,157,45,158,191,189,163,254,139],[60,170,135,230,62,241,87,25,193,246,117,67,202,87,1,140,217,180,21,113,41,244,44,123,140,88,216,26,47,254,244,10],[44,101,237,125,93,198,19,154,200,36,206,193,191,190,53,77,254,86,195,2,60,243,12,40,48,214,164,200,172,239,188,221],[209,161,155,238,245,214,73,13,87,4,70,239,59,34,245,110,167,145,55,240,236,5,127,70,115,40,161,67,107,32,191,245],[85,68,195,23,7,176,103,126,69,210,64,109,193,113,207,19,139,71,118,87,185,146,233,101,234,230,185,190,216,34,68,111],[166,255,11,137,255,146,111,45,229,229,85,62,141,51,167,88,206,106,101,204,157,53,209,202,138,204,17,156,29,206,122,150],[149,181,230,31,152,17,34,213,142,195,250,137,79,242,18,190,99,71,226,239,255,173,152,148,226,30,27,166,42,15,177,4],[196,19,153,28,134,232,162,142,158,150,55,205,29,108,26,224,117,29,13,90,134,91,66,91,138,86,144,147,14,59,169,56]]",
                "sol": "[bytes32(stringToBytes32(\"194,164,141,200,0,124,202,107,188,79,98,234,129,116,221,143,252,59,209,19,94,43,78,192,72,183,73,161,83,96,118,236\")),bytes32(stringToBytes32(\"245,209,22,99,254,72,130,122,208,104,146,190,44,32,252,223,8,167,144,217,93,139,57,150,157,45,158,191,189,163,254,139\")),bytes32(stringToBytes32(\"60,170,135,230,62,241,87,25,193,246,117,67,202,87,1,140,217,180,21,113,41,244,44,123,140,88,216,26,47,254,244,10\")),bytes32(stringToBytes32(\"44,101,237,125,93,198,19,154,200,36,206,193,191,190,53,77,254,86,195,2,60,243,12,40,48,214,164,200,172,239,188,221\")),bytes32(stringToBytes32(\"209,161,155,238,245,214,73,13,87,4,70,239,59,34,245,110,167,145,55,240,236,5,127,70,115,40,161,67,107,32,191,245\")),bytes32(stringToBytes32(\"85,68,195,23,7,176,103,126,69,210,64,109,193,113,207,19,139,71,118,87,185,146,233,101,234,230,185,190,216,34,68,111\")),bytes32(stringToBytes32(\"166,255,11,137,255,146,111,45,229,229,85,62,141,51,167,88,206,106,101,204,157,53,209,202,138,204,17,156,29,206,122,150\")),bytes32(stringToBytes32(\"149,181,230,31,152,17,34,213,142,195,250,137,79,242,18,190,99,71,226,239,255,173,152,148,226,30,27,166,42,15,177,4\")),bytes32(stringToBytes32(\"196,19,153,28,134,232,162,142,158,150,55,205,29,108,26,224,117,29,13,90,134,91,66,91,138,86,144,147,14,59,169,56\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.955ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "[96,247,253,202,241,234,80,25,72,209,20,114,201,140,116,199,8,109,232,184,207,174,215,7,185,9,92,133,42,23,153,254]",
              "sol": "abi.encode(\"96,247,253,202,241,234,80,25,72,209,20,114,201,140,116,199,8,109,232,184,207,174,215,7,185,9,92,133,42,23,153,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "[96,247,253,202,241,234,80,25,72,209,20,114,201,140,116,199,8,109,232,184,207,174,215,7,185,9,92,133,42,23,153,254]",
                "sol": "abi.encode(\"96,247,253,202,241,234,80,25,72,209,20,114,201,140,116,199,8,109,232,184,207,174,215,7,185,9,92,133,42,23,153,254\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.958ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.960ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.960ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.962ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.962ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.969ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.970ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.972ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.974ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.975ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.976ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.977ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.978ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.978ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[124,59,134,75,65,207,19,12,14,142,47,17,198,99,223,153,242,87,237,140,242,216,137,100,192,122,41,111,25,153,227,133]",
              "sol": "abi.encode(\"124,59,134,75,65,207,19,12,14,142,47,17,198,99,223,153,242,87,237,140,242,216,137,100,192,122,41,111,25,153,227,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.979ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.980ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.981ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125]",
              "sol": "stringToBytes32(\"120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77]",
              "sol": "stringToBytes32(\"189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77\")"
            },
            {
              "js": "[116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179]",
              "sol": "stringToBytes32(\"116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "[120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125]",
                "sol": "stringToBytes32(\"120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125\")"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77]",
                "sol": "stringToBytes32(\"189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77\")"
              },
              {
                "js": "[116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179]",
                "sol": "stringToBytes32(\"116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179\")"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "[120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125]",
                "sol": "stringToBytes32(\"120,152,11,173,59,112,190,38,173,91,148,148,161,92,97,238,153,241,41,43,6,19,247,235,205,105,50,238,96,119,233,125\")"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77]",
                "sol": "stringToBytes32(\"189,179,12,125,27,219,147,159,168,63,83,198,198,59,245,78,90,80,206,103,246,66,212,1,232,51,152,72,37,74,107,77\")"
              },
              {
                "js": "[116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179]",
                "sol": "stringToBytes32(\"116,215,50,159,183,93,180,122,73,103,158,129,55,166,13,183,90,216,132,229,17,48,175,90,195,124,171,53,125,136,139,179\")"
              },
              {
                "js": 22,
                "sol": 22
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.983ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[9,10,1337]",
              "sol": "[uint256(9),uint256(10),uint256(1337)]"
            },
            {
              "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
              "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
            },
            {
              "js": "[20,99,161]",
              "sol": "[uint8(20),uint8(99),uint8(161)]"
            },
            {
              "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
              "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
            },
            {
              "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
              "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9,10,1337]",
                "sol": "[uint256(9),uint256(10),uint256(1337)]"
              },
              {
                "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
                "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
              },
              {
                "js": "[20,99,161]",
                "sol": "[uint8(20),uint8(99),uint8(161)]"
              },
              {
                "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
                "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
              },
              {
                "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
                "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[14,14,18,83]",
                "sol": "[160,18,256,83]"
              },
              {
                "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
                "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
              },
              {
                "js": "[20,99,161]",
                "sol": "[uint8(20),uint8(99),uint8(161)]"
              },
              {
                "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
                "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
              },
              {
                "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
                "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[21,15,15,1001]",
                "sol": "[6,11,0,1336]"
              },
              {
                "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
                "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
              },
              {
                "js": "[20,99,161]",
                "sol": "[uint8(20),uint8(99),uint8(161)]"
              },
              {
                "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
                "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
              },
              {
                "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
                "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[4,101,100,101]",
                "sol": "[16,1338,82,5]"
              },
              {
                "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
                "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
              },
              {
                "js": "[20,99,161]",
                "sol": "[uint8(20),uint8(99),uint8(161)]"
              },
              {
                "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
                "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
              },
              {
                "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
                "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[2,101,10,100]",
                "sol": "[4,255,83,101]"
              },
              {
                "js": "[[157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195],[47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28],[1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88]]",
                "sol": "[bytes32(stringToBytes32(\"157,133,245,189,70,47,66,229,222,87,251,172,224,9,34,62,156,147,115,105,12,121,107,239,187,34,144,93,51,95,145,195\")),bytes32(stringToBytes32(\"47,200,94,24,51,221,95,132,144,63,18,226,228,28,30,70,99,23,7,157,132,143,159,182,95,70,159,247,208,171,209,28\")),bytes32(stringToBytes32(\"1,188,213,169,197,81,245,197,87,159,114,85,193,231,187,194,59,144,49,154,125,255,89,192,101,12,46,198,184,136,69,88\"))]"
              },
              {
                "js": "[20,99,161]",
                "sol": "[uint8(20),uint8(99),uint8(161)]"
              },
              {
                "js": "[[247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236],[205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102],[128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141]]",
                "sol": "[bytes32(stringToBytes32(\"247,132,125,145,151,144,164,55,174,21,12,41,227,182,9,165,255,158,201,69,215,254,50,104,126,91,40,200,239,29,18,236\")),bytes32(stringToBytes32(\"205,108,227,81,222,143,209,81,244,170,5,163,47,135,218,216,57,23,42,85,224,166,16,37,95,117,85,190,65,184,61,102\")),bytes32(stringToBytes32(\"128,238,184,220,35,167,120,78,126,228,28,250,1,62,138,79,29,224,139,114,132,219,163,86,239,105,0,234,48,134,72,141\"))]"
              },
              {
                "js": "[[79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180],[4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15],[177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105]]",
                "sol": "[bytes32(stringToBytes32(\"79,75,221,126,182,141,99,187,53,171,43,187,6,236,196,243,66,212,229,191,253,6,255,138,241,121,204,11,117,180,10,180\")),bytes32(stringToBytes32(\"4,189,235,227,106,147,182,148,194,18,237,164,252,98,5,176,3,237,129,239,235,10,26,17,185,111,206,102,7,55,143,15\")),bytes32(stringToBytes32(\"177,175,200,248,153,210,134,20,223,29,44,199,65,103,134,161,173,238,143,170,43,68,137,203,62,57,19,233,216,128,174,105\"))]"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.987ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143]",
              "sol": "stringToBytes32(\"164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143\")"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122]",
              "sol": "stringToBytes32(\"39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122\")"
            },
            {
              "js": "[225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195]",
              "sol": "stringToBytes32(\"225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143]",
                "sol": "stringToBytes32(\"164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122]",
                "sol": "stringToBytes32(\"39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122\")"
              },
              {
                "js": "[225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195]",
                "sol": "stringToBytes32(\"225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143]",
                "sol": "stringToBytes32(\"164,82,232,54,216,23,109,97,154,177,14,68,162,173,106,155,197,1,157,49,20,31,245,208,241,105,150,223,77,225,61,143\")"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122]",
                "sol": "stringToBytes32(\"39,132,148,197,56,108,164,172,232,192,104,105,99,179,103,252,230,151,155,84,3,175,60,27,38,250,179,126,142,1,75,122\")"
              },
              {
                "js": "[225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195]",
                "sol": "stringToBytes32(\"225,17,7,166,214,67,249,92,206,63,23,71,210,9,62,211,7,117,241,20,114,24,81,148,186,168,105,60,218,185,108,195\")"
              },
              {
                "js": 20,
                "sol": 20
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.990ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.990ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "[194,169,157,214,168,31,192,63,165,212,109,75,108,253,108,157,249,48,176,61,59,238,209,85,56,56,30,112,174,111,123,39]",
              "sol": "stringToBytes32(\"194,169,157,214,168,31,192,63,165,212,109,75,108,253,108,157,249,48,176,61,59,238,209,85,56,56,30,112,174,111,123,39\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[252,14,133,39,203,2,43,81,19,53,37,78,28,59,50,45,207,197,196,198,250,146,113,161,93,12,20,18,175,107,88,248]",
              "sol": "stringToBytes32(\"252,14,133,39,203,2,43,81,19,53,37,78,28,59,50,45,207,197,196,198,250,146,113,161,93,12,20,18,175,107,88,248\")"
            },
            {
              "js": "[33,48,88,53,74,23,176,130,73,250,16,170,150,246,221,243,127,76,71,57,54,103,113,29,209,113,197,14,230,180,74,68]",
              "sol": "stringToBytes32(\"33,48,88,53,74,23,176,130,73,250,16,170,150,246,221,243,127,76,71,57,54,103,113,29,209,113,197,14,230,180,74,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.991ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.991ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:09:50.991ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:09:50.992ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}