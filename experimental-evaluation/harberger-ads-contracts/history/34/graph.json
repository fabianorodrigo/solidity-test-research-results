{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts',
  contracts:
   { ERC20test:
      { projectGraph: [Circular],
        name: 'ERC20test',
        kind: 'contract',
        isAbstract: false,
        functions:
         { '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: { mint: [Array] },
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 owner: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 ERC20Basic: [Object],
                 BasicToken: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
           BurnableToken:
            { projectGraph: [Circular],
              name: 'BurnableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { burn: [Array], _burn: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object] },
              inheritsFrom: { BasicToken: [Object], ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BurnableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
           DetailedERC20:
            { projectGraph: [Circular],
              name: 'DetailedERC20',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: {},
              stateVariables: { name: [Object], symbol: [Object], decimals: [Object] },
              dependencies: { ERC20: [Object] },
              inheritsFrom: { ERC20: [Object], ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'DetailedERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol' } },
        inheritsFrom:
         { DetailedERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'DetailedERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol' },
              parameters: [ [Object], [Object], [Object] ],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 2 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           MintableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MintableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
              parameters: [],
              level: 0 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 1 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           BurnableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BurnableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20test',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [Array],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'ModifierDefinition',
                name: 'hasMintPermission',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 33, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/contracts/ERC20test.sol' },
     HarbergerAds:
      { projectGraph: [Circular],
        name: 'HarbergerAds',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(ERC20,uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           taxesDue:
            [ { name: 'taxesDue',
                signature: 'taxesDue(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addProperty:
            [ { name: 'addProperty',
                signature: 'addProperty(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           forecloseIfPossible:
            [ { name: 'forecloseIfPossible',
                signature: 'forecloseIfPossible(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           collectTaxes:
            [ { name: 'collectTaxes',
                signature: 'collectTaxes(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buy:
            [ { name: 'buy',
                signature: 'buy(uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           propertyCount:
            [ { name: 'propertyCount',
                signature: 'propertyCount()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           changeRecipient:
            [ { name: 'changeRecipient',
                signature: 'changeRecipient(uint256,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { taxNumerator:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'taxNumerator',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           taxDenominator:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'taxDenominator',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           erc20:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'erc20',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           properties:
            { functionsWrite: {},
              contract: [Circular],
              name: 'properties',
              isArray: true,
              initialValue: [],
              type: 'HarbergerAds.Property[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs:
         { Property:
            { name: 'Property',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HarbergerAds',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Property',
                members: [Array],
                loc: [Object],
                parentName: 'HarbergerAds' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'taxesDue',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Change',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ChangeRecipient',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TaxesPaid',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addProperty',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'forecloseIfPossible',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'collectTaxes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buy',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'propertyCount',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'changeRecipient',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 145, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/contracts/HarbergerAds.sol' },
     RBAC:
      { projectGraph: [Circular],
        name: 'RBAC',
        kind: 'contract',
        isAbstract: false,
        functions:
         { checkRole:
            [ { name: 'checkRole',
                signature: 'checkRole(address,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasRole:
            [ { name: 'hasRole',
                signature: 'hasRole(address,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addRole:
            [ { name: 'addRole',
                signature: 'addRole(address,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeRole:
            [ { name: 'removeRole',
                signature: 'removeRole(address,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array], remove: [Array], check: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RBAC',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RoleAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RoleRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'checkRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasRole',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyRole',
                parameters: [Array],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 },
              end: { line: 106, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
     Roles:
      { projectGraph: [Circular],
        name: 'Roles',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remove:
            [ { name: 'remove',
                signature: 'remove(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           check:
            [ { name: 'check',
                signature: 'check(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           has:
            [ { name: 'has',
                signature: 'has(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Role:
            { name: 'Role', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Roles',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Role',
                members: [Array],
                loc: [Object],
                parentName: 'Roles' },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'check',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'has',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 55, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol' },
     SignatureBouncer:
      { projectGraph: [Circular],
        name: 'SignatureBouncer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addBouncer:
            [ { name: 'addBouncer',
                signature: 'addBouncer(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeBouncer:
            [ { name: 'removeBouncer',
                signature: 'removeBouncer(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isValidSignature:
            [ { name: 'isValidSignature',
                signature: 'isValidSignature(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isValidSignatureAndMethod:
            [ { name: 'isValidSignatureAndMethod',
                signature: 'isValidSignatureAndMethod(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isValidSignatureAndData:
            [ { name: 'isValidSignatureAndData',
                signature: 'isValidSignatureAndData(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isValidDataHash:
            [ { name: 'isValidDataHash',
                signature: 'isValidDataHash(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyValidSignature:
            { name: 'onlyValidSignature',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignature',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndMethod:
            { name: 'onlyValidSignatureAndMethod',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndMethod',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndData:
            { name: 'onlyValidSignatureAndData',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndData',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_BOUNCER:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_BOUNCER',
              isArray: false,
              initialValue: 'bouncer',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           METHOD_ID_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'METHOD_ID_SIZE',
              isArray: false,
              initialValue: 4,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           SIGNATURE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'SIGNATURE_SIZE',
              isArray: false,
              initialValue: 96,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
           ECRecovery:
            { projectGraph: [Circular],
              name: 'ECRecovery',
              kind: 'library',
              isAbstract: false,
              functions: { recover: [Array], toEthSignedMessageHash: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ECRecovery',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ECRecovery.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureBouncer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'ECRecovery',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignature',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndMethod',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndData',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addBouncer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeBouncer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidSignatureAndMethod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidSignatureAndData',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidDataHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 32, column: 0 },
              end: { line: 159, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/SignatureBouncer.sol' },
     Whitelist:
      { projectGraph: [Circular],
        name: 'Whitelist',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addAddressToWhitelist:
            [ { name: 'addAddressToWhitelist',
                signature: 'addAddressToWhitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           whitelist:
            [ { name: 'whitelist',
                signature: 'whitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           addAddressesToWhitelist:
            [ { name: 'addAddressesToWhitelist',
                signature: 'addAddressesToWhitelist(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           removeAddressFromWhitelist:
            [ { name: 'removeAddressFromWhitelist',
                signature: 'removeAddressFromWhitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeAddressesFromWhitelist:
            [ { name: 'removeAddressesFromWhitelist',
                signature: 'removeAddressesFromWhitelist(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ] },
        modifiers:
         { onlyIfWhitelisted:
            { name: 'onlyIfWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyIfWhitelisted',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_WHITELISTED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_WHITELISTED',
              isArray: false,
              initialValue: 'whitelist',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Whitelist',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyIfWhitelisted',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAddressToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'whitelist',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAddressesToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeAddressFromWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeAddressesFromWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 91, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/Whitelist.sol' },
     AddressUtils:
      { projectGraph: [Circular],
        name: 'AddressUtils',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AddressUtils',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/AddressUtils.sol' },
     AutoIncrementing:
      { projectGraph: [Circular],
        name: 'AutoIncrementing',
        kind: 'library',
        isAbstract: false,
        functions:
         { nextId:
            [ { name: 'nextId',
                signature: 'nextId(AutoIncrementing.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Counter:
            { name: 'Counter',
              contract: [Circular],
              parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AutoIncrementing',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Counter',
                members: [Array],
                loc: [Object],
                parentName: 'AutoIncrementing' },
              { type: 'FunctionDefinition',
                name: 'nextId',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/AutoIncrementing.sol' },
     Bounty:
      { projectGraph: [Circular],
        name: 'Bounty',
        kind: 'contract',
        isAbstract: true,
        functions:
         { '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createTarget:
            [ { name: 'createTarget',
                signature: 'createTarget()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claim:
            [ { name: 'claim',
                signature: 'claim(Target)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { claimed:
            { functionsWrite: { claim: [Array] },
              contract: [Circular],
              name: 'claimed',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           researchers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'researchers',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { PullPayment:
            { projectGraph: [Circular],
              name: 'PullPayment',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 withdrawPayments: [Array],
                 payments: [Array],
                 asyncTransfer: [Array] },
              modifiers: {},
              stateVariables: { escrow: [Object] },
              dependencies: { Escrow: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PullPayment',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/PullPayment.sol' },
           Destructible:
            { projectGraph: [Circular],
              name: 'Destructible',
              kind: 'contract',
              isAbstract: false,
              functions: { destroy: [Array], destroyAndSend: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Destructible',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Destructible.sol' } },
        inheritsFrom:
         { PullPayment:
            { contract:
               { projectGraph: [Circular],
                 name: 'PullPayment',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/PullPayment.sol' },
              parameters: [],
              level: 0 },
           Destructible:
            { contract:
               { projectGraph: [Circular],
                 name: 'Destructible',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Destructible.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Bounty',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TargetCreated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createTarget',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claim',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deployContract',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 56, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/Bounty.sol' },
     Target:
      { projectGraph: [Circular],
        name: 'Target',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { PullPayment:
            { projectGraph: [Circular],
              name: 'PullPayment',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 withdrawPayments: [Array],
                 payments: [Array],
                 asyncTransfer: [Array] },
              modifiers: {},
              stateVariables: { escrow: [Object] },
              dependencies: { Escrow: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PullPayment',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/PullPayment.sol' },
           Destructible:
            { projectGraph: [Circular],
              name: 'Destructible',
              kind: 'contract',
              isAbstract: false,
              functions: { destroy: [Array], destroyAndSend: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Destructible',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Destructible.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Target',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'checkInvariant',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 63, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/Bounty.sol' },
     Crowdsale:
      { projectGraph: [Circular],
        name: 'Crowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,address,ERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _postValidatePurchase:
            [ { name: '_postValidatePurchase',
                signature: '_postValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object], ERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Crowdsale',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokenPurchase',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_postValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 },
              end: { line: 203, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
     FinalizableCrowdsale:
      { projectGraph: [Circular],
        name: 'FinalizableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { finalize:
            [ { name: 'finalize',
                signature: 'finalize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           finalization:
            [ { name: 'finalization',
                signature: 'finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { isFinalized:
            { functionsWrite: { finalize: [Array] },
              contract: [Circular],
              name: 'isFinalized',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object] },
              stateVariables: { openingTime: [Object], closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FinalizableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Finalized',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
     PostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'PostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object] },
              stateVariables: { openingTime: [Object], closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     RefundableCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimRefund:
            [ { name: 'claimRefund',
                signature: 'claimRefund()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           goalReached:
            [ { name: 'goalReached',
                signature: 'goalReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalization:
            [ { name: 'finalization',
                signature: 'finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { goal:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           isFinalized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'isFinalized',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           FinalizableCrowdsale:
            { projectGraph: [Circular],
              name: 'FinalizableCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions: { finalize: [Array], finalization: [Array] },
              modifiers: { onlyOwner: [Object], onlyWhileOpen: [Object] },
              stateVariables:
               { isFinalized: [Object],
                 token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object],
                 openingTime: [Object],
                 closingTime: [Object],
                 owner: [Object] },
              dependencies:
               { SafeMath: [Object],
                 Ownable: [Object],
                 TimedCrowdsale: [Object] },
              inheritsFrom:
               { Ownable: [Object],
                 TimedCrowdsale: [Object],
                 Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FinalizableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
           RefundEscrow:
            { projectGraph: [Circular],
              name: 'RefundEscrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 deposit: [Array],
                 close: [Array],
                 enableRefunds: [Array],
                 beneficiaryWithdraw: [Array],
                 withdrawalAllowed: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables:
               { state: [Object],
                 beneficiary: [Object],
                 owner: [Object],
                 deposits: [Object] },
              dependencies: { ConditionalEscrow: [Object], Ownable: [Object] },
              inheritsFrom:
               { Ownable: [Object],
                 ConditionalEscrow: [Object],
                 Escrow: [Object] },
              structs: {},
              enums: { State: [Object] },
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/RefundEscrow.sol' } },
        inheritsFrom:
         { FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimRefund',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goalReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
     AllowanceCrowdsale:
      { projectGraph: [Circular],
        name: 'AllowanceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           remainingTokens:
            [ { name: 'remainingTokens',
                signature: 'remainingTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { tokenWallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'tokenWallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object], ERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AllowanceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remainingTokens',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol' },
     MintedCrowdsale:
      { projectGraph: [Circular],
        name: 'MintedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 owner: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 ERC20Basic: [Object],
                 BasicToken: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol' },
     IncreasingPriceCrowdsale:
      { projectGraph: [Circular],
        name: 'IncreasingPriceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentRate:
            [ { name: 'getCurrentRate',
                signature: 'getCurrentRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { initialRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'initialRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           finalRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'finalRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object] },
              stateVariables: { openingTime: [Object], closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IncreasingPriceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 56, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol' },
     CappedCrowdsale:
      { projectGraph: [Circular],
        name: 'CappedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           capReached:
            [ { name: 'capReached',
                signature: 'capReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'capReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol' },
     IndividuallyCappedCrowdsale:
      { projectGraph: [Circular],
        name: 'IndividuallyCappedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setUserCap:
            [ { name: 'setUserCap',
                signature: 'setUserCap(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setGroupCap:
            [ { name: 'setGroupCap',
                signature: 'setGroupCap(address[],uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getUserCap:
            [ { name: 'getUserCap',
                signature: 'getUserCap(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getUserContribution:
            [ { name: 'getUserContribution',
                signature: 'getUserContribution(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: 'contributions',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           caps:
            { functionsWrite: {},
              contract: [Circular],
              name: 'caps',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IndividuallyCappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setUserCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setGroupCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getUserCap',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getUserContribution',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 94, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol' },
     TimedCrowdsale:
      { projectGraph: [Circular],
        name: 'TimedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           hasClosed:
            [ { name: 'hasClosed',
                signature: 'hasClosed()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { openingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           closingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TimedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhileOpen',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasClosed',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 64, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
     WhitelistedCrowdsale:
      { projectGraph: [Circular],
        name: 'WhitelistedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyIfWhitelisted:
            { name: 'onlyIfWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyIfWhitelisted',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ROLE_WHITELISTED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_WHITELISTED',
              isArray: false,
              initialValue: 'whitelist',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           rate:
            { functionsWrite: {},
              contract: [Circular],
              name: 'rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: 'weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: {},
              stateVariables:
               { token: [Object],
                 wallet: [Object],
                 rate: [Object],
                 weiRaised: [Object] },
              dependencies: { ERC20: [Object], SafeMath: [Object], SafeERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           Whitelist:
            { projectGraph: [Circular],
              name: 'Whitelist',
              kind: 'contract',
              isAbstract: false,
              functions:
               { addAddressToWhitelist: [Array],
                 whitelist: [Array],
                 addAddressesToWhitelist: [Array],
                 removeAddressFromWhitelist: [Array],
                 removeAddressesFromWhitelist: [Array] },
              modifiers:
               { onlyIfWhitelisted: [Object],
                 onlyOwner: [Object],
                 onlyRole: [Object] },
              stateVariables:
               { ROLE_WHITELISTED: [Object], roles: [Object], owner: [Object] },
              dependencies: { Ownable: [Object], RBAC: [Object] },
              inheritsFrom: { Ownable: [Object], RBAC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Whitelist',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/Whitelist.sol' } },
        inheritsFrom:
         { Whitelist:
            { contract:
               { projectGraph: [Circular],
                 name: 'Whitelist',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/Whitelist.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 27, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol' },
     ECRecovery:
      { projectGraph: [Circular],
        name: 'ECRecovery',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECRecovery',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ECRecovery.sol' },
     ERC165:
      { projectGraph: [Circular],
        name: 'ERC165',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 20, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
     SupportsInterfaceWithLookup:
      { projectGraph: [Circular],
        name: 'SupportsInterfaceWithLookup',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(bytes4)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterface:
            [ { name: '_registerInterface',
                signature: '_registerInterface(bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: 'supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SupportsInterfaceWithLookup',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterface',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol' },
     Destructible:
      { projectGraph: [Circular],
        name: 'Destructible',
        kind: 'contract',
        isAbstract: false,
        functions:
         { destroy:
            [ { name: 'destroy',
                signature: 'destroy()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           destroyAndSend:
            [ { name: 'destroyAndSend',
                signature: 'destroyAndSend(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Destructible',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'destroy',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'destroyAndSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Destructible.sol' },
     Pausable:
      { projectGraph: [Circular],
        name: 'Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { pause:
            [ { name: 'pause',
                signature: 'pause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           unpause:
            [ { name: 'unpause',
                signature: 'unpause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { paused:
            { functionsWrite: { pause: [Array], unpause: [Array] },
              contract: [Circular],
              name: 'paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Pause',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Unpause',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unpause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol' },
     TokenDestructible:
      { projectGraph: [Circular],
        name: 'TokenDestructible',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           destroy:
            [ { name: 'destroy',
                signature: 'destroy(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenDestructible',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'destroy',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/TokenDestructible.sol' },
     LimitBalance:
      { projectGraph: [Circular],
        name: 'LimitBalance',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { limitedPayable:
            { name: 'limitedPayable',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'limitedPayable',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { limit:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'limit',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LimitBalance',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'limitedPayable',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/LimitBalance.sol' },
     Math:
      { projectGraph: [Circular],
        name: 'Math',
        kind: 'library',
        isAbstract: false,
        functions:
         { max64:
            [ { name: 'max64',
                signature: 'max64(uint64,uint64)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min64:
            [ { name: 'min64',
                signature: 'min64(uint64,uint64)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           max256:
            [ { name: 'max256',
                signature: 'max256(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min256:
            [ { name: 'min256',
                signature: 'min256(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Math',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'max64',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min64',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'max256',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min256',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/Math.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
     MerkleProof:
      { projectGraph: [Circular],
        name: 'MerkleProof',
        kind: 'library',
        isAbstract: false,
        functions:
         { verifyProof:
            [ { name: 'verifyProof',
                signature: 'verifyProof(bytes32[],bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleProof',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'verifyProof',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/MerkleProof.sol' },
     CanReclaimToken:
      { projectGraph: [Circular],
        name: 'CanReclaimToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { reclaimToken:
            [ { name: 'reclaimToken',
                signature: 'reclaimToken(ERC20Basic)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object], ERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CanReclaimToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'reclaimToken',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 26, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
     Claimable:
      { projectGraph: [Circular],
        name: 'Claimable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimOwnership:
            [ { name: 'claimOwnership',
                signature: 'claimOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPendingOwner:
            { name: 'onlyPendingOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPendingOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pendingOwner:
            { functionsWrite: { transferOwnership: [Array], claimOwnership: [Array] },
              contract: [Circular],
              name: 'pendingOwner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: { claimOwnership: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Claimable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPendingOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Claimable.sol' },
     Contactable:
      { projectGraph: [Circular],
        name: 'Contactable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setContactInformation:
            [ { name: 'setContactInformation',
                signature: 'setContactInformation(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { contactInformation:
            { functionsWrite: { setContactInformation: [Array] },
              contract: [Circular],
              name: 'contactInformation',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Contactable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setContactInformation',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Contactable.sol' },
     DelayedClaimable:
      { projectGraph: [Circular],
        name: 'DelayedClaimable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setLimits:
            [ { name: 'setLimits',
                signature: 'setLimits(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimOwnership:
            [ { name: 'claimOwnership',
                signature: 'claimOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPendingOwner:
            { name: 'onlyPendingOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPendingOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { end:
            { functionsWrite: { setLimits: [Array], claimOwnership: [Array] },
              contract: [Circular],
              name: 'end',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           start:
            { functionsWrite: { setLimits: [Array] },
              contract: [Circular],
              name: 'start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingOwner:
            { functionsWrite: { claimOwnership: [Array] },
              contract: [Circular],
              name: 'pendingOwner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: { claimOwnership: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Claimable:
            { projectGraph: [Circular],
              name: 'Claimable',
              kind: 'contract',
              isAbstract: false,
              functions: { transferOwnership: [Array], claimOwnership: [Array] },
              modifiers: { onlyPendingOwner: [Object], onlyOwner: [Object] },
              stateVariables: { pendingOwner: [Object], owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Claimable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Claimable.sol' } },
        inheritsFrom:
         { Claimable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Claimable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Claimable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelayedClaimable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setLimits',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/DelayedClaimable.sol' },
     HasNoContracts:
      { projectGraph: [Circular],
        name: 'HasNoContracts',
        kind: 'contract',
        isAbstract: false,
        functions:
         { reclaimContract:
            [ { name: 'reclaimContract',
                signature: 'reclaimContract(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoContracts',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'reclaimContract',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoContracts.sol' },
     HasNoEther:
      { projectGraph: [Circular],
        name: 'HasNoEther',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           reclaimEther:
            [ { name: 'reclaimEther',
                signature: 'reclaimEther()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoEther',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'reclaimEther',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol' },
     HasNoTokens:
      { projectGraph: [Circular],
        name: 'HasNoTokens',
        kind: 'contract',
        isAbstract: false,
        functions:
         { tokenFallback:
            [ { name: 'tokenFallback',
                signature: 'tokenFallback(address,uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { CanReclaimToken:
            { projectGraph: [Circular],
              name: 'CanReclaimToken',
              kind: 'contract',
              isAbstract: false,
              functions: { reclaimToken: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies:
               { Ownable: [Object], ERC20Basic: [Object], SafeERC20: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CanReclaimToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol' } },
        inheritsFrom:
         { CanReclaimToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'CanReclaimToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoTokens',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokenFallback',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 35, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
     Heritable:
      { projectGraph: [Circular],
        name: 'Heritable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setHeir:
            [ { name: 'setHeir',
                signature: 'setHeir(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           heir:
            [ { name: 'heir',
                signature: 'heir()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           heartbeatTimeout:
            [ { name: 'heartbeatTimeout',
                signature: 'heartbeatTimeout()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timeOfDeath:
            [ { name: 'timeOfDeath',
                signature: 'timeOfDeath()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeHeir:
            [ { name: 'removeHeir',
                signature: 'removeHeir()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           proclaimDeath:
            [ { name: 'proclaimDeath',
                signature: 'proclaimDeath()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           heartbeat:
            [ { name: 'heartbeat',
                signature: 'heartbeat()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimHeirOwnership:
            [ { name: 'claimHeirOwnership',
                signature: 'claimHeirOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           setHeartbeatTimeout:
            [ { name: 'setHeartbeatTimeout',
                signature: 'setHeartbeatTimeout(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           ownerLives:
            [ { name: 'ownerLives',
                signature: 'ownerLives()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyHeir:
            { name: 'onlyHeir',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyHeir',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { heir_:
            { functionsWrite: { setHeir: [Array], removeHeir: [Array] },
              contract: [Circular],
              name: 'heir_',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           heartbeatTimeout_:
            { functionsWrite: { setHeartbeatTimeout: [Array] },
              contract: [Circular],
              name: 'heartbeatTimeout_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           timeOfDeath_:
            { functionsWrite:
               { proclaimDeath: [Array],
                 heartbeat: [Array],
                 claimHeirOwnership: [Array] },
              contract: [Circular],
              name: 'timeOfDeath_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: { claimHeirOwnership: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Heritable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'HeirChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnerHeartbeated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnerProclaimedDead',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'HeirOwnershipClaimed',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyHeir',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setHeir',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heir',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heartbeatTimeout',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timeOfDeath',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeHeir',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'proclaimDeath',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heartbeat',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimHeirOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setHeartbeatTimeout',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerLives',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 126, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Heritable.sol' },
     NoOwner:
      { projectGraph: [Circular],
        name: 'NoOwner',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { HasNoEther:
            { projectGraph: [Circular],
              name: 'HasNoEther',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array], '': [Array], reclaimEther: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoEther',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol' },
           HasNoTokens:
            { projectGraph: [Circular],
              name: 'HasNoTokens',
              kind: 'contract',
              isAbstract: false,
              functions: { tokenFallback: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: { CanReclaimToken: [Object] },
              inheritsFrom: { CanReclaimToken: [Object], Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoTokens',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
           HasNoContracts:
            { projectGraph: [Circular],
              name: 'HasNoContracts',
              kind: 'contract',
              isAbstract: false,
              functions: { reclaimContract: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoContracts',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoContracts.sol' } },
        inheritsFrom:
         { HasNoEther:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoEther',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           HasNoTokens:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoTokens',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
              parameters: [],
              level: 0 },
           CanReclaimToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'CanReclaimToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
              parameters: [],
              level: 1 },
           HasNoContracts:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoContracts',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/HasNoContracts.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'NoOwner',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/NoOwner.sol' },
     Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           renounceOwnership:
            [ { name: 'renounceOwnership',
                signature: 'renounceOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transferOwnership:
            [ { name: '_transferOwnership',
                signature: '_transferOwnership(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 _transferOwnership: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipRenounced',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 64, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
     Superuser:
      { projectGraph: [Circular],
        name: 'Superuser',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isSuperuser:
            [ { name: 'isSuperuser',
                signature: 'isSuperuser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferSuperuser:
            [ { name: 'transferSuperuser',
                signature: 'transferSuperuser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlySuperuser:
            { name: 'onlySuperuser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySuperuser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwnerOrSuperuser:
            { name: 'onlyOwnerOrSuperuser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwnerOrSuperuser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_SUPERUSER:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_SUPERUSER',
              isArray: false,
              initialValue: 'superuser',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Superuser',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySuperuser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwnerOrSuperuser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSuperuser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferSuperuser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Superuser.sol' },
     ConditionalEscrow:
      { projectGraph: [Circular],
        name: 'ConditionalEscrow',
        kind: 'contract',
        isAbstract: true,
        functions:
         { withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { deposits: [Object], owner: [Object] },
              dependencies: { SafeMath: [Object], Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/Escrow.sol' } },
        inheritsFrom:
         { Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/Escrow.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConditionalEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/ConditionalEscrow.sol' },
     Escrow:
      { projectGraph: [Circular],
        name: 'Escrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { depositsOf:
            [ { name: 'depositsOf',
                signature: 'depositsOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: 'deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Escrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Deposited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Withdrawn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'depositsOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/Escrow.sol' },
     PullPayment:
      { projectGraph: [Circular],
        name: 'PullPayment',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawPayments:
            [ { name: 'withdrawPayments',
                signature: 'withdrawPayments()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payments:
            [ { name: 'payments',
                signature: 'payments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           asyncTransfer:
            [ { name: 'asyncTransfer',
                signature: 'asyncTransfer(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'escrow',
              isArray: false,
              initialValue: null,
              type: 'Escrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { deposits: [Object], owner: [Object] },
              dependencies: { SafeMath: [Object], Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/Escrow.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PullPayment',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawPayments',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payments',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'asyncTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/PullPayment.sol' },
     RefundEscrow:
      { projectGraph: [Circular],
        name: 'RefundEscrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiaryWithdraw:
            [ { name: 'beneficiaryWithdraw',
                signature: 'beneficiaryWithdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawalAllowed:
            [ { name: 'withdrawalAllowed',
                signature: 'withdrawalAllowed(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { state:
            { functionsWrite:
               { constructor: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: 'state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: 'deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConditionalEscrow:
            { projectGraph: [Circular],
              name: 'ConditionalEscrow',
              kind: 'contract',
              isAbstract: true,
              functions: { withdraw: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: {},
              dependencies: { Escrow: [Object] },
              inheritsFrom: { Escrow: [Object], Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConditionalEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/ConditionalEscrow.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 2 },
           ConditionalEscrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/ConditionalEscrow.sol' },
              parameters: [],
              level: 0 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/Escrow.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Closed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiaryWithdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 74, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/RefundEscrow.sol' },
     SplitPayment:
      { projectGraph: [Circular],
        name: 'SplitPayment',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address[],uint256[])',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claim:
            [ { name: 'claim',
                signature: 'claim()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           addPayee:
            [ { name: 'addPayee',
                signature: 'addPayee(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { totalShares:
            { functionsWrite: { addPayee: [Array] },
              contract: [Circular],
              name: 'totalShares',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalReleased:
            { functionsWrite: { claim: [Array] },
              contract: [Circular],
              name: 'totalReleased',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           shares:
            { functionsWrite: {},
              contract: [Circular],
              name: 'shares',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           released:
            { functionsWrite: {},
              contract: [Circular],
              name: 'released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           payees:
            { functionsWrite: { addPayee: [Array] },
              contract: [Circular],
              name: 'payees',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SplitPayment',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claim',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addPayee',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/SplitPayment.sol' },
     ERC20TokenMetadata:
      { projectGraph: [Circular],
        name: 'ERC20TokenMetadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20TokenMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/proposals/ERC1046/TokenMetadata.sol' },
     ERC20WithMetadata:
      { projectGraph: [Circular],
        name: 'ERC20WithMetadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { tokenURI_:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'tokenURI_',
              isArray: false,
              initialValue: '',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20TokenMetadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20TokenMetadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/proposals/ERC1046/TokenMetadata.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20WithMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/proposals/ERC1046/TokenMetadata.sol' },
     ReentrancyGuard:
      { projectGraph: [Circular],
        name: 'ReentrancyGuard',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { REENTRANCY_GUARD_FREE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'REENTRANCY_GUARD_FREE',
              isArray: false,
              initialValue: 1,
              type: 'uint',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           REENTRANCY_GUARD_LOCKED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'REENTRANCY_GUARD_LOCKED',
              isArray: false,
              initialValue: 2,
              type: 'uint',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           reentrancyLock:
            { functionsWrite: {},
              contract: [Circular],
              name: 'reentrancyLock',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ReentrancyGuard',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'nonReentrant',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ReentrancyGuard.sol' },
     BasicToken:
      { projectGraph: [Circular],
        name: 'BasicToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BasicToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
     BurnableToken:
      { projectGraph: [Circular],
        name: 'BurnableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: { _burn: [Array] },
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasicToken:
            { projectGraph: [Circular],
              name: 'BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array], transfer: [Array], balanceOf: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { ERC20Basic: [Object], SafeMath: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' } },
        inheritsFrom:
         { BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BurnableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Burn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
     CappedToken:
      { projectGraph: [Circular],
        name: 'CappedToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 owner: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 ERC20Basic: [Object],
                 BasicToken: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' } },
        inheritsFrom:
         { MintableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MintableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
              parameters: [],
              level: 0 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 2 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 3 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 37, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol' },
     DetailedERC20:
      { projectGraph: [Circular],
        name: 'DetailedERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DetailedERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' } },
        inheritsFrom:
         { ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 23, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
     ERC20Basic:
      { projectGraph: [Circular],
        name: 'ERC20Basic',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Basic',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
     MintableToken:
      { projectGraph: [Circular],
        name: 'MintableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           finishMinting:
            [ { name: 'finishMinting',
                signature: 'finishMinting()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { mintingFinished:
            { functionsWrite: { finishMinting: [Array] },
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: { mint: [Array] },
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: {},
              stateVariables:
               { allowed: [Object], balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object], ERC20Basic: [Object], BasicToken: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Mint',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MintFinished',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'canMint',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'hasMintPermission',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finishMinting',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 60, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
     PausableToken:
      { projectGraph: [Circular],
        name: 'PausableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApproval:
            [ { name: 'increaseApproval',
                signature: 'increaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApproval:
            [ { name: 'decreaseApproval',
                signature: 'decreaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { paused:
            { functionsWrite: {},
              contract: [Circular],
              name: 'paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: {},
              stateVariables:
               { allowed: [Object], balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object], ERC20Basic: [Object], BasicToken: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: false,
              functions: { pause: [Array], unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyOwner: [Object] },
              stateVariables: { paused: [Object], owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PausableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 68, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol' },
     RBACMintableToken:
      { projectGraph: [Circular],
        name: 'RBACMintableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeMinter:
            [ { name: 'removeMinter',
                signature: 'removeMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_MINTER:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_MINTER',
              isArray: false,
              initialValue: 'minter',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 owner: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 ERC20Basic: [Object],
                 BasicToken: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' } },
        inheritsFrom:
         { MintableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MintableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
              parameters: [],
              level: 0 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 2 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 3 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RBACMintableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'hasMintPermission',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/RBACMintableToken.sol' },
     SafeERC20:
      { projectGraph: [Circular],
        name: 'SafeERC20',
        kind: 'library',
        isAbstract: false,
        functions:
         { safeTransfer:
            [ { name: 'safeTransfer',
                signature: 'safeTransfer(ERC20Basic,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(ERC20,address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeApprove:
            [ { name: 'safeApprove',
                signature: 'safeApprove(ERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'safeTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeApprove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 44, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
     StandardBurnableToken:
      { projectGraph: [Circular],
        name: 'StandardBurnableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BurnableToken:
            { projectGraph: [Circular],
              name: 'BurnableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { burn: [Array], _burn: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object] },
              inheritsFrom: { BasicToken: [Object], ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BurnableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
           StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: {},
              stateVariables:
               { allowed: [Object], balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object], ERC20Basic: [Object], BasicToken: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' } },
        inheritsFrom:
         { BurnableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BurnableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
              parameters: [],
              level: 0 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandardBurnableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol' },
     StandardToken:
      { projectGraph: [Circular],
        name: 'StandardToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApproval:
            [ { name: 'increaseApproval',
                signature: 'increaseApproval(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApproval:
            [ { name: 'decreaseApproval',
                signature: 'decreaseApproval(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasicToken:
            { projectGraph: [Circular],
              name: 'BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array], transfer: [Array], balanceOf: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { ERC20Basic: [Object], SafeMath: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandardToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 },
              end: { line: 124, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
     TokenTimelock:
      { projectGraph: [Circular],
        name: 'TokenTimelock',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(ERC20Basic,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'ERC20Basic',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           releaseTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'releaseTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object], ERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenTimelock',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol' },
     TokenVesting:
      { projectGraph: [Circular],
        name: 'TokenVesting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,uint256,uint256,uint256,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(ERC20Basic)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoke:
            [ { name: 'revoke',
                signature: 'revoke(ERC20Basic)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releasableAmount:
            [ { name: 'releasableAmount',
                signature: 'releasableAmount(ERC20Basic)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vestedAmount:
            [ { name: 'vestedAmount',
                signature: 'vestedAmount(ERC20Basic)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           cliff:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'cliff',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           start:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           duration:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'duration',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           revocable:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'revocable',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           released:
            { functionsWrite: {},
              contract: [Circular],
              name: 'released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           revoked:
            { functionsWrite: {},
              contract: [Circular],
              name: 'revoked',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           owner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20Basic: [Object], ERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenVesting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Released',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Revoked',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releasableAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vestedAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 },
              end: { line: 126, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/TokenVesting.sol' },
     DeprecatedERC721:
      { projectGraph: [Circular],
        name: 'DeprecatedERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom: { ERC721Basic: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom: { ERC721Basic: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom:
               { ERC721Basic: [Object],
                 ERC165: [Object],
                 ERC721Enumerable: [Object],
                 ERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 3 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DeprecatedERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'takeOwnership',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokensOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/DeprecatedERC721.sol' },
     ERC721Enumerable:
      { projectGraph: [Circular],
        name: 'ERC721Enumerable',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC721Basic:
            { projectGraph: [Circular],
              name: 'ERC721Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC721: [Object],
                 InterfaceId_ERC721Exists: [Object],
                 InterfaceId_ERC721Enumerable: [Object],
                 InterfaceId_ERC721Metadata: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Basic',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' } },
        inheritsFrom:
         { ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
     ERC721Metadata:
      { projectGraph: [Circular],
        name: 'ERC721Metadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC721Basic:
            { projectGraph: [Circular],
              name: 'ERC721Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC721: [Object],
                 InterfaceId_ERC721Exists: [Object],
                 InterfaceId_ERC721Enumerable: [Object],
                 InterfaceId_ERC721Metadata: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Basic',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' } },
        inheritsFrom:
         { ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 28, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
     ERC721:
      { projectGraph: [Circular],
        name: 'ERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC721Basic:
            { projectGraph: [Circular],
              name: 'ERC721Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC721: [Object],
                 InterfaceId_ERC721Exists: [Object],
                 InterfaceId_ERC721Enumerable: [Object],
                 InterfaceId_ERC721Metadata: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Basic',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' } },
        inheritsFrom:
         { ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 39, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
     ERC721Basic:
      { projectGraph: [Circular],
        name: 'ERC721Basic',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Exists:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Exists',
              isArray: false,
              initialValue: 1331007097,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Basic',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'exists',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 87, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
     ERC721BasicToken:
      { projectGraph: [Circular],
        name: 'ERC721BasicToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           exists:
            [ { name: 'exists',
                signature: 'exists(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isApprovedOrOwner:
            [ { name: 'isApprovedOrOwner',
                signature: 'isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           clearApproval:
            [ { name: 'clearApproval',
                signature: 'clearApproval(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addTokenTo:
            [ { name: 'addTokenTo',
                signature: 'addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeTokenFrom:
            [ { name: 'removeTokenFrom',
                signature: 'removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           checkAndCallSafeTransfer:
            [ { name: 'checkAndCallSafeTransfer',
                signature: 'checkAndCallSafeTransfer(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: 'supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Exists:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Exists',
              isArray: false,
              initialValue: 1331007097,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721Basic:
            { projectGraph: [Circular],
              name: 'ERC721Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC721: [Object],
                 InterfaceId_ERC721Exists: [Object],
                 InterfaceId_ERC721Enumerable: [Object],
                 InterfaceId_ERC721Metadata: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Basic',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
           ERC721Receiver:
            { projectGraph: [Circular],
              name: 'ERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { ERC721_RECEIVED: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/math/SafeMath.sol' },
           AddressUtils:
            { projectGraph: [Circular],
              name: 'AddressUtils',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AddressUtils',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/AddressUtils.sol' },
           SupportsInterfaceWithLookup:
            { projectGraph: [Circular],
              name: 'SupportsInterfaceWithLookup',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC165: [Object], supportedInterfaces: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SupportsInterfaceWithLookup',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol' } },
        inheritsFrom:
         { SupportsInterfaceWithLookup:
            { contract:
               { projectGraph: [Circular],
                 name: 'SupportsInterfaceWithLookup',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721BasicToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'AddressUtils',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'checkAndCallSafeTransfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 },
              end: { line: 312, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' },
     ERC721Holder:
      { projectGraph: [Circular],
        name: 'ERC721Holder',
        kind: 'contract',
        isAbstract: false,
        functions:
         { onERC721Received:
            [ { name: 'onERC721Received',
                signature: 'onERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721Receiver:
            { projectGraph: [Circular],
              name: 'ERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { ERC721_RECEIVED: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' } },
        inheritsFrom:
         { ERC721Receiver:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Receiver',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Holder',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 18, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol' },
     ERC721Receiver:
      { projectGraph: [Circular],
        name: 'ERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' },
     ERC721Token:
      { projectGraph: [Circular],
        name: 'ERC721Token',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(uint256,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addTokenTo:
            [ { name: 'addTokenTo',
                signature: 'addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeTokenFrom:
            [ { name: 'removeTokenFrom',
                signature: 'removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { name_:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name_',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol_:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol_',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allTokens:
            { functionsWrite: { _mint: [Array] },
              contract: [Circular],
              name: 'allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: 'supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Exists:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Exists',
              isArray: false,
              initialValue: 1331007097,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom: { ERC721Basic: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom: { ERC721Basic: [Object], ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC721Basic: [Object] },
              inheritsFrom:
               { ERC721Basic: [Object],
                 ERC165: [Object],
                 ERC721Enumerable: [Object],
                 ERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721BasicToken:
            { projectGraph: [Circular],
              name: 'ERC721BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 exists: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 clearApproval: [Array],
                 addTokenTo: [Array],
                 removeTokenFrom: [Array],
                 checkAndCallSafeTransfer: [Array] },
              modifiers: {},
              stateVariables:
               { ERC721_RECEIVED: [Object],
                 tokenOwner: [Object],
                 tokenApprovals: [Object],
                 ownedTokensCount: [Object],
                 operatorApprovals: [Object],
                 InterfaceId_ERC165: [Object],
                 supportedInterfaces: [Object],
                 InterfaceId_ERC721: [Object],
                 InterfaceId_ERC721Exists: [Object],
                 InterfaceId_ERC721Enumerable: [Object],
                 InterfaceId_ERC721Metadata: [Object] },
              dependencies:
               { ERC721Basic: [Object],
                 ERC721Receiver: [Object],
                 SafeMath: [Object],
                 AddressUtils: [Object],
                 SupportsInterfaceWithLookup: [Object] },
              inheritsFrom:
               { SupportsInterfaceWithLookup: [Object],
                 ERC165: [Object],
                 ERC721Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' },
           SupportsInterfaceWithLookup:
            { projectGraph: [Circular],
              name: 'SupportsInterfaceWithLookup',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { InterfaceId_ERC165: [Object], supportedInterfaces: [Object] },
              dependencies: { ERC165: [Object] },
              inheritsFrom: { ERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SupportsInterfaceWithLookup',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol' } },
        inheritsFrom:
         { SupportsInterfaceWithLookup:
            { contract:
               { projectGraph: [Circular],
                 name: 'SupportsInterfaceWithLookup',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 3 },
           ERC721BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' },
              parameters: [],
              level: 0 },
           ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Token',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 },
              end: { line: 201, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol' } },
  structs:
   { Property:
      { name: 'Property',
        contract:
         { projectGraph: [Circular],
           name: 'HarbergerAds',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              taxesDue: [ [Object] ],
              balanceOf: [ [Object] ],
              addProperty: [ [Object] ],
              forecloseIfPossible: [ [Object] ],
              collectTaxes: [ [Object] ],
              buy: [ [Object] ],
              propertyCount: [ [Object] ],
              changeRecipient: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { taxNumerator:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'taxNumerator',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              taxDenominator:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'taxDenominator',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              erc20:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'erc20',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              properties:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'properties',
                 isArray: true,
                 initialValue: [],
                 type: 'HarbergerAds.Property[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 } },
           structs: { Property: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'HarbergerAds',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/contracts/HarbergerAds.sol' },
        parameters:
         [ { name: 'taxRecipient',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'owner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'price',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'paidThru',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'HarbergerAds.Property':
      { name: 'Property',
        contract:
         { projectGraph: [Circular],
           name: 'HarbergerAds',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              taxesDue: [ [Object] ],
              balanceOf: [ [Object] ],
              addProperty: [ [Object] ],
              forecloseIfPossible: [ [Object] ],
              collectTaxes: [ [Object] ],
              buy: [ [Object] ],
              propertyCount: [ [Object] ],
              changeRecipient: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { taxNumerator:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'taxNumerator',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              taxDenominator:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'taxDenominator',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              erc20:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'erc20',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              properties:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'properties',
                 isArray: true,
                 initialValue: [],
                 type: 'HarbergerAds.Property[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 } },
           structs: { Property: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'HarbergerAds',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/contracts/HarbergerAds.sol' },
        parameters:
         [ { name: 'taxRecipient',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'owner',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'price',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'paidThru',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Role:
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ],
              remove: [ [Object] ],
              check: [ [Object] ],
              has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Roles.Role':
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ],
              remove: [ [Object] ],
              check: [ [Object] ],
              has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Counter:
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'AutoIncrementing',
           kind: 'library',
           isAbstract: false,
           functions: { nextId: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'AutoIncrementing',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/AutoIncrementing.sol' },
        parameters:
         [ { name: 'prevId',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'AutoIncrementing.Counter':
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'AutoIncrementing',
           kind: 'library',
           isAbstract: false,
           functions: { nextId: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'AutoIncrementing',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/AutoIncrementing.sol' },
        parameters:
         [ { name: 'prevId',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { State:
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/ConditionalEscrow.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 2 },
              ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundEscrow.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/ConditionalEscrow.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 2 },
              ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/harberger-ads-contracts/node_modules/zeppelin-solidity/contracts/payment/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] } } }