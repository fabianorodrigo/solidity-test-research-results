,{
  "2020-11-10T19:36:12.834ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:36:18.581ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"superuser\",\"sha256Hash\": [200,52,252,187,173,49,231,136,13,146,23,240,52,226,44,165,43,153,215,42,113,78,186,52,180,217,240,178,119,111,23,194],\"approvalCounter\": 2014223716,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"superuser\",stringToBytes32(\"200,52,252,187,173,49,231,136,13,146,23,240,52,226,44,165,43,153,215,42,113,78,186,52,180,217,240,178,119,111,23,194\"),2014223716,false,false)"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[195,172,168,86,49,110,123,32,214,3,39,46,168,20,182,51,255,17,184,14,26,96,68,143,187,135,76,22,207,139,84,31]",
              "sol": "stringToBytes32(\"195,172,168,86,49,110,123,32,214,3,39,46,168,20,182,51,255,17,184,14,26,96,68,143,187,135,76,22,207,139,84,31\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.582ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237],\"approvalCounter\": 64,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237\"),64,true,false)"
            },
            {
              "js": "[172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237]",
              "sol": "stringToBytes32(\"172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"Example\",sha256Hash : [146,10,151,118,65,254,87,134,140,120,22,51,250,251,207,31,142,122,79,93,220,143,72,220,215,190,255,244,146,48,124,233],approvalCounter : 64,initialized : true,approved : false}",
                "sol": "Releases.Release(\"Example\",stringToBytes32(\"146,10,151,118,65,254,87,134,140,120,22,51,250,251,207,31,142,122,79,93,220,143,72,220,215,190,255,244,146,48,124,233\"),64,true,false)"
              },
              {
                "js": "[172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237]",
                "sol": "stringToBytes32(\"172,74,59,244,205,155,83,27,179,246,162,238,193,149,64,205,17,55,85,231,142,107,156,89,201,121,107,229,234,134,47,237\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:36:18.583ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"\\x19Ethereum Signed Message:\\n32\",\"sha256Hash\": [39,157,180,236,64,112,102,17,100,140,185,54,225,138,153,117,213,58,182,165,131,198,37,75,87,31,243,90,183,0,237,132],\"approvalCounter\": 10001,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\\n32\",stringToBytes32(\"39,157,180,236,64,112,102,17,100,140,185,54,225,138,153,117,213,58,182,165,131,198,37,75,87,31,243,90,183,0,237,132\"),10001,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"\\x19Ethereum Signed Message:\n32\",sha256Hash : [39,157,180,236,64,112,102,17,100,140,185,54,225,138,153,117,213,58,182,165,131,198,37,75,87,31,243,90,183,0,237,132],approvalCounter : 10001,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\n32\",stringToBytes32(\"39,157,180,236,64,112,102,17,100,140,185,54,225,138,153,117,213,58,182,165,131,198,37,75,87,31,243,90,183,0,237,132\"),10001,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"minter\",\"sha256Hash\": [100,180,191,249,237,182,98,111,19,233,182,220,116,207,184,224,46,29,198,249,37,179,3,155,224,214,117,252,85,5,186,37],\"approvalCounter\": 2,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"minter\",stringToBytes32(\"100,180,191,249,237,182,98,111,19,233,182,220,116,207,184,224,46,29,198,249,37,179,3,155,224,214,117,252,85,5,186,37\"),2,false,false)"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"minter\",sha256Hash : [100,180,191,249,237,182,98,111,19,233,182,220,116,207,184,224,46,29,198,249,37,179,3,155,224,214,117,252,85,5,186,37],approvalCounter : 2,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"minter\",stringToBytes32(\"100,180,191,249,237,182,98,111,19,233,182,220,116,207,184,224,46,29,198,249,37,179,3,155,224,214,117,252,85,5,186,37\"),2,false,true)"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:36:18.585ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:36:18.586ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[23,77,117,98,140,157,102,248,29,216,128,200,28,96,92,114,230,13,219,197,252,29,87,150,190,152,133,45,203,168,65,181]",
              "sol": "stringToBytes32(\"23,77,117,98,140,157,102,248,29,216,128,200,28,96,92,114,230,13,219,197,252,29,87,150,190,152,133,45,203,168,65,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[151,70,15,19,120,78,110,221,252,165,59,70,99,246,218,235,239,230,90,109,246,6,220,81,203,47,92,255,212,208,27,245]",
              "sol": "stringToBytes32(\"151,70,15,19,120,78,110,221,252,165,59,70,99,246,218,235,239,230,90,109,246,6,220,81,203,47,92,255,212,208,27,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[224,56,62,26,177,99,195,111,230,178,250,74,82,217,42,143,102,212,129,177,103,74,188,254,57,14,206,54,7,17,22,214]",
              "sol": "stringToBytes32(\"224,56,62,26,177,99,195,111,230,178,250,74,82,217,42,143,102,212,129,177,103,74,188,254,57,14,206,54,7,17,22,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[140,86,131,163,190,31,171,25,34,228,29,237,221,196,61,47,33,106,18,132,184,166,146,173,230,187,251,192,100,234,144,73]",
              "sol": "stringToBytes32(\"140,86,131,163,190,31,171,25,34,228,29,237,221,196,61,47,33,106,18,132,184,166,146,173,230,187,251,192,100,234,144,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[94,172,209,237,24,13,144,186,42,109,10,15,159,14,93,177,98,11,179,173,228,98,91,122,24,86,4,164,11,80,207,246]",
              "sol": "stringToBytes32(\"94,172,209,237,24,13,144,186,42,109,10,15,159,14,93,177,98,11,179,173,228,98,91,122,24,86,4,164,11,80,207,246\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[196,115,217,191,83,211,196,219,31,185,19,149,70,117,156,236,102,79,65,145,188,17,105,47,196,85,216,157,89,184,103,234]",
              "sol": "stringToBytes32(\"196,115,217,191,83,211,196,219,31,185,19,149,70,117,156,236,102,79,65,145,188,17,105,47,196,85,216,157,89,184,103,234\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.588ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[151,125,158,66,83,143,239,228,203,76,204,10,98,199,101,65,228,31,244,9,175,2,19,76,215,201,41,82,50,222,148,214]",
              "sol": "stringToBytes32(\"151,125,158,66,83,143,239,228,203,76,204,10,98,199,101,65,228,31,244,9,175,2,19,76,215,201,41,82,50,222,148,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"superuser\"",
                "sol": "\"superuser\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T19:36:18.588ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.588ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.589ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.589ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:36:18.589ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}