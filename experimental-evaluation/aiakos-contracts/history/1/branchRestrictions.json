,{
  "2020-11-10T04:10:33.839ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:10:39.773ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [27,254,95,181,127,204,235,221,2,93,203,209,253,175,185,168,159,247,2,235,234,63,221,14,48,14,65,87,168,94,22,209],\"approvalCounter\": 1337,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"27,254,95,181,127,204,235,221,2,93,203,209,253,175,185,168,159,247,2,235,234,63,221,14,48,14,65,87,168,94,22,209\"),1337,true,true)"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[31,63,85,19,8,123,73,17,102,207,30,123,176,100,73,75,88,88,241,205,96,120,85,7,122,217,92,166,84,54,61,187]",
              "sol": "stringToBytes32(\"31,63,85,19,8,123,73,17,102,207,30,123,176,100,73,75,88,88,241,205,96,120,85,7,122,217,92,166,84,54,61,187\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.774ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"minter\",\"sha256Hash\": [227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230],\"approvalCounter\": 65,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"minter\",stringToBytes32(\"227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230\"),65,true,true)"
            },
            {
              "js": "[227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230]",
              "sol": "stringToBytes32(\"227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"minter\",sha256Hash : [90,207,122,213,134,217,116,129,186,27,38,251,175,19,54,74,17,14,139,132,172,195,153,7,191,155,250,142,173,127,20,48],approvalCounter : 65,initialized : true,approved : true}",
                "sol": "Releases.Release(\"minter\",stringToBytes32(\"90,207,122,213,134,217,116,129,186,27,38,251,175,19,54,74,17,14,139,132,172,195,153,7,191,155,250,142,173,127,20,48\"),65,true,true)"
              },
              {
                "js": "[227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230]",
                "sol": "stringToBytes32(\"227,190,134,200,251,143,107,30,20,11,199,153,162,81,13,198,211,190,200,192,40,76,160,68,147,206,132,250,95,195,191,230\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:10:39.775ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [110,161,123,133,240,208,74,218,185,37,42,187,53,143,252,53,68,89,36,60,213,107,11,220,117,83,246,189,183,208,159,187],\"approvalCounter\": 3,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"110,161,123,133,240,208,74,218,185,37,42,187,53,143,252,53,68,89,36,60,213,107,11,220,117,83,246,189,183,208,159,187\"),3,true,false)"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"UsesExample\",sha256Hash : [110,161,123,133,240,208,74,218,185,37,42,187,53,143,252,53,68,89,36,60,213,107,11,220,117,83,246,189,183,208,159,187],approvalCounter : 3,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"110,161,123,133,240,208,74,218,185,37,42,187,53,143,252,53,68,89,36,60,213,107,11,220,117,83,246,189,183,208,159,187\"),3,true,true)"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"p7i8gw\",\"sha256Hash\": [254,183,150,127,10,243,140,109,34,76,51,88,165,193,164,129,192,214,163,94,105,241,79,186,48,176,60,147,35,152,126,158],\"approvalCounter\": 2014223714,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"p7i8gw\",stringToBytes32(\"254,183,150,127,10,243,140,109,34,76,51,88,165,193,164,129,192,214,163,94,105,241,79,186,48,176,60,147,35,152,126,158\"),2014223714,false,false)"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"p7i8gw\",sha256Hash : [254,183,150,127,10,243,140,109,34,76,51,88,165,193,164,129,192,214,163,94,105,241,79,186,48,176,60,147,35,152,126,158],approvalCounter : 2014223714,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"p7i8gw\",stringToBytes32(\"254,183,150,127,10,243,140,109,34,76,51,88,165,193,164,129,192,214,163,94,105,241,79,186,48,176,60,147,35,152,126,158\"),2014223714,false,true)"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:10:39.779ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:10:39.781ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[191,236,63,135,245,164,185,123,254,63,33,31,12,192,116,91,132,84,23,135,225,75,75,93,99,41,69,202,252,131,132,106]",
              "sol": "stringToBytes32(\"191,236,63,135,245,164,185,123,254,63,33,31,12,192,116,91,132,84,23,135,225,75,75,93,99,41,69,202,252,131,132,106\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[160,209,134,154,53,111,187,77,107,50,14,124,67,190,121,229,190,62,37,178,204,144,244,217,71,192,27,58,12,239,40,140]",
              "sol": "stringToBytes32(\"160,209,134,154,53,111,187,77,107,50,14,124,67,190,121,229,190,62,37,178,204,144,244,217,71,192,27,58,12,239,40,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[117,229,20,17,182,65,13,61,88,7,33,158,80,11,210,194,40,205,23,153,177,137,43,71,200,111,51,185,215,74,149,253]",
              "sol": "stringToBytes32(\"117,229,20,17,182,65,13,61,88,7,33,158,80,11,210,194,40,205,23,153,177,137,43,71,200,111,51,185,215,74,149,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[54,123,231,235,76,71,255,91,72,242,116,15,255,247,117,100,107,183,146,176,108,232,10,194,141,9,211,133,115,237,242,73]",
              "sol": "stringToBytes32(\"54,123,231,235,76,71,255,91,72,242,116,15,255,247,117,100,107,183,146,176,108,232,10,194,141,9,211,133,115,237,242,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[160,224,30,65,62,14,138,239,114,165,32,61,127,248,128,84,92,45,254,190,162,207,112,232,39,118,147,133,36,84,169,84]",
              "sol": "stringToBytes32(\"160,224,30,65,62,14,138,239,114,165,32,61,127,248,128,84,92,45,254,190,162,207,112,232,39,118,147,133,36,84,169,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[248,152,160,170,21,27,109,233,16,65,231,124,75,241,81,11,35,208,126,38,57,48,30,188,171,65,98,197,122,197,202,189]",
              "sol": "stringToBytes32(\"248,152,160,170,21,27,109,233,16,65,231,124,75,241,81,11,35,208,126,38,57,48,30,188,171,65,98,197,122,197,202,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.782ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[235,105,27,172,35,0,78,4,125,71,168,113,83,242,47,215,174,153,173,46,252,18,110,127,85,43,11,41,167,28,221,62]",
              "sol": "stringToBytes32(\"235,105,27,172,35,0,78,4,125,71,168,113,83,242,47,215,174,153,173,46,252,18,110,127,85,43,11,41,167,28,221,62\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"\\x19Ethereum Signed Message:\\n32\"",
                "sol": "\"\\x19Ethereum Signed Message:\\n32\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:10:39.783ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.784ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.784ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.784ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:10:39.784ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}