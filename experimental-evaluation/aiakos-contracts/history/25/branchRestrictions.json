,{
  "2020-11-12T16:01:54.042ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:02:00.040ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"bouncer\",\"sha256Hash\": [222,10,67,206,104,237,68,33,187,97,66,204,86,108,232,182,78,105,206,50,75,150,79,48,20,136,143,186,105,33,50,100],\"approvalCounter\": 5,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"222,10,67,206,104,237,68,33,187,97,66,204,86,108,232,182,78,105,206,50,75,150,79,48,20,136,143,186,105,33,50,100\"),5,false,false)"
            },
            {
              "js": "\"i2v32r\"",
              "sol": "\"i2v32r\""
            },
            {
              "js": "[150,33,107,25,43,19,161,155,121,109,6,18,207,101,164,10,23,232,243,63,76,101,135,188,177,34,30,240,86,235,42,231]",
              "sol": "stringToBytes32(\"150,33,107,25,43,19,161,155,121,109,6,18,207,101,164,10,23,232,243,63,76,101,135,188,177,34,30,240,86,235,42,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.041ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"whitelist\",\"sha256Hash\": [105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90],\"approvalCounter\": 1338,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90\"),1338,false,true)"
            },
            {
              "js": "[105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90]",
              "sol": "stringToBytes32(\"105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"whitelist\",sha256Hash : [247,19,160,117,4,84,242,122,173,114,18,46,192,115,251,82,6,229,90,195,105,168,187,249,203,63,194,12,232,122,75,143],approvalCounter : 1338,initialized : false,approved : true}",
                "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"247,19,160,117,4,84,242,122,173,114,18,46,192,115,251,82,6,229,90,195,105,168,187,249,203,63,194,12,232,122,75,143\"),1338,false,true)"
              },
              {
                "js": "[105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90]",
                "sol": "stringToBytes32(\"105,109,129,249,10,232,157,132,102,43,95,196,8,37,128,211,129,4,69,95,151,220,0,90,94,147,236,18,75,145,88,90\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:02:00.042ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [242,171,199,125,89,120,137,112,164,86,175,36,181,185,59,225,66,254,66,182,3,234,123,43,63,154,195,139,213,202,19,74],\"approvalCounter\": 1337,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"242,171,199,125,89,120,137,112,164,86,175,36,181,185,59,225,66,254,66,182,3,234,123,43,63,154,195,139,213,202,19,74\"),1337,false,false)"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"Example\",sha256Hash : [242,171,199,125,89,120,137,112,164,86,175,36,181,185,59,225,66,254,66,182,3,234,123,43,63,154,195,139,213,202,19,74],approvalCounter : 1337,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"Example\",stringToBytes32(\"242,171,199,125,89,120,137,112,164,86,175,36,181,185,59,225,66,254,66,182,3,234,123,43,63,154,195,139,213,202,19,74\"),1337,false,true)"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"i2v32r\",\"sha256Hash\": [171,37,53,91,145,61,23,86,125,176,113,50,87,8,39,90,4,43,139,7,86,166,127,133,232,239,70,71,229,20,121,101],\"approvalCounter\": 1,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"i2v32r\",stringToBytes32(\"171,37,53,91,145,61,23,86,125,176,113,50,87,8,39,90,4,43,139,7,86,166,127,133,232,239,70,71,229,20,121,101\"),1,true,false)"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"i2v32r\",sha256Hash : [171,37,53,91,145,61,23,86,125,176,113,50,87,8,39,90,4,43,139,7,86,166,127,133,232,239,70,71,229,20,121,101],approvalCounter : 1,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"i2v32r\",stringToBytes32(\"171,37,53,91,145,61,23,86,125,176,113,50,87,8,39,90,4,43,139,7,86,166,127,133,232,239,70,71,229,20,121,101\"),1,true,true)"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:02:00.044ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:02:00.046ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"i2v32r\"",
              "sol": "\"i2v32r\""
            },
            {
              "js": "[116,174,51,94,2,221,204,107,241,37,26,184,127,8,121,39,81,218,151,127,23,154,198,245,41,237,140,102,11,32,40,132]",
              "sol": "stringToBytes32(\"116,174,51,94,2,221,204,107,241,37,26,184,127,8,121,39,81,218,151,127,23,154,198,245,41,237,140,102,11,32,40,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[175,218,1,49,226,203,229,83,105,15,93,220,160,212,90,168,234,192,21,152,13,233,231,10,139,105,66,212,255,232,136,103]",
              "sol": "stringToBytes32(\"175,218,1,49,226,203,229,83,105,15,93,220,160,212,90,168,234,192,21,152,13,233,231,10,139,105,66,212,255,232,136,103\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[184,161,134,218,72,237,98,18,50,212,50,179,164,57,127,151,25,26,179,10,79,180,215,79,147,225,150,212,147,14,85,127]",
              "sol": "stringToBytes32(\"184,161,134,218,72,237,98,18,50,212,50,179,164,57,127,151,25,26,179,10,79,180,215,79,147,225,150,212,147,14,85,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "[86,214,160,149,240,113,217,135,48,87,233,215,181,237,172,228,11,45,49,15,28,7,207,33,206,16,33,145,217,139,92,90]",
              "sol": "stringToBytes32(\"86,214,160,149,240,113,217,135,48,87,233,215,181,237,172,228,11,45,49,15,28,7,207,33,206,16,33,145,217,139,92,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[84,131,145,91,79,232,120,173,95,217,21,132,176,66,46,108,1,207,249,33,146,38,255,169,76,172,126,218,172,29,245,186]",
              "sol": "stringToBytes32(\"84,131,145,91,79,232,120,173,95,217,21,132,176,66,46,108,1,207,249,33,146,38,255,169,76,172,126,218,172,29,245,186\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[13,244,209,188,163,10,23,67,105,70,231,158,100,223,145,201,71,109,36,189,200,105,52,125,237,24,43,98,206,42,109,188]",
              "sol": "stringToBytes32(\"13,244,209,188,163,10,23,67,105,70,231,158,100,223,145,201,71,109,36,189,200,105,52,125,237,24,43,98,206,42,109,188\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.047ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[2,181,154,173,139,126,195,139,98,231,245,237,231,56,118,97,156,57,221,241,163,104,246,198,89,82,121,211,89,148,154,71]",
              "sol": "stringToBytes32(\"2,181,154,173,139,126,195,139,98,231,245,237,231,56,118,97,156,57,221,241,163,104,246,198,89,82,121,211,89,148,154,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"IsLibrary\"",
                "sol": "\"IsLibrary\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:02:00.047ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.048ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.048ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.048ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:02:00.048ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}