,{
  "2020-11-10T02:01:19.947ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:01:26.062ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"minter\",\"sha256Hash\": [253,143,170,83,206,38,170,231,119,54,234,9,134,119,127,151,119,241,89,192,244,47,62,159,178,245,204,150,74,79,213,13],\"approvalCounter\": 0,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"minter\",stringToBytes32(\"253,143,170,83,206,38,170,231,119,54,234,9,134,119,127,151,119,241,89,192,244,47,62,159,178,245,204,150,74,79,213,13\"),0,false,true)"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[246,228,62,105,6,155,122,100,77,47,130,43,161,194,175,218,137,157,99,197,117,168,134,125,202,3,17,249,74,110,202,162]",
              "sol": "stringToBytes32(\"246,228,62,105,6,155,122,100,77,47,130,43,161,194,175,218,137,157,99,197,117,168,134,125,202,3,17,249,74,110,202,162\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.066ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2],\"approvalCounter\": 257,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2\"),257,false,true)"
            },
            {
              "js": "[148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2]",
              "sol": "stringToBytes32(\"148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"ERC1820_ACCEPT_MAGIC\",sha256Hash : [26,30,200,78,93,244,236,240,112,32,217,205,231,170,119,90,92,215,161,143,87,217,12,198,247,193,182,81,188,26,36,2],approvalCounter : 257,initialized : false,approved : true}",
                "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"26,30,200,78,93,244,236,240,112,32,217,205,231,170,119,90,92,215,161,143,87,217,12,198,247,193,182,81,188,26,36,2\"),257,false,true)"
              },
              {
                "js": "[148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2]",
                "sol": "stringToBytes32(\"148,97,126,134,141,181,0,61,26,199,209,227,40,0,192,34,217,85,47,148,27,156,209,111,79,129,134,53,187,191,184,2\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:01:26.069ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"initialized\",\"sha256Hash\": [191,43,96,203,196,122,252,95,214,42,137,145,17,88,61,227,201,254,210,191,92,184,40,138,159,147,77,42,226,81,232,111],\"approvalCounter\": 65,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"initialized\",stringToBytes32(\"191,43,96,203,196,122,252,95,214,42,137,145,17,88,61,227,201,254,210,191,92,184,40,138,159,147,77,42,226,81,232,111\"),65,false,false)"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"initialized\",sha256Hash : [191,43,96,203,196,122,252,95,214,42,137,145,17,88,61,227,201,254,210,191,92,184,40,138,159,147,77,42,226,81,232,111],approvalCounter : 65,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"initialized\",stringToBytes32(\"191,43,96,203,196,122,252,95,214,42,137,145,17,88,61,227,201,254,210,191,92,184,40,138,159,147,77,42,226,81,232,111\"),65,false,true)"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"PayableExample\",\"sha256Hash\": [130,62,166,18,118,117,30,147,220,31,8,20,159,188,201,158,185,38,115,255,53,48,164,219,230,27,56,48,235,218,84,54],\"approvalCounter\": 29,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"130,62,166,18,118,117,30,147,220,31,8,20,159,188,201,158,185,38,115,255,53,48,164,219,230,27,56,48,235,218,84,54\"),29,true,false)"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"PayableExample\",sha256Hash : [130,62,166,18,118,117,30,147,220,31,8,20,159,188,201,158,185,38,115,255,53,48,164,219,230,27,56,48,235,218,84,54],approvalCounter : 29,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"130,62,166,18,118,117,30,147,220,31,8,20,159,188,201,158,185,38,115,255,53,48,164,219,230,27,56,48,235,218,84,54\"),29,true,true)"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:01:26.075ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:01:26.078ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[189,119,30,51,183,103,9,17,201,244,98,92,123,99,118,250,87,245,233,170,203,33,225,24,173,164,253,189,89,27,56,107]",
              "sol": "stringToBytes32(\"189,119,30,51,183,103,9,17,201,244,98,92,123,99,118,250,87,245,233,170,203,33,225,24,173,164,253,189,89,27,56,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[82,107,227,176,231,1,248,147,205,10,131,108,58,128,42,101,5,231,34,20,14,92,22,61,208,202,145,134,4,217,171,168]",
              "sol": "stringToBytes32(\"82,107,227,176,231,1,248,147,205,10,131,108,58,128,42,101,5,231,34,20,14,92,22,61,208,202,145,134,4,217,171,168\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[34,95,118,37,93,150,221,185,163,195,23,17,171,75,87,112,165,8,159,21,230,227,195,99,98,70,49,71,108,142,118,103]",
              "sol": "stringToBytes32(\"34,95,118,37,93,150,221,185,163,195,23,17,171,75,87,112,165,8,159,21,230,227,195,99,98,70,49,71,108,142,118,103\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[165,75,214,114,220,233,77,148,216,151,100,91,101,104,135,166,220,140,138,15,218,219,219,102,83,237,94,89,192,255,14,93]",
              "sol": "stringToBytes32(\"165,75,214,114,220,233,77,148,216,151,100,91,101,104,135,166,220,140,138,15,218,219,219,102,83,237,94,89,192,255,14,93\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[91,216,57,83,252,68,55,63,124,8,68,127,155,220,23,211,17,51,192,178,126,153,232,160,168,111,38,89,242,99,240,111]",
              "sol": "stringToBytes32(\"91,216,57,83,252,68,55,63,124,8,68,127,155,220,23,211,17,51,192,178,126,153,232,160,168,111,38,89,242,99,240,111\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[175,192,244,54,216,26,95,243,112,5,62,222,232,186,168,81,61,18,10,239,157,247,94,181,135,201,91,235,181,170,252,27]",
              "sol": "stringToBytes32(\"175,192,244,54,216,26,95,243,112,5,62,222,232,186,168,81,61,18,10,239,157,247,94,181,135,201,91,235,181,170,252,27\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.080ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[43,51,92,21,158,32,92,168,220,170,66,245,168,47,18,188,173,239,238,113,84,84,224,124,54,183,178,71,64,149,69,61]",
              "sol": "stringToBytes32(\"43,51,92,21,158,32,92,168,220,170,66,245,168,47,18,188,173,239,238,113,84,84,224,124,54,183,178,71,64,149,69,61\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"initialized\"",
                "sol": "\"initialized\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:01:26.081ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.081ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.081ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.082ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:01:26.082ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}