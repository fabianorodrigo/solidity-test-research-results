,{
  "2020-11-10T17:28:18.283ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:28:24.167ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"IsLibrary\",\"sha256Hash\": [108,143,215,179,23,97,33,176,160,214,36,241,238,246,63,182,103,8,98,133,55,246,110,19,39,96,15,127,236,61,66,81],\"approvalCounter\": 96,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"108,143,215,179,23,97,33,176,160,214,36,241,238,246,63,182,103,8,98,133,55,246,110,19,39,96,15,127,236,61,66,81\"),96,true,true)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[106,193,227,216,248,17,94,0,82,79,41,173,244,190,194,168,196,197,133,89,93,251,64,55,12,143,165,216,155,171,41,243]",
              "sol": "stringToBytes32(\"106,193,227,216,248,17,94,0,82,79,41,173,244,190,194,168,196,197,133,89,93,251,64,55,12,143,165,216,155,171,41,243\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.168ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83],\"approvalCounter\": 10001,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83\"),10001,true,true)"
            },
            {
              "js": "[254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83]",
              "sol": "stringToBytes32(\"254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"Example\",sha256Hash : [196,227,209,208,76,75,25,59,238,214,71,152,224,19,255,138,209,6,126,28,220,107,161,194,35,118,38,7,101,120,51,155],approvalCounter : 10001,initialized : true,approved : true}",
                "sol": "Releases.Release(\"Example\",stringToBytes32(\"196,227,209,208,76,75,25,59,238,214,71,152,224,19,255,138,209,6,126,28,220,107,161,194,35,118,38,7,101,120,51,155\"),10001,true,true)"
              },
              {
                "js": "[254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83]",
                "sol": "stringToBytes32(\"254,128,208,156,107,164,188,49,171,25,26,38,161,210,100,193,147,33,65,244,200,242,53,115,95,73,179,36,157,80,189,83\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:28:24.170ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [50,185,43,138,29,222,82,42,202,104,76,248,110,10,33,133,255,126,195,48,63,62,31,202,95,64,53,155,44,97,92,60],\"approvalCounter\": 1532892063,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"50,185,43,138,29,222,82,42,202,104,76,248,110,10,33,133,255,126,195,48,63,62,31,202,95,64,53,155,44,97,92,60\"),1532892063,false,false)"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"ERC1820_ACCEPT_MAGIC\",sha256Hash : [50,185,43,138,29,222,82,42,202,104,76,248,110,10,33,133,255,126,195,48,63,62,31,202,95,64,53,155,44,97,92,60],approvalCounter : 1532892063,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"50,185,43,138,29,222,82,42,202,104,76,248,110,10,33,133,255,126,195,48,63,62,31,202,95,64,53,155,44,97,92,60\"),1532892063,false,true)"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"IsLibrary\",\"sha256Hash\": [40,167,194,235,176,122,133,143,10,192,28,25,196,132,160,248,208,107,165,171,182,206,253,247,157,249,96,50,140,66,112,254],\"approvalCounter\": 2014223714,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"40,167,194,235,176,122,133,143,10,192,28,25,196,132,160,248,208,107,165,171,182,206,253,247,157,249,96,50,140,66,112,254\"),2014223714,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"IsLibrary\",sha256Hash : [40,167,194,235,176,122,133,143,10,192,28,25,196,132,160,248,208,107,165,171,182,206,253,247,157,249,96,50,140,66,112,254],approvalCounter : 2014223714,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"40,167,194,235,176,122,133,143,10,192,28,25,196,132,160,248,208,107,165,171,182,206,253,247,157,249,96,50,140,66,112,254\"),2014223714,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4038714810",
                "sol": "4038714810"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:28:24.172ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:28:24.173ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"y1j7eb\"",
              "sol": "\"y1j7eb\""
            },
            {
              "js": "[6,252,102,210,60,117,160,209,104,63,231,180,65,197,68,139,51,3,202,174,107,247,245,178,139,241,34,183,222,160,9,55]",
              "sol": "stringToBytes32(\"6,252,102,210,60,117,160,209,104,63,231,180,65,197,68,139,51,3,202,174,107,247,245,178,139,241,34,183,222,160,9,55\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "[27,71,6,49,102,220,49,65,103,141,54,51,71,89,112,47,49,222,128,184,180,103,16,59,182,249,226,115,68,243,148,193]",
              "sol": "stringToBytes32(\"27,71,6,49,102,220,49,65,103,141,54,51,71,89,112,47,49,222,128,184,180,103,16,59,182,249,226,115,68,243,148,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[176,49,194,170,212,161,252,20,99,80,138,84,136,219,87,176,135,140,17,20,95,70,139,229,154,117,114,70,144,238,90,135]",
              "sol": "stringToBytes32(\"176,49,194,170,212,161,252,20,99,80,138,84,136,219,87,176,135,140,17,20,95,70,139,229,154,117,114,70,144,238,90,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[101,130,214,201,248,247,180,45,125,68,34,148,0,192,141,8,180,63,182,227,251,143,130,186,131,103,140,203,187,96,81,113]",
              "sol": "stringToBytes32(\"101,130,214,201,248,247,180,45,125,68,34,148,0,192,141,8,180,63,182,227,251,143,130,186,131,103,140,203,187,96,81,113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[141,172,95,46,101,208,34,1,198,116,109,42,238,208,205,100,92,235,102,120,149,150,70,131,81,126,99,221,122,133,171,53]",
              "sol": "stringToBytes32(\"141,172,95,46,101,208,34,1,198,116,109,42,238,208,205,100,92,235,102,120,149,150,70,131,81,126,99,221,122,133,171,53\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[128,152,180,95,134,21,205,240,120,246,244,184,153,252,91,158,203,149,38,255,137,252,97,151,127,193,80,77,231,107,167,82]",
              "sol": "stringToBytes32(\"128,152,180,95,134,21,205,240,120,246,244,184,153,252,91,158,203,149,38,255,137,252,97,151,127,193,80,77,231,107,167,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.174ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[88,23,46,87,53,185,220,74,89,180,119,147,196,108,97,243,234,214,132,44,52,25,240,104,38,82,192,158,125,58,184,201]",
              "sol": "stringToBytes32(\"88,23,46,87,53,185,220,74,89,180,119,147,196,108,97,243,234,214,132,44,52,25,240,104,38,82,192,158,125,58,184,201\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"bouncer\"",
                "sol": "\"bouncer\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:28:24.175ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.175ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.176ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.176ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:28:24.176ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}