,{
  "2020-11-12T08:57:29.123ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:57:34.903ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [77,130,208,158,107,62,89,222,243,144,174,216,103,172,36,229,237,205,164,131,249,75,3,32,67,161,251,139,222,34,255,228],\"approvalCounter\": 256,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"77,130,208,158,107,62,89,222,243,144,174,216,103,172,36,229,237,205,164,131,249,75,3,32,67,161,251,139,222,34,255,228\"),256,true,false)"
            },
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[24,84,103,101,203,251,100,52,24,74,200,12,161,184,165,239,56,222,62,249,126,175,12,219,116,54,36,215,240,196,170,65]",
              "sol": "stringToBytes32(\"24,84,103,101,203,251,100,52,24,74,200,12,161,184,165,239,56,222,62,249,126,175,12,219,116,54,36,215,240,196,170,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.904ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"\\x19Ethereum Signed Message:\\n32\",\"sha256Hash\": [17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72],\"approvalCounter\": 96,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\\n32\",stringToBytes32(\"17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72\"),96,true,true)"
            },
            {
              "js": "[17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72]",
              "sol": "stringToBytes32(\"17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"\\x19Ethereum Signed Message:\n32\",sha256Hash : [63,225,243,92,196,255,168,207,68,17,111,29,168,125,61,200,248,91,85,235,23,134,236,164,130,47,190,153,231,186,203,132],approvalCounter : 96,initialized : true,approved : true}",
                "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\n32\",stringToBytes32(\"63,225,243,92,196,255,168,207,68,17,111,29,168,125,61,200,248,91,85,235,23,134,236,164,130,47,190,153,231,186,203,132\"),96,true,true)"
              },
              {
                "js": "[17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72]",
                "sol": "stringToBytes32(\"17,51,188,200,101,78,147,167,117,236,2,237,77,101,27,162,144,164,169,91,205,244,120,207,248,144,105,119,101,44,191,72\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:57:34.905ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [46,168,134,231,41,160,49,22,54,21,127,156,133,115,77,93,15,242,158,171,185,190,112,233,68,149,43,104,164,193,219,227],\"approvalCounter\": 254,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"46,168,134,231,41,160,49,22,54,21,127,156,133,115,77,93,15,242,158,171,185,190,112,233,68,149,43,104,164,193,219,227\"),254,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"ERC1820_ACCEPT_MAGIC\",sha256Hash : [46,168,134,231,41,160,49,22,54,21,127,156,133,115,77,93,15,242,158,171,185,190,112,233,68,149,43,104,164,193,219,227],approvalCounter : 254,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"46,168,134,231,41,160,49,22,54,21,127,156,133,115,77,93,15,242,158,171,185,190,112,233,68,149,43,104,164,193,219,227\"),254,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [14,99,146,36,130,226,192,238,99,76,190,69,19,200,118,122,147,100,242,155,252,200,158,192,40,198,126,69,239,154,59,250],\"approvalCounter\": 19,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"14,99,146,36,130,226,192,238,99,76,190,69,19,200,118,122,147,100,242,155,252,200,158,192,40,198,126,69,239,154,59,250\"),19,true,false)"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"ERC1820_ACCEPT_MAGIC\",sha256Hash : [14,99,146,36,130,226,192,238,99,76,190,69,19,200,118,122,147,100,242,155,252,200,158,192,40,198,126,69,239,154,59,250],approvalCounter : 19,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"14,99,146,36,130,226,192,238,99,76,190,69,19,200,118,122,147,100,242,155,252,200,158,192,40,198,126,69,239,154,59,250\"),19,true,true)"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:57:34.907ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:57:34.909ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[167,41,114,0,242,86,239,47,33,86,145,58,9,190,79,4,42,192,12,196,81,119,54,155,8,241,118,182,9,155,54,133]",
              "sol": "stringToBytes32(\"167,41,114,0,242,86,239,47,33,86,145,58,9,190,79,4,42,192,12,196,81,119,54,155,8,241,118,182,9,155,54,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[53,119,203,169,178,245,58,208,109,164,82,48,42,126,186,16,152,64,11,15,225,202,246,232,75,205,37,31,173,249,221,137]",
              "sol": "stringToBytes32(\"53,119,203,169,178,245,58,208,109,164,82,48,42,126,186,16,152,64,11,15,225,202,246,232,75,205,37,31,173,249,221,137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[150,66,168,207,193,5,43,155,191,250,147,220,95,142,80,120,170,40,160,148,62,206,38,29,5,53,165,111,34,156,114,22]",
              "sol": "stringToBytes32(\"150,66,168,207,193,5,43,155,191,250,147,220,95,142,80,120,170,40,160,148,62,206,38,29,5,53,165,111,34,156,114,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[128,228,189,173,15,71,58,72,59,60,106,66,220,83,234,248,141,32,165,145,67,93,46,220,83,32,247,73,5,149,35,25]",
              "sol": "stringToBytes32(\"128,228,189,173,15,71,58,72,59,60,106,66,220,83,234,248,141,32,165,145,67,93,46,220,83,32,247,73,5,149,35,25\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[252,237,107,162,59,106,150,163,103,250,89,145,129,239,185,123,114,179,167,81,182,239,109,208,183,0,69,254,56,9,125,73]",
              "sol": "stringToBytes32(\"252,237,107,162,59,106,150,163,103,250,89,145,129,239,185,123,114,179,167,81,182,239,109,208,183,0,69,254,56,9,125,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[147,147,175,125,13,147,76,116,242,219,125,134,27,35,103,201,127,49,206,241,130,42,155,96,0,35,204,41,21,130,115,50]",
              "sol": "stringToBytes32(\"147,147,175,125,13,147,76,116,242,219,125,134,27,35,103,201,127,49,206,241,130,42,155,96,0,35,204,41,21,130,115,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.910ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[131,71,37,12,59,127,253,251,86,128,134,144,144,200,70,142,56,168,25,120,84,106,75,55,142,214,38,73,137,184,109,69]",
              "sol": "stringToBytes32(\"131,71,37,12,59,127,253,251,86,128,134,144,144,200,70,142,56,168,25,120,84,106,75,55,142,214,38,73,137,184,109,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"minter\"",
                "sol": "\"minter\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:57:34.911ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.911ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.911ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.911ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:57:34.912ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}