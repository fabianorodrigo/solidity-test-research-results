,{
  "2020-11-11T00:11:23.614ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:11:29.832ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [46,78,212,216,128,144,238,209,78,218,54,187,169,56,52,205,207,186,112,201,150,5,43,57,55,200,80,134,82,123,158,34],\"approvalCounter\": 18,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"46,78,212,216,128,144,238,209,78,218,54,187,169,56,52,205,207,186,112,201,150,5,43,57,55,200,80,134,82,123,158,34\"),18,true,true)"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[219,168,88,125,162,172,134,48,207,92,70,39,98,100,36,176,49,111,1,80,215,94,135,217,65,80,210,203,250,25,92,88]",
              "sol": "stringToBytes32(\"219,168,88,125,162,172,134,48,207,92,70,39,98,100,36,176,49,111,1,80,215,94,135,217,65,80,210,203,250,25,92,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.835ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"7367e\",\"sha256Hash\": [136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188],\"approvalCounter\": 28,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"7367e\",stringToBytes32(\"136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188\"),28,false,true)"
            },
            {
              "js": "[136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188]",
              "sol": "stringToBytes32(\"136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"7367e\",sha256Hash : [240,232,141,244,51,24,44,230,36,227,94,250,237,159,148,186,102,243,183,21,35,216,238,30,179,110,105,33,62,172,163,170],approvalCounter : 28,initialized : false,approved : true}",
                "sol": "Releases.Release(\"7367e\",stringToBytes32(\"240,232,141,244,51,24,44,230,36,227,94,250,237,159,148,186,102,243,183,21,35,216,238,30,179,110,105,33,62,172,163,170\"),28,false,true)"
              },
              {
                "js": "[136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188]",
                "sol": "stringToBytes32(\"136,2,120,121,63,117,231,78,106,99,181,208,243,5,60,50,29,126,65,227,159,192,148,53,162,195,101,101,142,50,183,188\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:11:29.836ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [168,175,31,244,195,109,140,25,33,185,141,213,178,16,222,35,16,100,50,82,236,25,158,57,46,58,218,234,88,2,27,182],\"approvalCounter\": 27,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"168,175,31,244,195,109,140,25,33,185,141,213,178,16,222,35,16,100,50,82,236,25,158,57,46,58,218,234,88,2,27,182\"),27,true,false)"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [168,175,31,244,195,109,140,25,33,185,141,213,178,16,222,35,16,100,50,82,236,25,158,57,46,58,218,234,88,2,27,182],approvalCounter : 27,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"168,175,31,244,195,109,140,25,33,185,141,213,178,16,222,35,16,100,50,82,236,25,158,57,46,58,218,234,88,2,27,182\"),27,true,true)"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"bouncer\",\"sha256Hash\": [229,240,68,73,239,62,159,167,23,117,226,49,167,108,29,84,43,114,224,205,7,22,70,145,185,84,35,135,58,170,62,29],\"approvalCounter\": 2014223715,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"229,240,68,73,239,62,159,167,23,117,226,49,167,108,29,84,43,114,224,205,7,22,70,145,185,84,35,135,58,170,62,29\"),2014223715,true,false)"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"bouncer\",sha256Hash : [229,240,68,73,239,62,159,167,23,117,226,49,167,108,29,84,43,114,224,205,7,22,70,145,185,84,35,135,58,170,62,29],approvalCounter : 2014223715,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"229,240,68,73,239,62,159,167,23,117,226,49,167,108,29,84,43,114,224,205,7,22,70,145,185,84,35,135,58,170,62,29\"),2014223715,true,true)"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:11:29.839ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:11:29.842ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[64,41,85,133,125,85,98,77,188,135,191,167,76,115,163,49,125,123,112,158,100,247,25,148,204,219,155,44,84,79,147,254]",
              "sol": "stringToBytes32(\"64,41,85,133,125,85,98,77,188,135,191,167,76,115,163,49,125,123,112,158,100,247,25,148,204,219,155,44,84,79,147,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"7367e\"",
              "sol": "\"7367e\""
            },
            {
              "js": "[51,141,11,6,45,8,147,164,237,233,195,103,152,192,140,97,42,45,12,4,245,100,125,177,43,129,99,188,151,219,148,163]",
              "sol": "stringToBytes32(\"51,141,11,6,45,8,147,164,237,233,195,103,152,192,140,97,42,45,12,4,245,100,125,177,43,129,99,188,151,219,148,163\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[59,10,147,19,1,135,36,123,219,162,120,211,173,212,92,190,193,235,84,182,206,58,43,186,103,130,10,203,24,108,24,92]",
              "sol": "stringToBytes32(\"59,10,147,19,1,135,36,123,219,162,120,211,173,212,92,190,193,235,84,182,206,58,43,186,103,130,10,203,24,108,24,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[112,217,44,35,28,230,27,69,126,188,48,211,202,219,38,5,4,122,146,223,203,57,115,234,45,127,197,234,84,87,138,50]",
              "sol": "stringToBytes32(\"112,217,44,35,28,230,27,69,126,188,48,211,202,219,38,5,4,122,146,223,203,57,115,234,45,127,197,234,84,87,138,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[209,7,11,96,19,75,33,205,150,49,57,240,211,28,44,54,250,75,161,202,45,14,170,98,88,107,229,40,197,183,10,133]",
              "sol": "stringToBytes32(\"209,7,11,96,19,75,33,205,150,49,57,240,211,28,44,54,250,75,161,202,45,14,170,98,88,107,229,40,197,183,10,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"7367e\"",
              "sol": "\"7367e\""
            },
            {
              "js": "[31,161,181,134,12,166,197,210,215,93,229,227,236,58,218,2,193,187,213,135,241,242,199,37,2,38,52,51,65,141,216,175]",
              "sol": "stringToBytes32(\"31,161,181,134,12,166,197,210,215,93,229,227,236,58,218,2,193,187,213,135,241,242,199,37,2,38,52,51,65,141,216,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.844ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[192,118,29,156,61,177,120,230,158,72,150,178,82,232,63,116,253,221,66,137,22,240,65,44,126,48,179,195,7,252,167,98]",
              "sol": "stringToBytes32(\"192,118,29,156,61,177,120,230,158,72,150,178,82,232,63,116,253,221,66,137,22,240,65,44,126,48,179,195,7,252,167,98\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"\\x19Ethereum Signed Message:\\n32\"",
                "sol": "\"\\x19Ethereum Signed Message:\\n32\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T00:11:29.845ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.845ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.846ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.847ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T00:11:29.847ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}