,{
  "2020-11-11T15:34:21.764ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:34:28.315ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [75,6,159,152,234,252,73,189,168,72,44,10,108,142,237,182,252,206,11,59,36,19,188,114,89,141,115,252,103,209,155,249],\"approvalCounter\": 28,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"75,6,159,152,234,252,73,189,168,72,44,10,108,142,237,182,252,206,11,59,36,19,188,114,89,141,115,252,103,209,155,249\"),28,false,true)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[63,16,44,35,80,16,141,6,142,4,140,240,83,44,11,85,138,145,11,186,128,157,159,68,240,134,187,160,23,139,204,95]",
              "sol": "stringToBytes32(\"63,16,44,35,80,16,141,6,142,4,140,240,83,44,11,85,138,145,11,186,128,157,159,68,240,134,187,160,23,139,204,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.319ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201],\"approvalCounter\": 2014223715,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201\"),2014223715,true,false)"
            },
            {
              "js": "[108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201]",
              "sol": "stringToBytes32(\"108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [131,10,107,32,29,78,80,132,191,54,149,107,47,251,164,156,144,170,117,23,91,175,12,46,1,33,180,148,66,175,32,240],approvalCounter : 2014223715,initialized : true,approved : false}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"131,10,107,32,29,78,80,132,191,54,149,107,47,251,164,156,144,170,117,23,91,175,12,46,1,33,180,148,66,175,32,240\"),2014223715,true,false)"
              },
              {
                "js": "[108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201]",
                "sol": "stringToBytes32(\"108,186,111,147,126,64,221,26,216,182,9,132,113,131,24,248,49,142,85,140,31,37,193,20,233,6,57,214,25,234,189,201\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:34:28.323ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [33,6,199,225,148,49,107,43,49,93,0,52,27,48,6,204,253,34,173,106,135,52,62,157,35,141,235,30,74,216,199,175],\"approvalCounter\": 96,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"33,6,199,225,148,49,107,43,49,93,0,52,27,48,6,204,253,34,173,106,135,52,62,157,35,141,235,30,74,216,199,175\"),96,false,false)"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"UsesExample\",sha256Hash : [33,6,199,225,148,49,107,43,49,93,0,52,27,48,6,204,253,34,173,106,135,52,62,157,35,141,235,30,74,216,199,175],approvalCounter : 96,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"33,6,199,225,148,49,107,43,49,93,0,52,27,48,6,204,253,34,173,106,135,52,62,157,35,141,235,30,74,216,199,175\"),96,false,true)"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [90,236,186,52,30,151,196,214,250,221,216,118,16,36,220,65,248,171,150,60,166,151,23,219,212,200,24,2,195,12,201,209],\"approvalCounter\": 64,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"90,236,186,52,30,151,196,214,250,221,216,118,16,36,220,65,248,171,150,60,166,151,23,219,212,200,24,2,195,12,201,209\"),64,false,false)"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"UsesExample\",sha256Hash : [90,236,186,52,30,151,196,214,250,221,216,118,16,36,220,65,248,171,150,60,166,151,23,219,212,200,24,2,195,12,201,209],approvalCounter : 64,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"90,236,186,52,30,151,196,214,250,221,216,118,16,36,220,65,248,171,150,60,166,151,23,219,212,200,24,2,195,12,201,209\"),64,false,true)"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:34:28.330ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:34:28.333ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[45,165,44,194,220,190,125,16,95,226,106,215,134,214,229,160,2,48,159,195,19,94,117,65,90,65,38,154,227,62,55,144]",
              "sol": "stringToBytes32(\"45,165,44,194,220,190,125,16,95,226,106,215,134,214,229,160,2,48,159,195,19,94,117,65,90,65,38,154,227,62,55,144\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[243,92,217,130,54,117,197,173,217,238,140,43,43,193,33,108,194,61,143,28,222,126,19,223,95,215,246,81,246,141,155,96]",
              "sol": "stringToBytes32(\"243,92,217,130,54,117,197,173,217,238,140,43,43,193,33,108,194,61,143,28,222,126,19,223,95,215,246,81,246,141,155,96\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[184,185,88,94,255,205,83,150,136,94,179,113,46,41,191,184,152,173,76,167,0,173,200,90,98,25,194,126,86,0,229,113]",
              "sol": "stringToBytes32(\"184,185,88,94,255,205,83,150,136,94,179,113,46,41,191,184,152,173,76,167,0,173,200,90,98,25,194,126,86,0,229,113\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[182,215,144,132,159,217,69,146,157,64,245,30,183,23,83,118,102,244,200,154,34,219,62,231,253,89,71,120,133,221,171,165]",
              "sol": "stringToBytes32(\"182,215,144,132,159,217,69,146,157,64,245,30,183,23,83,118,102,244,200,154,34,219,62,231,253,89,71,120,133,221,171,165\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[140,29,138,18,128,179,88,83,174,217,236,140,57,249,137,249,5,60,43,86,227,135,117,36,68,96,114,158,139,92,38,32]",
              "sol": "stringToBytes32(\"140,29,138,18,128,179,88,83,174,217,236,140,57,249,137,249,5,60,43,86,227,135,117,36,68,96,114,158,139,92,38,32\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[31,58,221,216,240,161,164,241,49,74,75,173,203,164,184,154,213,203,98,37,42,170,81,244,147,36,157,226,20,36,202,1]",
              "sol": "stringToBytes32(\"31,58,221,216,240,161,164,241,49,74,75,173,203,164,184,154,213,203,98,37,42,170,81,244,147,36,157,226,20,36,202,1\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.335ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[223,85,131,94,5,126,2,68,132,32,51,191,241,119,200,242,151,159,14,142,62,85,164,156,41,78,234,203,30,47,1,207]",
              "sol": "stringToBytes32(\"223,85,131,94,5,126,2,68,132,32,51,191,241,119,200,242,151,159,14,142,62,85,164,156,41,78,234,203,30,47,1,207\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"minter\"",
                "sol": "\"minter\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:34:28.336ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.337ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.337ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.337ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:34:28.338ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}