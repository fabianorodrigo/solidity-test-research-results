,{
  "2020-11-10T07:27:08.965ZControlled.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:12.826ZMiniMeToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "contractMiniMeTokenFactory.address",
              "sol": "contractMiniMeTokenFactory.address"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.871ZMiniMeTokenFactory.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.872ZControlled.changeController": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute changeController(address) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail changeController(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.874ZMiniMeToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.877ZMiniMeToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-156",
          "restrictions": [
            "msg.sender != controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender!=controller,transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.sender == controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender==controller,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.883ZMiniMeToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.884ZMiniMeToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "228-230",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall==true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall!=true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.888ZMiniMeToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.888ZMiniMeToken.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[217,152,50,53,132,52,119,208,59,182,228,0,84,216,93,3,187,29,9,111,87,162,77,173,224,134,207,82,217,151,114,203]",
              "sol": "abi.encode(\"217,152,50,53,132,52,119,208,59,182,228,0,84,216,93,3,187,29,9,111,87,162,77,173,224,134,207,82,217,151,114,203\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.889ZMiniMeToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.889ZMiniMeToken.balanceOfAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOfAt(address,uint)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.892ZMiniMeToken.totalSupplyAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupplyAt(uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.892ZMiniMeToken.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "351-351",
          "restrictions": [
            "_snapshotBlock == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock==0",
          "parameters": [
            {
              "js": "\"df1xw8\"",
              "sol": "\"df1xw8\""
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_snapshotBlock != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock!=0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.893ZMiniMeToken.generateTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute generateTokens(address,uint) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail generateTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.893ZMiniMeToken.destroyTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute destroyTokens(address,uint) WHEN msg.sender==controller,curTotalSupply>=_amount,previousBalanceFrom>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail destroyTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.894ZMiniMeToken.enableTransfers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute enableTransfers(bool) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail enableTransfers(bool) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.895ZMiniMeToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.895ZMiniMeToken.claimTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "498-501",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.898ZProxyMiniMeToken.testdoTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "170-173",
          "restrictions": [
            "_amount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount==0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "187-189",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall!=true,_amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:27:16.904ZProxyMiniMeToken.testgetValueAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "426-426",
          "restrictions": [
            "checkpoints.length == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length==0",
          "parameters": [
            {
              "js": "[]",
              "sol": "[]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "checkpoints.length != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length!=0",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 65,\"value\": 5},{\"fromBlock\": 1532892064,\"value\": 1532892062},{\"fromBlock\": 4,\"value\": 5},{\"fromBlock\": 65,\"value\": 2},{\"fromBlock\": 2014223716,\"value\": 26},{\"fromBlock\": 65,\"value\": 0},{\"fromBlock\": 254,\"value\": 256},{\"fromBlock\": 66,\"value\": 26},{\"fromBlock\": 254,\"value\": 26},{\"fromBlock\": 2014223715,\"value\": 4},{\"fromBlock\": 5,\"value\": 4},{\"fromBlock\": 1338,\"value\": 1338},{\"fromBlock\": 2014223714,\"value\": 254},{\"fromBlock\": 6,\"value\": 5},{\"fromBlock\": 5,\"value\": 0},{\"fromBlock\": 26,\"value\": 65},{\"fromBlock\": 2014223714,\"value\": 18},{\"fromBlock\": 97,\"value\": 66},{\"fromBlock\": 0,\"value\": 2014223716},{\"fromBlock\": 97,\"value\": 19},{\"fromBlock\": 18,\"value\": 5},{\"fromBlock\": 18,\"value\": 29},{\"fromBlock\": 65,\"value\": 257},{\"fromBlock\": 5,\"value\": 4},{\"fromBlock\": 256,\"value\": 2014223714},{\"fromBlock\": 2,\"value\": 1532892064},{\"fromBlock\": 6,\"value\": 254},{\"fromBlock\": 1337,\"value\": 3},{\"fromBlock\": 1337,\"value\": 255},{\"fromBlock\": 0,\"value\": 4},{\"fromBlock\": 1337,\"value\": 1337},{\"fromBlock\": 3,\"value\": 1532892064},{\"fromBlock\": 1,\"value\": 9999},{\"fromBlock\": 9999,\"value\": 5},{\"fromBlock\": 26,\"value\": 10000},{\"fromBlock\": 29,\"value\": 17},{\"fromBlock\": 19,\"value\": 2014223715},{\"fromBlock\": 10000,\"value\": 18},{\"fromBlock\": 2014223716,\"value\": 18},{\"fromBlock\": 66,\"value\": 19},{\"fromBlock\": 1336,\"value\": 18},{\"fromBlock\": 65,\"value\": 64},{\"fromBlock\": 255,\"value\": 18},{\"fromBlock\": 26,\"value\": 1338},{\"fromBlock\": 257,\"value\": 2014223716},{\"fromBlock\": 96,\"value\": 26},{\"fromBlock\": 19,\"value\": 10001},{\"fromBlock\": 2,\"value\": 96},{\"fromBlock\": 0,\"value\": 19},{\"fromBlock\": 255,\"value\": 4},{\"fromBlock\": 1338,\"value\": 10001},{\"fromBlock\": 27,\"value\": 1532892064},{\"fromBlock\": 97,\"value\": 2014223715},{\"fromBlock\": 5,\"value\": 28},{\"fromBlock\": 26,\"value\": 65},{\"fromBlock\": 96,\"value\": 18},{\"fromBlock\": 1,\"value\": 1337},{\"fromBlock\": 2014223716,\"value\": 1532892062},{\"fromBlock\": 28,\"value\": 27},{\"fromBlock\": 18,\"value\": 10001},{\"fromBlock\": 28,\"value\": 27},{\"fromBlock\": 5,\"value\": 26},{\"fromBlock\": 27,\"value\": 1532892064},{\"fromBlock\": 1532892064,\"value\": 96},{\"fromBlock\": 256,\"value\": 5},{\"fromBlock\": 65,\"value\": 26},{\"fromBlock\": 1337,\"value\": 2014223716},{\"fromBlock\": 64,\"value\": 18},{\"fromBlock\": 256,\"value\": 28},{\"fromBlock\": 17,\"value\": 95},{\"fromBlock\": 1532892063,\"value\": 256},{\"fromBlock\": 257,\"value\": 29},{\"fromBlock\": 28,\"value\": 2014223714},{\"fromBlock\": 27,\"value\": 1},{\"fromBlock\": 29,\"value\": 0},{\"fromBlock\": 257,\"value\": 1337},{\"fromBlock\": 2014223715,\"value\": 1532892064},{\"fromBlock\": 64,\"value\": 2014223714},{\"fromBlock\": 1337,\"value\": 26},{\"fromBlock\": 255,\"value\": 96},{\"fromBlock\": 17,\"value\": 10001},{\"fromBlock\": 29,\"value\": 29},{\"fromBlock\": 65,\"value\": 19},{\"fromBlock\": 256,\"value\": 19},{\"fromBlock\": 96,\"value\": 17},{\"fromBlock\": 1532892064,\"value\": 1},{\"fromBlock\": 2014223716,\"value\": 27},{\"fromBlock\": 29,\"value\": 1532892063},{\"fromBlock\": 26,\"value\": 95},{\"fromBlock\": 3,\"value\": 17},{\"fromBlock\": 27,\"value\": 1532892063},{\"fromBlock\": 10000,\"value\": 19},{\"fromBlock\": 1338,\"value\": 96},{\"fromBlock\": 97,\"value\": 2014223715},{\"fromBlock\": 29,\"value\": 1},{\"fromBlock\": 1,\"value\": 6},{\"fromBlock\": 2014223715,\"value\": 26},{\"fromBlock\": 3,\"value\": 26},{\"fromBlock\": 3,\"value\": 29},{\"fromBlock\": 2014223714,\"value\": 1532892064},{\"fromBlock\": 1532892064,\"value\": 3},{\"fromBlock\": 1337,\"value\": 2014223714},{\"fromBlock\": 96,\"value\": 1336},{\"fromBlock\": 26,\"value\": 95},{\"fromBlock\": 5,\"value\": 1532892062},{\"fromBlock\": 65,\"value\": 0},{\"fromBlock\": 2014223716,\"value\": 2014223716},{\"fromBlock\": 1,\"value\": 2014223715},{\"fromBlock\": 26,\"value\": 28},{\"fromBlock\": 97,\"value\": 4},{\"fromBlock\": 1337,\"value\": 1338},{\"fromBlock\": 66,\"value\": 26},{\"fromBlock\": 96,\"value\": 1532892064},{\"fromBlock\": 96,\"value\": 26},{\"fromBlock\": 28,\"value\": 10000},{\"fromBlock\": 6,\"value\": 10001},{\"fromBlock\": 19,\"value\": 2014223714},{\"fromBlock\": 10001,\"value\": 1336},{\"fromBlock\": 96,\"value\": 3},{\"fromBlock\": 3,\"value\": 10000},{\"fromBlock\": 0,\"value\": 2014223714},{\"fromBlock\": 4,\"value\": 256},{\"fromBlock\": 4,\"value\": 95},{\"fromBlock\": 1532892063,\"value\": 2014223714},{\"fromBlock\": 2014223714,\"value\": 257},{\"fromBlock\": 1337,\"value\": 95},{\"fromBlock\": 1336,\"value\": 66},{\"fromBlock\": 95,\"value\": 254},{\"fromBlock\": 28,\"value\": 97},{\"fromBlock\": 3,\"value\": 4},{\"fromBlock\": 1,\"value\": 1532892063},{\"fromBlock\": 3,\"value\": 95},{\"fromBlock\": 1338,\"value\": 1},{\"fromBlock\": 65,\"value\": 254},{\"fromBlock\": 0,\"value\": 1532892063},{\"fromBlock\": 10000,\"value\": 26},{\"fromBlock\": 26,\"value\": 4},{\"fromBlock\": 27,\"value\": 65},{\"fromBlock\": 4,\"value\": 9999},{\"fromBlock\": 0,\"value\": 28},{\"fromBlock\": 255,\"value\": 27},{\"fromBlock\": 19,\"value\": 1336},{\"fromBlock\": 2014223714,\"value\": 1336},{\"fromBlock\": 4,\"value\": 10001},{\"fromBlock\": 2014223716,\"value\": 1532892064},{\"fromBlock\": 1532892063,\"value\": 5},{\"fromBlock\": 6,\"value\": 2},{\"fromBlock\": 95,\"value\": 2014223715},{\"fromBlock\": 1,\"value\": 29},{\"fromBlock\": 10001,\"value\": 2014223715},{\"fromBlock\": 28,\"value\": 257},{\"fromBlock\": 1336,\"value\": 254},{\"fromBlock\": 26,\"value\": 257},{\"fromBlock\": 29,\"value\": 95},{\"fromBlock\": 9999,\"value\": 26},{\"fromBlock\": 66,\"value\": 27},{\"fromBlock\": 66,\"value\": 64},{\"fromBlock\": 0,\"value\": 10001},{\"fromBlock\": 1,\"value\": 29},{\"fromBlock\": 4,\"value\": 17},{\"fromBlock\": 96,\"value\": 64},{\"fromBlock\": 65,\"value\": 256},{\"fromBlock\": 29,\"value\": 4},{\"fromBlock\": 64,\"value\": 1338},{\"fromBlock\": 2014223714,\"value\": 2014223715},{\"fromBlock\": 96,\"value\": 10001},{\"fromBlock\": 96,\"value\": 5},{\"fromBlock\": 26,\"value\": 1},{\"fromBlock\": 10000,\"value\": 6},{\"fromBlock\": 18,\"value\": 64},{\"fromBlock\": 18,\"value\": 66},{\"fromBlock\": 2,\"value\": 64},{\"fromBlock\": 64,\"value\": 19},{\"fromBlock\": 2,\"value\": 66},{\"fromBlock\": 1532892063,\"value\": 255},{\"fromBlock\": 26,\"value\": 97},{\"fromBlock\": 5,\"value\": 17},{\"fromBlock\": 26,\"value\": 5},{\"fromBlock\": 256,\"value\": 1},{\"fromBlock\": 26,\"value\": 1338},{\"fromBlock\": 1337,\"value\": 97},{\"fromBlock\": 1532892064,\"value\": 19},{\"fromBlock\": 1337,\"value\": 1532892062},{\"fromBlock\": 6,\"value\": 1338},{\"fromBlock\": 1532892064,\"value\": 26},{\"fromBlock\": 256,\"value\": 1},{\"fromBlock\": 19,\"value\": 1338},{\"fromBlock\": 3,\"value\": 95},{\"fromBlock\": 10001,\"value\": 1337},{\"fromBlock\": 1338,\"value\": 26},{\"fromBlock\": 1532892063,\"value\": 95},{\"fromBlock\": 29,\"value\": 64},{\"fromBlock\": 10000,\"value\": 1532892063},{\"fromBlock\": 3,\"value\": 28},{\"fromBlock\": 255,\"value\": 5},{\"fromBlock\": 96,\"value\": 1532892063},{\"fromBlock\": 3,\"value\": 96},{\"fromBlock\": 2,\"value\": 10001},{\"fromBlock\": 255,\"value\": 3},{\"fromBlock\": 28,\"value\": 64},{\"fromBlock\": 255,\"value\": 1},{\"fromBlock\": 1,\"value\": 5},{\"fromBlock\": 28,\"value\": 255},{\"fromBlock\": 19,\"value\": 10000},{\"fromBlock\": 1337,\"value\": 1338},{\"fromBlock\": 2014223714,\"value\": 2014223714},{\"fromBlock\": 29,\"value\": 4},{\"fromBlock\": 29,\"value\": 4},{\"fromBlock\": 29,\"value\": 19},{\"fromBlock\": 254,\"value\": 257},{\"fromBlock\": 4,\"value\": 65},{\"fromBlock\": 27,\"value\": 0},{\"fromBlock\": 256,\"value\": 1336},{\"fromBlock\": 28,\"value\": 2014223714},{\"fromBlock\": 1336,\"value\": 254},{\"fromBlock\": 95,\"value\": 9999},{\"fromBlock\": 9999,\"value\": 254},{\"fromBlock\": 2014223715,\"value\": 28},{\"fromBlock\": 9999,\"value\": 0},{\"fromBlock\": 95,\"value\": 2014223715},{\"fromBlock\": 64,\"value\": 1532892064},{\"fromBlock\": 10000,\"value\": 1532892063},{\"fromBlock\": 0,\"value\": 28},{\"fromBlock\": 26,\"value\": 64},{\"fromBlock\": 0,\"value\": 0},{\"fromBlock\": 2014223716,\"value\": 256},{\"fromBlock\": 10000,\"value\": 96},{\"fromBlock\": 17,\"value\": 1338},{\"fromBlock\": 1532892064,\"value\": 5},{\"fromBlock\": 0,\"value\": 4},{\"fromBlock\": 2014223715,\"value\": 10001},{\"fromBlock\": 5,\"value\": 1532892064},{\"fromBlock\": 29,\"value\": 257},{\"fromBlock\": 97,\"value\": 0},{\"fromBlock\": 96,\"value\": 29},{\"fromBlock\": 257,\"value\": 4},{\"fromBlock\": 10001,\"value\": 0},{\"fromBlock\": 27,\"value\": 1337},{\"fromBlock\": 2,\"value\": 10000},{\"fromBlock\": 95,\"value\": 18},{\"fromBlock\": 1532892062,\"value\": 95},{\"fromBlock\": 28,\"value\": 64},{\"fromBlock\": 29,\"value\": 10001},{\"fromBlock\": 26,\"value\": 18},{\"fromBlock\": 2014223715,\"value\": 28},{\"fromBlock\": 257,\"value\": 26},{\"fromBlock\": 64,\"value\": 64},{\"fromBlock\": 1532892063,\"value\": 26},{\"fromBlock\": 4,\"value\": 18},{\"fromBlock\": 10001,\"value\": 65},{\"fromBlock\": 19,\"value\": 1532892063},{\"fromBlock\": 17,\"value\": 26},{\"fromBlock\": 9999,\"value\": 64},{\"fromBlock\": 2014223715,\"value\": 1336},{\"fromBlock\": 257,\"value\": 26}]",
              "sol": "[MiniMeToken.Checkpoint(65,5),MiniMeToken.Checkpoint(1532892064,1532892062),MiniMeToken.Checkpoint(4,5),MiniMeToken.Checkpoint(65,2),MiniMeToken.Checkpoint(2014223716,26),MiniMeToken.Checkpoint(65,0),MiniMeToken.Checkpoint(254,256),MiniMeToken.Checkpoint(66,26),MiniMeToken.Checkpoint(254,26),MiniMeToken.Checkpoint(2014223715,4),MiniMeToken.Checkpoint(5,4),MiniMeToken.Checkpoint(1338,1338),MiniMeToken.Checkpoint(2014223714,254),MiniMeToken.Checkpoint(6,5),MiniMeToken.Checkpoint(5,0),MiniMeToken.Checkpoint(26,65),MiniMeToken.Checkpoint(2014223714,18),MiniMeToken.Checkpoint(97,66),MiniMeToken.Checkpoint(0,2014223716),MiniMeToken.Checkpoint(97,19),MiniMeToken.Checkpoint(18,5),MiniMeToken.Checkpoint(18,29),MiniMeToken.Checkpoint(65,257),MiniMeToken.Checkpoint(5,4),MiniMeToken.Checkpoint(256,2014223714),MiniMeToken.Checkpoint(2,1532892064),MiniMeToken.Checkpoint(6,254),MiniMeToken.Checkpoint(1337,3),MiniMeToken.Checkpoint(1337,255),MiniMeToken.Checkpoint(0,4),MiniMeToken.Checkpoint(1337,1337),MiniMeToken.Checkpoint(3,1532892064),MiniMeToken.Checkpoint(1,9999),MiniMeToken.Checkpoint(9999,5),MiniMeToken.Checkpoint(26,10000),MiniMeToken.Checkpoint(29,17),MiniMeToken.Checkpoint(19,2014223715),MiniMeToken.Checkpoint(10000,18),MiniMeToken.Checkpoint(2014223716,18),MiniMeToken.Checkpoint(66,19),MiniMeToken.Checkpoint(1336,18),MiniMeToken.Checkpoint(65,64),MiniMeToken.Checkpoint(255,18),MiniMeToken.Checkpoint(26,1338),MiniMeToken.Checkpoint(257,2014223716),MiniMeToken.Checkpoint(96,26),MiniMeToken.Checkpoint(19,10001),MiniMeToken.Checkpoint(2,96),MiniMeToken.Checkpoint(0,19),MiniMeToken.Checkpoint(255,4),MiniMeToken.Checkpoint(1338,10001),MiniMeToken.Checkpoint(27,1532892064),MiniMeToken.Checkpoint(97,2014223715),MiniMeToken.Checkpoint(5,28),MiniMeToken.Checkpoint(26,65),MiniMeToken.Checkpoint(96,18),MiniMeToken.Checkpoint(1,1337),MiniMeToken.Checkpoint(2014223716,1532892062),MiniMeToken.Checkpoint(28,27),MiniMeToken.Checkpoint(18,10001),MiniMeToken.Checkpoint(28,27),MiniMeToken.Checkpoint(5,26),MiniMeToken.Checkpoint(27,1532892064),MiniMeToken.Checkpoint(1532892064,96),MiniMeToken.Checkpoint(256,5),MiniMeToken.Checkpoint(65,26),MiniMeToken.Checkpoint(1337,2014223716),MiniMeToken.Checkpoint(64,18),MiniMeToken.Checkpoint(256,28),MiniMeToken.Checkpoint(17,95),MiniMeToken.Checkpoint(1532892063,256),MiniMeToken.Checkpoint(257,29),MiniMeToken.Checkpoint(28,2014223714),MiniMeToken.Checkpoint(27,1),MiniMeToken.Checkpoint(29,0),MiniMeToken.Checkpoint(257,1337),MiniMeToken.Checkpoint(2014223715,1532892064),MiniMeToken.Checkpoint(64,2014223714),MiniMeToken.Checkpoint(1337,26),MiniMeToken.Checkpoint(255,96),MiniMeToken.Checkpoint(17,10001),MiniMeToken.Checkpoint(29,29),MiniMeToken.Checkpoint(65,19),MiniMeToken.Checkpoint(256,19),MiniMeToken.Checkpoint(96,17),MiniMeToken.Checkpoint(1532892064,1),MiniMeToken.Checkpoint(2014223716,27),MiniMeToken.Checkpoint(29,1532892063),MiniMeToken.Checkpoint(26,95),MiniMeToken.Checkpoint(3,17),MiniMeToken.Checkpoint(27,1532892063),MiniMeToken.Checkpoint(10000,19),MiniMeToken.Checkpoint(1338,96),MiniMeToken.Checkpoint(97,2014223715),MiniMeToken.Checkpoint(29,1),MiniMeToken.Checkpoint(1,6),MiniMeToken.Checkpoint(2014223715,26),MiniMeToken.Checkpoint(3,26),MiniMeToken.Checkpoint(3,29),MiniMeToken.Checkpoint(2014223714,1532892064),MiniMeToken.Checkpoint(1532892064,3),MiniMeToken.Checkpoint(1337,2014223714),MiniMeToken.Checkpoint(96,1336),MiniMeToken.Checkpoint(26,95),MiniMeToken.Checkpoint(5,1532892062),MiniMeToken.Checkpoint(65,0),MiniMeToken.Checkpoint(2014223716,2014223716),MiniMeToken.Checkpoint(1,2014223715),MiniMeToken.Checkpoint(26,28),MiniMeToken.Checkpoint(97,4),MiniMeToken.Checkpoint(1337,1338),MiniMeToken.Checkpoint(66,26),MiniMeToken.Checkpoint(96,1532892064),MiniMeToken.Checkpoint(96,26),MiniMeToken.Checkpoint(28,10000),MiniMeToken.Checkpoint(6,10001),MiniMeToken.Checkpoint(19,2014223714),MiniMeToken.Checkpoint(10001,1336),MiniMeToken.Checkpoint(96,3),MiniMeToken.Checkpoint(3,10000),MiniMeToken.Checkpoint(0,2014223714),MiniMeToken.Checkpoint(4,256),MiniMeToken.Checkpoint(4,95),MiniMeToken.Checkpoint(1532892063,2014223714),MiniMeToken.Checkpoint(2014223714,257),MiniMeToken.Checkpoint(1337,95),MiniMeToken.Checkpoint(1336,66),MiniMeToken.Checkpoint(95,254),MiniMeToken.Checkpoint(28,97),MiniMeToken.Checkpoint(3,4),MiniMeToken.Checkpoint(1,1532892063),MiniMeToken.Checkpoint(3,95),MiniMeToken.Checkpoint(1338,1),MiniMeToken.Checkpoint(65,254),MiniMeToken.Checkpoint(0,1532892063),MiniMeToken.Checkpoint(10000,26),MiniMeToken.Checkpoint(26,4),MiniMeToken.Checkpoint(27,65),MiniMeToken.Checkpoint(4,9999),MiniMeToken.Checkpoint(0,28),MiniMeToken.Checkpoint(255,27),MiniMeToken.Checkpoint(19,1336),MiniMeToken.Checkpoint(2014223714,1336),MiniMeToken.Checkpoint(4,10001),MiniMeToken.Checkpoint(2014223716,1532892064),MiniMeToken.Checkpoint(1532892063,5),MiniMeToken.Checkpoint(6,2),MiniMeToken.Checkpoint(95,2014223715),MiniMeToken.Checkpoint(1,29),MiniMeToken.Checkpoint(10001,2014223715),MiniMeToken.Checkpoint(28,257),MiniMeToken.Checkpoint(1336,254),MiniMeToken.Checkpoint(26,257),MiniMeToken.Checkpoint(29,95),MiniMeToken.Checkpoint(9999,26),MiniMeToken.Checkpoint(66,27),MiniMeToken.Checkpoint(66,64),MiniMeToken.Checkpoint(0,10001),MiniMeToken.Checkpoint(1,29),MiniMeToken.Checkpoint(4,17),MiniMeToken.Checkpoint(96,64),MiniMeToken.Checkpoint(65,256),MiniMeToken.Checkpoint(29,4),MiniMeToken.Checkpoint(64,1338),MiniMeToken.Checkpoint(2014223714,2014223715),MiniMeToken.Checkpoint(96,10001),MiniMeToken.Checkpoint(96,5),MiniMeToken.Checkpoint(26,1),MiniMeToken.Checkpoint(10000,6),MiniMeToken.Checkpoint(18,64),MiniMeToken.Checkpoint(18,66),MiniMeToken.Checkpoint(2,64),MiniMeToken.Checkpoint(64,19),MiniMeToken.Checkpoint(2,66),MiniMeToken.Checkpoint(1532892063,255),MiniMeToken.Checkpoint(26,97),MiniMeToken.Checkpoint(5,17),MiniMeToken.Checkpoint(26,5),MiniMeToken.Checkpoint(256,1),MiniMeToken.Checkpoint(26,1338),MiniMeToken.Checkpoint(1337,97),MiniMeToken.Checkpoint(1532892064,19),MiniMeToken.Checkpoint(1337,1532892062),MiniMeToken.Checkpoint(6,1338),MiniMeToken.Checkpoint(1532892064,26),MiniMeToken.Checkpoint(256,1),MiniMeToken.Checkpoint(19,1338),MiniMeToken.Checkpoint(3,95),MiniMeToken.Checkpoint(10001,1337),MiniMeToken.Checkpoint(1338,26),MiniMeToken.Checkpoint(1532892063,95),MiniMeToken.Checkpoint(29,64),MiniMeToken.Checkpoint(10000,1532892063),MiniMeToken.Checkpoint(3,28),MiniMeToken.Checkpoint(255,5),MiniMeToken.Checkpoint(96,1532892063),MiniMeToken.Checkpoint(3,96),MiniMeToken.Checkpoint(2,10001),MiniMeToken.Checkpoint(255,3),MiniMeToken.Checkpoint(28,64),MiniMeToken.Checkpoint(255,1),MiniMeToken.Checkpoint(1,5),MiniMeToken.Checkpoint(28,255),MiniMeToken.Checkpoint(19,10000),MiniMeToken.Checkpoint(1337,1338),MiniMeToken.Checkpoint(2014223714,2014223714),MiniMeToken.Checkpoint(29,4),MiniMeToken.Checkpoint(29,4),MiniMeToken.Checkpoint(29,19),MiniMeToken.Checkpoint(254,257),MiniMeToken.Checkpoint(4,65),MiniMeToken.Checkpoint(27,0),MiniMeToken.Checkpoint(256,1336),MiniMeToken.Checkpoint(28,2014223714),MiniMeToken.Checkpoint(1336,254),MiniMeToken.Checkpoint(95,9999),MiniMeToken.Checkpoint(9999,254),MiniMeToken.Checkpoint(2014223715,28),MiniMeToken.Checkpoint(9999,0),MiniMeToken.Checkpoint(95,2014223715),MiniMeToken.Checkpoint(64,1532892064),MiniMeToken.Checkpoint(10000,1532892063),MiniMeToken.Checkpoint(0,28),MiniMeToken.Checkpoint(26,64),MiniMeToken.Checkpoint(0,0),MiniMeToken.Checkpoint(2014223716,256),MiniMeToken.Checkpoint(10000,96),MiniMeToken.Checkpoint(17,1338),MiniMeToken.Checkpoint(1532892064,5),MiniMeToken.Checkpoint(0,4),MiniMeToken.Checkpoint(2014223715,10001),MiniMeToken.Checkpoint(5,1532892064),MiniMeToken.Checkpoint(29,257),MiniMeToken.Checkpoint(97,0),MiniMeToken.Checkpoint(96,29),MiniMeToken.Checkpoint(257,4),MiniMeToken.Checkpoint(10001,0),MiniMeToken.Checkpoint(27,1337),MiniMeToken.Checkpoint(2,10000),MiniMeToken.Checkpoint(95,18),MiniMeToken.Checkpoint(1532892062,95),MiniMeToken.Checkpoint(28,64),MiniMeToken.Checkpoint(29,10001),MiniMeToken.Checkpoint(26,18),MiniMeToken.Checkpoint(2014223715,28),MiniMeToken.Checkpoint(257,26),MiniMeToken.Checkpoint(64,64),MiniMeToken.Checkpoint(1532892063,26),MiniMeToken.Checkpoint(4,18),MiniMeToken.Checkpoint(10001,65),MiniMeToken.Checkpoint(19,1532892063),MiniMeToken.Checkpoint(17,26),MiniMeToken.Checkpoint(9999,64),MiniMeToken.Checkpoint(2014223715,1336),MiniMeToken.Checkpoint(257,26)]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.915ZProxyMiniMeToken.testupdateValueAtNow": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testupdateValueAtNow(MiniMeToken.Checkpoint[],uint)",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 5,\"value\": 64},{\"fromBlock\": 1337,\"value\": 5},{\"fromBlock\": 2014223715,\"value\": 10001},{\"fromBlock\": 64,\"value\": 1532892064},{\"fromBlock\": 96,\"value\": 64},{\"fromBlock\": 28,\"value\": 19},{\"fromBlock\": 29,\"value\": 29}]",
              "sol": "[MiniMeToken.Checkpoint(5,64),MiniMeToken.Checkpoint(1337,5),MiniMeToken.Checkpoint(2014223715,10001),MiniMeToken.Checkpoint(64,1532892064),MiniMeToken.Checkpoint(96,64),MiniMeToken.Checkpoint(28,19),MiniMeToken.Checkpoint(29,29)]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.916ZProxyMiniMeToken.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "469-469",
          "restrictions": [
            "_addr == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_addr != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:27:16.917ZProxyMiniMeToken.testmin": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmin(uint,uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}