,{
  "2020-11-12T08:55:58.284ZTESTBUXX.TESTBUXX": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute TESTBUXX(uint256,string,uint8,string)",
          "parameters": [
            {
              "js": "230",
              "sol": "230"
            },
            {
              "js": "\"jxa52h\"",
              "sol": "\"jxa52h\""
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"3jjj8h\"",
              "sol": "\"3jjj8h\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:05.175ZButton.Button": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute Button(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.200ZTESTBUXX.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.201ZTESTBUXX.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.202ZTESTBUXX.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.202ZTESTBUXX.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.202ZTESTBUXX.safeApprove": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeApprove(address,uint256,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "231",
              "sol": "231"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.203ZTESTBUXX.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.203ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.204ZTESTBUXX.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN to!=0x0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.205ZTESTBUXX.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-141",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "229",
              "sol": "229"
            },
            {
              "js": "[136,104,132,143,34,18,132,206,36,225,161,136,30,205,157,213,242,94,44,63,202,131,179,50,226,16,212,127,130,120,103,228]",
              "sol": "abi.encode(\"136,104,132,143,34,18,132,206,36,225,161,136,30,205,157,213,242,94,44,63,202,131,179,50,226,16,212,127,130,120,103,228\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[244,34,157,46,163,176,3,241,185,161,38,44,46,7,186,97,187,220,69,46,159,174,63,18,5,28,242,58,142,179,94,143]",
              "sol": "abi.encode(\"244,34,157,46,163,176,3,241,185,161,38,44,46,7,186,97,187,220,69,46,159,174,63,18,5,28,242,58,142,179,94,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.206ZTESTBUXX.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.206ZTESTBUXX.burnFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burnFrom(address,uint256) WHEN balances_>=value",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:56:12.207ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "180-187",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "229",
              "sol": "229"
            },
            {
              "js": "[233,110,140,14,41,135,101,73,179,146,102,115,137,179,98,66,94,106,181,91,10,170,36,111,30,35,247,90,136,115,169,149]",
              "sol": "abi.encode(\"233,110,140,14,41,135,101,73,179,146,102,115,137,179,98,66,94,106,181,91,10,170,36,111,30,35,247,90,136,115,169,149\")"
            },
            {
              "js": "\"s9305o\"",
              "sol": "\"s9305o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "229",
                "sol": "229"
              },
              {
                "js": "[233,110,140,14,41,135,101,73,179,146,102,115,137,179,98,66,94,106,181,91,10,170,36,111,30,35,247,90,136,115,169,149]",
                "sol": "abi.encode(\"233,110,140,14,41,135,101,73,179,146,102,115,137,179,98,66,94,106,181,91,10,170,36,111,30,35,247,90,136,115,169,149\")"
              },
              {
                "js": "\"s9305o\"",
                "sol": "\"s9305o\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes,string) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[62,186,247,84,90,234,164,46,148,175,223,103,107,101,194,14,247,142,22,17,87,6,226,229,59,213,120,91,58,130,216,155]",
              "sol": "abi.encode(\"62,186,247,84,90,234,164,46,148,175,223,103,107,101,194,14,247,142,22,17,87,6,226,229,59,213,120,91,58,130,216,155\")"
            },
            {
              "js": "\"s9305o\"",
              "sol": "\"s9305o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes,string) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[62,186,247,84,90,234,164,46,148,175,223,103,107,101,194,14,247,142,22,17,87,6,226,229,59,213,120,91,58,130,216,155]",
                "sol": "abi.encode(\"62,186,247,84,90,234,164,46,148,175,223,103,107,101,194,14,247,142,22,17,87,6,226,229,59,213,120,91,58,130,216,155\")"
              },
              {
                "js": "\"s9305o\"",
                "sol": "\"s9305o\""
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.209ZTESTBUXX.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "196-198",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall==true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[156,3,92,87,134,3,238,14,114,132,121,67,176,234,85,71,34,102,235,210,182,101,10,179,179,13,129,41,180,114,141,46]",
              "sol": "abi.encode(\"156,3,92,87,134,3,238,14,114,132,121,67,176,234,85,71,34,102,235,210,182,101,10,179,179,13,129,41,180,114,141,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[156,3,92,87,134,3,238,14,114,132,121,67,176,234,85,71,34,102,235,210,182,101,10,179,179,13,129,41,180,114,141,46]",
                "sol": "abi.encode(\"156,3,92,87,134,3,238,14,114,132,121,67,176,234,85,71,34,102,235,210,182,101,10,179,179,13,129,41,180,114,141,46\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint,bytes) WHEN FunctionCall!=true,to!=0x0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[247,103,192,87,160,241,103,135,157,241,248,229,189,144,17,125,58,139,204,57,10,225,163,160,117,220,236,130,232,159,115,43]",
              "sol": "abi.encode(\"247,103,192,87,160,241,103,135,157,241,248,229,189,144,17,125,58,139,204,57,10,225,163,160,117,220,236,130,232,159,115,43\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[247,103,192,87,160,241,103,135,157,241,248,229,189,144,17,125,58,139,204,57,10,225,163,160,117,220,236,130,232,159,115,43]",
                "sol": "abi.encode(\"247,103,192,87,160,241,103,135,157,241,248,229,189,144,17,125,58,139,204,57,10,225,163,160,117,220,236,130,232,159,115,43\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.212ZProxyTESTBUXX.test_transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transfer(address,address,uint,bytes) WHEN to!=0x0,balances_>=value",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[134,60,23,43,50,144,195,171,120,45,22,84,83,110,134,148,203,160,72,22,152,12,119,136,162,95,240,59,254,108,61,0]",
              "sol": "abi.encode(\"134,60,23,43,50,144,195,171,120,45,22,84,83,110,134,148,203,160,72,22,152,12,119,136,162,95,240,59,254,108,61,0\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transfer(address,address,uint,bytes) when NOT comply with: to != 0x0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": 0
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[134,60,23,43,50,144,195,171,120,45,22,84,83,110,134,148,203,160,72,22,152,12,119,136,162,95,240,59,254,108,61,0]",
                "sol": "abi.encode(\"134,60,23,43,50,144,195,171,120,45,22,84,83,110,134,148,203,160,72,22,152,12,119,136,162,95,240,59,254,108,61,0\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.214ZButton.tokenFallback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenFallback(address,uint256,bytes) WHEN value>=PUSH_COST",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "230",
              "sol": "230"
            },
            {
              "js": "[183,211,151,153,1,56,26,40,168,201,97,152,95,85,250,185,94,78,12,37,149,245,145,233,213,185,154,96,183,93,182,82]",
              "sol": "abi.encode(\"183,211,151,153,1,56,26,40,168,201,97,152,95,85,250,185,94,78,12,37,149,245,145,233,213,185,154,96,183,93,182,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail tokenFallback(address,uint256,bytes) when NOT comply with: value >= PUSH_COST",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 229,
                "sol": 229
              },
              {
                "js": "[183,211,151,153,1,56,26,40,168,201,97,152,95,85,250,185,94,78,12,37,149,245,145,233,213,185,154,96,183,93,182,82]",
                "sol": "abi.encode(\"183,211,151,153,1,56,26,40,168,201,97,152,95,85,250,185,94,78,12,37,149,245,145,233,213,185,154,96,183,93,182,82\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:56:12.215ZButton.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN msg.sender==admin",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: msg.sender == admin",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}