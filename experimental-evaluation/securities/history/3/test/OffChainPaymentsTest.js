const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("OffChainPayments",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[2],257,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[2],257,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[4],97,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[4],97,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[3],{from:accounts[8]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[3],{from:accounts[8]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[0],2014223716,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[0],2014223716,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[8],{from:accounts[2]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[8],{from:accounts[2]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(1336,contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,contractMath.address,95,1532892062,{from:accounts[8]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(1336,contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,contractMath.address,95,1532892062,{from:accounts[8]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[5],9999,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[5],9999,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+611,{from:accounts[6]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+611,{from:accounts[6]}');
  });
  
  it('Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length', async () => {
    let result = await contractOffChainPayments.recordPayments([accounts[2],accounts[9],accounts[9],accounts[1],accounts[4],accounts[2],accounts[8],accounts[0],accounts[6],accounts[7],accounts[8],accounts[6],accounts[6],accounts[5],accounts[0],accounts[6],accounts[7],accounts[0],accounts[0],accounts[1],accounts[2],accounts[5],accounts[6],accounts[4],accounts[4],accounts[6],accounts[3],accounts[0]], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[8]});
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[2],accounts[9],accounts[9],accounts[1],accounts[4],accounts[2],accounts[8],accounts[0],accounts[6],accounts[7],accounts[8],accounts[6],accounts[6],accounts[5],accounts[0],accounts[6],accounts[7],accounts[0],accounts[0],accounts[1],accounts[2],accounts[5],accounts[6],accounts[4],accounts[4],accounts[6],accounts[3],accounts[0]], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[9]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[8]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[0],accounts[4],accounts[9],accounts[4],accounts[2],accounts[1],accounts[0],accounts[9],accounts[6],accounts[2],accounts[6],accounts[5],accounts[2],accounts[6],accounts[5],accounts[0],accounts[9],accounts[8],accounts[4],accounts[9],accounts[6],accounts[3],accounts[0],accounts[0],accounts[6],accounts[7],accounts[6],accounts[8],accounts[8]], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[8]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[1],accounts[2],accounts[3],accounts[2],accounts[4],accounts[3],accounts[0],accounts[3],accounts[4],accounts[5],accounts[5],accounts[8],accounts[2],accounts[7],accounts[0],accounts[3],accounts[2],accounts[0],accounts[4],accounts[1],accounts[5],accounts[0],accounts[0],accounts[1],accounts[0],accounts[0],accounts[3],accounts[3],accounts[2]], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[8]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[5],accounts[5],accounts[6],accounts[9],accounts[9],accounts[2],accounts[2],accounts[6],accounts[0],accounts[2],accounts[7],accounts[7],accounts[7],accounts[3],accounts[8],accounts[6],accounts[1],accounts[6],accounts[6],accounts[9],accounts[6],accounts[1],accounts[0],accounts[3],accounts[7],accounts[4],accounts[3],accounts[7],accounts[3]], [10001,1532892064,1532892063,254,95,64,2,97,64,256,3,96,254,256,1532892064,1532892062,5,2014223716,97,1532892064,27,255,1336,1336,96,10001,2,2014223714], [4,1337,26,9999,28,2014223714,1532892063,27,255,1,66,255,2014223716,1532892062,10000,95,5,97,1532892064,29,28,3,2014223716,26,10000,255,5,97], [[204,49,15,235,194,124,247,55,16,86,106,109,201,241,224,131,249,122,18,180,250,169,244,106,131,34,2,142,224,70,74,114],[229,213,200,197,51,29,249,214,39,123,214,54,210,145,57,125,72,48,62,8,13,41,212,169,249,136,121,60,51,189,159,90],[90,94,250,109,58,109,141,65,76,151,128,56,216,245,168,35,171,240,85,152,71,36,188,51,227,139,190,106,211,120,103,19],[223,191,51,201,18,96,104,3,107,102,248,100,64,189,69,55,225,16,106,102,220,221,32,62,121,75,205,231,205,170,231,161],[197,164,203,102,80,164,36,128,95,215,47,68,158,14,95,63,43,106,182,186,77,200,50,14,245,251,175,18,3,169,139,92],[64,138,201,228,7,212,206,173,16,14,27,137,163,82,173,50,46,37,4,5,200,105,124,248,114,140,184,25,235,157,194,227],[211,191,217,41,115,189,174,203,47,118,202,85,55,127,243,169,199,54,77,79,193,188,26,207,94,130,8,55,244,62,199,133],[104,7,228,151,45,75,196,78,151,153,63,35,223,109,218,65,16,227,103,49,117,119,142,144,89,245,136,105,130,13,96,41],[69,177,250,122,217,179,47,117,194,73,129,232,154,255,241,250,210,231,221,77,99,168,216,221,201,209,252,130,45,87,110,246],[27,6,94,164,117,247,182,86,238,142,227,56,192,186,56,214,245,202,101,50,66,168,147,74,181,0,56,80,166,81,127,159],[34,83,120,197,6,200,30,107,236,226,35,202,35,73,27,182,29,203,175,128,238,165,219,125,205,157,164,211,32,249,185,14],[32,143,44,239,210,69,20,145,87,36,178,211,148,63,123,80,148,121,75,94,175,120,20,193,78,48,236,186,184,142,56,141],[182,73,79,16,79,209,50,77,157,24,44,231,19,49,78,125,67,178,186,11,137,42,251,58,102,204,163,255,32,144,109,226],[92,251,237,28,162,222,49,198,152,249,241,81,98,193,195,95,226,73,196,209,4,136,129,156,123,17,227,154,62,146,122,19],[216,68,169,57,179,181,61,3,147,115,22,254,171,35,235,169,199,2,66,216,66,6,46,28,80,215,253,136,185,163,149,128],[203,70,172,19,211,184,28,90,80,84,65,10,176,186,142,143,9,70,65,235,221,210,67,61,63,105,227,249,173,200,228,127],[134,186,54,247,60,211,23,0,253,174,14,190,73,242,69,232,34,25,167,38,22,153,80,27,119,167,34,44,89,159,189,154],[193,100,245,197,198,221,196,38,69,9,81,70,76,209,80,120,53,30,117,72,19,68,72,0,128,72,12,210,9,241,103,44],[222,184,117,122,189,193,34,63,224,36,135,84,247,99,149,102,111,132,173,84,81,114,252,83,195,181,187,138,123,6,77,191],[1,219,182,203,97,200,55,247,196,235,162,252,119,32,18,61,231,206,13,61,179,219,141,25,124,95,183,235,5,67,125,222],[59,7,56,250,149,209,152,102,2,138,82,130,21,233,33,39,97,36,152,163,197,104,236,42,107,165,158,70,215,238,48,17],[167,175,109,27,116,67,97,85,117,39,126,170,47,156,184,33,229,170,173,48,191,10,190,85,108,14,59,35,41,136,1,193],[211,77,218,205,217,167,47,103,58,97,165,212,224,16,129,181,72,112,122,118,117,102,211,184,177,37,113,249,158,1,136,35],[255,139,119,107,54,4,193,80,176,126,150,199,150,254,176,5,232,217,52,138,117,214,156,186,23,172,229,73,177,81,51,174],[59,169,109,149,228,149,219,66,105,117,90,90,51,234,128,154,144,144,50,9,210,56,244,185,175,47,252,49,238,187,212,199],[18,248,234,252,0,154,5,171,58,219,35,200,204,4,225,193,236,224,120,205,173,112,183,194,208,222,135,36,146,10,31,220],[225,228,8,197,78,58,242,118,205,163,149,212,104,62,203,221,102,121,74,96,211,243,152,71,73,40,53,222,116,3,129,230],[2,135,228,211,29,171,146,130,231,236,231,224,250,137,1,92,115,182,158,55,180,157,37,138,162,51,244,254,200,87,186,110]],{from: accounts[8]}),'revert');
  });
  it('Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractOffChainPayments.lookUpPaymentIndex(accounts[0], [117,200,86,165,155,250,139,236,233,104,109,180,246,117,9,79,8,131,66,176,212,35,28,182,18,37,190,118,74,56,249,65],{from: accounts[0]});
  });
  it('Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.lookUpPaymentIndex("0x0000000000000000000000000000000000000000", [117,200,86,165,155,250,139,236,233,104,109,180,246,117,9,79,8,131,66,176,212,35,28,182,18,37,190,118,74,56,249,65],{from: accounts[0]}),'revert');
  });
  it('Should execute challengePayment(uint256,uint256)', async () => {
    let result = await contractOffChainPayments.challengePayment(1, 1337,{from: accounts[0]});
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[0], 0, [74,62,205,79,75,146,197,84,182,89,5,151,229,155,78,25,49,142,30,47,62,192,255,156,71,23,201,156,219,225,140,34], 95,{from: accounts[8]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[0], 0, [74,62,205,79,75,146,197,84,182,89,5,151,229,155,78,25,49,142,30,47,62,192,255,156,71,23,201,156,219,225,140,34], 95,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[0], -1, [74,62,205,79,75,146,197,84,182,89,5,151,229,155,78,25,49,142,30,47,62,192,255,156,71,23,201,156,219,225,140,34], 95,{from: accounts[8]}),'revert');
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[8], 2014223715, [206,169,35,87,27,153,106,110,8,53,197,245,75,168,36,181,181,15,59,0,192,152,136,125,219,244,62,240,173,183,168,154], 66,{from: accounts[8]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[8], 2014223715, [206,169,35,87,27,153,106,110,8,53,197,245,75,168,36,181,181,15,59,0,192,152,136,125,219,244,62,240,173,183,168,154], 66,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[8], -1, [206,169,35,87,27,153,106,110,8,53,197,245,75,168,36,181,181,15,59,0,192,152,136,125,219,244,62,240,173,183,168,154], 66,{from: accounts[8]}),'revert');
  });
});
