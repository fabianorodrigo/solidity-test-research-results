,{
  "2020-11-12T14:41:08.733ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:14.875ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:21.263ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:27.708ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:34.258ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:40.955ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:47.515ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:41:54.349ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373",
              "sol": "block.timestamp+373"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373",
                "sol": "block.timestamp+373"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373",
                "sol": "block.timestamp+373"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373",
                "sol": "block.timestamp+373"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.026ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.028ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.031ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.034ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[7],accounts[7],accounts[5],accounts[6],accounts[9],accounts[7],accounts[7],accounts[2],accounts[7],accounts[0],accounts[0],accounts[6],accounts[9],accounts[4],accounts[4],accounts[9],accounts[1],accounts[4],accounts[1],accounts[9],accounts[4],accounts[5],accounts[6],accounts[9],accounts[8],accounts[9],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
              "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
            },
            {
              "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
              "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
            },
            {
              "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
              "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[5],accounts[6],accounts[9],accounts[7],accounts[7],accounts[2],accounts[7],accounts[0],accounts[0],accounts[6],accounts[9],accounts[4],accounts[4],accounts[9],accounts[1],accounts[4],accounts[1],accounts[9],accounts[4],accounts[5],accounts[6],accounts[9],accounts[8],accounts[9],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
                "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
              },
              {
                "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
                "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
              },
              {
                "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
                "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
                "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
              },
              {
                "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
                "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
              },
              {
                "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
                "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[4],accounts[7],accounts[1],accounts[0],accounts[1],accounts[5],accounts[2],accounts[6],accounts[0],accounts[0],accounts[8],accounts[2],accounts[9],accounts[9],accounts[9],accounts[5],accounts[9],accounts[2],accounts[1],accounts[1],accounts[5],accounts[0],accounts[5],accounts[2],accounts[9],accounts[1],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
                "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
              },
              {
                "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
                "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
              },
              {
                "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
                "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[7],accounts[5],accounts[8],accounts[2],accounts[3],accounts[7],accounts[2],accounts[3],accounts[9],accounts[8],accounts[3],accounts[9],accounts[0],accounts[1],accounts[4],accounts[9],accounts[0],accounts[1],accounts[1],accounts[1],accounts[5],accounts[0],accounts[3],accounts[4],accounts[0],accounts[1],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
                "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
              },
              {
                "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
                "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
              },
              {
                "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
                "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[5],accounts[2],accounts[5],accounts[2],accounts[4],accounts[8],accounts[7],accounts[2],accounts[9],accounts[6],accounts[2],accounts[6],accounts[8],accounts[5],accounts[0],accounts[5],accounts[9],accounts[3],accounts[8],accounts[3],accounts[1],accounts[9],accounts[8],accounts[7],accounts[0],accounts[3]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255]",
                "sol": "[uint256(1336),uint256(5),uint256(10000),uint256(3),uint256(96),uint256(1),uint256(29),uint256(1336),uint256(97),uint256(9999),uint256(27),uint256(96),uint256(2014223714),uint256(95),uint256(66),uint256(1338),uint256(66),uint256(5),uint256(27),uint256(5),uint256(26),uint256(1),uint256(64),uint256(96),uint256(1338),uint256(2014223714),uint256(255)]"
              },
              {
                "js": "[26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64]",
                "sol": "[uint256(26),uint256(29),uint256(257),uint256(66),uint256(3),uint256(28),uint256(9999),uint256(97),uint256(1532892063),uint256(29),uint256(0),uint256(6),uint256(97),uint256(1337),uint256(29),uint256(254),uint256(64),uint256(6),uint256(27),uint256(66),uint256(4),uint256(255),uint256(254),uint256(256),uint256(96),uint256(9999),uint256(64)]"
              },
              {
                "js": "[[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]]",
                "sol": "[bytes32(stringToBytes32(\"4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190\")),bytes32(stringToBytes32(\"152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77\")),bytes32(stringToBytes32(\"228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63\")),bytes32(stringToBytes32(\"74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192\")),bytes32(stringToBytes32(\"164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237\")),bytes32(stringToBytes32(\"81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58\")),bytes32(stringToBytes32(\"100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147\")),bytes32(stringToBytes32(\"34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57\")),bytes32(stringToBytes32(\"90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190\")),bytes32(stringToBytes32(\"106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64\")),bytes32(stringToBytes32(\"149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100\")),bytes32(stringToBytes32(\"239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196\")),bytes32(stringToBytes32(\"132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66\")),bytes32(stringToBytes32(\"181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248\")),bytes32(stringToBytes32(\"111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101\")),bytes32(stringToBytes32(\"62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53\")),bytes32(stringToBytes32(\"8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72\")),bytes32(stringToBytes32(\"250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201\")),bytes32(stringToBytes32(\"13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170\")),bytes32(stringToBytes32(\"183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108\")),bytes32(stringToBytes32(\"7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251\")),bytes32(stringToBytes32(\"191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102\")),bytes32(stringToBytes32(\"240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59\")),bytes32(stringToBytes32(\"112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13\")),bytes32(stringToBytes32(\"39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154\")),bytes32(stringToBytes32(\"252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56\")),bytes32(stringToBytes32(\"200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.042ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93]",
              "sol": "stringToBytes32(\"198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93]",
                "sol": "stringToBytes32(\"198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.043ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.044ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "[78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69]",
              "sol": "stringToBytes32(\"78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69\")"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "[78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69]",
                "sol": "stringToBytes32(\"78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69\")"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69]",
                "sol": "stringToBytes32(\"78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69\")"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "[208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11]",
              "sol": "stringToBytes32(\"208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11\")"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "[208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11]",
                "sol": "stringToBytes32(\"208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11\")"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11]",
                "sol": "stringToBytes32(\"208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11\")"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.046ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.047ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[232,1,130,4,143,225,254,221,226,150,87,248,185,175,29,168,53,204,208,92,9,52,95,191,143,82,92,153,15,221,21,216],[20,99,106,177,242,215,231,185,91,50,156,18,201,16,243,76,172,174,222,54,182,78,81,159,72,24,78,110,220,76,122,127],[72,82,223,242,72,248,65,203,142,162,99,250,215,10,183,28,142,116,102,139,10,88,231,131,9,166,216,65,39,43,22,101],[73,212,75,103,90,167,60,13,154,233,195,132,198,240,157,20,246,216,29,165,85,233,48,157,113,12,156,187,196,35,144,47],[52,50,5,160,66,79,191,46,251,207,185,167,15,227,208,28,255,233,182,172,14,198,217,48,185,102,72,50,110,233,130,115],[108,10,51,179,150,119,103,28,130,234,52,101,195,219,16,85,69,185,187,160,162,166,178,21,139,183,135,105,226,134,44,93],[236,109,215,58,94,190,85,31,228,253,116,247,155,211,33,123,65,1,170,69,245,68,150,24,79,174,229,214,134,222,4,60],[102,129,217,224,193,72,100,138,76,24,237,170,179,187,254,91,106,30,19,103,28,4,219,204,199,146,64,146,217,35,56,78],[145,56,113,93,228,75,151,93,176,180,239,229,8,125,213,114,246,78,41,239,101,28,124,235,14,109,114,33,144,231,211,172],[170,31,226,209,170,137,142,73,112,8,181,129,104,38,213,35,224,84,122,85,153,21,248,99,211,177,146,212,177,226,20,242],[177,180,40,120,78,235,29,25,215,245,184,222,85,92,122,242,99,59,169,83,190,234,116,34,253,206,189,124,181,234,168,239],[131,134,45,96,15,114,238,92,198,1,148,44,140,209,52,43,234,111,104,52,205,66,52,152,28,200,227,237,31,139,0,126],[16,12,65,217,132,95,190,230,61,223,45,188,110,189,112,87,1,95,5,91,177,115,128,254,68,138,112,183,19,61,75,159],[22,57,141,108,202,52,213,128,186,150,130,237,103,58,12,4,255,20,58,44,162,132,240,198,117,34,6,34,224,52,193,170],[9,61,178,90,201,37,219,250,100,54,193,207,93,126,64,1,97,20,240,206,4,224,72,65,59,1,111,158,195,3,90,86],[145,77,171,26,128,221,151,125,1,22,99,159,216,101,117,27,143,194,7,8,14,15,242,155,140,246,205,109,115,37,245,103],[172,212,128,9,28,61,151,142,50,42,49,21,115,175,213,60,144,66,75,3,129,148,150,211,82,130,251,220,147,184,174,171],[194,158,192,113,53,237,135,223,51,154,180,192,139,222,110,124,107,13,153,99,227,83,147,236,244,241,134,183,223,169,172,122],[195,245,129,122,140,192,108,217,5,17,108,126,19,21,204,199,99,210,18,216,174,171,47,246,171,165,72,121,107,94,210,163],[111,129,205,87,216,97,134,225,188,201,28,12,205,193,151,218,208,166,52,16,76,148,115,211,169,173,125,139,4,109,121,50],[116,127,133,182,146,61,90,83,19,37,205,249,220,194,76,117,94,10,146,165,44,16,11,83,64,234,101,200,138,230,214,223],[181,158,236,155,146,200,18,160,132,103,66,26,152,2,170,59,77,119,30,133,102,108,202,159,212,248,127,138,61,60,99,198],[74,4,151,123,17,138,173,219,19,176,120,152,37,45,161,84,222,178,184,79,206,216,97,239,125,228,176,22,155,94,164,101],[22,110,86,47,165,219,105,216,232,235,216,62,159,124,3,234,70,90,172,35,203,191,151,249,108,155,177,82,125,201,89,178],[10,220,55,252,233,36,228,161,140,154,141,53,224,5,27,102,250,11,148,39,149,158,135,188,53,29,62,162,151,243,54,145],[202,239,137,64,183,48,170,251,46,140,91,136,149,157,162,12,28,195,244,122,215,186,197,165,209,234,212,96,75,119,2,138],[233,115,29,98,188,220,71,141,142,97,29,251,5,85,163,49,65,143,244,221,2,53,174,32,150,59,158,85,73,211,119,62],[43,107,166,38,76,174,197,127,91,90,98,40,144,132,78,4,10,71,247,216,159,120,233,77,224,45,182,170,59,25,81,31],[195,242,253,176,167,215,142,24,35,150,85,99,90,74,165,162,250,149,223,169,119,157,189,91,109,170,195,98,136,255,185,104],[80,207,52,124,136,218,56,34,27,116,181,222,119,80,8,7,108,13,203,159,178,13,228,75,44,71,238,47,202,5,10,99],[17,51,225,137,87,190,161,142,217,14,118,142,194,247,40,145,221,227,33,220,163,200,178,10,52,205,154,119,87,83,136,176],[197,124,86,100,116,253,213,137,204,52,91,236,152,142,97,17,190,6,16,144,117,156,212,22,72,189,87,57,147,225,57,248],[68,141,77,131,61,193,156,24,91,220,112,41,67,160,194,0,215,158,23,135,201,157,201,73,29,61,186,5,230,211,77,187],[246,238,148,50,36,180,203,124,94,49,169,199,224,96,100,204,239,201,135,221,230,48,202,215,155,160,211,12,180,36,160,221],[234,92,125,153,103,41,243,242,40,115,158,177,174,235,223,174,128,212,81,36,205,75,178,194,153,44,6,243,134,54,191,149],[177,106,186,44,229,115,193,98,253,60,103,59,200,227,107,213,254,156,181,228,26,191,214,96,69,132,99,64,212,167,0,7],[230,82,240,56,152,188,217,191,111,214,83,205,175,59,166,247,231,201,147,101,33,152,85,193,146,32,148,124,94,192,46,136],[196,41,70,229,24,32,131,67,90,64,174,221,248,207,108,219,56,153,245,155,228,230,124,208,171,65,65,115,34,228,215,53],[89,251,64,52,12,160,10,149,138,49,128,144,80,101,69,46,224,148,109,174,187,114,199,154,130,11,136,73,142,96,191,168],[122,252,20,211,95,212,94,62,124,211,155,113,3,48,140,96,55,53,67,222,126,171,212,4,212,139,130,70,64,200,107,121],[97,56,163,188,231,191,218,18,8,169,137,97,162,37,161,207,188,69,34,32,185,119,209,90,220,113,197,12,51,136,130,217],[99,12,70,78,125,208,161,90,19,97,202,67,166,136,28,232,99,177,5,150,5,197,243,50,193,67,166,84,244,202,232,11],[26,19,81,24,140,106,229,232,145,103,109,237,36,101,191,8,229,118,64,71,53,159,226,215,249,31,20,128,193,185,105,213],[234,28,48,31,95,197,248,111,182,108,99,212,83,21,158,79,211,51,9,17,30,242,55,68,250,246,200,70,212,247,247,187],[57,27,251,110,86,93,135,102,113,221,242,114,233,215,231,66,121,108,251,244,207,169,164,14,67,232,132,205,80,206,1,195],[23,154,104,221,254,207,215,37,85,148,172,153,7,146,211,194,78,152,193,132,22,136,113,159,1,189,183,152,73,52,19,96],[64,172,70,183,213,210,138,170,26,136,194,240,219,65,195,167,206,53,193,147,23,83,222,0,90,211,229,58,165,82,138,234],[81,168,44,120,25,147,96,236,233,250,96,247,200,52,66,48,85,36,168,170,239,212,9,96,1,70,212,139,184,172,123,61],[184,77,125,179,163,173,172,170,166,217,202,110,149,134,226,181,110,4,108,138,28,213,217,37,183,191,74,117,107,141,124,170],[217,53,139,132,23,213,145,58,155,39,231,82,14,60,77,193,30,132,70,127,159,142,153,36,199,6,189,93,93,129,192,85],[45,176,194,203,58,185,169,176,255,159,109,218,79,54,235,249,19,29,20,19,148,75,240,62,235,227,41,216,113,119,39,31],[49,233,15,197,153,213,170,49,253,211,225,83,44,247,214,27,244,170,84,65,212,134,210,9,227,19,143,27,224,26,56,226],[14,136,16,205,192,58,234,85,60,195,71,51,39,220,98,122,16,237,171,80,217,112,193,91,159,215,122,219,245,20,24,107],[111,229,13,117,136,149,255,221,250,237,160,253,190,192,98,96,237,121,176,130,127,36,178,119,101,146,227,92,69,86,222,221],[25,225,138,108,211,32,92,157,131,28,65,42,16,224,119,53,215,249,101,37,158,247,62,84,22,102,53,90,183,102,92,201],[141,111,234,105,219,53,122,133,123,2,167,65,125,96,191,167,77,74,97,109,244,20,207,234,248,60,42,221,219,97,111,207],[124,35,98,31,27,9,15,21,25,53,82,130,122,49,194,191,30,240,241,73,246,95,187,161,71,65,96,112,86,176,143,134],[95,19,188,56,165,93,43,133,11,195,209,224,119,16,220,106,165,245,235,171,95,185,232,233,202,64,102,88,222,70,191,18],[116,189,140,41,194,159,116,76,32,90,116,13,64,6,69,12,18,89,123,202,228,197,37,80,214,123,83,20,210,223,18,8],[35,244,250,96,85,254,131,132,55,199,113,239,44,16,233,248,17,250,198,150,47,19,94,227,65,143,245,145,100,248,202,31],[136,109,24,6,146,51,73,171,251,120,54,222,84,100,142,150,245,3,142,191,114,0,230,58,232,46,213,88,240,146,245,69],[167,128,255,95,238,180,181,133,2,70,44,187,65,47,158,20,83,112,39,28,7,38,156,125,159,145,216,125,194,255,154,195],[15,76,20,219,38,46,148,170,188,127,221,35,137,131,115,231,229,33,203,56,191,167,150,59,71,7,18,82,216,57,206,190],[22,47,186,149,18,72,29,39,196,40,83,79,98,37,210,64,175,145,102,133,184,122,53,219,143,137,23,165,141,63,188,162],[185,71,121,144,12,211,125,225,14,97,189,88,14,196,78,37,228,249,68,134,250,232,146,36,31,211,88,219,152,74,136,241],[255,158,46,165,189,93,82,109,136,7,148,248,58,101,59,230,232,255,74,187,145,189,74,0,117,192,22,102,219,220,171,116]]",
              "sol": "[bytes32(stringToBytes32(\"232,1,130,4,143,225,254,221,226,150,87,248,185,175,29,168,53,204,208,92,9,52,95,191,143,82,92,153,15,221,21,216\")),bytes32(stringToBytes32(\"20,99,106,177,242,215,231,185,91,50,156,18,201,16,243,76,172,174,222,54,182,78,81,159,72,24,78,110,220,76,122,127\")),bytes32(stringToBytes32(\"72,82,223,242,72,248,65,203,142,162,99,250,215,10,183,28,142,116,102,139,10,88,231,131,9,166,216,65,39,43,22,101\")),bytes32(stringToBytes32(\"73,212,75,103,90,167,60,13,154,233,195,132,198,240,157,20,246,216,29,165,85,233,48,157,113,12,156,187,196,35,144,47\")),bytes32(stringToBytes32(\"52,50,5,160,66,79,191,46,251,207,185,167,15,227,208,28,255,233,182,172,14,198,217,48,185,102,72,50,110,233,130,115\")),bytes32(stringToBytes32(\"108,10,51,179,150,119,103,28,130,234,52,101,195,219,16,85,69,185,187,160,162,166,178,21,139,183,135,105,226,134,44,93\")),bytes32(stringToBytes32(\"236,109,215,58,94,190,85,31,228,253,116,247,155,211,33,123,65,1,170,69,245,68,150,24,79,174,229,214,134,222,4,60\")),bytes32(stringToBytes32(\"102,129,217,224,193,72,100,138,76,24,237,170,179,187,254,91,106,30,19,103,28,4,219,204,199,146,64,146,217,35,56,78\")),bytes32(stringToBytes32(\"145,56,113,93,228,75,151,93,176,180,239,229,8,125,213,114,246,78,41,239,101,28,124,235,14,109,114,33,144,231,211,172\")),bytes32(stringToBytes32(\"170,31,226,209,170,137,142,73,112,8,181,129,104,38,213,35,224,84,122,85,153,21,248,99,211,177,146,212,177,226,20,242\")),bytes32(stringToBytes32(\"177,180,40,120,78,235,29,25,215,245,184,222,85,92,122,242,99,59,169,83,190,234,116,34,253,206,189,124,181,234,168,239\")),bytes32(stringToBytes32(\"131,134,45,96,15,114,238,92,198,1,148,44,140,209,52,43,234,111,104,52,205,66,52,152,28,200,227,237,31,139,0,126\")),bytes32(stringToBytes32(\"16,12,65,217,132,95,190,230,61,223,45,188,110,189,112,87,1,95,5,91,177,115,128,254,68,138,112,183,19,61,75,159\")),bytes32(stringToBytes32(\"22,57,141,108,202,52,213,128,186,150,130,237,103,58,12,4,255,20,58,44,162,132,240,198,117,34,6,34,224,52,193,170\")),bytes32(stringToBytes32(\"9,61,178,90,201,37,219,250,100,54,193,207,93,126,64,1,97,20,240,206,4,224,72,65,59,1,111,158,195,3,90,86\")),bytes32(stringToBytes32(\"145,77,171,26,128,221,151,125,1,22,99,159,216,101,117,27,143,194,7,8,14,15,242,155,140,246,205,109,115,37,245,103\")),bytes32(stringToBytes32(\"172,212,128,9,28,61,151,142,50,42,49,21,115,175,213,60,144,66,75,3,129,148,150,211,82,130,251,220,147,184,174,171\")),bytes32(stringToBytes32(\"194,158,192,113,53,237,135,223,51,154,180,192,139,222,110,124,107,13,153,99,227,83,147,236,244,241,134,183,223,169,172,122\")),bytes32(stringToBytes32(\"195,245,129,122,140,192,108,217,5,17,108,126,19,21,204,199,99,210,18,216,174,171,47,246,171,165,72,121,107,94,210,163\")),bytes32(stringToBytes32(\"111,129,205,87,216,97,134,225,188,201,28,12,205,193,151,218,208,166,52,16,76,148,115,211,169,173,125,139,4,109,121,50\")),bytes32(stringToBytes32(\"116,127,133,182,146,61,90,83,19,37,205,249,220,194,76,117,94,10,146,165,44,16,11,83,64,234,101,200,138,230,214,223\")),bytes32(stringToBytes32(\"181,158,236,155,146,200,18,160,132,103,66,26,152,2,170,59,77,119,30,133,102,108,202,159,212,248,127,138,61,60,99,198\")),bytes32(stringToBytes32(\"74,4,151,123,17,138,173,219,19,176,120,152,37,45,161,84,222,178,184,79,206,216,97,239,125,228,176,22,155,94,164,101\")),bytes32(stringToBytes32(\"22,110,86,47,165,219,105,216,232,235,216,62,159,124,3,234,70,90,172,35,203,191,151,249,108,155,177,82,125,201,89,178\")),bytes32(stringToBytes32(\"10,220,55,252,233,36,228,161,140,154,141,53,224,5,27,102,250,11,148,39,149,158,135,188,53,29,62,162,151,243,54,145\")),bytes32(stringToBytes32(\"202,239,137,64,183,48,170,251,46,140,91,136,149,157,162,12,28,195,244,122,215,186,197,165,209,234,212,96,75,119,2,138\")),bytes32(stringToBytes32(\"233,115,29,98,188,220,71,141,142,97,29,251,5,85,163,49,65,143,244,221,2,53,174,32,150,59,158,85,73,211,119,62\")),bytes32(stringToBytes32(\"43,107,166,38,76,174,197,127,91,90,98,40,144,132,78,4,10,71,247,216,159,120,233,77,224,45,182,170,59,25,81,31\")),bytes32(stringToBytes32(\"195,242,253,176,167,215,142,24,35,150,85,99,90,74,165,162,250,149,223,169,119,157,189,91,109,170,195,98,136,255,185,104\")),bytes32(stringToBytes32(\"80,207,52,124,136,218,56,34,27,116,181,222,119,80,8,7,108,13,203,159,178,13,228,75,44,71,238,47,202,5,10,99\")),bytes32(stringToBytes32(\"17,51,225,137,87,190,161,142,217,14,118,142,194,247,40,145,221,227,33,220,163,200,178,10,52,205,154,119,87,83,136,176\")),bytes32(stringToBytes32(\"197,124,86,100,116,253,213,137,204,52,91,236,152,142,97,17,190,6,16,144,117,156,212,22,72,189,87,57,147,225,57,248\")),bytes32(stringToBytes32(\"68,141,77,131,61,193,156,24,91,220,112,41,67,160,194,0,215,158,23,135,201,157,201,73,29,61,186,5,230,211,77,187\")),bytes32(stringToBytes32(\"246,238,148,50,36,180,203,124,94,49,169,199,224,96,100,204,239,201,135,221,230,48,202,215,155,160,211,12,180,36,160,221\")),bytes32(stringToBytes32(\"234,92,125,153,103,41,243,242,40,115,158,177,174,235,223,174,128,212,81,36,205,75,178,194,153,44,6,243,134,54,191,149\")),bytes32(stringToBytes32(\"177,106,186,44,229,115,193,98,253,60,103,59,200,227,107,213,254,156,181,228,26,191,214,96,69,132,99,64,212,167,0,7\")),bytes32(stringToBytes32(\"230,82,240,56,152,188,217,191,111,214,83,205,175,59,166,247,231,201,147,101,33,152,85,193,146,32,148,124,94,192,46,136\")),bytes32(stringToBytes32(\"196,41,70,229,24,32,131,67,90,64,174,221,248,207,108,219,56,153,245,155,228,230,124,208,171,65,65,115,34,228,215,53\")),bytes32(stringToBytes32(\"89,251,64,52,12,160,10,149,138,49,128,144,80,101,69,46,224,148,109,174,187,114,199,154,130,11,136,73,142,96,191,168\")),bytes32(stringToBytes32(\"122,252,20,211,95,212,94,62,124,211,155,113,3,48,140,96,55,53,67,222,126,171,212,4,212,139,130,70,64,200,107,121\")),bytes32(stringToBytes32(\"97,56,163,188,231,191,218,18,8,169,137,97,162,37,161,207,188,69,34,32,185,119,209,90,220,113,197,12,51,136,130,217\")),bytes32(stringToBytes32(\"99,12,70,78,125,208,161,90,19,97,202,67,166,136,28,232,99,177,5,150,5,197,243,50,193,67,166,84,244,202,232,11\")),bytes32(stringToBytes32(\"26,19,81,24,140,106,229,232,145,103,109,237,36,101,191,8,229,118,64,71,53,159,226,215,249,31,20,128,193,185,105,213\")),bytes32(stringToBytes32(\"234,28,48,31,95,197,248,111,182,108,99,212,83,21,158,79,211,51,9,17,30,242,55,68,250,246,200,70,212,247,247,187\")),bytes32(stringToBytes32(\"57,27,251,110,86,93,135,102,113,221,242,114,233,215,231,66,121,108,251,244,207,169,164,14,67,232,132,205,80,206,1,195\")),bytes32(stringToBytes32(\"23,154,104,221,254,207,215,37,85,148,172,153,7,146,211,194,78,152,193,132,22,136,113,159,1,189,183,152,73,52,19,96\")),bytes32(stringToBytes32(\"64,172,70,183,213,210,138,170,26,136,194,240,219,65,195,167,206,53,193,147,23,83,222,0,90,211,229,58,165,82,138,234\")),bytes32(stringToBytes32(\"81,168,44,120,25,147,96,236,233,250,96,247,200,52,66,48,85,36,168,170,239,212,9,96,1,70,212,139,184,172,123,61\")),bytes32(stringToBytes32(\"184,77,125,179,163,173,172,170,166,217,202,110,149,134,226,181,110,4,108,138,28,213,217,37,183,191,74,117,107,141,124,170\")),bytes32(stringToBytes32(\"217,53,139,132,23,213,145,58,155,39,231,82,14,60,77,193,30,132,70,127,159,142,153,36,199,6,189,93,93,129,192,85\")),bytes32(stringToBytes32(\"45,176,194,203,58,185,169,176,255,159,109,218,79,54,235,249,19,29,20,19,148,75,240,62,235,227,41,216,113,119,39,31\")),bytes32(stringToBytes32(\"49,233,15,197,153,213,170,49,253,211,225,83,44,247,214,27,244,170,84,65,212,134,210,9,227,19,143,27,224,26,56,226\")),bytes32(stringToBytes32(\"14,136,16,205,192,58,234,85,60,195,71,51,39,220,98,122,16,237,171,80,217,112,193,91,159,215,122,219,245,20,24,107\")),bytes32(stringToBytes32(\"111,229,13,117,136,149,255,221,250,237,160,253,190,192,98,96,237,121,176,130,127,36,178,119,101,146,227,92,69,86,222,221\")),bytes32(stringToBytes32(\"25,225,138,108,211,32,92,157,131,28,65,42,16,224,119,53,215,249,101,37,158,247,62,84,22,102,53,90,183,102,92,201\")),bytes32(stringToBytes32(\"141,111,234,105,219,53,122,133,123,2,167,65,125,96,191,167,77,74,97,109,244,20,207,234,248,60,42,221,219,97,111,207\")),bytes32(stringToBytes32(\"124,35,98,31,27,9,15,21,25,53,82,130,122,49,194,191,30,240,241,73,246,95,187,161,71,65,96,112,86,176,143,134\")),bytes32(stringToBytes32(\"95,19,188,56,165,93,43,133,11,195,209,224,119,16,220,106,165,245,235,171,95,185,232,233,202,64,102,88,222,70,191,18\")),bytes32(stringToBytes32(\"116,189,140,41,194,159,116,76,32,90,116,13,64,6,69,12,18,89,123,202,228,197,37,80,214,123,83,20,210,223,18,8\")),bytes32(stringToBytes32(\"35,244,250,96,85,254,131,132,55,199,113,239,44,16,233,248,17,250,198,150,47,19,94,227,65,143,245,145,100,248,202,31\")),bytes32(stringToBytes32(\"136,109,24,6,146,51,73,171,251,120,54,222,84,100,142,150,245,3,142,191,114,0,230,58,232,46,213,88,240,146,245,69\")),bytes32(stringToBytes32(\"167,128,255,95,238,180,181,133,2,70,44,187,65,47,158,20,83,112,39,28,7,38,156,125,159,145,216,125,194,255,154,195\")),bytes32(stringToBytes32(\"15,76,20,219,38,46,148,170,188,127,221,35,137,131,115,231,229,33,203,56,191,167,150,59,71,7,18,82,216,57,206,190\")),bytes32(stringToBytes32(\"22,47,186,149,18,72,29,39,196,40,83,79,98,37,210,64,175,145,102,133,184,122,53,219,143,137,23,165,141,63,188,162\")),bytes32(stringToBytes32(\"185,71,121,144,12,211,125,225,14,97,189,88,14,196,78,37,228,249,68,134,250,232,146,36,31,211,88,219,152,74,136,241\")),bytes32(stringToBytes32(\"255,158,46,165,189,93,82,109,136,7,148,248,58,101,59,230,232,255,74,187,145,189,74,0,117,192,22,102,219,220,171,116\"))]"
            },
            {
              "js": "[[70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106],[238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172],[13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224],[30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138],[47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47],[186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11],[192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135],[236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137],[210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141],[60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90],[42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26],[64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122],[175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157],[58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138],[34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182],[205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90],[194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206],[89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25],[185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128],[159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4],[111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33],[202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53],[240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144],[140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152],[131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252],[217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11],[3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231],[34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247],[181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145],[158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224],[24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96],[231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69],[241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247],[217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27],[48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76],[219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216],[105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1],[128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110],[119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61],[215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132],[60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11],[151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29],[105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79],[179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21],[187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80],[75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7],[75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132],[11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230],[8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223],[215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33],[237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145],[92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192],[216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199],[172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206],[216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176],[66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130],[254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154],[15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206],[23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168],[162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18],[188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113],[121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27],[185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73],[235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212],[221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17],[150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104]]",
              "sol": "[bytes32(stringToBytes32(\"70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106\")),bytes32(stringToBytes32(\"238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172\")),bytes32(stringToBytes32(\"13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224\")),bytes32(stringToBytes32(\"30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138\")),bytes32(stringToBytes32(\"47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47\")),bytes32(stringToBytes32(\"186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11\")),bytes32(stringToBytes32(\"192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135\")),bytes32(stringToBytes32(\"236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137\")),bytes32(stringToBytes32(\"210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141\")),bytes32(stringToBytes32(\"60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90\")),bytes32(stringToBytes32(\"42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26\")),bytes32(stringToBytes32(\"64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122\")),bytes32(stringToBytes32(\"175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157\")),bytes32(stringToBytes32(\"58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138\")),bytes32(stringToBytes32(\"34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182\")),bytes32(stringToBytes32(\"205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90\")),bytes32(stringToBytes32(\"194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206\")),bytes32(stringToBytes32(\"89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25\")),bytes32(stringToBytes32(\"185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128\")),bytes32(stringToBytes32(\"159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4\")),bytes32(stringToBytes32(\"111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33\")),bytes32(stringToBytes32(\"202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53\")),bytes32(stringToBytes32(\"240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144\")),bytes32(stringToBytes32(\"140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152\")),bytes32(stringToBytes32(\"131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252\")),bytes32(stringToBytes32(\"217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11\")),bytes32(stringToBytes32(\"3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231\")),bytes32(stringToBytes32(\"34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247\")),bytes32(stringToBytes32(\"181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145\")),bytes32(stringToBytes32(\"158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224\")),bytes32(stringToBytes32(\"24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96\")),bytes32(stringToBytes32(\"231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69\")),bytes32(stringToBytes32(\"241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247\")),bytes32(stringToBytes32(\"217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27\")),bytes32(stringToBytes32(\"48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76\")),bytes32(stringToBytes32(\"219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216\")),bytes32(stringToBytes32(\"105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1\")),bytes32(stringToBytes32(\"128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110\")),bytes32(stringToBytes32(\"119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61\")),bytes32(stringToBytes32(\"215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132\")),bytes32(stringToBytes32(\"60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11\")),bytes32(stringToBytes32(\"151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29\")),bytes32(stringToBytes32(\"105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79\")),bytes32(stringToBytes32(\"179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21\")),bytes32(stringToBytes32(\"187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80\")),bytes32(stringToBytes32(\"75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7\")),bytes32(stringToBytes32(\"75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132\")),bytes32(stringToBytes32(\"11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230\")),bytes32(stringToBytes32(\"8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223\")),bytes32(stringToBytes32(\"215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33\")),bytes32(stringToBytes32(\"237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145\")),bytes32(stringToBytes32(\"92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192\")),bytes32(stringToBytes32(\"216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199\")),bytes32(stringToBytes32(\"172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206\")),bytes32(stringToBytes32(\"216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176\")),bytes32(stringToBytes32(\"66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130\")),bytes32(stringToBytes32(\"254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154\")),bytes32(stringToBytes32(\"15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206\")),bytes32(stringToBytes32(\"23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168\")),bytes32(stringToBytes32(\"162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18\")),bytes32(stringToBytes32(\"188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113\")),bytes32(stringToBytes32(\"121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27\")),bytes32(stringToBytes32(\"185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73\")),bytes32(stringToBytes32(\"235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212\")),bytes32(stringToBytes32(\"221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17\")),bytes32(stringToBytes32(\"150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104\"))]"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[232,1,130,4,143,225,254,221,226,150,87,248,185,175,29,168,53,204,208,92,9,52,95,191,143,82,92,153,15,221,21,216],[20,99,106,177,242,215,231,185,91,50,156,18,201,16,243,76,172,174,222,54,182,78,81,159,72,24,78,110,220,76,122,127],[72,82,223,242,72,248,65,203,142,162,99,250,215,10,183,28,142,116,102,139,10,88,231,131,9,166,216,65,39,43,22,101],[73,212,75,103,90,167,60,13,154,233,195,132,198,240,157,20,246,216,29,165,85,233,48,157,113,12,156,187,196,35,144,47],[52,50,5,160,66,79,191,46,251,207,185,167,15,227,208,28,255,233,182,172,14,198,217,48,185,102,72,50,110,233,130,115],[108,10,51,179,150,119,103,28,130,234,52,101,195,219,16,85,69,185,187,160,162,166,178,21,139,183,135,105,226,134,44,93],[236,109,215,58,94,190,85,31,228,253,116,247,155,211,33,123,65,1,170,69,245,68,150,24,79,174,229,214,134,222,4,60],[102,129,217,224,193,72,100,138,76,24,237,170,179,187,254,91,106,30,19,103,28,4,219,204,199,146,64,146,217,35,56,78],[145,56,113,93,228,75,151,93,176,180,239,229,8,125,213,114,246,78,41,239,101,28,124,235,14,109,114,33,144,231,211,172],[170,31,226,209,170,137,142,73,112,8,181,129,104,38,213,35,224,84,122,85,153,21,248,99,211,177,146,212,177,226,20,242],[177,180,40,120,78,235,29,25,215,245,184,222,85,92,122,242,99,59,169,83,190,234,116,34,253,206,189,124,181,234,168,239],[131,134,45,96,15,114,238,92,198,1,148,44,140,209,52,43,234,111,104,52,205,66,52,152,28,200,227,237,31,139,0,126],[16,12,65,217,132,95,190,230,61,223,45,188,110,189,112,87,1,95,5,91,177,115,128,254,68,138,112,183,19,61,75,159],[22,57,141,108,202,52,213,128,186,150,130,237,103,58,12,4,255,20,58,44,162,132,240,198,117,34,6,34,224,52,193,170],[9,61,178,90,201,37,219,250,100,54,193,207,93,126,64,1,97,20,240,206,4,224,72,65,59,1,111,158,195,3,90,86],[145,77,171,26,128,221,151,125,1,22,99,159,216,101,117,27,143,194,7,8,14,15,242,155,140,246,205,109,115,37,245,103],[172,212,128,9,28,61,151,142,50,42,49,21,115,175,213,60,144,66,75,3,129,148,150,211,82,130,251,220,147,184,174,171],[194,158,192,113,53,237,135,223,51,154,180,192,139,222,110,124,107,13,153,99,227,83,147,236,244,241,134,183,223,169,172,122],[195,245,129,122,140,192,108,217,5,17,108,126,19,21,204,199,99,210,18,216,174,171,47,246,171,165,72,121,107,94,210,163],[111,129,205,87,216,97,134,225,188,201,28,12,205,193,151,218,208,166,52,16,76,148,115,211,169,173,125,139,4,109,121,50],[116,127,133,182,146,61,90,83,19,37,205,249,220,194,76,117,94,10,146,165,44,16,11,83,64,234,101,200,138,230,214,223],[181,158,236,155,146,200,18,160,132,103,66,26,152,2,170,59,77,119,30,133,102,108,202,159,212,248,127,138,61,60,99,198],[74,4,151,123,17,138,173,219,19,176,120,152,37,45,161,84,222,178,184,79,206,216,97,239,125,228,176,22,155,94,164,101],[22,110,86,47,165,219,105,216,232,235,216,62,159,124,3,234,70,90,172,35,203,191,151,249,108,155,177,82,125,201,89,178],[10,220,55,252,233,36,228,161,140,154,141,53,224,5,27,102,250,11,148,39,149,158,135,188,53,29,62,162,151,243,54,145],[202,239,137,64,183,48,170,251,46,140,91,136,149,157,162,12,28,195,244,122,215,186,197,165,209,234,212,96,75,119,2,138],[233,115,29,98,188,220,71,141,142,97,29,251,5,85,163,49,65,143,244,221,2,53,174,32,150,59,158,85,73,211,119,62],[43,107,166,38,76,174,197,127,91,90,98,40,144,132,78,4,10,71,247,216,159,120,233,77,224,45,182,170,59,25,81,31],[195,242,253,176,167,215,142,24,35,150,85,99,90,74,165,162,250,149,223,169,119,157,189,91,109,170,195,98,136,255,185,104],[80,207,52,124,136,218,56,34,27,116,181,222,119,80,8,7,108,13,203,159,178,13,228,75,44,71,238,47,202,5,10,99],[17,51,225,137,87,190,161,142,217,14,118,142,194,247,40,145,221,227,33,220,163,200,178,10,52,205,154,119,87,83,136,176],[197,124,86,100,116,253,213,137,204,52,91,236,152,142,97,17,190,6,16,144,117,156,212,22,72,189,87,57,147,225,57,248],[68,141,77,131,61,193,156,24,91,220,112,41,67,160,194,0,215,158,23,135,201,157,201,73,29,61,186,5,230,211,77,187],[246,238,148,50,36,180,203,124,94,49,169,199,224,96,100,204,239,201,135,221,230,48,202,215,155,160,211,12,180,36,160,221],[234,92,125,153,103,41,243,242,40,115,158,177,174,235,223,174,128,212,81,36,205,75,178,194,153,44,6,243,134,54,191,149],[177,106,186,44,229,115,193,98,253,60,103,59,200,227,107,213,254,156,181,228,26,191,214,96,69,132,99,64,212,167,0,7],[230,82,240,56,152,188,217,191,111,214,83,205,175,59,166,247,231,201,147,101,33,152,85,193,146,32,148,124,94,192,46,136],[196,41,70,229,24,32,131,67,90,64,174,221,248,207,108,219,56,153,245,155,228,230,124,208,171,65,65,115,34,228,215,53],[89,251,64,52,12,160,10,149,138,49,128,144,80,101,69,46,224,148,109,174,187,114,199,154,130,11,136,73,142,96,191,168],[122,252,20,211,95,212,94,62,124,211,155,113,3,48,140,96,55,53,67,222,126,171,212,4,212,139,130,70,64,200,107,121],[97,56,163,188,231,191,218,18,8,169,137,97,162,37,161,207,188,69,34,32,185,119,209,90,220,113,197,12,51,136,130,217],[99,12,70,78,125,208,161,90,19,97,202,67,166,136,28,232,99,177,5,150,5,197,243,50,193,67,166,84,244,202,232,11],[26,19,81,24,140,106,229,232,145,103,109,237,36,101,191,8,229,118,64,71,53,159,226,215,249,31,20,128,193,185,105,213],[234,28,48,31,95,197,248,111,182,108,99,212,83,21,158,79,211,51,9,17,30,242,55,68,250,246,200,70,212,247,247,187],[57,27,251,110,86,93,135,102,113,221,242,114,233,215,231,66,121,108,251,244,207,169,164,14,67,232,132,205,80,206,1,195],[23,154,104,221,254,207,215,37,85,148,172,153,7,146,211,194,78,152,193,132,22,136,113,159,1,189,183,152,73,52,19,96],[64,172,70,183,213,210,138,170,26,136,194,240,219,65,195,167,206,53,193,147,23,83,222,0,90,211,229,58,165,82,138,234],[81,168,44,120,25,147,96,236,233,250,96,247,200,52,66,48,85,36,168,170,239,212,9,96,1,70,212,139,184,172,123,61],[184,77,125,179,163,173,172,170,166,217,202,110,149,134,226,181,110,4,108,138,28,213,217,37,183,191,74,117,107,141,124,170],[217,53,139,132,23,213,145,58,155,39,231,82,14,60,77,193,30,132,70,127,159,142,153,36,199,6,189,93,93,129,192,85],[45,176,194,203,58,185,169,176,255,159,109,218,79,54,235,249,19,29,20,19,148,75,240,62,235,227,41,216,113,119,39,31],[49,233,15,197,153,213,170,49,253,211,225,83,44,247,214,27,244,170,84,65,212,134,210,9,227,19,143,27,224,26,56,226],[14,136,16,205,192,58,234,85,60,195,71,51,39,220,98,122,16,237,171,80,217,112,193,91,159,215,122,219,245,20,24,107],[111,229,13,117,136,149,255,221,250,237,160,253,190,192,98,96,237,121,176,130,127,36,178,119,101,146,227,92,69,86,222,221],[25,225,138,108,211,32,92,157,131,28,65,42,16,224,119,53,215,249,101,37,158,247,62,84,22,102,53,90,183,102,92,201],[141,111,234,105,219,53,122,133,123,2,167,65,125,96,191,167,77,74,97,109,244,20,207,234,248,60,42,221,219,97,111,207],[124,35,98,31,27,9,15,21,25,53,82,130,122,49,194,191,30,240,241,73,246,95,187,161,71,65,96,112,86,176,143,134],[95,19,188,56,165,93,43,133,11,195,209,224,119,16,220,106,165,245,235,171,95,185,232,233,202,64,102,88,222,70,191,18],[116,189,140,41,194,159,116,76,32,90,116,13,64,6,69,12,18,89,123,202,228,197,37,80,214,123,83,20,210,223,18,8],[35,244,250,96,85,254,131,132,55,199,113,239,44,16,233,248,17,250,198,150,47,19,94,227,65,143,245,145,100,248,202,31],[136,109,24,6,146,51,73,171,251,120,54,222,84,100,142,150,245,3,142,191,114,0,230,58,232,46,213,88,240,146,245,69],[167,128,255,95,238,180,181,133,2,70,44,187,65,47,158,20,83,112,39,28,7,38,156,125,159,145,216,125,194,255,154,195],[15,76,20,219,38,46,148,170,188,127,221,35,137,131,115,231,229,33,203,56,191,167,150,59,71,7,18,82,216,57,206,190],[22,47,186,149,18,72,29,39,196,40,83,79,98,37,210,64,175,145,102,133,184,122,53,219,143,137,23,165,141,63,188,162],[185,71,121,144,12,211,125,225,14,97,189,88,14,196,78,37,228,249,68,134,250,232,146,36,31,211,88,219,152,74,136,241],[255,158,46,165,189,93,82,109,136,7,148,248,58,101,59,230,232,255,74,187,145,189,74,0,117,192,22,102,219,220,171,116]]",
                "sol": "[bytes32(stringToBytes32(\"232,1,130,4,143,225,254,221,226,150,87,248,185,175,29,168,53,204,208,92,9,52,95,191,143,82,92,153,15,221,21,216\")),bytes32(stringToBytes32(\"20,99,106,177,242,215,231,185,91,50,156,18,201,16,243,76,172,174,222,54,182,78,81,159,72,24,78,110,220,76,122,127\")),bytes32(stringToBytes32(\"72,82,223,242,72,248,65,203,142,162,99,250,215,10,183,28,142,116,102,139,10,88,231,131,9,166,216,65,39,43,22,101\")),bytes32(stringToBytes32(\"73,212,75,103,90,167,60,13,154,233,195,132,198,240,157,20,246,216,29,165,85,233,48,157,113,12,156,187,196,35,144,47\")),bytes32(stringToBytes32(\"52,50,5,160,66,79,191,46,251,207,185,167,15,227,208,28,255,233,182,172,14,198,217,48,185,102,72,50,110,233,130,115\")),bytes32(stringToBytes32(\"108,10,51,179,150,119,103,28,130,234,52,101,195,219,16,85,69,185,187,160,162,166,178,21,139,183,135,105,226,134,44,93\")),bytes32(stringToBytes32(\"236,109,215,58,94,190,85,31,228,253,116,247,155,211,33,123,65,1,170,69,245,68,150,24,79,174,229,214,134,222,4,60\")),bytes32(stringToBytes32(\"102,129,217,224,193,72,100,138,76,24,237,170,179,187,254,91,106,30,19,103,28,4,219,204,199,146,64,146,217,35,56,78\")),bytes32(stringToBytes32(\"145,56,113,93,228,75,151,93,176,180,239,229,8,125,213,114,246,78,41,239,101,28,124,235,14,109,114,33,144,231,211,172\")),bytes32(stringToBytes32(\"170,31,226,209,170,137,142,73,112,8,181,129,104,38,213,35,224,84,122,85,153,21,248,99,211,177,146,212,177,226,20,242\")),bytes32(stringToBytes32(\"177,180,40,120,78,235,29,25,215,245,184,222,85,92,122,242,99,59,169,83,190,234,116,34,253,206,189,124,181,234,168,239\")),bytes32(stringToBytes32(\"131,134,45,96,15,114,238,92,198,1,148,44,140,209,52,43,234,111,104,52,205,66,52,152,28,200,227,237,31,139,0,126\")),bytes32(stringToBytes32(\"16,12,65,217,132,95,190,230,61,223,45,188,110,189,112,87,1,95,5,91,177,115,128,254,68,138,112,183,19,61,75,159\")),bytes32(stringToBytes32(\"22,57,141,108,202,52,213,128,186,150,130,237,103,58,12,4,255,20,58,44,162,132,240,198,117,34,6,34,224,52,193,170\")),bytes32(stringToBytes32(\"9,61,178,90,201,37,219,250,100,54,193,207,93,126,64,1,97,20,240,206,4,224,72,65,59,1,111,158,195,3,90,86\")),bytes32(stringToBytes32(\"145,77,171,26,128,221,151,125,1,22,99,159,216,101,117,27,143,194,7,8,14,15,242,155,140,246,205,109,115,37,245,103\")),bytes32(stringToBytes32(\"172,212,128,9,28,61,151,142,50,42,49,21,115,175,213,60,144,66,75,3,129,148,150,211,82,130,251,220,147,184,174,171\")),bytes32(stringToBytes32(\"194,158,192,113,53,237,135,223,51,154,180,192,139,222,110,124,107,13,153,99,227,83,147,236,244,241,134,183,223,169,172,122\")),bytes32(stringToBytes32(\"195,245,129,122,140,192,108,217,5,17,108,126,19,21,204,199,99,210,18,216,174,171,47,246,171,165,72,121,107,94,210,163\")),bytes32(stringToBytes32(\"111,129,205,87,216,97,134,225,188,201,28,12,205,193,151,218,208,166,52,16,76,148,115,211,169,173,125,139,4,109,121,50\")),bytes32(stringToBytes32(\"116,127,133,182,146,61,90,83,19,37,205,249,220,194,76,117,94,10,146,165,44,16,11,83,64,234,101,200,138,230,214,223\")),bytes32(stringToBytes32(\"181,158,236,155,146,200,18,160,132,103,66,26,152,2,170,59,77,119,30,133,102,108,202,159,212,248,127,138,61,60,99,198\")),bytes32(stringToBytes32(\"74,4,151,123,17,138,173,219,19,176,120,152,37,45,161,84,222,178,184,79,206,216,97,239,125,228,176,22,155,94,164,101\")),bytes32(stringToBytes32(\"22,110,86,47,165,219,105,216,232,235,216,62,159,124,3,234,70,90,172,35,203,191,151,249,108,155,177,82,125,201,89,178\")),bytes32(stringToBytes32(\"10,220,55,252,233,36,228,161,140,154,141,53,224,5,27,102,250,11,148,39,149,158,135,188,53,29,62,162,151,243,54,145\")),bytes32(stringToBytes32(\"202,239,137,64,183,48,170,251,46,140,91,136,149,157,162,12,28,195,244,122,215,186,197,165,209,234,212,96,75,119,2,138\")),bytes32(stringToBytes32(\"233,115,29,98,188,220,71,141,142,97,29,251,5,85,163,49,65,143,244,221,2,53,174,32,150,59,158,85,73,211,119,62\")),bytes32(stringToBytes32(\"43,107,166,38,76,174,197,127,91,90,98,40,144,132,78,4,10,71,247,216,159,120,233,77,224,45,182,170,59,25,81,31\")),bytes32(stringToBytes32(\"195,242,253,176,167,215,142,24,35,150,85,99,90,74,165,162,250,149,223,169,119,157,189,91,109,170,195,98,136,255,185,104\")),bytes32(stringToBytes32(\"80,207,52,124,136,218,56,34,27,116,181,222,119,80,8,7,108,13,203,159,178,13,228,75,44,71,238,47,202,5,10,99\")),bytes32(stringToBytes32(\"17,51,225,137,87,190,161,142,217,14,118,142,194,247,40,145,221,227,33,220,163,200,178,10,52,205,154,119,87,83,136,176\")),bytes32(stringToBytes32(\"197,124,86,100,116,253,213,137,204,52,91,236,152,142,97,17,190,6,16,144,117,156,212,22,72,189,87,57,147,225,57,248\")),bytes32(stringToBytes32(\"68,141,77,131,61,193,156,24,91,220,112,41,67,160,194,0,215,158,23,135,201,157,201,73,29,61,186,5,230,211,77,187\")),bytes32(stringToBytes32(\"246,238,148,50,36,180,203,124,94,49,169,199,224,96,100,204,239,201,135,221,230,48,202,215,155,160,211,12,180,36,160,221\")),bytes32(stringToBytes32(\"234,92,125,153,103,41,243,242,40,115,158,177,174,235,223,174,128,212,81,36,205,75,178,194,153,44,6,243,134,54,191,149\")),bytes32(stringToBytes32(\"177,106,186,44,229,115,193,98,253,60,103,59,200,227,107,213,254,156,181,228,26,191,214,96,69,132,99,64,212,167,0,7\")),bytes32(stringToBytes32(\"230,82,240,56,152,188,217,191,111,214,83,205,175,59,166,247,231,201,147,101,33,152,85,193,146,32,148,124,94,192,46,136\")),bytes32(stringToBytes32(\"196,41,70,229,24,32,131,67,90,64,174,221,248,207,108,219,56,153,245,155,228,230,124,208,171,65,65,115,34,228,215,53\")),bytes32(stringToBytes32(\"89,251,64,52,12,160,10,149,138,49,128,144,80,101,69,46,224,148,109,174,187,114,199,154,130,11,136,73,142,96,191,168\")),bytes32(stringToBytes32(\"122,252,20,211,95,212,94,62,124,211,155,113,3,48,140,96,55,53,67,222,126,171,212,4,212,139,130,70,64,200,107,121\")),bytes32(stringToBytes32(\"97,56,163,188,231,191,218,18,8,169,137,97,162,37,161,207,188,69,34,32,185,119,209,90,220,113,197,12,51,136,130,217\")),bytes32(stringToBytes32(\"99,12,70,78,125,208,161,90,19,97,202,67,166,136,28,232,99,177,5,150,5,197,243,50,193,67,166,84,244,202,232,11\")),bytes32(stringToBytes32(\"26,19,81,24,140,106,229,232,145,103,109,237,36,101,191,8,229,118,64,71,53,159,226,215,249,31,20,128,193,185,105,213\")),bytes32(stringToBytes32(\"234,28,48,31,95,197,248,111,182,108,99,212,83,21,158,79,211,51,9,17,30,242,55,68,250,246,200,70,212,247,247,187\")),bytes32(stringToBytes32(\"57,27,251,110,86,93,135,102,113,221,242,114,233,215,231,66,121,108,251,244,207,169,164,14,67,232,132,205,80,206,1,195\")),bytes32(stringToBytes32(\"23,154,104,221,254,207,215,37,85,148,172,153,7,146,211,194,78,152,193,132,22,136,113,159,1,189,183,152,73,52,19,96\")),bytes32(stringToBytes32(\"64,172,70,183,213,210,138,170,26,136,194,240,219,65,195,167,206,53,193,147,23,83,222,0,90,211,229,58,165,82,138,234\")),bytes32(stringToBytes32(\"81,168,44,120,25,147,96,236,233,250,96,247,200,52,66,48,85,36,168,170,239,212,9,96,1,70,212,139,184,172,123,61\")),bytes32(stringToBytes32(\"184,77,125,179,163,173,172,170,166,217,202,110,149,134,226,181,110,4,108,138,28,213,217,37,183,191,74,117,107,141,124,170\")),bytes32(stringToBytes32(\"217,53,139,132,23,213,145,58,155,39,231,82,14,60,77,193,30,132,70,127,159,142,153,36,199,6,189,93,93,129,192,85\")),bytes32(stringToBytes32(\"45,176,194,203,58,185,169,176,255,159,109,218,79,54,235,249,19,29,20,19,148,75,240,62,235,227,41,216,113,119,39,31\")),bytes32(stringToBytes32(\"49,233,15,197,153,213,170,49,253,211,225,83,44,247,214,27,244,170,84,65,212,134,210,9,227,19,143,27,224,26,56,226\")),bytes32(stringToBytes32(\"14,136,16,205,192,58,234,85,60,195,71,51,39,220,98,122,16,237,171,80,217,112,193,91,159,215,122,219,245,20,24,107\")),bytes32(stringToBytes32(\"111,229,13,117,136,149,255,221,250,237,160,253,190,192,98,96,237,121,176,130,127,36,178,119,101,146,227,92,69,86,222,221\")),bytes32(stringToBytes32(\"25,225,138,108,211,32,92,157,131,28,65,42,16,224,119,53,215,249,101,37,158,247,62,84,22,102,53,90,183,102,92,201\")),bytes32(stringToBytes32(\"141,111,234,105,219,53,122,133,123,2,167,65,125,96,191,167,77,74,97,109,244,20,207,234,248,60,42,221,219,97,111,207\")),bytes32(stringToBytes32(\"124,35,98,31,27,9,15,21,25,53,82,130,122,49,194,191,30,240,241,73,246,95,187,161,71,65,96,112,86,176,143,134\")),bytes32(stringToBytes32(\"95,19,188,56,165,93,43,133,11,195,209,224,119,16,220,106,165,245,235,171,95,185,232,233,202,64,102,88,222,70,191,18\")),bytes32(stringToBytes32(\"116,189,140,41,194,159,116,76,32,90,116,13,64,6,69,12,18,89,123,202,228,197,37,80,214,123,83,20,210,223,18,8\")),bytes32(stringToBytes32(\"35,244,250,96,85,254,131,132,55,199,113,239,44,16,233,248,17,250,198,150,47,19,94,227,65,143,245,145,100,248,202,31\")),bytes32(stringToBytes32(\"136,109,24,6,146,51,73,171,251,120,54,222,84,100,142,150,245,3,142,191,114,0,230,58,232,46,213,88,240,146,245,69\")),bytes32(stringToBytes32(\"167,128,255,95,238,180,181,133,2,70,44,187,65,47,158,20,83,112,39,28,7,38,156,125,159,145,216,125,194,255,154,195\")),bytes32(stringToBytes32(\"15,76,20,219,38,46,148,170,188,127,221,35,137,131,115,231,229,33,203,56,191,167,150,59,71,7,18,82,216,57,206,190\")),bytes32(stringToBytes32(\"22,47,186,149,18,72,29,39,196,40,83,79,98,37,210,64,175,145,102,133,184,122,53,219,143,137,23,165,141,63,188,162\")),bytes32(stringToBytes32(\"185,71,121,144,12,211,125,225,14,97,189,88,14,196,78,37,228,249,68,134,250,232,146,36,31,211,88,219,152,74,136,241\")),bytes32(stringToBytes32(\"255,158,46,165,189,93,82,109,136,7,148,248,58,101,59,230,232,255,74,187,145,189,74,0,117,192,22,102,219,220,171,116\"))]"
              },
              {
                "js": "[[70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106],[238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172],[13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224],[30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138],[47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47],[186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11],[192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135],[236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137],[210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141],[60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90],[42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26],[64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122],[175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157],[58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138],[34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182],[205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90],[194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206],[89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25],[185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128],[159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4],[111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33],[202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53],[240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144],[140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152],[131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252],[217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11],[3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231],[34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247],[181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145],[158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224],[24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96],[231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69],[241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247],[217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27],[48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76],[219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216],[105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1],[128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110],[119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61],[215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132],[60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11],[151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29],[105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79],[179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21],[187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80],[75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7],[75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132],[11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230],[8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223],[215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33],[237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145],[92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192],[216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199],[172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206],[216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176],[66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130],[254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154],[15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206],[23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168],[162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18],[188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113],[121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27],[185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73],[235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212],[221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17],[150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104]]",
                "sol": "[bytes32(stringToBytes32(\"70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106\")),bytes32(stringToBytes32(\"238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172\")),bytes32(stringToBytes32(\"13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224\")),bytes32(stringToBytes32(\"30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138\")),bytes32(stringToBytes32(\"47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47\")),bytes32(stringToBytes32(\"186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11\")),bytes32(stringToBytes32(\"192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135\")),bytes32(stringToBytes32(\"236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137\")),bytes32(stringToBytes32(\"210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141\")),bytes32(stringToBytes32(\"60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90\")),bytes32(stringToBytes32(\"42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26\")),bytes32(stringToBytes32(\"64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122\")),bytes32(stringToBytes32(\"175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157\")),bytes32(stringToBytes32(\"58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138\")),bytes32(stringToBytes32(\"34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182\")),bytes32(stringToBytes32(\"205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90\")),bytes32(stringToBytes32(\"194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206\")),bytes32(stringToBytes32(\"89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25\")),bytes32(stringToBytes32(\"185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128\")),bytes32(stringToBytes32(\"159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4\")),bytes32(stringToBytes32(\"111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33\")),bytes32(stringToBytes32(\"202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53\")),bytes32(stringToBytes32(\"240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144\")),bytes32(stringToBytes32(\"140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152\")),bytes32(stringToBytes32(\"131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252\")),bytes32(stringToBytes32(\"217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11\")),bytes32(stringToBytes32(\"3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231\")),bytes32(stringToBytes32(\"34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247\")),bytes32(stringToBytes32(\"181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145\")),bytes32(stringToBytes32(\"158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224\")),bytes32(stringToBytes32(\"24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96\")),bytes32(stringToBytes32(\"231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69\")),bytes32(stringToBytes32(\"241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247\")),bytes32(stringToBytes32(\"217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27\")),bytes32(stringToBytes32(\"48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76\")),bytes32(stringToBytes32(\"219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216\")),bytes32(stringToBytes32(\"105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1\")),bytes32(stringToBytes32(\"128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110\")),bytes32(stringToBytes32(\"119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61\")),bytes32(stringToBytes32(\"215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132\")),bytes32(stringToBytes32(\"60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11\")),bytes32(stringToBytes32(\"151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29\")),bytes32(stringToBytes32(\"105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79\")),bytes32(stringToBytes32(\"179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21\")),bytes32(stringToBytes32(\"187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80\")),bytes32(stringToBytes32(\"75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7\")),bytes32(stringToBytes32(\"75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132\")),bytes32(stringToBytes32(\"11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230\")),bytes32(stringToBytes32(\"8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223\")),bytes32(stringToBytes32(\"215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33\")),bytes32(stringToBytes32(\"237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145\")),bytes32(stringToBytes32(\"92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192\")),bytes32(stringToBytes32(\"216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199\")),bytes32(stringToBytes32(\"172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206\")),bytes32(stringToBytes32(\"216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176\")),bytes32(stringToBytes32(\"66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130\")),bytes32(stringToBytes32(\"254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154\")),bytes32(stringToBytes32(\"15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206\")),bytes32(stringToBytes32(\"23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168\")),bytes32(stringToBytes32(\"162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18\")),bytes32(stringToBytes32(\"188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113\")),bytes32(stringToBytes32(\"121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27\")),bytes32(stringToBytes32(\"185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73\")),bytes32(stringToBytes32(\"235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212\")),bytes32(stringToBytes32(\"221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17\")),bytes32(stringToBytes32(\"150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[173,63,181,5,10,148,243,135,228,212,98,215,181,128,189,123,154,208,93,232,45,192,132,139,163,91,214,207,36,65,68,125],[70,148,217,94,229,35,141,214,229,48,63,169,180,87,180,112,80,115,158,185,103,194,235,172,146,46,69,139,12,85,18,51],[228,105,209,9,243,50,194,98,190,232,141,155,240,116,126,79,17,101,245,233,163,253,216,225,75,90,19,40,166,252,88,220],[235,204,237,165,136,59,104,5,120,181,121,96,216,192,167,147,244,255,75,34,177,254,132,107,166,178,28,126,95,159,210,28],[20,141,206,247,142,245,163,40,202,103,129,96,62,192,120,169,242,30,45,11,153,63,8,220,187,6,93,214,62,246,129,170],[201,66,87,248,25,180,12,124,117,203,45,227,248,189,246,227,170,106,201,243,248,229,90,228,56,140,254,41,126,13,139,16],[154,225,3,215,30,50,81,18,68,84,186,175,70,200,101,253,55,166,44,115,70,107,107,5,28,27,210,34,51,91,86,150],[193,27,246,220,242,90,230,138,192,198,52,203,243,247,55,179,89,131,34,29,34,8,178,168,190,119,62,254,109,130,113,171],[180,247,97,220,109,230,9,22,231,173,73,132,59,45,209,36,167,110,174,157,238,216,66,2,62,134,118,53,72,243,76,148],[54,196,88,116,209,196,122,246,192,249,216,6,15,199,38,57,103,205,138,46,201,34,221,223,228,37,70,148,243,206,199,249],[214,12,121,232,120,218,119,10,253,231,94,63,242,103,63,143,70,224,61,182,4,137,123,214,51,249,178,163,65,139,87,61],[173,172,136,144,130,246,87,208,59,87,197,76,63,17,235,47,253,177,53,129,192,39,232,171,230,48,22,80,239,124,224,3],[162,76,242,122,183,235,246,55,26,17,183,128,168,85,66,83,93,152,163,225,122,46,88,147,76,162,43,116,138,100,158,165],[163,32,11,14,69,113,183,227,197,81,149,165,127,193,205,174,79,235,234,21,197,169,210,124,178,114,98,44,184,147,131,243],[164,97,236,15,191,97,131,99,14,241,150,127,130,208,22,249,5,163,30,226,150,89,147,175,232,142,13,20,46,149,157,61],[95,195,8,47,244,60,48,137,150,212,37,246,43,25,3,54,12,26,210,173,245,14,159,6,48,16,42,129,235,129,60,173],[142,161,74,221,106,131,104,27,189,103,233,59,48,185,191,141,187,125,157,1,25,42,211,238,141,127,133,178,214,41,253,37],[155,69,25,128,102,141,228,116,144,224,121,179,182,107,38,181,47,53,34,206,78,138,179,112,77,147,86,13,33,235,47,31],[194,8,27,251,154,162,90,247,103,128,185,206,185,123,7,81,143,183,221,152,80,138,170,47,44,63,205,141,55,126,240,239],[223,201,101,165,62,56,83,38,232,155,227,72,82,135,39,175,74,13,121,10,150,85,129,163,16,224,137,15,144,205,68,98],[52,171,234,14,233,212,109,62,69,226,146,194,130,94,195,215,16,65,39,76,114,201,243,115,168,61,139,156,221,116,58,150],[189,184,50,42,16,19,71,77,89,87,82,34,46,51,140,163,234,157,63,170,117,80,35,201,124,37,11,127,239,107,141,162],[168,201,154,98,255,10,141,182,7,255,180,103,241,50,91,45,243,1,234,199,212,219,141,254,15,25,192,94,90,196,175,48],[236,35,184,75,185,118,126,255,143,212,73,194,234,25,164,34,153,104,155,179,85,212,218,79,137,121,168,52,213,228,0,84],[11,99,245,200,157,73,27,23,102,196,168,58,93,218,110,193,196,76,50,145,85,24,199,106,152,128,16,232,220,212,217,121],[121,24,86,49,235,232,15,244,0,178,133,111,42,95,81,165,228,148,207,9,94,85,214,46,221,54,99,81,248,187,4,88],[117,106,145,59,111,93,123,253,248,155,182,152,185,228,18,29,41,120,142,16,199,190,222,200,143,198,38,98,242,112,39,44],[89,115,206,4,198,90,73,57,161,161,207,223,112,101,186,18,60,0,56,155,167,97,165,209,167,115,40,47,13,128,143,200],[182,227,1,0,189,186,104,90,23,175,160,76,103,7,69,167,28,26,147,36,212,154,184,185,106,69,223,167,211,27,115,206],[213,77,217,70,216,253,148,221,190,41,151,126,250,48,12,121,204,93,38,28,149,207,159,54,29,183,91,82,74,199,86,145],[176,185,109,188,23,98,12,133,116,118,71,171,51,86,183,193,75,85,136,75,184,1,67,8,126,21,246,248,154,73,78,211],[44,115,166,138,71,206,255,153,221,199,112,3,226,180,22,47,6,121,107,13,236,109,193,109,224,16,105,42,134,255,10,38],[98,102,188,18,117,88,155,55,119,156,6,71,173,16,115,163,75,8,35,173,170,193,13,81,83,119,90,8,71,167,44,243],[5,184,223,134,248,176,165,205,84,66,254,234,132,83,175,56,143,7,96,192,245,47,149,49,148,62,40,84,62,159,167,76],[37,144,54,147,198,188,31,98,225,169,198,140,195,116,79,202,240,168,2,241,141,56,50,60,226,82,43,251,2,27,231,234],[142,73,54,27,253,226,150,62,168,59,10,166,248,176,62,92,63,111,52,20,22,200,222,1,169,18,119,120,60,73,210,235],[129,104,55,156,218,202,240,151,143,253,120,123,245,67,22,105,200,161,153,62,141,33,28,208,205,64,146,134,217,36,93,129],[114,7,68,122,38,74,44,161,178,28,12,65,198,145,213,210,253,84,131,120,217,220,16,35,225,75,45,186,68,92,221,94],[124,111,30,152,34,101,207,17,103,60,239,214,139,23,199,220,235,252,73,118,237,166,56,241,151,14,51,64,186,171,32,116],[71,90,91,132,121,51,142,182,130,207,255,221,129,192,134,45,228,81,76,198,104,130,209,167,252,188,221,244,247,49,186,20],[166,18,138,197,65,50,116,40,201,163,84,123,183,253,198,34,64,186,231,235,229,7,4,13,9,186,24,100,157,33,140,91],[152,41,148,79,57,7,73,70,246,82,82,181,122,109,166,236,184,243,208,148,57,10,211,131,227,74,63,34,19,17,76,103],[76,139,207,2,9,41,146,228,41,197,21,204,103,132,1,188,2,227,68,100,238,130,139,68,63,120,196,83,114,175,46,123],[136,78,164,112,80,138,96,66,207,190,116,96,169,69,62,184,205,80,122,232,86,200,96,190,108,166,8,211,39,115,98,155],[49,17,162,254,90,158,230,43,110,105,219,139,19,204,30,131,196,95,146,107,123,16,33,171,29,208,247,36,55,25,103,199],[111,131,214,102,9,180,133,182,67,246,99,76,218,252,33,99,45,235,35,213,175,190,183,65,188,195,33,229,1,146,28,114],[241,88,72,216,183,83,226,210,147,206,92,187,141,43,218,194,91,61,113,231,109,152,193,8,13,110,120,187,201,145,162,5],[72,70,125,250,18,71,190,50,37,188,125,198,236,141,85,243,232,193,6,185,13,94,92,113,115,141,111,177,178,114,159,61],[26,235,154,141,68,253,216,223,214,14,76,227,111,106,175,70,235,231,187,178,18,174,252,145,216,218,218,182,219,5,33,137],[67,130,153,37,200,60,175,110,213,238,129,119,229,155,184,110,254,165,183,33,186,74,186,150,59,157,174,183,171,234,65,191],[16,233,229,65,165,231,184,95,11,124,166,93,121,254,27,112,199,244,138,126,33,158,255,143,0,83,145,86,203,66,32,12],[74,61,82,3,11,91,169,138,224,214,162,196,230,102,195,130,16,49,105,218,117,60,209,204,140,169,51,235,254,211,67,181],[79,171,117,229,132,71,110,28,181,177,204,211,221,220,137,11,177,243,228,13,154,182,69,135,230,52,31,205,50,13,148,89],[69,45,24,130,205,177,139,223,147,45,12,45,125,14,96,129,45,69,252,231,196,14,80,100,155,164,219,88,204,255,26,27],[41,215,231,145,37,184,34,83,199,176,222,47,118,18,173,51,70,52,237,154,174,216,95,242,213,215,255,241,85,219,114,119],[135,199,78,216,128,31,6,229,192,67,133,14,115,131,202,22,43,23,177,178,78,230,142,20,230,192,3,198,73,105,225,138],[115,154,2,247,236,39,147,36,92,115,173,228,120,112,76,118,29,221,72,86,58,216,201,188,120,123,225,226,216,236,33,255],[8,119,18,200,206,118,224,209,13,46,118,161,84,182,9,211,133,59,21,252,238,97,250,238,105,147,123,19,142,223,11,253],[233,138,42,37,214,205,141,143,50,88,150,218,42,138,227,17,82,215,210,82,159,224,57,207,169,65,106,43,252,189,137,53],[2,194,24,14,6,179,250,125,139,16,162,26,196,213,4,19,90,189,124,140,128,3,11,86,46,126,92,228,72,98,231,207],[125,74,93,183,95,132,213,41,213,237,39,83,140,95,87,150,127,77,231,46,16,244,11,134,70,122,39,91,168,227,42,197],[103,86,71,23,14,164,229,2,220,138,117,95,19,187,63,189,92,84,175,249,40,180,53,157,34,223,43,36,79,254,4,30],[139,158,249,234,79,92,207,149,210,116,207,85,215,238,173,115,67,240,133,183,27,189,239,6,37,217,24,215,219,37,204,7],[96,224,218,46,140,28,78,176,20,119,162,201,206,75,253,136,24,246,248,78,7,106,112,13,252,240,233,14,16,6,178,215],[18,235,54,104,98,20,134,149,214,82,249,60,183,214,41,94,144,46,161,120,113,85,42,230,224,241,39,125,63,91,178,122],[10,51,91,58,144,191,236,194,253,92,206,80,73,53,182,194,168,125,79,62,232,179,43,131,18,190,174,151,236,89,206,1],[61,89,205,180,44,188,10,143,51,219,229,80,214,154,149,94,245,86,97,218,41,240,53,126,3,84,224,183,222,174,196,87]]",
                "sol": "[stringToBytes32(\"212,36,146,171,133,202,238,251,199,8,0,182,80,130,145,163,55,212,104,56,0,16,144,183,1,203,145,32,202,79,52,184\"),stringToBytes32(\"146,46,124,205,71,178,82,145,30,242,87,121,43,20,71,73,73,62,138,46,15,139,100,200,115,236,224,59,112,203,69,54\"),stringToBytes32(\"10,49,37,188,195,176,19,233,200,1,15,234,114,80,84,72,47,50,56,145,128,44,247,61,73,41,47,170,159,124,29,229\"),stringToBytes32(\"195,196,195,152,244,126,38,119,195,147,25,207,158,71,243,159,179,224,120,5,143,204,43,120,138,77,101,122,91,159,113,18\"),stringToBytes32(\"49,7,63,13,160,143,132,101,28,2,180,172,33,156,204,99,108,143,160,54,36,143,57,7,231,106,102,250,19,16,161,38\"),stringToBytes32(\"41,132,217,26,230,16,21,123,96,156,165,194,7,64,21,153,41,195,101,228,77,21,200,251,236,184,117,151,101,123,231,15\"),stringToBytes32(\"247,76,3,149,215,90,159,214,47,121,185,141,240,117,154,40,108,218,98,191,229,240,45,69,65,239,3,218,233,18,17,230\"),stringToBytes32(\"213,233,45,73,37,36,201,98,235,151,16,68,143,116,16,200,29,41,246,65,219,207,131,191,4,119,13,181,7,143,219,59\"),stringToBytes32(\"8,14,174,106,147,99,179,135,215,210,85,213,93,173,36,10,79,227,170,182,246,151,103,33,181,92,104,223,76,84,182,98\"),stringToBytes32(\"11,88,73,49,71,160,17,183,21,111,235,119,252,155,58,63,166,237,163,253,116,187,229,123,219,146,16,38,243,76,220,227\"),stringToBytes32(\"141,255,12,71,179,94,161,245,160,21,225,199,76,122,69,87,205,0,74,216,141,190,1,12,34,26,58,116,236,136,195,108\"),stringToBytes32(\"166,83,229,222,146,210,194,91,245,55,99,194,195,98,249,124,205,207,202,121,213,250,47,32,82,203,245,203,149,11,230,23\"),stringToBytes32(\"84,213,240,228,248,73,181,67,239,58,178,204,246,31,50,150,232,191,199,177,0,29,215,185,248,23,88,158,255,63,15,192\"),stringToBytes32(\"227,124,122,99,37,24,225,158,47,7,177,184,75,47,1,27,42,166,115,202,176,75,152,145,157,88,7,226,146,213,5,105\"),stringToBytes32(\"105,52,33,222,52,168,217,9,52,163,34,141,200,57,72,202,172,108,166,79,48,242,7,137,68,119,22,129,39,159,205,196\"),stringToBytes32(\"94,78,147,191,71,93,199,18,199,55,109,101,197,254,76,169,192,32,170,159,219,157,79,44,177,207,64,68,33,0,18,252\"),stringToBytes32(\"74,209,169,10,38,128,34,53,28,149,176,94,35,146,89,50,54,76,193,92,199,129,250,114,171,170,206,29,251,133,94,161\"),stringToBytes32(\"136,143,225,81,35,14,165,211,237,66,253,212,4,221,199,91,28,187,1,170,125,159,51,243,150,33,218,220,20,202,183,101\"),stringToBytes32(\"19,51,253,212,236,99,182,246,135,80,151,12,116,197,19,183,235,179,184,180,185,127,37,152,103,136,2,17,73,17,210,64\"),stringToBytes32(\"167,157,73,221,164,178,10,166,199,107,17,105,15,32,83,229,223,119,8,83,167,44,54,141,50,58,229,211,2,2,39,56\"),stringToBytes32(\"176,237,35,160,86,52,76,94,115,242,47,7,173,100,80,178,253,137,112,107,115,98,199,77,189,216,148,70,35,83,107,82\"),stringToBytes32(\"255,35,212,61,20,228,127,24,125,189,245,38,168,238,37,53,98,110,183,252,195,227,46,235,73,254,151,150,234,240,172,129\"),stringToBytes32(\"147,112,84,156,0,201,199,197,148,214,206,39,4,18,149,169,176,90,77,252,56,50,15,240,25,88,32,243,57,201,180,153\"),stringToBytes32(\"74,196,129,82,201,2,107,115,121,106,159,21,148,215,244,162,95,111,163,11,239,33,228,36,96,52,48,248,53,147,71,159\"),stringToBytes32(\"197,30,170,119,160,164,187,186,183,23,167,33,67,64,175,134,17,64,235,244,239,64,97,120,170,1,108,4,195,212,50,152\"),stringToBytes32(\"43,61,106,54,238,219,146,48,101,96,226,141,242,72,179,148,80,120,160,185,80,72,72,248,81,91,62,53,6,232,152,97\"),stringToBytes32(\"167,237,33,237,94,86,93,127,121,248,164,19,206,102,245,13,114,115,25,166,115,221,211,240,103,77,44,37,212,33,66,93\"),stringToBytes32(\"216,99,32,19,29,238,174,110,76,240,88,194,222,116,127,191,226,203,46,147,46,98,144,238,15,154,217,39,174,139,161,104\"),stringToBytes32(\"163,172,207,251,59,7,3,253,105,46,64,48,177,193,90,191,150,103,244,135,244,243,201,200,43,242,99,180,30,107,55,214\"),stringToBytes32(\"132,174,38,185,33,212,85,231,208,153,236,186,4,146,97,243,67,45,3,23,132,177,47,124,155,118,35,196,133,178,217,155\"),stringToBytes32(\"152,239,147,210,32,224,20,50,40,132,111,143,77,10,31,42,3,224,77,104,171,194,54,237,229,230,92,36,162,200,240,100\"),stringToBytes32(\"236,47,102,252,185,49,49,120,179,108,193,239,31,21,179,109,160,243,234,102,201,151,213,233,145,167,248,18,160,6,127,124\"),stringToBytes32(\"87,217,68,32,237,88,64,33,171,123,29,21,228,73,249,37,179,204,186,233,61,76,194,94,136,240,80,4,36,12,91,21\"),stringToBytes32(\"60,203,84,97,204,241,208,55,33,223,46,123,49,4,142,56,38,68,27,128,29,187,200,162,35,23,5,69,92,146,61,77\"),stringToBytes32(\"78,184,117,176,235,233,188,192,40,25,93,7,230,136,66,172,192,144,12,88,140,23,204,58,46,225,225,38,37,3,152,79\"),stringToBytes32(\"72,196,5,195,236,197,212,53,101,116,98,19,108,147,255,174,26,100,59,94,135,158,236,72,89,117,113,191,171,99,16,110\"),stringToBytes32(\"53,196,142,245,223,204,232,51,21,5,143,25,138,133,233,160,93,83,135,46,231,177,138,4,35,115,111,3,241,0,127,94\"),stringToBytes32(\"191,18,94,45,225,128,136,129,55,3,95,19,220,165,231,7,174,124,97,250,160,63,215,38,158,120,37,107,126,202,235,133\"),stringToBytes32(\"43,78,180,238,252,7,14,149,234,200,183,240,10,120,60,206,78,14,168,5,4,196,61,13,16,212,29,200,82,208,38,118\"),stringToBytes32(\"67,27,8,128,210,50,122,20,136,143,178,122,185,58,162,88,254,139,136,102,214,7,70,240,106,247,155,158,33,56,235,12\"),stringToBytes32(\"171,190,182,233,119,99,61,128,36,58,41,132,223,204,58,211,212,24,13,248,34,135,34,79,79,175,222,148,123,163,84,63\"),stringToBytes32(\"206,183,119,188,120,212,60,48,18,223,34,190,148,234,134,158,23,108,1,227,90,119,124,200,10,184,13,27,223,226,48,78\"),stringToBytes32(\"182,210,37,11,178,23,156,81,149,160,150,195,52,92,219,124,157,88,113,16,169,8,223,18,77,50,70,241,131,90,180,0\"),stringToBytes32(\"207,222,28,108,252,186,105,223,151,203,48,147,131,122,216,214,138,255,55,6,6,204,178,238,64,239,19,47,86,24,179,244\"),stringToBytes32(\"216,166,252,16,151,168,14,88,118,252,210,1,87,82,184,212,124,21,196,179,196,223,171,7,11,69,65,72,148,25,130,122\"),stringToBytes32(\"190,71,72,20,31,93,196,182,198,197,187,32,239,120,196,166,4,192,40,223,138,20,111,212,120,39,149,125,161,232,48,117\"),stringToBytes32(\"160,138,247,98,246,109,16,168,199,200,52,244,86,100,130,155,201,170,24,206,3,171,188,151,178,207,242,33,206,136,238,241\"),stringToBytes32(\"201,69,186,156,141,60,144,195,61,115,119,231,66,171,235,169,168,223,84,245,227,141,107,168,188,39,160,216,12,225,113,183\"),stringToBytes32(\"119,127,61,80,78,63,61,124,221,220,58,149,98,175,20,212,196,72,188,178,200,104,166,215,32,133,215,231,34,41,170,236\"),stringToBytes32(\"49,234,214,143,101,185,45,121,253,168,105,240,147,38,125,88,111,70,192,215,170,240,59,205,95,72,152,239,217,123,207,139\"),stringToBytes32(\"62,24,189,237,87,178,121,202,38,13,185,95,73,93,35,112,114,244,168,198,17,2,96,102,112,242,180,124,204,5,219,171\"),stringToBytes32(\"212,175,139,88,171,166,148,119,212,166,214,15,24,244,106,64,194,218,239,40,126,255,207,7,119,168,60,41,86,173,138,0\"),stringToBytes32(\"24,102,64,206,3,34,11,75,252,87,232,6,68,235,28,117,175,47,55,143,56,24,105,92,129,140,40,63,56,62,184,150\"),stringToBytes32(\"220,252,216,155,167,247,13,246,123,145,30,8,41,199,128,217,203,219,93,3,236,32,234,146,33,180,56,178,77,129,151,168\"),stringToBytes32(\"200,143,192,6,156,176,212,78,149,189,212,105,20,68,207,0,110,180,134,205,5,76,198,229,187,206,61,157,173,210,232,96\"),stringToBytes32(\"177,197,12,113,82,168,220,153,98,168,207,130,148,85,233,175,120,246,225,17,76,14,26,93,118,210,137,140,62,191,59,158\"),stringToBytes32(\"108,97,47,131,181,202,99,233,47,57,124,91,199,40,255,212,115,81,242,209,223,252,193,198,233,122,86,109,20,229,76,204\"),stringToBytes32(\"145,195,15,17,54,208,108,252,196,71,9,220,234,253,57,237,104,96,128,166,12,240,194,63,142,100,199,10,42,254,178,80\"),stringToBytes32(\"78,108,153,165,189,184,176,178,29,184,163,170,187,52,188,131,244,232,116,229,7,60,213,121,159,214,30,14,2,31,86,7\"),stringToBytes32(\"57,95,187,138,252,89,183,214,29,216,227,6,157,80,88,96,228,1,6,156,172,130,241,254,224,224,61,233,4,62,213,38\"),stringToBytes32(\"189,7,160,5,143,56,14,57,93,21,155,13,68,150,124,67,76,212,254,11,226,88,152,136,34,243,94,234,194,196,102,56\"),stringToBytes32(\"95,13,66,137,163,112,26,190,221,235,196,128,69,46,238,139,58,136,70,89,13,233,100,113,4,54,147,146,130,228,67,136\"),stringToBytes32(\"167,148,179,119,90,187,212,83,154,0,50,169,19,72,15,215,160,164,21,162,102,59,150,191,30,159,95,20,4,25,111,61\"),stringToBytes32(\"95,218,19,15,203,69,204,69,193,35,151,4,20,11,37,78,178,52,0,96,41,138,26,188,238,126,125,41,200,186,164,1\"),stringToBytes32(\"147,130,86,189,56,188,146,18,86,92,248,93,245,190,113,186,79,159,218,93,123,3,30,242,230,69,35,165,137,33,83,151\"),stringToBytes32(\"108,173,147,94,190,30,116,236,69,227,93,207,116,58,177,122,75,13,187,148,163,93,80,255,189,22,210,202,145,159,57,189\"),stringToBytes32(\"222,136,21,70,213,62,136,160,25,112,209,220,27,158,138,172,56,12,31,3,146,52,215,124,137,89,61,142,95,132,250,99\")]"
              },
              {
                "js": "[[70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106],[238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172],[13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224],[30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138],[47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47],[186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11],[192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135],[236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137],[210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141],[60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90],[42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26],[64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122],[175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157],[58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138],[34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182],[205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90],[194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206],[89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25],[185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128],[159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4],[111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33],[202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53],[240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144],[140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152],[131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252],[217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11],[3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231],[34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247],[181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145],[158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224],[24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96],[231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69],[241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247],[217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27],[48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76],[219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216],[105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1],[128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110],[119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61],[215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132],[60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11],[151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29],[105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79],[179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21],[187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80],[75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7],[75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132],[11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230],[8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223],[215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33],[237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145],[92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192],[216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199],[172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206],[216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176],[66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130],[254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154],[15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206],[23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168],[162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18],[188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113],[121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27],[185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73],[235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212],[221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17],[150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104]]",
                "sol": "[bytes32(stringToBytes32(\"70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106\")),bytes32(stringToBytes32(\"238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172\")),bytes32(stringToBytes32(\"13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224\")),bytes32(stringToBytes32(\"30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138\")),bytes32(stringToBytes32(\"47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47\")),bytes32(stringToBytes32(\"186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11\")),bytes32(stringToBytes32(\"192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135\")),bytes32(stringToBytes32(\"236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137\")),bytes32(stringToBytes32(\"210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141\")),bytes32(stringToBytes32(\"60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90\")),bytes32(stringToBytes32(\"42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26\")),bytes32(stringToBytes32(\"64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122\")),bytes32(stringToBytes32(\"175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157\")),bytes32(stringToBytes32(\"58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138\")),bytes32(stringToBytes32(\"34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182\")),bytes32(stringToBytes32(\"205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90\")),bytes32(stringToBytes32(\"194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206\")),bytes32(stringToBytes32(\"89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25\")),bytes32(stringToBytes32(\"185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128\")),bytes32(stringToBytes32(\"159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4\")),bytes32(stringToBytes32(\"111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33\")),bytes32(stringToBytes32(\"202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53\")),bytes32(stringToBytes32(\"240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144\")),bytes32(stringToBytes32(\"140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152\")),bytes32(stringToBytes32(\"131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252\")),bytes32(stringToBytes32(\"217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11\")),bytes32(stringToBytes32(\"3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231\")),bytes32(stringToBytes32(\"34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247\")),bytes32(stringToBytes32(\"181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145\")),bytes32(stringToBytes32(\"158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224\")),bytes32(stringToBytes32(\"24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96\")),bytes32(stringToBytes32(\"231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69\")),bytes32(stringToBytes32(\"241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247\")),bytes32(stringToBytes32(\"217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27\")),bytes32(stringToBytes32(\"48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76\")),bytes32(stringToBytes32(\"219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216\")),bytes32(stringToBytes32(\"105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1\")),bytes32(stringToBytes32(\"128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110\")),bytes32(stringToBytes32(\"119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61\")),bytes32(stringToBytes32(\"215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132\")),bytes32(stringToBytes32(\"60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11\")),bytes32(stringToBytes32(\"151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29\")),bytes32(stringToBytes32(\"105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79\")),bytes32(stringToBytes32(\"179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21\")),bytes32(stringToBytes32(\"187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80\")),bytes32(stringToBytes32(\"75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7\")),bytes32(stringToBytes32(\"75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132\")),bytes32(stringToBytes32(\"11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230\")),bytes32(stringToBytes32(\"8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223\")),bytes32(stringToBytes32(\"215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33\")),bytes32(stringToBytes32(\"237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145\")),bytes32(stringToBytes32(\"92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192\")),bytes32(stringToBytes32(\"216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199\")),bytes32(stringToBytes32(\"172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206\")),bytes32(stringToBytes32(\"216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176\")),bytes32(stringToBytes32(\"66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130\")),bytes32(stringToBytes32(\"254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154\")),bytes32(stringToBytes32(\"15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206\")),bytes32(stringToBytes32(\"23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168\")),bytes32(stringToBytes32(\"162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18\")),bytes32(stringToBytes32(\"188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113\")),bytes32(stringToBytes32(\"121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27\")),bytes32(stringToBytes32(\"185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73\")),bytes32(stringToBytes32(\"235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212\")),bytes32(stringToBytes32(\"221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17\")),bytes32(stringToBytes32(\"150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106],[238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172],[13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224],[30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138],[47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47],[186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11],[192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135],[236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137],[210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141],[60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90],[42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26],[64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122],[175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157],[58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138],[34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182],[205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90],[194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206],[89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25],[185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128],[159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4],[111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33],[202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53],[240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144],[140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152],[131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252],[217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11],[3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231],[34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247],[181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145],[158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224],[24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96],[231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69],[241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247],[217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27],[48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76],[219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216],[105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1],[128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110],[119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61],[215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132],[60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11],[151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29],[105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79],[179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21],[187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80],[75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7],[75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132],[11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230],[8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223],[215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33],[237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145],[92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192],[216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199],[172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206],[216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176],[66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130],[254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154],[15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206],[23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168],[162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18],[188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113],[121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27],[185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73],[235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212],[221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17],[150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104]]",
                "sol": "[bytes32(stringToBytes32(\"70,175,232,125,149,21,37,140,15,9,117,58,211,26,149,16,147,207,9,77,216,58,209,2,97,251,227,155,69,168,18,106\")),bytes32(stringToBytes32(\"238,127,107,150,68,153,177,183,108,192,229,164,141,34,90,78,125,26,254,169,91,99,135,37,76,87,195,37,91,237,150,172\")),bytes32(stringToBytes32(\"13,165,55,245,156,211,55,219,28,36,49,178,189,56,70,5,48,217,100,217,212,100,242,233,18,126,55,166,200,203,224,224\")),bytes32(stringToBytes32(\"30,58,192,166,189,19,136,40,165,181,144,135,67,7,39,248,124,251,47,204,28,122,237,140,198,239,129,144,91,5,128,138\")),bytes32(stringToBytes32(\"47,237,171,201,22,63,159,203,20,101,66,50,197,211,39,39,153,124,234,179,226,63,22,37,224,162,109,89,43,120,42,47\")),bytes32(stringToBytes32(\"186,131,97,51,115,99,100,53,34,145,198,117,166,197,162,172,216,117,78,37,98,121,94,178,166,19,241,111,220,151,234,11\")),bytes32(stringToBytes32(\"192,137,14,164,119,14,70,223,111,182,179,245,88,165,178,252,173,45,86,217,42,153,72,204,212,103,104,146,103,6,13,135\")),bytes32(stringToBytes32(\"236,246,172,72,154,124,11,197,250,180,82,167,117,254,133,210,31,73,132,237,4,97,147,83,131,83,26,196,109,26,176,137\")),bytes32(stringToBytes32(\"210,223,114,154,64,8,204,252,6,78,178,91,57,73,226,173,205,230,248,170,62,45,249,36,101,15,208,93,29,20,37,141\")),bytes32(stringToBytes32(\"60,126,236,86,161,127,84,233,181,73,236,76,115,205,86,75,80,247,248,247,227,123,251,188,203,60,228,117,56,46,86,90\")),bytes32(stringToBytes32(\"42,168,152,0,205,9,184,55,44,56,63,230,106,217,93,174,148,136,37,12,64,155,30,30,254,70,255,123,144,249,17,26\")),bytes32(stringToBytes32(\"64,162,84,153,133,186,224,81,181,247,90,254,45,231,171,218,124,56,252,39,13,76,202,230,84,186,230,123,162,135,248,122\")),bytes32(stringToBytes32(\"175,127,211,229,160,125,26,148,226,223,251,120,190,226,50,232,131,82,57,163,26,134,214,71,13,113,233,117,217,10,30,157\")),bytes32(stringToBytes32(\"58,113,68,147,14,71,118,122,21,41,54,150,110,201,198,46,212,4,27,93,141,118,247,182,111,133,107,197,172,220,135,138\")),bytes32(stringToBytes32(\"34,205,107,187,98,118,209,13,249,162,154,253,128,198,74,93,137,27,105,9,77,81,27,54,38,239,84,195,93,46,227,182\")),bytes32(stringToBytes32(\"205,55,161,105,190,41,179,92,24,197,174,127,185,177,199,247,251,106,183,154,150,234,176,55,36,53,215,242,150,8,21,90\")),bytes32(stringToBytes32(\"194,147,106,42,194,203,126,25,32,185,108,145,197,49,120,221,227,225,205,126,198,189,50,45,151,62,73,108,186,68,205,206\")),bytes32(stringToBytes32(\"89,171,150,252,181,21,209,66,31,232,181,186,1,21,9,96,214,171,128,111,80,255,85,194,240,67,241,209,25,25,49,25\")),bytes32(stringToBytes32(\"185,37,212,28,63,165,61,22,20,72,24,68,98,15,40,250,119,121,203,253,208,32,116,201,94,141,75,38,149,114,214,128\")),bytes32(stringToBytes32(\"159,122,207,199,253,32,190,77,120,172,189,20,63,153,250,154,44,189,137,189,168,221,173,24,141,180,163,115,174,55,48,4\")),bytes32(stringToBytes32(\"111,217,135,118,112,142,87,123,201,93,248,253,121,23,61,89,203,231,13,4,17,231,163,152,52,28,254,175,181,161,244,33\")),bytes32(stringToBytes32(\"202,24,221,244,60,55,255,30,122,172,221,114,255,28,60,176,93,14,221,22,152,73,38,91,41,131,14,110,223,129,125,53\")),bytes32(stringToBytes32(\"240,247,165,119,79,9,109,65,220,235,224,136,35,39,168,217,62,25,91,17,47,27,188,11,40,190,220,30,207,183,43,144\")),bytes32(stringToBytes32(\"140,211,233,10,93,18,142,150,78,136,62,128,131,94,151,103,58,66,115,146,128,39,243,52,219,14,130,156,43,119,23,152\")),bytes32(stringToBytes32(\"131,3,142,131,45,238,81,148,220,149,147,123,174,228,142,66,205,2,60,71,20,203,195,206,25,228,146,204,112,41,249,252\")),bytes32(stringToBytes32(\"217,191,182,244,80,34,12,230,207,45,188,167,249,195,134,172,217,21,40,184,218,25,6,179,213,215,111,155,69,9,10,11\")),bytes32(stringToBytes32(\"3,6,20,45,30,136,26,73,147,94,20,62,40,105,83,42,211,109,176,234,92,213,204,240,50,186,21,2,66,7,149,231\")),bytes32(stringToBytes32(\"34,148,238,55,159,64,201,206,118,142,111,21,196,111,174,7,192,37,58,186,184,51,82,6,189,176,197,237,192,144,216,247\")),bytes32(stringToBytes32(\"181,143,97,149,39,98,91,79,114,134,9,125,17,149,255,237,146,143,55,163,19,194,221,73,131,12,102,93,30,107,153,145\")),bytes32(stringToBytes32(\"158,11,96,56,95,70,134,111,170,9,220,47,228,98,167,206,241,139,239,165,82,100,157,89,151,28,4,237,124,178,234,224\")),bytes32(stringToBytes32(\"24,70,142,176,86,164,18,6,181,98,130,54,19,161,234,133,181,32,219,234,179,184,195,110,63,228,165,85,110,1,140,96\")),bytes32(stringToBytes32(\"231,223,16,26,44,141,132,161,179,221,14,129,201,230,54,60,15,28,117,121,155,249,237,166,56,83,224,39,240,56,121,69\")),bytes32(stringToBytes32(\"241,212,33,38,69,101,61,221,188,202,82,86,189,135,135,95,107,151,134,152,75,140,72,89,180,236,105,224,194,152,236,247\")),bytes32(stringToBytes32(\"217,206,207,139,76,72,215,183,41,218,249,73,152,51,94,70,71,227,90,158,238,243,87,118,37,40,79,231,181,120,112,27\")),bytes32(stringToBytes32(\"48,244,205,155,80,184,143,58,127,69,57,181,210,105,60,58,12,11,131,58,88,97,247,160,89,116,223,43,249,220,119,76\")),bytes32(stringToBytes32(\"219,181,217,131,220,161,138,136,30,189,253,4,216,73,206,24,185,17,238,64,95,145,186,38,163,194,24,213,157,171,249,216\")),bytes32(stringToBytes32(\"105,7,89,125,187,206,32,35,161,136,71,227,169,37,78,121,190,228,131,111,183,39,81,54,98,109,199,169,110,113,98,1\")),bytes32(stringToBytes32(\"128,102,67,71,98,220,116,147,146,246,243,157,64,64,103,239,139,152,141,144,188,146,44,220,84,138,90,138,233,192,58,110\")),bytes32(stringToBytes32(\"119,233,171,158,137,171,96,238,132,229,141,62,97,158,154,159,61,118,2,102,51,105,213,98,226,121,68,166,191,195,2,61\")),bytes32(stringToBytes32(\"215,165,143,57,20,203,128,255,26,219,57,174,12,3,184,57,89,78,202,129,53,157,148,223,22,46,11,59,125,85,121,132\")),bytes32(stringToBytes32(\"60,135,173,247,227,227,89,28,69,6,145,158,67,208,166,36,178,159,249,193,193,124,21,62,90,15,134,199,149,205,126,11\")),bytes32(stringToBytes32(\"151,128,242,13,150,163,101,188,146,22,25,243,49,73,9,30,117,3,238,186,241,63,222,169,177,195,115,228,252,132,218,29\")),bytes32(stringToBytes32(\"105,186,130,174,5,247,53,128,154,86,150,160,75,207,99,163,104,72,98,26,227,86,193,170,254,93,52,209,9,58,152,79\")),bytes32(stringToBytes32(\"179,18,76,214,183,124,114,204,3,138,30,133,86,191,39,154,95,63,229,154,46,13,200,186,160,117,86,181,191,17,93,21\")),bytes32(stringToBytes32(\"187,230,109,2,187,4,202,60,30,233,83,164,77,157,189,116,217,31,79,213,69,32,192,193,186,76,192,212,194,148,26,80\")),bytes32(stringToBytes32(\"75,242,212,19,133,13,25,153,156,117,38,207,43,221,37,205,76,41,218,122,153,98,154,185,41,226,86,79,134,17,48,7\")),bytes32(stringToBytes32(\"75,44,236,194,242,1,217,154,125,250,252,1,52,132,238,220,22,142,1,66,116,139,227,90,6,13,84,163,51,90,203,132\")),bytes32(stringToBytes32(\"11,171,15,192,102,197,53,207,160,193,32,126,54,75,136,110,120,2,92,68,236,192,199,161,232,162,254,1,11,75,68,230\")),bytes32(stringToBytes32(\"8,83,65,133,182,42,65,244,82,185,49,20,217,74,187,79,176,214,249,63,139,94,123,255,230,23,114,53,34,162,137,223\")),bytes32(stringToBytes32(\"215,178,3,169,254,150,79,49,0,30,4,184,105,244,37,152,118,28,255,38,71,59,58,89,39,95,75,32,60,155,241,33\")),bytes32(stringToBytes32(\"237,94,70,246,67,4,181,179,46,81,11,132,206,26,25,172,26,100,74,207,97,16,111,92,193,22,249,177,181,54,233,145\")),bytes32(stringToBytes32(\"92,245,62,5,84,26,99,13,123,244,216,95,174,247,152,175,167,165,42,6,176,18,241,210,59,5,19,200,145,34,126,192\")),bytes32(stringToBytes32(\"216,208,182,31,249,66,136,110,86,84,192,225,2,205,71,141,13,226,15,5,242,89,238,153,12,84,110,83,196,85,28,199\")),bytes32(stringToBytes32(\"172,72,50,211,81,246,178,90,236,185,46,226,80,112,50,126,85,80,106,176,234,217,210,236,199,242,69,126,80,129,232,206\")),bytes32(stringToBytes32(\"216,73,131,6,150,193,21,249,144,234,184,168,143,162,21,134,44,203,73,92,33,238,216,47,137,220,175,65,40,108,220,176\")),bytes32(stringToBytes32(\"66,194,165,88,36,168,47,169,190,94,84,135,218,218,248,144,203,118,186,168,216,54,210,193,33,119,68,81,0,238,59,130\")),bytes32(stringToBytes32(\"254,220,246,99,167,179,46,125,177,240,104,211,159,192,135,228,66,18,251,96,17,177,231,130,46,208,160,195,193,177,112,154\")),bytes32(stringToBytes32(\"15,5,115,224,128,61,185,18,90,148,32,179,150,205,65,165,127,224,152,75,62,191,125,27,174,95,113,65,76,133,58,206\")),bytes32(stringToBytes32(\"23,216,183,91,221,251,226,142,224,67,152,113,235,6,248,45,84,83,66,130,146,33,125,231,65,75,24,35,141,245,251,168\")),bytes32(stringToBytes32(\"162,142,162,49,178,29,67,23,0,248,232,114,177,254,228,105,76,49,107,212,82,106,158,100,15,147,85,229,95,101,69,18\")),bytes32(stringToBytes32(\"188,63,246,131,61,167,121,235,101,103,154,90,130,130,71,124,37,127,156,27,40,194,14,126,81,22,202,167,117,173,182,113\")),bytes32(stringToBytes32(\"121,166,223,169,71,38,248,30,210,253,110,60,220,112,127,199,47,62,200,192,96,67,243,186,221,87,34,255,3,84,88,27\")),bytes32(stringToBytes32(\"185,130,204,7,208,66,25,201,39,77,49,136,77,196,14,168,158,100,37,52,159,172,137,78,236,203,183,86,218,173,71,73\")),bytes32(stringToBytes32(\"235,71,32,139,13,187,50,117,173,211,57,196,229,88,23,175,74,139,155,15,229,62,228,200,112,184,238,156,235,166,42,212\")),bytes32(stringToBytes32(\"221,70,91,244,142,194,27,152,139,128,6,150,41,150,141,122,249,103,83,34,23,254,16,72,146,196,37,224,56,28,114,17\")),bytes32(stringToBytes32(\"150,208,154,198,198,236,227,77,37,88,178,10,211,93,72,199,238,195,23,141,6,80,197,73,232,161,196,170,61,196,185,104\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.062ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.073ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[5],accounts[8],accounts[5],accounts[1],accounts[6],accounts[9],accounts[7],accounts[2],accounts[5],accounts[7],accounts[8],accounts[4],accounts[9],accounts[4],accounts[7],accounts[3],accounts[5],accounts[6],accounts[6],accounts[8],accounts[6],accounts[2],accounts[2],accounts[0],accounts[4],accounts[3],accounts[9],accounts[2],accounts[3],accounts[2],accounts[8],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[3],accounts[6],accounts[5],accounts[6],accounts[0],accounts[6],accounts[6],accounts[6],accounts[3],accounts[4],accounts[7],accounts[1],accounts[7],accounts[1],accounts[5],accounts[0],accounts[5],accounts[9],accounts[6],accounts[7],accounts[1],accounts[6],accounts[3],accounts[2],accounts[9],accounts[9],accounts[6],accounts[8]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[2,29,1337,1,5,256,2014223715,1532892062,1532892064,96,256,3,95,26,2,1532892063,97,27,26,1532892064,2,66,10000,2,64,66,64,2014223715,256,1532892064,65,27,5,2,257,1532892064,9999,28,0,1338,3,27,95,2,1532892063,254,27,96,29,97,3,28,257,9999,10000,257,2014223714,254,5,257,1532892064,4,254,2014223716,257]",
              "sol": "[uint256(2),uint256(29),uint256(1337),uint256(1),uint256(5),uint256(256),uint256(2014223715),uint256(1532892062),uint256(1532892064),uint256(96),uint256(256),uint256(3),uint256(95),uint256(26),uint256(2),uint256(1532892063),uint256(97),uint256(27),uint256(26),uint256(1532892064),uint256(2),uint256(66),uint256(10000),uint256(2),uint256(64),uint256(66),uint256(64),uint256(2014223715),uint256(256),uint256(1532892064),uint256(65),uint256(27),uint256(5),uint256(2),uint256(257),uint256(1532892064),uint256(9999),uint256(28),uint256(0),uint256(1338),uint256(3),uint256(27),uint256(95),uint256(2),uint256(1532892063),uint256(254),uint256(27),uint256(96),uint256(29),uint256(97),uint256(3),uint256(28),uint256(257),uint256(9999),uint256(10000),uint256(257),uint256(2014223714),uint256(254),uint256(5),uint256(257),uint256(1532892064),uint256(4),uint256(254),uint256(2014223716),uint256(257)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[8],accounts[5],accounts[1],accounts[6],accounts[9],accounts[7],accounts[2],accounts[5],accounts[7],accounts[8],accounts[4],accounts[9],accounts[4],accounts[7],accounts[3],accounts[5],accounts[6],accounts[6],accounts[8],accounts[6],accounts[2],accounts[2],accounts[0],accounts[4],accounts[3],accounts[9],accounts[2],accounts[3],accounts[2],accounts[8],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[3],accounts[6],accounts[5],accounts[6],accounts[0],accounts[6],accounts[6],accounts[6],accounts[3],accounts[4],accounts[7],accounts[1],accounts[7],accounts[1],accounts[5],accounts[0],accounts[5],accounts[9],accounts[6],accounts[7],accounts[1],accounts[6],accounts[3],accounts[2],accounts[9],accounts[9],accounts[6],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[2,29,1337,1,5,256,2014223715,1532892062,1532892064,96,256,3,95,26,2,1532892063,97,27,26,1532892064,2,66,10000,2,64,66,64,2014223715,256,1532892064,65,27,5,2,257,1532892064,9999,28,0,1338,3,27,95,2,1532892063,254,27,96,29,97,3,28,257,9999,10000,257,2014223714,254,5,257,1532892064,4,254,2014223716,257]",
                "sol": "[uint256(2),uint256(29),uint256(1337),uint256(1),uint256(5),uint256(256),uint256(2014223715),uint256(1532892062),uint256(1532892064),uint256(96),uint256(256),uint256(3),uint256(95),uint256(26),uint256(2),uint256(1532892063),uint256(97),uint256(27),uint256(26),uint256(1532892064),uint256(2),uint256(66),uint256(10000),uint256(2),uint256(64),uint256(66),uint256(64),uint256(2014223715),uint256(256),uint256(1532892064),uint256(65),uint256(27),uint256(5),uint256(2),uint256(257),uint256(1532892064),uint256(9999),uint256(28),uint256(0),uint256(1338),uint256(3),uint256(27),uint256(95),uint256(2),uint256(1532892063),uint256(254),uint256(27),uint256(96),uint256(29),uint256(97),uint256(3),uint256(28),uint256(257),uint256(9999),uint256(10000),uint256(257),uint256(2014223714),uint256(254),uint256(5),uint256(257),uint256(1532892064),uint256(4),uint256(254),uint256(2014223716),uint256(257)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[4],accounts[1],accounts[8],accounts[9],accounts[9],accounts[2],accounts[4],accounts[3],accounts[7],accounts[5],accounts[6],accounts[8],accounts[0],accounts[4],accounts[1],accounts[7],accounts[4],accounts[5],accounts[6],accounts[8],accounts[0],accounts[5],accounts[1],accounts[3],accounts[3],accounts[4],accounts[8],accounts[7],accounts[5],accounts[2],accounts[8],accounts[6],accounts[6],accounts[6],accounts[4],accounts[5],accounts[8],accounts[4],accounts[6],accounts[5],accounts[5],accounts[9],accounts[7],accounts[3],accounts[9],accounts[7],accounts[9],accounts[5],accounts[1],accounts[4],accounts[6],accounts[5],accounts[5],accounts[6],accounts[9],accounts[6],accounts[6],accounts[8],accounts[0],accounts[6],accounts[3],accounts[0],accounts[9],accounts[8],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2,29,1337,1,5,256,2014223715,1532892062,1532892064,96,256,3,95,26,2,1532892063,97,27,26,1532892064,2,66,10000,2,64,66,64,2014223715,256,1532892064,65,27,5,2,257,1532892064,9999,28,0,1338,3,27,95,2,1532892063,254,27,96,29,97,3,28,257,9999,10000,257,2014223714,254,5,257,1532892064,4,254,2014223716,257]",
                "sol": "[uint256(2),uint256(29),uint256(1337),uint256(1),uint256(5),uint256(256),uint256(2014223715),uint256(1532892062),uint256(1532892064),uint256(96),uint256(256),uint256(3),uint256(95),uint256(26),uint256(2),uint256(1532892063),uint256(97),uint256(27),uint256(26),uint256(1532892064),uint256(2),uint256(66),uint256(10000),uint256(2),uint256(64),uint256(66),uint256(64),uint256(2014223715),uint256(256),uint256(1532892064),uint256(65),uint256(27),uint256(5),uint256(2),uint256(257),uint256(1532892064),uint256(9999),uint256(28),uint256(0),uint256(1338),uint256(3),uint256(27),uint256(95),uint256(2),uint256(1532892063),uint256(254),uint256(27),uint256(96),uint256(29),uint256(97),uint256(3),uint256(28),uint256(257),uint256(9999),uint256(10000),uint256(257),uint256(2014223714),uint256(254),uint256(5),uint256(257),uint256(1532892064),uint256(4),uint256(254),uint256(2014223716),uint256(257)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[2,29,1337,1,5,256,2014223715,1532892062,1532892064,96,256,3,95,26,2,1532892063,97,27,26,1532892064,2,66,10000,2,64,66,64,2014223715,256,1532892064,65,27,5,2,257,1532892064,9999,28,0,1338,3,27,95,2,1532892063,254,27,96,29,97,3,28,257,9999,10000,257,2014223714,254,5,257,1532892064,4,254,2014223716,257]",
                "sol": "[uint256(2),uint256(29),uint256(1337),uint256(1),uint256(5),uint256(256),uint256(2014223715),uint256(1532892062),uint256(1532892064),uint256(96),uint256(256),uint256(3),uint256(95),uint256(26),uint256(2),uint256(1532892063),uint256(97),uint256(27),uint256(26),uint256(1532892064),uint256(2),uint256(66),uint256(10000),uint256(2),uint256(64),uint256(66),uint256(64),uint256(2014223715),uint256(256),uint256(1532892064),uint256(65),uint256(27),uint256(5),uint256(2),uint256(257),uint256(1532892064),uint256(9999),uint256(28),uint256(0),uint256(1338),uint256(3),uint256(27),uint256(95),uint256(2),uint256(1532892063),uint256(254),uint256(27),uint256(96),uint256(29),uint256(97),uint256(3),uint256(28),uint256(257),uint256(9999),uint256(10000),uint256(257),uint256(2014223714),uint256(254),uint256(5),uint256(257),uint256(1532892064),uint256(4),uint256(254),uint256(2014223716),uint256(257)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.078ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.079ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[4],accounts[3],accounts[5],accounts[8],accounts[0],accounts[2],accounts[2],accounts[1],accounts[8],accounts[6],accounts[8],accounts[6],accounts[7],accounts[8],accounts[6],accounts[8],accounts[4],accounts[1],accounts[1],accounts[7],accounts[2],accounts[3],accounts[9],accounts[7],accounts[6],accounts[4],accounts[6],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[4],accounts[3],accounts[5],accounts[8],accounts[0],accounts[2],accounts[2],accounts[1],accounts[8],accounts[6],accounts[8],accounts[6],accounts[7],accounts[8],accounts[6],accounts[8],accounts[4],accounts[1],accounts[1],accounts[7],accounts[2],accounts[3],accounts[9],accounts[7],accounts[6],accounts[4],accounts[6],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[4],accounts[3],accounts[5],accounts[8],accounts[0],accounts[2],accounts[2],accounts[1],accounts[8],accounts[6],accounts[8],accounts[6],accounts[7],accounts[8],accounts[6],accounts[8],accounts[4],accounts[1],accounts[1],accounts[7],accounts[2],accounts[3],accounts[9],accounts[7],accounts[6],accounts[4],accounts[6],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.083ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.084ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+317",
              "sol": "block.timestamp+317"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+317",
                "sol": "block.timestamp+317"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.090ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.095ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.099ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.105ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.109ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.112ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.112ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.114ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[7],accounts[1],accounts[3],accounts[9],accounts[7],accounts[3],accounts[0],accounts[2],accounts[6],accounts[9],accounts[9],accounts[8],accounts[5],accounts[6],accounts[7],accounts[4],accounts[8],accounts[8],accounts[0],accounts[2],accounts[5],accounts[3],accounts[5],accounts[2],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[1],accounts[3],accounts[9],accounts[7],accounts[3],accounts[0],accounts[2],accounts[6],accounts[9],accounts[9],accounts[8],accounts[5],accounts[6],accounts[7],accounts[4],accounts[8],accounts[8],accounts[0],accounts[2],accounts[5],accounts[3],accounts[5],accounts[2],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[1],accounts[3],accounts[9],accounts[7],accounts[3],accounts[0],accounts[2],accounts[6],accounts[9],accounts[9],accounts[8],accounts[5],accounts[6],accounts[7],accounts[4],accounts[8],accounts[8],accounts[0],accounts[2],accounts[5],accounts[3],accounts[5],accounts[2],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.116ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:42:01.117ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:42:01.117ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}