const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("OffChainPayments",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[8],2014223714,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[8],2014223714,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[5],28,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[5],28,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[4],{from:accounts[4]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[4],{from:accounts[4]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[3],1336,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[3],1336,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[2],{from:accounts[3]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[2],{from:accounts[3]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(1532892062,contractRedeemableToken.address,contractPaymentTokenMock.address,accounts[4],28,254,{from:accounts[9]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(1532892062,contractRedeemableToken.address,contractPaymentTokenMock.address,accounts[4],28,254,{from:accounts[9]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[4],5,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[4],5,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractPaymentTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373,{from:accounts[4]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractPaymentTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+373,{from:accounts[4]}');
  });
  
  it('Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length', async () => {
    let result = await contractOffChainPayments.recordPayments([accounts[7],accounts[7],accounts[5],accounts[6],accounts[9],accounts[7],accounts[7],accounts[2],accounts[7],accounts[0],accounts[0],accounts[6],accounts[9],accounts[4],accounts[4],accounts[9],accounts[1],accounts[4],accounts[1],accounts[9],accounts[4],accounts[5],accounts[6],accounts[9],accounts[8],accounts[9],accounts[4]], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[4]});
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[7],accounts[7],accounts[5],accounts[6],accounts[9],accounts[7],accounts[7],accounts[2],accounts[7],accounts[0],accounts[0],accounts[6],accounts[9],accounts[4],accounts[4],accounts[9],accounts[1],accounts[4],accounts[1],accounts[9],accounts[4],accounts[5],accounts[6],accounts[9],accounts[8],accounts[9],accounts[4]], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[9]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[4]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[9],accounts[4],accounts[7],accounts[1],accounts[0],accounts[1],accounts[5],accounts[2],accounts[6],accounts[0],accounts[0],accounts[8],accounts[2],accounts[9],accounts[9],accounts[9],accounts[5],accounts[9],accounts[2],accounts[1],accounts[1],accounts[5],accounts[0],accounts[5],accounts[2],accounts[9],accounts[1],accounts[2]], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[4]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[6],accounts[7],accounts[5],accounts[8],accounts[2],accounts[3],accounts[7],accounts[2],accounts[3],accounts[9],accounts[8],accounts[3],accounts[9],accounts[0],accounts[1],accounts[4],accounts[9],accounts[0],accounts[1],accounts[1],accounts[1],accounts[5],accounts[0],accounts[3],accounts[4],accounts[0],accounts[1],accounts[2]], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[4]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[7],accounts[7],accounts[5],accounts[2],accounts[5],accounts[2],accounts[4],accounts[8],accounts[7],accounts[2],accounts[9],accounts[6],accounts[2],accounts[6],accounts[8],accounts[5],accounts[0],accounts[5],accounts[9],accounts[3],accounts[8],accounts[3],accounts[1],accounts[9],accounts[8],accounts[7],accounts[0],accounts[3]], [1336,5,10000,3,96,1,29,1336,97,9999,27,96,2014223714,95,66,1338,66,5,27,5,26,1,64,96,1338,2014223714,255], [26,29,257,66,3,28,9999,97,1532892063,29,0,6,97,1337,29,254,64,6,27,66,4,255,254,256,96,9999,64], [[4,38,4,29,52,230,112,106,217,32,253,29,185,219,47,6,143,240,82,165,40,112,70,225,30,148,194,210,218,72,247,190],[152,242,169,59,98,170,136,189,126,119,67,232,20,130,40,28,119,254,102,71,174,17,187,44,136,237,197,240,183,178,100,77],[228,54,100,118,128,61,184,181,234,215,213,125,109,139,139,156,65,27,134,222,113,230,72,60,95,63,60,225,79,152,113,63],[74,163,195,39,234,141,174,27,228,29,39,217,29,109,170,239,196,69,119,3,1,168,161,131,247,129,70,81,97,191,171,192],[164,69,228,202,194,223,245,175,49,211,69,54,158,36,224,5,235,68,159,12,62,233,178,120,70,242,15,226,203,235,196,237],[81,59,160,46,131,45,251,82,73,5,44,122,30,43,237,49,227,92,231,66,130,125,254,78,63,78,56,73,183,101,205,58],[100,231,253,6,147,124,134,68,209,135,50,147,204,81,52,219,244,63,65,237,110,0,133,246,249,175,53,82,75,108,198,147],[34,110,149,62,166,208,123,23,124,47,254,131,41,129,186,140,240,191,251,61,199,253,124,183,53,87,171,122,250,220,170,57],[90,245,152,237,195,56,89,237,209,112,23,181,172,119,51,191,200,79,208,130,202,248,130,108,96,123,100,1,30,127,116,190],[106,99,212,60,82,122,206,34,149,27,94,14,124,54,248,152,16,197,29,171,159,7,105,18,106,18,177,210,230,237,157,64],[149,229,9,236,93,143,106,48,152,118,64,17,32,56,231,74,174,217,154,195,142,254,166,104,104,15,196,82,26,95,38,100],[239,127,10,38,40,245,79,68,44,146,186,165,53,210,75,113,9,190,1,2,155,108,139,42,248,231,221,224,180,25,13,196],[132,167,236,83,154,47,119,158,253,155,24,239,151,201,150,88,115,177,20,240,155,105,59,9,164,105,75,219,31,140,233,66],[181,181,194,152,116,166,243,221,39,207,67,148,199,51,43,242,1,223,73,89,63,214,91,181,80,189,115,74,107,79,51,248],[111,111,245,181,57,140,226,91,48,119,213,1,125,96,80,60,231,245,64,198,0,84,191,212,241,205,141,253,225,106,174,101],[62,173,101,196,236,35,187,231,90,88,65,78,42,225,182,14,6,245,63,247,29,162,162,137,98,1,102,27,142,23,57,53],[8,6,173,96,237,74,60,80,224,46,32,111,59,86,209,21,31,218,208,67,243,140,178,98,225,70,106,100,222,187,17,72],[250,216,97,234,197,36,222,109,159,236,76,150,233,31,202,237,162,45,52,106,195,78,44,143,245,235,31,137,226,204,138,201],[13,48,84,210,113,66,237,57,9,194,139,5,4,123,140,132,182,80,157,159,52,122,71,85,229,70,30,247,80,230,47,170],[183,59,182,65,138,78,157,49,125,98,237,68,55,143,171,119,150,207,67,221,205,15,158,40,71,233,232,60,233,192,34,108],[7,29,134,40,176,159,35,135,141,203,167,25,156,5,16,116,194,146,239,67,43,115,69,60,33,86,178,221,57,105,117,251],[191,183,60,235,240,138,137,148,237,246,120,128,43,193,214,189,79,131,198,74,85,245,85,113,210,115,72,240,230,233,249,102],[240,248,125,195,175,107,60,24,95,22,94,59,205,42,249,77,52,158,174,198,50,166,171,69,215,160,131,252,8,93,222,59],[112,97,83,223,89,46,173,168,63,148,219,205,194,48,177,55,218,39,149,168,5,85,44,26,16,216,157,62,4,234,141,13],[39,185,139,199,22,73,215,176,57,174,124,175,150,51,40,53,140,23,150,35,182,222,104,51,59,96,146,194,155,72,251,154],[252,242,97,39,65,198,73,237,68,55,12,67,60,154,1,139,24,53,77,249,199,124,170,15,31,137,126,158,165,117,121,56],[200,101,155,252,130,238,133,162,251,123,144,107,207,113,191,230,242,0,16,211,76,21,241,148,114,162,216,150,103,201,111,63]],{from: accounts[4]}),'revert');
  });
  it('Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractOffChainPayments.lookUpPaymentIndex(accounts[1], [198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93],{from: accounts[0]});
  });
  it('Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.lookUpPaymentIndex("0x0000000000000000000000000000000000000000", [198,95,139,163,239,236,175,232,103,62,36,48,197,45,97,21,25,247,248,228,22,199,119,31,3,91,41,156,209,9,217,93],{from: accounts[0]}),'revert');
  });
  it('Should execute challengePayment(uint256,uint256)', async () => {
    let result = await contractOffChainPayments.challengePayment(0, 1532892064,{from: accounts[0]});
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[0], 2014223714, [78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69], 1337,{from: accounts[4]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[0], 2014223714, [78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69], 1337,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[0], -1, [78,19,236,131,181,149,77,2,224,178,55,248,195,0,202,204,32,165,17,241,40,22,110,116,88,38,12,142,1,25,252,69], 1337,{from: accounts[4]}),'revert');
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[6], 257, [208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11], 9999,{from: accounts[4]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[6], 257, [208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11], 9999,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[6], -1, [208,232,232,180,177,6,230,244,143,207,216,80,185,219,188,8,142,16,33,16,164,200,134,138,227,51,221,18,209,3,225,11], 9999,{from: accounts[4]}),'revert');
  });
});
