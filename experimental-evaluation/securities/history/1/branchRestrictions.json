,{
  "2020-11-10T06:04:16.320ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:22.661ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:28.954ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:35.371ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:41.932ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:48.422ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:04:56.552ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:04.768ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:11.356ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:18.140ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+166",
              "sol": "block.timestamp+166"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+166",
                "sol": "block.timestamp+166"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+166",
                "sol": "block.timestamp+166"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+166",
                "sol": "block.timestamp+166"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.918ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.920ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.923ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.925ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[3],accounts[5],accounts[5],accounts[3],accounts[1],accounts[3],accounts[4],accounts[3],accounts[7],accounts[7],accounts[8],accounts[9],accounts[1],accounts[4],accounts[9],accounts[7],accounts[3],accounts[9],accounts[2],accounts[0],accounts[0],accounts[5],accounts[8],accounts[8],accounts[7],accounts[5],accounts[2],accounts[1],accounts[9],accounts[1],accounts[0],accounts[9],accounts[3],accounts[0],accounts[4],accounts[8],accounts[0],accounts[7],accounts[9],accounts[0],accounts[6],accounts[5],accounts[3],accounts[4],accounts[3],accounts[1],accounts[3],accounts[4],accounts[3],accounts[0],accounts[1],accounts[5],accounts[2],accounts[6],accounts[1],accounts[2],accounts[9],accounts[0],accounts[6],accounts[6],accounts[6],accounts[7],accounts[8],accounts[9],accounts[7],accounts[0],accounts[2],accounts[5],accounts[1],accounts[9],accounts[5],accounts[2],accounts[1],accounts[6],accounts[1],accounts[0],accounts[4],accounts[3],accounts[9],accounts[7],accounts[8],accounts[2],accounts[1],accounts[1],accounts[9],accounts[5],accounts[0],accounts[7],accounts[2],accounts[5],accounts[0],accounts[8],accounts[6],accounts[3],accounts[7],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
              "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
            },
            {
              "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
              "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
            },
            {
              "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
              "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[3],accounts[5],accounts[5],accounts[3],accounts[1],accounts[3],accounts[4],accounts[3],accounts[7],accounts[7],accounts[8],accounts[9],accounts[1],accounts[4],accounts[9],accounts[7],accounts[3],accounts[9],accounts[2],accounts[0],accounts[0],accounts[5],accounts[8],accounts[8],accounts[7],accounts[5],accounts[2],accounts[1],accounts[9],accounts[1],accounts[0],accounts[9],accounts[3],accounts[0],accounts[4],accounts[8],accounts[0],accounts[7],accounts[9],accounts[0],accounts[6],accounts[5],accounts[3],accounts[4],accounts[3],accounts[1],accounts[3],accounts[4],accounts[3],accounts[0],accounts[1],accounts[5],accounts[2],accounts[6],accounts[1],accounts[2],accounts[9],accounts[0],accounts[6],accounts[6],accounts[6],accounts[7],accounts[8],accounts[9],accounts[7],accounts[0],accounts[2],accounts[5],accounts[1],accounts[9],accounts[5],accounts[2],accounts[1],accounts[6],accounts[1],accounts[0],accounts[4],accounts[3],accounts[9],accounts[7],accounts[8],accounts[2],accounts[1],accounts[1],accounts[9],accounts[5],accounts[0],accounts[7],accounts[2],accounts[5],accounts[0],accounts[8],accounts[6],accounts[3],accounts[7],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
                "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
              },
              {
                "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
                "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
              },
              {
                "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
                "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
                "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
              },
              {
                "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
                "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
              },
              {
                "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
                "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[0],accounts[7],accounts[2],accounts[0],accounts[3],accounts[0],accounts[8],accounts[9],accounts[9],accounts[4],accounts[1],accounts[5],accounts[0],accounts[5],accounts[8],accounts[6],accounts[3],accounts[7],accounts[7],accounts[3],accounts[3],accounts[4],accounts[9],accounts[4],accounts[6],accounts[5],accounts[9],accounts[8],accounts[9],accounts[8],accounts[1],accounts[5],accounts[5],accounts[1],accounts[2],accounts[8],accounts[7],accounts[2],accounts[5],accounts[9],accounts[2],accounts[2],accounts[0],accounts[0],accounts[2],accounts[8],accounts[8],accounts[4],accounts[6],accounts[5],accounts[6],accounts[9],accounts[0],accounts[3],accounts[4],accounts[8],accounts[1],accounts[5],accounts[2],accounts[2],accounts[1],accounts[6],accounts[5],accounts[6],accounts[5],accounts[2],accounts[0],accounts[9],accounts[4],accounts[6],accounts[8],accounts[3],accounts[6],accounts[5],accounts[8],accounts[3],accounts[9],accounts[1],accounts[9],accounts[1],accounts[4],accounts[5],accounts[9],accounts[6],accounts[6],accounts[0],accounts[4],accounts[1],accounts[2],accounts[1],accounts[0],accounts[5],accounts[4],accounts[6],accounts[8],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
                "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
              },
              {
                "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
                "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
              },
              {
                "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
                "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[2],accounts[9],accounts[8],accounts[7],accounts[7],accounts[0],accounts[3],accounts[1],accounts[0],accounts[8],accounts[4],accounts[6],accounts[2],accounts[0],accounts[5],accounts[3],accounts[1],accounts[4],accounts[7],accounts[2],accounts[6],accounts[7],accounts[4],accounts[4],accounts[7],accounts[9],accounts[2],accounts[7],accounts[1],accounts[9],accounts[1],accounts[3],accounts[1],accounts[6],accounts[4],accounts[5],accounts[4],accounts[3],accounts[8],accounts[5],accounts[0],accounts[3],accounts[3],accounts[9],accounts[4],accounts[0],accounts[7],accounts[0],accounts[3],accounts[5],accounts[6],accounts[6],accounts[7],accounts[7],accounts[6],accounts[5],accounts[4],accounts[1],accounts[6],accounts[2],accounts[5],accounts[8],accounts[0],accounts[7],accounts[9],accounts[0],accounts[1],accounts[8],accounts[1],accounts[0],accounts[3],accounts[7],accounts[4],accounts[1],accounts[9],accounts[0],accounts[6],accounts[1],accounts[6],accounts[6],accounts[3],accounts[3],accounts[3],accounts[8],accounts[0],accounts[0],accounts[0],accounts[1],accounts[9],accounts[3],accounts[4],accounts[1],accounts[8],accounts[5],accounts[4],accounts[9],accounts[3]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
                "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
              },
              {
                "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
                "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
              },
              {
                "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
                "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[5],accounts[6],accounts[8],accounts[4],accounts[3],accounts[2],accounts[3],accounts[3],accounts[9],accounts[0],accounts[0],accounts[8],accounts[2],accounts[5],accounts[7],accounts[2],accounts[2],accounts[8],accounts[7],accounts[4],accounts[8],accounts[4],accounts[7],accounts[9],accounts[2],accounts[7],accounts[2],accounts[2],accounts[7],accounts[8],accounts[4],accounts[8],accounts[4],accounts[3],accounts[7],accounts[8],accounts[0],accounts[1],accounts[4],accounts[3],accounts[9],accounts[2],accounts[2],accounts[3],accounts[7],accounts[8],accounts[3],accounts[3],accounts[3],accounts[1],accounts[9],accounts[3],accounts[1],accounts[1],accounts[3],accounts[3],accounts[7],accounts[8],accounts[6],accounts[2],accounts[1],accounts[4],accounts[4],accounts[7],accounts[9],accounts[8],accounts[0],accounts[2],accounts[8],accounts[5],accounts[0],accounts[2],accounts[5],accounts[9],accounts[5],accounts[9],accounts[8],accounts[1],accounts[9],accounts[3],accounts[3],accounts[7],accounts[2],accounts[2],accounts[8],accounts[2],accounts[6],accounts[7],accounts[5],accounts[3],accounts[5],accounts[1],accounts[2],accounts[7],accounts[9],accounts[0],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[65,254,9999,1,29,1338,2014223715,1532892063,66,10001,5,1336,66,95,255,2,28,254,1532892062,9999,2014223715,1337,255,2,1532892064,1532892062,2,1336,1532892063,1532892062,1336,2014223716,1532892064,3,254,0,255,1,257,29,256,256,65,2,2014223714,96,10000,29,1,1336,6,255,4,1336,1,10000,1338,6,255,1338,2014223715,1337,2014223716,29,5,1336,5,2014223714,3,26,1336,1,96,27,9999,97,97,2014223716,257,4,10000,1336,95,1532892064,2,9999,10000,29,1532892062,1532892062,1336,26,27,1532892062,1336,2014223715]",
                "sol": "[uint256(65),uint256(254),uint256(9999),uint256(1),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892063),uint256(66),uint256(10001),uint256(5),uint256(1336),uint256(66),uint256(95),uint256(255),uint256(2),uint256(28),uint256(254),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(1337),uint256(255),uint256(2),uint256(1532892064),uint256(1532892062),uint256(2),uint256(1336),uint256(1532892063),uint256(1532892062),uint256(1336),uint256(2014223716),uint256(1532892064),uint256(3),uint256(254),uint256(0),uint256(255),uint256(1),uint256(257),uint256(29),uint256(256),uint256(256),uint256(65),uint256(2),uint256(2014223714),uint256(96),uint256(10000),uint256(29),uint256(1),uint256(1336),uint256(6),uint256(255),uint256(4),uint256(1336),uint256(1),uint256(10000),uint256(1338),uint256(6),uint256(255),uint256(1338),uint256(2014223715),uint256(1337),uint256(2014223716),uint256(29),uint256(5),uint256(1336),uint256(5),uint256(2014223714),uint256(3),uint256(26),uint256(1336),uint256(1),uint256(96),uint256(27),uint256(9999),uint256(97),uint256(97),uint256(2014223716),uint256(257),uint256(4),uint256(10000),uint256(1336),uint256(95),uint256(1532892064),uint256(2),uint256(9999),uint256(10000),uint256(29),uint256(1532892062),uint256(1532892062),uint256(1336),uint256(26),uint256(27),uint256(1532892062),uint256(1336),uint256(2014223715)]"
              },
              {
                "js": "[4,6,255,0,97,0,96,96,27,96,97,96,95,27,1337,96,2014223714,257,2014223716,1532892062,0,1532892064,257,256,5,64,256,26,2,29,0,0,1338,66,0,256,95,96,2014223714,66,6,5,97,2,1336,2,95,10000,1336,1532892062,10001,1,257,97,1337,2,97,9999,254,10001,254,1532892064,2,97,1338,27,96,29,0,1,2014223714,255,256,95,2014223715,0,95,27,66,66,1336,1338,64,26,0,1532892063,1336,1532892063,4,96,1338,10001,96,254,1336,97]",
                "sol": "[uint256(4),uint256(6),uint256(255),uint256(0),uint256(97),uint256(0),uint256(96),uint256(96),uint256(27),uint256(96),uint256(97),uint256(96),uint256(95),uint256(27),uint256(1337),uint256(96),uint256(2014223714),uint256(257),uint256(2014223716),uint256(1532892062),uint256(0),uint256(1532892064),uint256(257),uint256(256),uint256(5),uint256(64),uint256(256),uint256(26),uint256(2),uint256(29),uint256(0),uint256(0),uint256(1338),uint256(66),uint256(0),uint256(256),uint256(95),uint256(96),uint256(2014223714),uint256(66),uint256(6),uint256(5),uint256(97),uint256(2),uint256(1336),uint256(2),uint256(95),uint256(10000),uint256(1336),uint256(1532892062),uint256(10001),uint256(1),uint256(257),uint256(97),uint256(1337),uint256(2),uint256(97),uint256(9999),uint256(254),uint256(10001),uint256(254),uint256(1532892064),uint256(2),uint256(97),uint256(1338),uint256(27),uint256(96),uint256(29),uint256(0),uint256(1),uint256(2014223714),uint256(255),uint256(256),uint256(95),uint256(2014223715),uint256(0),uint256(95),uint256(27),uint256(66),uint256(66),uint256(1336),uint256(1338),uint256(64),uint256(26),uint256(0),uint256(1532892063),uint256(1336),uint256(1532892063),uint256(4),uint256(96),uint256(1338),uint256(10001),uint256(96),uint256(254),uint256(1336),uint256(97)]"
              },
              {
                "js": "[[248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103],[109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147],[59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66],[159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87],[123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11],[206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159],[201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213],[195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244],[149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195],[253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252],[73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237],[35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239],[153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231],[242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44],[17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10],[0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116],[113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238],[16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24],[106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117],[3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153],[124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198],[161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78],[139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147],[189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49],[128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5],[132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151],[49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172],[104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230],[156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131],[5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116],[2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222],[202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227],[33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144],[74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244],[220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42],[24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14],[139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25],[15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41],[13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8],[227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108],[227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186],[104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75],[67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200],[129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61],[94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153],[0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92],[180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191],[178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182],[10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186],[164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54],[255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222],[134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83],[209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196],[205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40],[183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232],[87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175],[213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70],[175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233],[69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121],[53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169],[202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9],[90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217],[96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237],[152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255],[120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141],[160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52],[68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39],[47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216],[240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63],[166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35],[36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124],[32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83],[201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54],[236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78],[159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11],[40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194],[14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93],[12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96],[245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105],[186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37],[58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87],[115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202],[6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93],[44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246],[165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140],[217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41],[9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239],[11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38],[77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9],[98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55],[123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187],[154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110],[194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66],[250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237],[205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200],[67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105]]",
                "sol": "[bytes32(stringToBytes32(\"248,97,171,68,104,173,128,69,34,23,99,192,133,184,121,26,169,40,35,190,83,163,112,235,52,174,105,171,221,71,22,103\")),bytes32(stringToBytes32(\"109,142,202,184,105,13,72,62,255,238,8,13,21,134,231,173,252,73,26,237,146,115,158,36,135,135,214,189,163,46,144,147\")),bytes32(stringToBytes32(\"59,200,2,74,100,89,135,209,19,39,58,171,189,166,32,125,65,191,1,49,157,106,26,93,146,85,66,14,182,111,144,66\")),bytes32(stringToBytes32(\"159,119,195,223,67,197,81,188,101,26,70,192,30,80,203,77,62,212,249,160,61,44,55,112,2,174,73,93,248,104,194,87\")),bytes32(stringToBytes32(\"123,27,213,207,55,41,10,53,188,95,246,217,166,7,29,33,251,53,83,124,245,56,204,138,76,2,130,47,159,247,13,11\")),bytes32(stringToBytes32(\"206,163,65,30,112,171,105,174,225,129,169,17,78,27,107,111,186,166,59,168,166,1,253,175,133,243,27,177,117,98,65,159\")),bytes32(stringToBytes32(\"201,208,93,178,118,44,227,124,194,79,210,205,19,109,209,201,127,173,19,36,210,189,119,245,78,39,76,72,113,206,177,213\")),bytes32(stringToBytes32(\"195,245,245,179,132,118,61,201,127,243,88,227,195,245,24,119,241,216,72,108,237,168,35,45,246,239,46,122,218,144,152,244\")),bytes32(stringToBytes32(\"149,238,107,228,114,45,231,181,16,9,164,56,115,108,43,254,253,64,0,212,25,4,178,52,185,4,235,175,189,116,221,195\")),bytes32(stringToBytes32(\"253,26,121,28,28,121,5,142,195,251,75,148,18,42,168,142,103,12,111,121,150,146,34,196,50,138,255,23,1,53,247,252\")),bytes32(stringToBytes32(\"73,249,200,71,183,205,159,25,243,39,174,185,26,162,187,237,199,109,163,199,26,100,148,9,187,37,9,116,254,5,104,237\")),bytes32(stringToBytes32(\"35,223,174,129,33,164,202,138,190,151,27,122,18,146,149,210,73,197,61,87,67,161,55,107,101,111,105,198,251,136,90,239\")),bytes32(stringToBytes32(\"153,226,144,56,194,36,195,11,101,170,207,190,86,96,253,138,63,52,51,239,231,93,177,14,250,42,149,213,171,195,100,231\")),bytes32(stringToBytes32(\"242,202,40,187,167,233,198,230,134,227,108,88,176,142,109,42,229,60,204,182,64,206,101,162,18,232,161,27,115,209,61,44\")),bytes32(stringToBytes32(\"17,76,157,174,133,13,59,65,143,4,102,135,161,62,65,48,16,20,80,91,88,238,226,155,43,218,46,141,152,196,91,10\")),bytes32(stringToBytes32(\"0,173,56,39,240,117,106,146,123,144,246,75,177,100,172,27,128,32,211,233,137,49,178,11,190,54,110,44,213,1,122,116\")),bytes32(stringToBytes32(\"113,174,177,16,122,195,54,83,239,84,180,120,165,167,77,147,203,207,182,160,23,70,141,146,144,16,41,210,251,54,38,238\")),bytes32(stringToBytes32(\"16,186,229,134,226,134,52,55,109,179,61,119,24,75,43,222,254,139,241,147,123,134,66,148,61,54,6,254,42,18,110,24\")),bytes32(stringToBytes32(\"106,225,16,42,196,177,84,24,189,233,30,103,249,122,124,42,108,25,208,121,215,218,216,176,72,223,242,71,51,26,112,117\")),bytes32(stringToBytes32(\"3,109,36,82,235,132,218,98,116,162,34,226,213,159,195,211,220,152,247,35,173,46,35,222,11,35,8,120,18,244,87,153\")),bytes32(stringToBytes32(\"124,100,57,123,252,205,57,233,191,172,186,182,251,88,67,116,231,134,129,195,131,229,234,60,210,225,47,233,169,114,225,198\")),bytes32(stringToBytes32(\"161,222,86,31,199,171,11,176,63,214,223,251,67,237,95,12,17,195,228,77,103,60,22,252,8,137,18,23,138,14,202,78\")),bytes32(stringToBytes32(\"139,219,168,111,212,25,234,235,245,146,226,53,220,158,135,208,119,65,234,130,147,207,191,11,45,23,180,162,93,133,231,147\")),bytes32(stringToBytes32(\"189,60,104,174,89,228,233,82,102,50,24,4,35,237,188,237,108,79,184,192,87,69,209,219,239,70,253,127,26,63,238,49\")),bytes32(stringToBytes32(\"128,20,6,226,67,198,183,194,24,182,8,237,119,122,51,156,96,232,247,99,197,22,101,84,120,147,241,49,198,84,186,5\")),bytes32(stringToBytes32(\"132,251,248,169,187,94,100,47,109,164,134,80,207,219,36,17,106,28,21,221,105,13,56,67,205,19,85,92,67,213,150,151\")),bytes32(stringToBytes32(\"49,243,171,238,174,28,53,214,232,229,133,91,134,201,143,58,33,166,22,246,100,151,218,80,188,44,30,120,130,97,102,172\")),bytes32(stringToBytes32(\"104,228,143,39,121,171,24,170,124,130,129,58,187,23,51,173,162,243,234,66,97,85,8,226,110,218,171,145,75,169,47,230\")),bytes32(stringToBytes32(\"156,149,178,34,44,154,166,25,104,166,191,204,54,39,89,73,191,37,195,211,105,146,18,119,245,148,103,2,92,69,241,131\")),bytes32(stringToBytes32(\"5,13,35,229,39,246,121,185,199,50,42,216,245,22,223,252,109,152,129,129,152,119,78,96,99,238,145,150,40,24,95,116\")),bytes32(stringToBytes32(\"2,41,225,37,104,19,17,79,32,89,152,122,165,52,203,212,83,164,82,236,146,52,168,44,172,249,65,70,60,180,120,222\")),bytes32(stringToBytes32(\"202,19,140,232,222,88,218,136,230,130,149,110,234,252,197,104,58,19,117,62,82,66,84,19,219,189,10,73,14,182,108,227\")),bytes32(stringToBytes32(\"33,161,92,219,29,36,100,206,202,147,76,159,175,238,113,179,238,220,114,181,212,23,173,205,102,192,30,137,165,171,212,144\")),bytes32(stringToBytes32(\"74,60,229,119,179,219,191,182,95,6,175,67,60,61,47,125,236,127,154,252,133,251,105,118,194,11,146,44,87,174,143,244\")),bytes32(stringToBytes32(\"220,178,14,4,109,2,52,176,227,7,36,44,175,11,253,212,98,55,47,88,135,178,181,132,26,172,108,90,58,18,166,42\")),bytes32(stringToBytes32(\"24,150,95,205,184,6,80,92,90,157,171,56,142,224,231,48,21,51,143,234,171,22,7,238,178,11,38,111,217,41,238,14\")),bytes32(stringToBytes32(\"139,118,59,187,231,233,124,77,220,145,79,124,244,31,233,40,209,252,145,95,215,163,60,140,180,27,144,246,115,23,219,25\")),bytes32(stringToBytes32(\"15,134,234,126,50,189,170,162,131,55,145,151,107,245,99,89,83,105,110,133,38,161,95,190,143,239,210,245,29,49,200,41\")),bytes32(stringToBytes32(\"13,142,178,27,20,255,150,140,164,155,197,74,235,80,50,167,80,196,134,8,250,11,108,204,231,81,215,19,4,200,233,8\")),bytes32(stringToBytes32(\"227,1,139,198,188,58,79,115,102,4,163,208,121,206,131,17,162,254,186,134,185,110,36,85,91,50,124,58,30,230,222,108\")),bytes32(stringToBytes32(\"227,254,147,206,247,183,24,33,166,243,112,55,31,216,64,10,124,162,41,106,110,196,148,199,241,165,128,36,68,57,150,186\")),bytes32(stringToBytes32(\"104,229,45,221,175,161,247,55,72,33,30,110,13,84,26,178,21,247,203,13,210,72,250,64,150,59,244,39,181,232,146,75\")),bytes32(stringToBytes32(\"67,6,32,144,231,82,255,254,62,128,192,177,71,38,13,220,123,20,95,167,63,113,153,149,238,224,112,64,132,247,104,200\")),bytes32(stringToBytes32(\"129,201,26,39,249,189,34,120,105,57,131,162,246,56,147,35,59,213,91,216,132,170,253,231,187,63,74,239,179,185,18,61\")),bytes32(stringToBytes32(\"94,188,152,37,70,45,87,61,165,74,167,34,159,150,98,203,83,17,160,45,34,237,232,15,17,203,55,165,224,209,149,153\")),bytes32(stringToBytes32(\"0,156,216,217,53,253,40,22,5,30,47,152,85,169,25,93,158,224,111,152,234,201,34,100,209,132,93,25,216,64,132,92\")),bytes32(stringToBytes32(\"180,227,155,75,10,154,15,18,33,37,33,59,148,244,149,41,55,130,57,227,79,184,71,170,90,54,113,109,104,33,62,191\")),bytes32(stringToBytes32(\"178,160,39,28,105,189,105,238,228,239,106,254,240,163,72,149,48,20,141,228,20,91,7,223,31,239,195,4,207,211,29,182\")),bytes32(stringToBytes32(\"10,200,40,232,58,250,163,55,66,154,144,144,232,139,127,253,123,177,113,114,249,192,231,151,75,133,15,105,7,232,221,186\")),bytes32(stringToBytes32(\"164,26,33,35,160,243,42,57,213,51,208,209,161,166,234,225,52,111,101,145,120,132,23,60,69,253,121,91,158,44,82,54\")),bytes32(stringToBytes32(\"255,138,121,157,51,27,140,43,0,223,198,191,182,216,66,157,112,84,172,248,243,53,220,130,104,240,191,207,171,53,206,222\")),bytes32(stringToBytes32(\"134,10,215,202,253,157,199,6,124,101,253,44,48,206,172,119,13,111,87,251,200,87,46,7,66,87,215,101,71,102,45,83\")),bytes32(stringToBytes32(\"209,171,223,26,243,81,214,195,188,189,111,109,142,226,103,186,238,190,119,26,119,223,120,50,75,69,28,101,0,195,220,196\")),bytes32(stringToBytes32(\"205,42,150,183,133,142,31,239,38,55,214,207,146,163,99,128,224,161,13,145,152,114,129,158,7,227,163,237,63,181,251,40\")),bytes32(stringToBytes32(\"183,4,175,195,180,164,132,168,178,8,50,108,43,8,97,11,153,38,156,203,46,239,96,240,124,8,25,246,18,128,222,232\")),bytes32(stringToBytes32(\"87,170,228,111,112,191,62,25,168,223,207,60,190,88,239,134,137,36,123,90,170,46,172,203,63,63,154,91,114,178,3,175\")),bytes32(stringToBytes32(\"213,135,140,158,237,23,42,162,112,125,177,84,103,130,158,43,178,149,177,8,72,46,107,95,38,250,146,75,160,4,254,70\")),bytes32(stringToBytes32(\"175,104,41,185,250,184,49,147,47,28,174,84,157,122,75,49,73,121,30,158,186,188,60,39,162,155,168,40,135,57,160,233\")),bytes32(stringToBytes32(\"69,223,175,209,177,167,45,61,144,205,247,3,128,139,170,4,28,202,36,101,253,77,20,55,24,36,21,198,196,160,198,121\")),bytes32(stringToBytes32(\"53,165,160,177,135,178,4,27,210,129,7,123,13,118,80,220,244,108,112,241,190,121,56,124,236,191,156,143,106,180,137,169\")),bytes32(stringToBytes32(\"202,156,237,107,3,88,45,90,133,103,48,31,132,91,0,164,235,213,230,34,31,224,41,118,101,187,111,15,203,255,110,9\")),bytes32(stringToBytes32(\"90,209,229,3,151,209,30,134,240,112,73,162,116,95,206,174,97,8,87,98,126,218,233,155,20,177,18,235,57,144,70,217\")),bytes32(stringToBytes32(\"96,38,213,241,50,160,198,140,10,190,68,162,75,118,149,20,10,220,172,52,16,202,74,13,150,149,214,165,187,83,71,237\")),bytes32(stringToBytes32(\"152,166,86,88,158,180,159,236,202,135,7,50,102,255,109,198,180,205,169,198,249,27,178,65,158,208,61,55,196,192,94,255\")),bytes32(stringToBytes32(\"120,127,243,115,152,174,137,193,247,75,55,158,156,18,57,7,163,159,19,213,40,145,181,28,184,251,110,125,241,61,160,141\")),bytes32(stringToBytes32(\"160,45,200,161,44,35,203,14,113,137,234,63,106,251,255,118,184,99,46,41,104,57,140,55,218,93,102,92,102,58,92,52\")),bytes32(stringToBytes32(\"68,2,51,188,155,124,2,187,162,125,240,129,24,91,162,123,165,58,237,107,68,90,43,131,177,225,90,234,219,127,164,39\")),bytes32(stringToBytes32(\"47,187,76,22,87,201,110,192,182,202,244,148,168,226,1,151,130,147,154,54,53,161,172,214,182,3,208,35,130,0,10,216\")),bytes32(stringToBytes32(\"240,167,241,30,9,240,148,71,190,88,96,151,84,97,169,234,116,192,97,180,159,87,189,15,190,219,162,51,74,75,152,63\")),bytes32(stringToBytes32(\"166,224,47,10,163,19,101,160,121,199,188,129,190,59,252,170,218,172,213,65,167,71,204,126,16,125,99,26,176,241,10,35\")),bytes32(stringToBytes32(\"36,208,208,230,81,109,67,56,110,3,150,59,1,42,37,51,215,182,118,191,246,69,89,170,6,84,100,41,135,253,99,124\")),bytes32(stringToBytes32(\"32,85,9,53,180,212,195,163,115,145,114,245,14,74,121,168,233,241,44,210,166,119,116,198,146,165,149,194,113,163,242,83\")),bytes32(stringToBytes32(\"201,205,246,222,193,159,93,167,108,230,249,221,81,102,142,137,107,148,79,105,162,2,200,71,239,14,228,67,250,82,193,54\")),bytes32(stringToBytes32(\"236,24,249,0,5,155,243,220,50,228,25,204,132,203,112,102,223,61,222,53,182,84,69,184,80,206,231,219,47,212,94,78\")),bytes32(stringToBytes32(\"159,155,129,223,255,86,168,219,190,215,145,32,5,152,25,111,166,101,22,183,49,115,218,134,37,47,180,154,98,184,179,11\")),bytes32(stringToBytes32(\"40,42,235,162,85,5,64,48,165,45,167,188,200,151,230,178,146,163,130,175,62,159,197,244,23,229,167,178,181,155,215,194\")),bytes32(stringToBytes32(\"14,133,96,67,96,15,147,13,201,110,149,174,43,0,151,50,145,87,1,225,128,132,169,15,99,150,59,82,6,181,211,93\")),bytes32(stringToBytes32(\"12,15,46,163,155,53,22,84,41,42,176,97,144,41,177,123,158,84,35,202,18,173,222,128,38,51,129,32,26,96,171,96\")),bytes32(stringToBytes32(\"245,129,29,43,51,221,228,163,146,228,137,103,89,141,161,72,210,163,41,48,49,234,218,35,158,45,186,153,136,31,43,105\")),bytes32(stringToBytes32(\"186,120,35,156,194,82,7,26,104,101,178,84,190,168,104,191,220,252,245,224,55,240,229,37,147,21,176,2,177,149,230,37\")),bytes32(stringToBytes32(\"58,82,174,173,86,126,251,20,73,247,65,186,211,110,253,18,134,228,241,239,32,250,126,45,133,211,241,19,254,185,106,87\")),bytes32(stringToBytes32(\"115,164,107,203,32,172,173,112,21,24,43,83,142,15,225,153,25,16,234,209,252,199,233,222,132,151,120,254,21,220,0,202\")),bytes32(stringToBytes32(\"6,83,175,220,167,212,202,196,152,0,231,238,184,22,5,127,58,197,142,58,34,132,57,223,241,145,213,253,179,47,1,93\")),bytes32(stringToBytes32(\"44,34,55,119,106,27,152,56,222,176,208,213,235,168,102,161,20,255,193,170,224,52,42,49,46,139,198,41,72,249,67,246\")),bytes32(stringToBytes32(\"165,174,103,60,235,100,148,231,47,24,171,113,195,75,93,181,92,101,189,65,246,24,239,243,177,107,41,161,104,228,194,140\")),bytes32(stringToBytes32(\"217,12,80,186,45,180,144,192,10,56,251,150,16,173,30,47,58,35,236,225,125,228,80,51,194,174,209,220,17,246,146,41\")),bytes32(stringToBytes32(\"9,108,88,78,210,4,64,158,233,82,76,157,147,9,134,82,102,217,88,114,189,137,8,207,34,173,228,96,84,222,105,239\")),bytes32(stringToBytes32(\"11,77,93,185,44,94,118,242,216,37,24,58,81,133,49,172,44,74,18,64,35,51,143,53,20,9,92,32,146,57,24,38\")),bytes32(stringToBytes32(\"77,103,249,207,37,92,22,157,173,115,234,51,80,117,87,158,97,191,32,84,192,31,153,183,203,122,193,69,6,179,102,9\")),bytes32(stringToBytes32(\"98,135,128,248,50,164,215,133,149,90,77,122,101,122,4,136,238,17,69,177,52,219,216,174,59,163,43,70,54,203,200,55\")),bytes32(stringToBytes32(\"123,133,200,130,116,248,9,230,72,184,215,182,194,46,168,37,249,161,179,6,82,160,249,233,126,78,225,206,251,35,224,187\")),bytes32(stringToBytes32(\"154,119,234,21,119,146,191,194,77,204,123,214,229,76,69,83,30,80,127,167,244,160,66,107,40,160,137,221,6,218,212,110\")),bytes32(stringToBytes32(\"194,219,86,205,119,105,131,182,24,91,8,250,70,95,19,167,27,61,158,205,215,150,132,81,190,34,169,60,82,114,66,66\")),bytes32(stringToBytes32(\"250,128,236,53,2,115,28,39,68,201,9,68,202,109,50,230,131,108,199,120,127,222,136,75,144,236,232,90,131,50,8,237\")),bytes32(stringToBytes32(\"205,185,30,72,67,176,88,197,82,117,53,153,186,90,246,233,147,248,133,87,168,41,50,53,239,93,232,165,17,21,77,200\")),bytes32(stringToBytes32(\"67,74,190,145,21,16,35,88,79,220,62,170,68,7,228,99,0,159,97,173,180,148,140,150,243,204,124,130,216,46,57,105\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.946ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[207,135,175,85,88,240,33,32,175,85,0,182,97,203,209,37,9,243,14,251,158,19,224,95,120,92,203,3,43,7,104,156]",
              "sol": "stringToBytes32(\"207,135,175,85,88,240,33,32,175,85,0,182,97,203,209,37,9,243,14,251,158,19,224,95,120,92,203,3,43,7,104,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[207,135,175,85,88,240,33,32,175,85,0,182,97,203,209,37,9,243,14,251,158,19,224,95,120,92,203,3,43,7,104,156]",
                "sol": "stringToBytes32(\"207,135,175,85,88,240,33,32,175,85,0,182,97,203,209,37,9,243,14,251,158,19,224,95,120,92,203,3,43,7,104,156\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.947ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:24.947ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "[138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14]",
              "sol": "stringToBytes32(\"138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "[138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14]",
                "sol": "stringToBytes32(\"138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14]",
                "sol": "stringToBytes32(\"138,207,70,91,173,81,47,51,235,104,43,229,24,227,215,42,69,34,66,238,177,185,177,239,20,151,60,158,237,9,130,14\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216]",
              "sol": "stringToBytes32(\"217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216]",
                "sol": "stringToBytes32(\"217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216]",
                "sol": "stringToBytes32(\"217,239,136,157,57,84,237,51,93,105,77,91,159,175,103,111,63,53,70,125,222,234,7,125,169,159,160,176,214,156,171,216\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.951ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:24.952ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[100,241,98,20,85,185,215,24,96,108,254,32,214,204,252,124,140,46,15,212,216,130,142,135,9,80,76,237,48,208,217,168],[149,226,220,49,125,235,3,230,38,246,195,233,182,158,235,40,120,190,38,20,54,35,58,149,253,211,188,152,197,101,125,229]]",
              "sol": "[bytes32(stringToBytes32(\"100,241,98,20,85,185,215,24,96,108,254,32,214,204,252,124,140,46,15,212,216,130,142,135,9,80,76,237,48,208,217,168\")),bytes32(stringToBytes32(\"149,226,220,49,125,235,3,230,38,246,195,233,182,158,235,40,120,190,38,20,54,35,58,149,253,211,188,152,197,101,125,229\"))]"
            },
            {
              "js": "[[123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27],[171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169]]",
              "sol": "[bytes32(stringToBytes32(\"123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27\")),bytes32(stringToBytes32(\"171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169\"))]"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[100,241,98,20,85,185,215,24,96,108,254,32,214,204,252,124,140,46,15,212,216,130,142,135,9,80,76,237,48,208,217,168],[149,226,220,49,125,235,3,230,38,246,195,233,182,158,235,40,120,190,38,20,54,35,58,149,253,211,188,152,197,101,125,229]]",
                "sol": "[bytes32(stringToBytes32(\"100,241,98,20,85,185,215,24,96,108,254,32,214,204,252,124,140,46,15,212,216,130,142,135,9,80,76,237,48,208,217,168\")),bytes32(stringToBytes32(\"149,226,220,49,125,235,3,230,38,246,195,233,182,158,235,40,120,190,38,20,54,35,58,149,253,211,188,152,197,101,125,229\"))]"
              },
              {
                "js": "[[123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27],[171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169]]",
                "sol": "[bytes32(stringToBytes32(\"123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27\")),bytes32(stringToBytes32(\"171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[38,209,210,30,60,89,10,197,231,73,75,226,63,31,53,70,22,29,47,241,162,174,183,152,132,210,107,52,212,195,45,143],[91,230,28,66,181,231,179,145,45,0,204,202,45,4,132,31,80,178,249,228,73,88,22,215,95,13,147,17,0,86,65,246],[188,137,236,235,252,28,140,26,112,221,45,196,254,204,30,158,70,50,101,48,73,96,120,209,243,117,120,73,239,124,224,124]]",
                "sol": "[stringToBytes32(\"152,26,163,46,119,162,197,182,161,155,198,30,252,137,58,183,138,157,227,49,157,5,174,221,75,133,8,110,115,152,1,35\"),stringToBytes32(\"190,118,232,95,77,13,234,125,227,102,128,198,152,230,111,62,63,111,28,144,32,103,75,101,30,31,182,152,38,251,214,125\"),stringToBytes32(\"68,101,157,193,146,125,127,80,81,227,109,203,236,234,228,130,47,246,120,100,8,212,205,0,166,68,86,217,176,22,44,86\")]"
              },
              {
                "js": "[[123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27],[171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169]]",
                "sol": "[bytes32(stringToBytes32(\"123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27\")),bytes32(stringToBytes32(\"171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27],[171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169]]",
                "sol": "[bytes32(stringToBytes32(\"123,110,234,241,190,227,161,221,63,134,200,221,139,215,111,196,79,251,171,195,27,145,191,15,43,131,166,132,43,237,188,27\")),bytes32(stringToBytes32(\"171,55,211,242,208,127,1,99,181,59,76,149,249,252,63,50,94,70,4,118,200,78,211,171,201,228,79,34,192,44,128,169\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.958ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"PayableExample\"",
                "sol": "\"PayableExample\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.962ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[6],accounts[2],accounts[6],accounts[9],accounts[3],accounts[2],accounts[6],accounts[9],accounts[2],accounts[1],accounts[2],accounts[7],accounts[3],accounts[4],accounts[1],accounts[8],accounts[4],accounts[3],accounts[6],accounts[9],accounts[5],accounts[9],accounts[6],accounts[1],accounts[0],accounts[2],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[96,95,64,95,1336,95,1338,1532892064,0,96,96,27,9999,1336,2014223714,1338,0,256,1336,96,96,1532892064,1336,2,27,0,2014223714,0]",
              "sol": "[uint256(96),uint256(95),uint256(64),uint256(95),uint256(1336),uint256(95),uint256(1338),uint256(1532892064),uint256(0),uint256(96),uint256(96),uint256(27),uint256(9999),uint256(1336),uint256(2014223714),uint256(1338),uint256(0),uint256(256),uint256(1336),uint256(96),uint256(96),uint256(1532892064),uint256(1336),uint256(2),uint256(27),uint256(0),uint256(2014223714),uint256(0)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[6],accounts[2],accounts[6],accounts[9],accounts[3],accounts[2],accounts[6],accounts[9],accounts[2],accounts[1],accounts[2],accounts[7],accounts[3],accounts[4],accounts[1],accounts[8],accounts[4],accounts[3],accounts[6],accounts[9],accounts[5],accounts[9],accounts[6],accounts[1],accounts[0],accounts[2],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[96,95,64,95,1336,95,1338,1532892064,0,96,96,27,9999,1336,2014223714,1338,0,256,1336,96,96,1532892064,1336,2,27,0,2014223714,0]",
                "sol": "[uint256(96),uint256(95),uint256(64),uint256(95),uint256(1336),uint256(95),uint256(1338),uint256(1532892064),uint256(0),uint256(96),uint256(96),uint256(27),uint256(9999),uint256(1336),uint256(2014223714),uint256(1338),uint256(0),uint256(256),uint256(1336),uint256(96),uint256(96),uint256(1532892064),uint256(1336),uint256(2),uint256(27),uint256(0),uint256(2014223714),uint256(0)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[3],accounts[1],accounts[6],accounts[1],accounts[2],accounts[9],accounts[5],accounts[9],accounts[8],accounts[0],accounts[0],accounts[5],accounts[1],accounts[7],accounts[6],accounts[8],accounts[4],accounts[5],accounts[7],accounts[7],accounts[8],accounts[3],accounts[7],accounts[1],accounts[1],accounts[1],accounts[9],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[96,95,64,95,1336,95,1338,1532892064,0,96,96,27,9999,1336,2014223714,1338,0,256,1336,96,96,1532892064,1336,2,27,0,2014223714,0]",
                "sol": "[uint256(96),uint256(95),uint256(64),uint256(95),uint256(1336),uint256(95),uint256(1338),uint256(1532892064),uint256(0),uint256(96),uint256(96),uint256(27),uint256(9999),uint256(1336),uint256(2014223714),uint256(1338),uint256(0),uint256(256),uint256(1336),uint256(96),uint256(96),uint256(1532892064),uint256(1336),uint256(2),uint256(27),uint256(0),uint256(2014223714),uint256(0)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[96,95,64,95,1336,95,1338,1532892064,0,96,96,27,9999,1336,2014223714,1338,0,256,1336,96,96,1532892064,1336,2,27,0,2014223714,0]",
                "sol": "[uint256(96),uint256(95),uint256(64),uint256(95),uint256(1336),uint256(95),uint256(1338),uint256(1532892064),uint256(0),uint256(96),uint256(96),uint256(27),uint256(9999),uint256(1336),uint256(2014223714),uint256(1338),uint256(0),uint256(256),uint256(1336),uint256(96),uint256(96),uint256(1532892064),uint256(1336),uint256(2),uint256(27),uint256(0),uint256(2014223714),uint256(0)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.965ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:24.965ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[5],accounts[9],accounts[7],accounts[3],accounts[2],accounts[3],accounts[5],accounts[3],accounts[2],accounts[3],accounts[3],accounts[7],accounts[9],accounts[2],accounts[7],accounts[0],accounts[1],accounts[1],accounts[5],accounts[4],accounts[1],accounts[8],accounts[7],accounts[1],accounts[9],accounts[7],accounts[8],accounts[2],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5],accounts[9],accounts[7],accounts[3],accounts[2],accounts[3],accounts[5],accounts[3],accounts[2],accounts[3],accounts[3],accounts[7],accounts[9],accounts[2],accounts[7],accounts[0],accounts[1],accounts[1],accounts[5],accounts[4],accounts[1],accounts[8],accounts[7],accounts[1],accounts[9],accounts[7],accounts[8],accounts[2],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[5],accounts[9],accounts[7],accounts[3],accounts[2],accounts[3],accounts[5],accounts[3],accounts[2],accounts[3],accounts[3],accounts[7],accounts[9],accounts[2],accounts[7],accounts[0],accounts[1],accounts[1],accounts[5],accounts[4],accounts[1],accounts[8],accounts[7],accounts[1],accounts[9],accounts[7],accounts[8],accounts[2],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.968ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:24.969ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+662",
              "sol": "block.timestamp+662"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+662",
                "sol": "block.timestamp+662"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.974ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.979ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.986ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.991ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.994ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:24.998ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:24.998ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:25.000ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[8],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:25.001ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T06:05:25.002ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:05:25.002ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}