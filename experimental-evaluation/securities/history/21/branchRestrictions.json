,{
  "2020-11-12T07:26:13.833ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:19.969ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:26.362ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:32.869ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:39.268ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:45.751ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:26:53.786ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:00.437ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:07.099ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+259",
              "sol": "block.timestamp+259"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+259",
                "sol": "block.timestamp+259"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+259",
                "sol": "block.timestamp+259"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+259",
                "sol": "block.timestamp+259"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.777ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.779ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.781ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.784ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[3],accounts[5],accounts[1],accounts[0],accounts[0],accounts[9],accounts[3],accounts[5],accounts[8],accounts[2],accounts[7],accounts[4],accounts[8],accounts[5],accounts[8],accounts[8],accounts[8],accounts[7],accounts[7],accounts[6],accounts[7],accounts[8],accounts[0],accounts[0],accounts[7],accounts[2],accounts[1],accounts[3],accounts[5],accounts[1],accounts[6],accounts[5],accounts[7],accounts[6],accounts[0],accounts[3],accounts[0],accounts[4],accounts[6],accounts[9],accounts[9],accounts[8],accounts[9],accounts[8],accounts[9],accounts[9],accounts[1],accounts[6],accounts[5],accounts[3],accounts[8],accounts[9],accounts[0],accounts[0],accounts[7],accounts[4],accounts[3],accounts[5],accounts[0],accounts[0],accounts[4],accounts[6],accounts[3],accounts[8],accounts[5],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
              "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
            },
            {
              "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
              "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
            },
            {
              "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
              "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[3],accounts[5],accounts[1],accounts[0],accounts[0],accounts[9],accounts[3],accounts[5],accounts[8],accounts[2],accounts[7],accounts[4],accounts[8],accounts[5],accounts[8],accounts[8],accounts[8],accounts[7],accounts[7],accounts[6],accounts[7],accounts[8],accounts[0],accounts[0],accounts[7],accounts[2],accounts[1],accounts[3],accounts[5],accounts[1],accounts[6],accounts[5],accounts[7],accounts[6],accounts[0],accounts[3],accounts[0],accounts[4],accounts[6],accounts[9],accounts[9],accounts[8],accounts[9],accounts[8],accounts[9],accounts[9],accounts[1],accounts[6],accounts[5],accounts[3],accounts[8],accounts[9],accounts[0],accounts[0],accounts[7],accounts[4],accounts[3],accounts[5],accounts[0],accounts[0],accounts[4],accounts[6],accounts[3],accounts[8],accounts[5],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
                "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
              },
              {
                "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
                "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
              },
              {
                "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
                "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
                "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
              },
              {
                "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
                "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
              },
              {
                "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
                "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[7],accounts[9],accounts[5],accounts[9],accounts[2],accounts[7],accounts[2],accounts[7],accounts[2],accounts[6],accounts[7],accounts[5],accounts[1],accounts[3],accounts[2],accounts[1],accounts[0],accounts[2],accounts[1],accounts[5],accounts[9],accounts[9],accounts[6],accounts[9],accounts[5],accounts[4],accounts[0],accounts[7],accounts[4],accounts[7],accounts[4],accounts[5],accounts[5],accounts[5],accounts[1],accounts[4],accounts[4],accounts[9],accounts[4],accounts[4],accounts[6],accounts[3],accounts[1],accounts[2],accounts[8],accounts[5],accounts[4],accounts[2],accounts[6],accounts[6],accounts[6],accounts[6],accounts[3],accounts[9],accounts[5],accounts[1],accounts[7],accounts[7],accounts[2],accounts[2],accounts[1],accounts[5],accounts[4],accounts[0],accounts[9],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
                "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
              },
              {
                "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
                "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
              },
              {
                "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
                "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[3],accounts[8],accounts[7],accounts[9],accounts[2],accounts[9],accounts[3],accounts[5],accounts[8],accounts[0],accounts[1],accounts[6],accounts[9],accounts[5],accounts[1],accounts[3],accounts[1],accounts[8],accounts[4],accounts[9],accounts[4],accounts[4],accounts[5],accounts[2],accounts[3],accounts[7],accounts[7],accounts[3],accounts[2],accounts[3],accounts[4],accounts[9],accounts[8],accounts[0],accounts[4],accounts[3],accounts[2],accounts[8],accounts[8],accounts[8],accounts[4],accounts[8],accounts[9],accounts[6],accounts[0],accounts[5],accounts[2],accounts[1],accounts[5],accounts[2],accounts[3],accounts[5],accounts[8],accounts[0],accounts[1],accounts[9],accounts[5],accounts[4],accounts[4],accounts[5],accounts[8],accounts[0],accounts[7],accounts[8],accounts[2],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
                "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
              },
              {
                "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
                "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
              },
              {
                "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
                "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[3],accounts[7],accounts[5],accounts[8],accounts[6],accounts[3],accounts[5],accounts[4],accounts[3],accounts[6],accounts[5],accounts[9],accounts[3],accounts[0],accounts[3],accounts[6],accounts[3],accounts[3],accounts[5],accounts[5],accounts[0],accounts[1],accounts[9],accounts[1],accounts[8],accounts[9],accounts[8],accounts[7],accounts[6],accounts[4],accounts[0],accounts[0],accounts[9],accounts[9],accounts[4],accounts[8],accounts[3],accounts[8],accounts[0],accounts[7],accounts[1],accounts[4],accounts[2],accounts[6],accounts[1],accounts[8],accounts[4],accounts[3],accounts[0],accounts[9],accounts[7],accounts[3],accounts[5],accounts[3],accounts[3],accounts[1],accounts[3],accounts[2],accounts[4],accounts[7],accounts[3],accounts[6],accounts[2],accounts[4],accounts[2],accounts[2],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,1532892064,64,2014223716,65,10001,2014223715,96,2014223716,2014223715,97,2014223715,97,2014223714,29,1532892064,254,1532892064,10001,0,29,3,65,1532892064,10000,255,3,96,5,5,2014223716,255,5,1532892064,1532892064,1532892062,1532892064,2014223715,4,10000,28,1532892064,10001,5,2014223715,27,1532892064,97,95,64,254,26,2014223714,96,6,6,65,2014223715,1532892064,4,1338,254,1532892062,0,26]",
                "sol": "[uint256(1532892063),uint256(2),uint256(1532892064),uint256(64),uint256(2014223716),uint256(65),uint256(10001),uint256(2014223715),uint256(96),uint256(2014223716),uint256(2014223715),uint256(97),uint256(2014223715),uint256(97),uint256(2014223714),uint256(29),uint256(1532892064),uint256(254),uint256(1532892064),uint256(10001),uint256(0),uint256(29),uint256(3),uint256(65),uint256(1532892064),uint256(10000),uint256(255),uint256(3),uint256(96),uint256(5),uint256(5),uint256(2014223716),uint256(255),uint256(5),uint256(1532892064),uint256(1532892064),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(4),uint256(10000),uint256(28),uint256(1532892064),uint256(10001),uint256(5),uint256(2014223715),uint256(27),uint256(1532892064),uint256(97),uint256(95),uint256(64),uint256(254),uint256(26),uint256(2014223714),uint256(96),uint256(6),uint256(6),uint256(65),uint256(2014223715),uint256(1532892064),uint256(4),uint256(1338),uint256(254),uint256(1532892062),uint256(0),uint256(26)]"
              },
              {
                "js": "[257,5,255,1,256,27,2014223714,1,5,1532892064,4,1336,9999,1338,64,256,1532892062,1532892062,2,28,96,66,2,255,1,10001,10001,1338,1337,65,255,1532892062,97,29,254,96,66,0,256,6,1532892062,256,5,66,10000,27,28,2014223716,4,95,10000,10000,29,256,2014223716,97,9999,1338,96,2014223714,1338,1532892062,10000,2,2014223714,257]",
                "sol": "[uint256(257),uint256(5),uint256(255),uint256(1),uint256(256),uint256(27),uint256(2014223714),uint256(1),uint256(5),uint256(1532892064),uint256(4),uint256(1336),uint256(9999),uint256(1338),uint256(64),uint256(256),uint256(1532892062),uint256(1532892062),uint256(2),uint256(28),uint256(96),uint256(66),uint256(2),uint256(255),uint256(1),uint256(10001),uint256(10001),uint256(1338),uint256(1337),uint256(65),uint256(255),uint256(1532892062),uint256(97),uint256(29),uint256(254),uint256(96),uint256(66),uint256(0),uint256(256),uint256(6),uint256(1532892062),uint256(256),uint256(5),uint256(66),uint256(10000),uint256(27),uint256(28),uint256(2014223716),uint256(4),uint256(95),uint256(10000),uint256(10000),uint256(29),uint256(256),uint256(2014223716),uint256(97),uint256(9999),uint256(1338),uint256(96),uint256(2014223714),uint256(1338),uint256(1532892062),uint256(10000),uint256(2),uint256(2014223714),uint256(257)]"
              },
              {
                "js": "[[53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203],[24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104],[52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220],[204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58],[96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39],[204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36],[74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204],[54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109],[6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78],[252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239],[238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86],[203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235],[254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34],[213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189],[126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28],[66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171],[114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57],[191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86],[158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37],[7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154],[160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208],[109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131],[240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205],[223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151],[164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152],[169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38],[183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67],[131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45],[43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123],[110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43],[245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88],[241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124],[62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255],[209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209],[158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159],[152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240],[67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38],[250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210],[30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105],[146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187],[245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232],[146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161],[124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206],[94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67],[127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104],[17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145],[204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88],[160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173],[108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249],[231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61],[88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19],[45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83],[64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69],[49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161],[91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165],[154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150],[118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208],[239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229],[130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76],[84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180],[225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26],[99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19],[192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245],[91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115],[178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124],[162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27]]",
                "sol": "[bytes32(stringToBytes32(\"53,152,189,19,217,227,216,142,64,51,226,227,69,223,83,177,162,145,244,7,116,22,240,252,220,245,103,33,225,95,243,203\")),bytes32(stringToBytes32(\"24,19,90,153,2,26,136,11,126,133,66,45,205,100,104,125,65,212,87,244,69,189,177,246,191,176,75,138,232,193,18,104\")),bytes32(stringToBytes32(\"52,136,255,70,208,169,20,136,45,255,230,158,250,153,59,14,254,19,24,235,204,242,163,149,163,195,107,214,254,221,120,220\")),bytes32(stringToBytes32(\"204,90,4,191,152,52,125,189,171,163,39,158,98,240,109,27,55,139,247,151,251,38,144,246,95,95,139,105,47,75,21,58\")),bytes32(stringToBytes32(\"96,238,130,250,44,26,104,196,170,40,127,89,121,187,63,249,152,44,26,250,19,68,174,20,119,16,190,71,209,119,85,39\")),bytes32(stringToBytes32(\"204,236,176,183,150,93,253,234,18,96,80,68,127,129,255,184,7,221,235,194,117,81,25,23,129,65,6,212,253,18,140,36\")),bytes32(stringToBytes32(\"74,174,29,119,161,23,71,213,147,252,250,164,61,91,240,136,215,46,215,18,2,203,22,85,158,187,64,216,84,74,7,204\")),bytes32(stringToBytes32(\"54,77,14,212,240,73,0,244,245,193,148,90,90,170,203,62,30,229,8,37,5,13,93,111,214,221,122,207,127,123,126,109\")),bytes32(stringToBytes32(\"6,154,192,5,150,244,1,91,119,123,35,162,12,220,0,26,221,201,220,105,73,57,31,229,82,199,52,235,47,37,60,78\")),bytes32(stringToBytes32(\"252,157,231,128,25,37,129,94,4,176,255,48,132,98,19,209,139,88,37,126,27,79,15,235,160,63,125,30,115,224,71,239\")),bytes32(stringToBytes32(\"238,34,255,210,137,175,78,87,168,173,181,220,187,142,108,249,244,100,4,156,12,120,216,116,240,48,249,99,182,81,152,86\")),bytes32(stringToBytes32(\"203,184,79,210,151,116,130,97,141,89,241,148,183,41,165,206,231,247,253,125,39,143,243,130,60,150,94,152,49,25,97,235\")),bytes32(stringToBytes32(\"254,18,193,9,40,254,104,88,79,7,66,52,89,162,112,172,36,228,73,4,145,75,63,89,64,0,7,132,185,205,75,34\")),bytes32(stringToBytes32(\"213,87,112,255,169,169,212,144,194,85,98,51,69,208,184,213,112,140,72,48,230,12,103,236,222,73,153,180,199,5,44,189\")),bytes32(stringToBytes32(\"126,124,106,198,222,236,80,168,60,9,2,27,124,62,83,245,145,20,113,83,61,114,93,88,62,224,127,28,167,238,56,28\")),bytes32(stringToBytes32(\"66,168,111,24,201,202,0,20,145,69,120,44,210,124,213,28,215,88,99,47,200,1,169,203,123,45,191,58,82,109,167,171\")),bytes32(stringToBytes32(\"114,22,195,9,129,137,91,186,245,192,45,46,114,32,108,55,95,171,119,165,207,25,101,53,67,30,156,220,84,70,201,57\")),bytes32(stringToBytes32(\"191,48,236,6,146,214,215,131,156,223,190,57,18,207,237,21,112,227,229,33,167,142,20,159,209,167,209,32,220,18,212,86\")),bytes32(stringToBytes32(\"158,201,10,187,204,138,88,0,96,101,166,39,184,28,76,210,21,90,165,153,225,209,98,65,180,14,232,199,167,163,123,37\")),bytes32(stringToBytes32(\"7,138,203,115,173,203,58,212,55,19,90,16,135,136,127,163,91,249,234,153,52,247,68,188,237,200,156,233,85,152,0,154\")),bytes32(stringToBytes32(\"160,7,249,205,13,218,116,113,57,238,125,63,140,42,81,20,80,101,153,85,17,6,117,162,55,151,103,163,1,10,162,208\")),bytes32(stringToBytes32(\"109,244,125,105,174,24,101,24,73,216,100,2,81,115,126,102,88,227,243,64,182,59,148,186,64,167,163,223,141,220,114,131\")),bytes32(stringToBytes32(\"240,245,147,7,198,222,163,62,106,123,236,119,125,121,148,242,37,216,10,112,81,42,18,194,175,183,98,27,231,226,2,205\")),bytes32(stringToBytes32(\"223,58,80,211,207,149,198,231,87,186,70,91,104,190,218,166,171,137,90,6,167,145,186,179,95,60,2,153,108,18,214,151\")),bytes32(stringToBytes32(\"164,14,203,9,94,145,66,194,15,4,40,247,125,150,130,73,215,104,133,61,155,207,130,150,82,109,94,252,18,48,248,152\")),bytes32(stringToBytes32(\"169,235,148,189,113,61,129,120,190,201,153,222,83,141,28,251,73,152,54,169,246,41,160,74,30,111,53,108,105,173,107,38\")),bytes32(stringToBytes32(\"183,126,251,118,201,3,253,155,55,40,130,232,233,84,137,90,130,169,43,153,6,124,145,248,18,17,174,93,245,242,78,67\")),bytes32(stringToBytes32(\"131,118,190,91,88,105,27,204,14,72,128,152,155,224,249,4,60,97,98,130,100,58,159,217,183,193,7,95,164,220,89,45\")),bytes32(stringToBytes32(\"43,180,216,225,209,34,120,81,27,77,192,96,203,64,59,56,95,181,101,158,124,30,156,7,68,52,154,208,237,79,33,123\")),bytes32(stringToBytes32(\"110,65,239,122,206,57,127,235,125,168,198,117,53,247,189,58,64,42,37,198,22,113,124,88,119,139,82,43,134,212,175,43\")),bytes32(stringToBytes32(\"245,171,94,15,240,117,13,48,33,18,60,133,115,145,133,101,100,107,80,163,151,131,55,11,74,102,248,1,176,183,115,88\")),bytes32(stringToBytes32(\"241,200,205,61,8,1,122,21,69,118,187,59,172,76,179,71,133,224,124,10,85,133,14,222,179,254,244,223,3,91,184,124\")),bytes32(stringToBytes32(\"62,153,68,56,127,14,15,43,109,32,149,5,116,174,176,171,208,52,142,23,232,192,106,178,173,40,190,249,97,191,167,255\")),bytes32(stringToBytes32(\"209,35,207,53,118,92,9,206,2,18,98,149,61,140,173,63,79,87,240,250,221,119,42,133,19,92,88,182,44,133,237,209\")),bytes32(stringToBytes32(\"158,83,140,89,141,124,218,35,226,104,207,157,137,186,89,178,18,240,207,29,15,205,7,163,118,147,103,162,245,60,230,159\")),bytes32(stringToBytes32(\"152,226,206,103,59,224,11,69,93,134,243,19,171,104,8,28,131,233,147,69,247,37,205,218,24,246,95,24,165,40,18,240\")),bytes32(stringToBytes32(\"67,221,230,105,233,27,194,157,199,65,226,245,24,120,70,86,35,78,117,243,63,127,59,199,58,158,53,228,72,139,111,38\")),bytes32(stringToBytes32(\"250,156,193,77,157,2,14,77,148,108,245,174,205,169,10,127,111,211,105,160,93,53,29,14,72,41,81,133,49,37,128,210\")),bytes32(stringToBytes32(\"30,148,85,129,95,138,43,50,176,88,13,31,184,129,70,52,194,94,180,17,89,142,102,139,31,112,31,216,220,136,27,105\")),bytes32(stringToBytes32(\"146,171,129,206,5,207,118,57,207,151,34,96,146,221,30,221,63,59,226,64,79,74,1,245,156,123,47,104,21,101,67,187\")),bytes32(stringToBytes32(\"245,210,193,95,204,152,113,10,243,143,212,21,62,43,187,162,72,248,15,147,27,48,83,208,102,199,230,137,17,67,66,232\")),bytes32(stringToBytes32(\"146,59,100,13,163,54,97,151,43,162,248,37,170,83,204,138,162,23,219,229,115,140,219,74,55,102,209,130,8,207,4,161\")),bytes32(stringToBytes32(\"124,63,138,24,9,246,26,244,157,206,121,161,200,194,189,178,60,46,35,71,61,135,132,105,251,36,41,180,29,79,244,206\")),bytes32(stringToBytes32(\"94,242,194,89,4,66,45,12,116,32,84,190,227,129,12,33,95,126,225,42,73,225,236,108,126,193,223,106,217,39,184,67\")),bytes32(stringToBytes32(\"127,230,143,34,56,141,88,139,40,133,52,127,190,146,192,191,24,113,135,55,203,227,6,195,203,119,150,211,239,79,52,104\")),bytes32(stringToBytes32(\"17,19,106,134,164,185,220,212,138,76,242,56,196,35,76,144,204,40,53,138,217,213,175,3,154,168,135,147,154,229,176,145\")),bytes32(stringToBytes32(\"204,193,139,90,248,159,196,187,80,50,228,188,166,126,97,99,147,74,235,193,248,6,62,52,94,254,203,165,94,236,185,88\")),bytes32(stringToBytes32(\"160,220,12,57,3,52,54,196,203,120,226,191,4,29,232,83,107,76,73,64,53,228,64,168,134,63,255,140,52,204,78,173\")),bytes32(stringToBytes32(\"108,4,225,120,219,223,113,27,253,211,118,160,224,13,118,23,227,7,142,154,175,169,33,129,199,47,55,2,255,250,255,249\")),bytes32(stringToBytes32(\"231,175,69,146,165,218,51,105,113,93,172,213,180,123,140,221,91,191,220,107,197,203,83,98,254,13,188,223,189,205,160,61\")),bytes32(stringToBytes32(\"88,239,42,169,229,210,101,206,51,102,123,25,53,25,227,33,76,16,145,187,165,56,79,215,142,18,205,170,235,44,249,19\")),bytes32(stringToBytes32(\"45,75,252,5,161,47,49,236,98,177,242,75,218,214,199,139,123,236,37,189,80,220,170,44,237,42,218,90,24,208,11,83\")),bytes32(stringToBytes32(\"64,226,65,43,75,253,139,174,141,124,67,252,2,97,149,104,81,247,6,166,8,158,100,200,191,68,193,58,59,216,74,69\")),bytes32(stringToBytes32(\"49,211,158,123,243,97,4,108,174,129,94,23,150,232,129,215,139,95,214,220,64,22,187,156,44,1,114,148,195,38,166,161\")),bytes32(stringToBytes32(\"91,62,8,217,235,112,115,236,74,65,138,122,15,152,237,148,233,84,253,199,250,144,10,212,149,144,234,57,119,251,61,165\")),bytes32(stringToBytes32(\"154,108,128,33,240,30,62,107,145,42,236,250,28,225,78,192,16,14,224,179,201,195,74,79,119,139,151,35,189,125,7,150\")),bytes32(stringToBytes32(\"118,90,132,61,101,46,153,78,217,171,141,64,172,208,56,132,197,113,165,94,105,157,6,5,18,106,26,185,176,255,240,208\")),bytes32(stringToBytes32(\"239,148,39,219,86,1,209,210,222,228,217,157,210,158,162,150,229,129,215,30,109,244,90,157,197,58,34,196,192,115,173,229\")),bytes32(stringToBytes32(\"130,76,147,136,212,158,192,24,123,84,252,154,172,191,237,141,12,89,63,142,122,129,65,87,111,179,104,83,171,251,180,76\")),bytes32(stringToBytes32(\"84,95,225,190,88,125,184,31,127,255,142,221,142,9,93,126,4,174,214,128,4,20,116,17,36,75,200,22,119,29,88,180\")),bytes32(stringToBytes32(\"225,90,200,157,67,215,244,92,133,92,187,57,30,43,44,65,175,68,190,235,46,18,203,89,234,253,247,75,35,123,78,26\")),bytes32(stringToBytes32(\"99,105,168,52,22,245,89,201,57,21,104,149,112,246,7,205,6,26,140,178,67,80,47,168,162,113,164,68,255,215,68,19\")),bytes32(stringToBytes32(\"192,94,198,240,163,187,185,251,193,28,167,40,60,10,100,153,16,18,24,3,129,68,102,137,55,117,108,61,127,123,133,245\")),bytes32(stringToBytes32(\"91,188,253,246,87,105,178,21,146,182,49,71,8,0,100,222,114,158,233,127,200,86,86,191,30,164,211,107,143,104,128,115\")),bytes32(stringToBytes32(\"178,223,210,160,37,147,113,150,37,5,188,157,57,251,37,234,228,173,150,109,60,75,180,109,142,199,56,88,28,214,90,124\")),bytes32(stringToBytes32(\"162,62,109,121,61,206,189,88,47,113,125,110,197,42,226,246,123,188,39,124,236,143,231,115,105,42,59,140,247,91,71,27\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.805ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[224,39,87,231,64,171,65,42,214,197,53,161,201,195,4,51,38,218,176,218,92,247,228,128,47,108,88,108,173,56,7,132]",
              "sol": "stringToBytes32(\"224,39,87,231,64,171,65,42,214,197,53,161,201,195,4,51,38,218,176,218,92,247,228,128,47,108,88,108,173,56,7,132\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[224,39,87,231,64,171,65,42,214,197,53,161,201,195,4,51,38,218,176,218,92,247,228,128,47,108,88,108,173,56,7,132]",
                "sol": "stringToBytes32(\"224,39,87,231,64,171,65,42,214,197,53,161,201,195,4,51,38,218,176,218,92,247,228,128,47,108,88,108,173,56,7,132\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.805ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.806ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242]",
              "sol": "stringToBytes32(\"210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242\")"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "[210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242]",
                "sol": "stringToBytes32(\"210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242\")"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242]",
                "sol": "stringToBytes32(\"210,235,23,129,89,97,135,72,125,169,82,120,145,18,146,201,198,157,233,213,184,132,237,196,41,151,224,74,149,135,66,242\")"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "[96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167]",
              "sol": "stringToBytes32(\"96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167\")"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "[96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167]",
                "sol": "stringToBytes32(\"96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167\")"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167]",
                "sol": "stringToBytes32(\"96,62,85,229,161,54,15,105,94,217,30,14,209,157,255,163,12,103,176,61,221,128,235,178,238,185,74,173,92,164,93,167\")"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.809ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.810ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[99,8,221,196,43,85,150,17,215,9,185,24,203,213,121,11,46,157,121,173,214,225,56,190,138,154,115,244,129,99,10,213],[60,147,199,17,94,3,41,23,14,126,124,55,1,229,92,229,90,219,10,114,194,106,235,78,255,197,215,121,20,13,80,156],[183,30,169,251,221,178,27,184,121,23,191,40,109,23,247,248,220,15,186,62,14,249,79,48,117,146,9,233,10,50,142,120],[181,244,137,61,38,185,118,79,252,206,135,115,186,62,57,9,87,85,161,106,12,106,19,238,163,239,232,104,62,177,98,118],[153,213,88,228,220,92,166,101,141,192,34,249,81,248,147,122,203,180,0,254,25,138,0,172,195,208,94,6,151,129,223,217],[169,88,202,80,113,243,5,94,119,155,46,100,5,108,69,57,152,173,226,155,236,123,153,77,122,152,162,183,12,77,145,73]]",
              "sol": "[bytes32(stringToBytes32(\"99,8,221,196,43,85,150,17,215,9,185,24,203,213,121,11,46,157,121,173,214,225,56,190,138,154,115,244,129,99,10,213\")),bytes32(stringToBytes32(\"60,147,199,17,94,3,41,23,14,126,124,55,1,229,92,229,90,219,10,114,194,106,235,78,255,197,215,121,20,13,80,156\")),bytes32(stringToBytes32(\"183,30,169,251,221,178,27,184,121,23,191,40,109,23,247,248,220,15,186,62,14,249,79,48,117,146,9,233,10,50,142,120\")),bytes32(stringToBytes32(\"181,244,137,61,38,185,118,79,252,206,135,115,186,62,57,9,87,85,161,106,12,106,19,238,163,239,232,104,62,177,98,118\")),bytes32(stringToBytes32(\"153,213,88,228,220,92,166,101,141,192,34,249,81,248,147,122,203,180,0,254,25,138,0,172,195,208,94,6,151,129,223,217\")),bytes32(stringToBytes32(\"169,88,202,80,113,243,5,94,119,155,46,100,5,108,69,57,152,173,226,155,236,123,153,77,122,152,162,183,12,77,145,73\"))]"
            },
            {
              "js": "[[86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3],[211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14],[214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11],[98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145],[145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20],[149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141]]",
              "sol": "[bytes32(stringToBytes32(\"86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3\")),bytes32(stringToBytes32(\"211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14\")),bytes32(stringToBytes32(\"214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11\")),bytes32(stringToBytes32(\"98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145\")),bytes32(stringToBytes32(\"145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20\")),bytes32(stringToBytes32(\"149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[99,8,221,196,43,85,150,17,215,9,185,24,203,213,121,11,46,157,121,173,214,225,56,190,138,154,115,244,129,99,10,213],[60,147,199,17,94,3,41,23,14,126,124,55,1,229,92,229,90,219,10,114,194,106,235,78,255,197,215,121,20,13,80,156],[183,30,169,251,221,178,27,184,121,23,191,40,109,23,247,248,220,15,186,62,14,249,79,48,117,146,9,233,10,50,142,120],[181,244,137,61,38,185,118,79,252,206,135,115,186,62,57,9,87,85,161,106,12,106,19,238,163,239,232,104,62,177,98,118],[153,213,88,228,220,92,166,101,141,192,34,249,81,248,147,122,203,180,0,254,25,138,0,172,195,208,94,6,151,129,223,217],[169,88,202,80,113,243,5,94,119,155,46,100,5,108,69,57,152,173,226,155,236,123,153,77,122,152,162,183,12,77,145,73]]",
                "sol": "[bytes32(stringToBytes32(\"99,8,221,196,43,85,150,17,215,9,185,24,203,213,121,11,46,157,121,173,214,225,56,190,138,154,115,244,129,99,10,213\")),bytes32(stringToBytes32(\"60,147,199,17,94,3,41,23,14,126,124,55,1,229,92,229,90,219,10,114,194,106,235,78,255,197,215,121,20,13,80,156\")),bytes32(stringToBytes32(\"183,30,169,251,221,178,27,184,121,23,191,40,109,23,247,248,220,15,186,62,14,249,79,48,117,146,9,233,10,50,142,120\")),bytes32(stringToBytes32(\"181,244,137,61,38,185,118,79,252,206,135,115,186,62,57,9,87,85,161,106,12,106,19,238,163,239,232,104,62,177,98,118\")),bytes32(stringToBytes32(\"153,213,88,228,220,92,166,101,141,192,34,249,81,248,147,122,203,180,0,254,25,138,0,172,195,208,94,6,151,129,223,217\")),bytes32(stringToBytes32(\"169,88,202,80,113,243,5,94,119,155,46,100,5,108,69,57,152,173,226,155,236,123,153,77,122,152,162,183,12,77,145,73\"))]"
              },
              {
                "js": "[[86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3],[211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14],[214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11],[98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145],[145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20],[149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141]]",
                "sol": "[bytes32(stringToBytes32(\"86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3\")),bytes32(stringToBytes32(\"211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14\")),bytes32(stringToBytes32(\"214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11\")),bytes32(stringToBytes32(\"98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145\")),bytes32(stringToBytes32(\"145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20\")),bytes32(stringToBytes32(\"149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[20,74,234,163,14,29,70,240,12,225,155,136,185,98,63,115,254,159,90,96,52,203,140,183,57,240,27,80,106,88,178,46],[79,171,150,242,170,223,20,121,217,214,251,190,4,212,155,20,11,13,9,111,21,188,118,172,104,242,6,176,28,24,136,226],[137,234,254,187,215,163,173,43,43,112,20,86,68,60,24,168,108,194,122,109,61,108,215,57,51,234,36,102,198,204,208,123],[84,236,81,116,160,193,46,245,7,171,120,89,162,213,61,5,87,5,17,239,89,7,84,10,16,54,69,112,78,38,4,165],[247,200,106,118,108,136,179,95,180,183,23,36,156,69,57,36,112,110,79,136,160,152,28,157,117,126,136,215,83,249,98,141],[180,80,136,232,226,71,228,45,78,78,49,208,225,204,253,232,52,255,119,224,147,202,35,37,210,55,157,24,163,113,19,211],[5,93,181,116,213,52,94,44,216,195,105,145,226,11,223,198,134,187,218,175,199,7,197,148,202,47,245,91,83,127,121,149]]",
                "sol": "[stringToBytes32(\"216,167,176,194,244,210,84,38,107,106,236,63,34,20,48,129,93,176,197,213,28,250,29,63,247,159,183,54,164,125,48,203\"),stringToBytes32(\"133,141,145,246,205,69,167,14,10,203,160,213,90,223,60,77,49,89,2,83,52,6,111,59,87,130,77,209,147,52,54,129\"),stringToBytes32(\"32,93,49,255,34,79,162,139,179,226,63,215,209,239,162,111,91,196,172,125,231,249,124,244,169,242,75,146,128,180,183,46\"),stringToBytes32(\"16,223,110,124,77,238,14,201,180,10,228,39,227,16,237,94,78,12,237,164,74,69,39,135,229,68,101,225,5,182,41,113\"),stringToBytes32(\"41,85,159,6,19,240,117,155,175,163,209,230,1,6,181,76,30,114,164,151,113,79,160,205,171,152,8,121,76,21,118,157\"),stringToBytes32(\"111,29,108,183,223,250,209,92,211,166,70,199,9,122,138,53,39,230,162,194,59,241,38,251,214,114,28,206,247,178,157,231\"),stringToBytes32(\"247,74,135,130,22,93,113,184,43,236,6,197,24,30,233,223,199,163,32,153,22,146,125,127,107,129,244,124,212,85,246,196\")]"
              },
              {
                "js": "[[86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3],[211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14],[214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11],[98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145],[145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20],[149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141]]",
                "sol": "[bytes32(stringToBytes32(\"86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3\")),bytes32(stringToBytes32(\"211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14\")),bytes32(stringToBytes32(\"214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11\")),bytes32(stringToBytes32(\"98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145\")),bytes32(stringToBytes32(\"145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20\")),bytes32(stringToBytes32(\"149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3],[211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14],[214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11],[98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145],[145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20],[149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141]]",
                "sol": "[bytes32(stringToBytes32(\"86,191,36,124,131,237,90,112,201,255,159,17,203,233,199,55,110,177,165,211,26,249,184,108,177,93,119,144,134,194,132,3\")),bytes32(stringToBytes32(\"211,90,6,171,84,213,227,67,78,142,129,250,162,241,171,238,237,112,124,152,135,177,215,230,219,4,110,103,180,93,89,14\")),bytes32(stringToBytes32(\"214,135,33,50,32,178,77,15,93,14,201,109,55,161,121,152,219,20,33,123,85,49,253,135,103,196,124,121,250,220,161,11\")),bytes32(stringToBytes32(\"98,67,176,222,255,156,202,32,122,149,40,222,160,128,84,221,93,156,80,254,91,68,40,20,140,95,67,84,77,39,180,145\")),bytes32(stringToBytes32(\"145,253,203,237,46,186,136,80,139,170,216,89,44,119,5,65,9,96,146,119,247,112,184,251,16,198,138,240,160,195,246,20\")),bytes32(stringToBytes32(\"149,219,6,103,29,144,185,190,174,51,215,212,129,19,225,67,177,158,237,68,156,85,216,253,237,42,189,58,131,74,115,141\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.818ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.821ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[6],accounts[9],accounts[3],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892064,64,95,95,1532892064]",
              "sol": "[uint256(1532892064),uint256(64),uint256(95),uint256(95),uint256(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[6],accounts[9],accounts[3],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892064,64,95,95,1532892064]",
                "sol": "[uint256(1532892064),uint256(64),uint256(95),uint256(95),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[5],accounts[8],accounts[0],accounts[3],accounts[4],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892064,64,95,95,1532892064]",
                "sol": "[uint256(1532892064),uint256(64),uint256(95),uint256(95),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892064,64,95,95,1532892064]",
                "sol": "[uint256(1532892064),uint256(64),uint256(95),uint256(95),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.825ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.825ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[0]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.829ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.829ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+271",
              "sol": "block.timestamp+271"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+271",
                "sol": "block.timestamp+271"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.835ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.841ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.846ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.852ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.856ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.859ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.859ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.861ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[0],accounts[9],accounts[7],accounts[9],accounts[0],accounts[6],accounts[2],accounts[2],accounts[9],accounts[1],accounts[6],accounts[0],accounts[9],accounts[3],accounts[4],accounts[1],accounts[2],accounts[0],accounts[6],accounts[5],accounts[4],accounts[8],accounts[2],accounts[8],accounts[4],accounts[6],accounts[2],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0],accounts[9],accounts[7],accounts[9],accounts[0],accounts[6],accounts[2],accounts[2],accounts[9],accounts[1],accounts[6],accounts[0],accounts[9],accounts[3],accounts[4],accounts[1],accounts[2],accounts[0],accounts[6],accounts[5],accounts[4],accounts[8],accounts[2],accounts[8],accounts[4],accounts[6],accounts[2],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0],accounts[9],accounts[7],accounts[9],accounts[0],accounts[6],accounts[2],accounts[2],accounts[9],accounts[1],accounts[6],accounts[0],accounts[9],accounts[3],accounts[4],accounts[1],accounts[2],accounts[0],accounts[6],accounts[5],accounts[4],accounts[8],accounts[2],accounts[8],accounts[4],accounts[6],accounts[2],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.862ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:27:13.863ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:27:13.864ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}