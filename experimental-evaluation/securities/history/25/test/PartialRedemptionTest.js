const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("PartialRedemption",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[8],9999,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[8],9999,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[8],9999,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[8],9999,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[7],{from:accounts[9]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[7],{from:accounts[9]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[9],254,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[9],254,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[2],{from:accounts[3]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[2],{from:accounts[3]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(1338,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[9],255,97,{from:accounts[1]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(1338,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[9],255,97,{from:accounts[1]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[6],10001,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableToken.address,accounts[6],10001,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableTokenMock.address,accounts[7],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+904,{from:accounts[7]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableTokenMock.address,accounts[7],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+904,{from:accounts[7]}');
  });
  
  it('Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0', async () => {
    let result = await contractPartialRedemption.redeemTokens([accounts[2],accounts[5],accounts[3],accounts[0],accounts[4],accounts[0],accounts[3],accounts[9],accounts[6],accounts[6],accounts[3],accounts[3],accounts[7],accounts[7],accounts[5],accounts[2],accounts[9],accounts[1],accounts[5],accounts[4],accounts[9],accounts[8],accounts[9],accounts[4],accounts[4],accounts[4],accounts[7],accounts[6],accounts[4],accounts[9],accounts[6],accounts[4],accounts[1],accounts[9],accounts[6],accounts[9],accounts[9],accounts[9],accounts[3],accounts[7],accounts[6],accounts[5],accounts[9],accounts[3],accounts[2],accounts[5],accounts[7],accounts[5],accounts[7],accounts[6],accounts[3],accounts[8],accounts[0],accounts[9],accounts[9],accounts[0],accounts[2],accounts[5],accounts[2],accounts[7],accounts[9],accounts[4],accounts[9],accounts[4],accounts[0],accounts[2],accounts[4],accounts[0],accounts[8],accounts[0],accounts[0],accounts[5],accounts[4],accounts[5],accounts[5],accounts[2],accounts[2],accounts[5],accounts[8],accounts[0],accounts[4],accounts[6],accounts[0],accounts[1],accounts[1],accounts[7],accounts[5],accounts[5],accounts[7],accounts[2],accounts[6],accounts[8],accounts[7],accounts[9],accounts[9],accounts[0],accounts[8],accounts[9],accounts[5],accounts[2],accounts[4],accounts[6],accounts[2],accounts[5],accounts[5],accounts[6],accounts[2],accounts[7],accounts[5],accounts[5],accounts[7],accounts[6],accounts[6],accounts[9],accounts[8],accounts[0],accounts[6],accounts[1],accounts[5],accounts[2],accounts[4],accounts[9],accounts[3],accounts[7],accounts[2],accounts[6],accounts[0],accounts[0],accounts[1],accounts[6],accounts[3],accounts[8],accounts[1],accounts[2],accounts[0],accounts[5],accounts[8],accounts[0],accounts[6],accounts[7],accounts[1],accounts[2],accounts[9],accounts[7],accounts[8],accounts[6],accounts[2],accounts[2],accounts[5],accounts[8],accounts[2],accounts[1],accounts[5],accounts[5],accounts[2],accounts[4],accounts[3],accounts[3],accounts[6],accounts[4],accounts[3],accounts[9],accounts[6],accounts[3],accounts[4],accounts[8],accounts[8],accounts[6],accounts[7],accounts[6],accounts[9],accounts[0],accounts[0],accounts[9],accounts[9],accounts[1],accounts[2],accounts[7],accounts[2],accounts[8],accounts[6],accounts[1],accounts[4],accounts[0],accounts[7],accounts[0],accounts[9],accounts[4],accounts[3],accounts[8],accounts[5],accounts[6],accounts[5],accounts[3],accounts[5],accounts[5],accounts[5],accounts[6],accounts[7],accounts[4],accounts[3],accounts[5],accounts[5],accounts[8],accounts[7],accounts[1],accounts[6],accounts[7],accounts[0],accounts[1],accounts[0],accounts[2],accounts[4],accounts[6],accounts[8],accounts[8],accounts[7],accounts[6],accounts[3],accounts[9],accounts[8],accounts[4],accounts[8],accounts[2],accounts[7],accounts[8],accounts[0],accounts[4],accounts[4],accounts[8],accounts[3],accounts[6],accounts[4],accounts[5],accounts[4],accounts[8],accounts[5],accounts[2],accounts[2],accounts[0],accounts[0],accounts[9],accounts[1],accounts[6],accounts[3],accounts[3],accounts[7],accounts[3],accounts[0],accounts[1],accounts[7],accounts[9],accounts[1],accounts[1],accounts[9]], [66,95,10001,10001,0,64,256,1337,97,257,95,4,10001,1,1336,1,2,10000,10000,256,2014223715,95,10000,257,2014223715,255,2014223716,1532892064,1336,96,28,10001,28,254,1338,257,10001,10001,97,1336,2014223716,2014223714,2014223715,29,29,64,1532892064,28,10001,4,64,97,0,1532892064,10001,95,10000,0,3,3,95,64,1338,27,96,65,1532892064,66,97,64,1338,1338,1338,10000,9999,27,1338,64,9999,65,28,5,1337,9999,4,96,1338,10001,66,2014223715,28,97,5,1336,1532892063,4,5,1338,97,1338,255,9999,10000,27,1337,1532892062,256,1338,66,1338,1338,97,1336,1336,64,10000,1338,255,1338,6,2014223715,95,1,65,64,5,2014223714,257,5,254,10000,29,3,9999,256,10000,2014223715,64,1338,3,2014223714,1532892063,4,2014223716,3,97,10000,28,1338,95,29,1338,256,97,0,2,1532892062,66,66,1532892064,95,1337,97,2,64,254,95,256,66,10001,6,64,1338,0,1,97,5,2014223715,1,257,10000,65,29,1532892064,1532892063,66,255,29,5,5,5,254,64,1338,27,4,6,1337,1336,6,1337,6,6,26,1336,6,1532892063,1532892063,2014223714,5,6,27,256,255,1532892064,29,64,1338,65,95,254,10001,1532892064,1,1532892064,2,26,1336,10001,10001,1,26,10000,2014223715,1336,254,1532892062,10000,257,1,1532892063,10001,97,95,10001,3,2,0,257,6,255,27,2014223715,255,26],{from: accounts[0]});
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[2],accounts[5],accounts[3],accounts[0],accounts[4],accounts[0],accounts[3],accounts[9],accounts[6],accounts[6],accounts[3],accounts[3],accounts[7],accounts[7],accounts[5],accounts[2],accounts[9],accounts[1],accounts[5],accounts[4],accounts[9],accounts[8],accounts[9],accounts[4],accounts[4],accounts[4],accounts[7],accounts[6],accounts[4],accounts[9],accounts[6],accounts[4],accounts[1],accounts[9],accounts[6],accounts[9],accounts[9],accounts[9],accounts[3],accounts[7],accounts[6],accounts[5],accounts[9],accounts[3],accounts[2],accounts[5],accounts[7],accounts[5],accounts[7],accounts[6],accounts[3],accounts[8],accounts[0],accounts[9],accounts[9],accounts[0],accounts[2],accounts[5],accounts[2],accounts[7],accounts[9],accounts[4],accounts[9],accounts[4],accounts[0],accounts[2],accounts[4],accounts[0],accounts[8],accounts[0],accounts[0],accounts[5],accounts[4],accounts[5],accounts[5],accounts[2],accounts[2],accounts[5],accounts[8],accounts[0],accounts[4],accounts[6],accounts[0],accounts[1],accounts[1],accounts[7],accounts[5],accounts[5],accounts[7],accounts[2],accounts[6],accounts[8],accounts[7],accounts[9],accounts[9],accounts[0],accounts[8],accounts[9],accounts[5],accounts[2],accounts[4],accounts[6],accounts[2],accounts[5],accounts[5],accounts[6],accounts[2],accounts[7],accounts[5],accounts[5],accounts[7],accounts[6],accounts[6],accounts[9],accounts[8],accounts[0],accounts[6],accounts[1],accounts[5],accounts[2],accounts[4],accounts[9],accounts[3],accounts[7],accounts[2],accounts[6],accounts[0],accounts[0],accounts[1],accounts[6],accounts[3],accounts[8],accounts[1],accounts[2],accounts[0],accounts[5],accounts[8],accounts[0],accounts[6],accounts[7],accounts[1],accounts[2],accounts[9],accounts[7],accounts[8],accounts[6],accounts[2],accounts[2],accounts[5],accounts[8],accounts[2],accounts[1],accounts[5],accounts[5],accounts[2],accounts[4],accounts[3],accounts[3],accounts[6],accounts[4],accounts[3],accounts[9],accounts[6],accounts[3],accounts[4],accounts[8],accounts[8],accounts[6],accounts[7],accounts[6],accounts[9],accounts[0],accounts[0],accounts[9],accounts[9],accounts[1],accounts[2],accounts[7],accounts[2],accounts[8],accounts[6],accounts[1],accounts[4],accounts[0],accounts[7],accounts[0],accounts[9],accounts[4],accounts[3],accounts[8],accounts[5],accounts[6],accounts[5],accounts[3],accounts[5],accounts[5],accounts[5],accounts[6],accounts[7],accounts[4],accounts[3],accounts[5],accounts[5],accounts[8],accounts[7],accounts[1],accounts[6],accounts[7],accounts[0],accounts[1],accounts[0],accounts[2],accounts[4],accounts[6],accounts[8],accounts[8],accounts[7],accounts[6],accounts[3],accounts[9],accounts[8],accounts[4],accounts[8],accounts[2],accounts[7],accounts[8],accounts[0],accounts[4],accounts[4],accounts[8],accounts[3],accounts[6],accounts[4],accounts[5],accounts[4],accounts[8],accounts[5],accounts[2],accounts[2],accounts[0],accounts[0],accounts[9],accounts[1],accounts[6],accounts[3],accounts[3],accounts[7],accounts[3],accounts[0],accounts[1],accounts[7],accounts[9],accounts[1],accounts[1],accounts[9]], [66,95,10001,10001,0,64,256,1337,97,257,95,4,10001,1,1336,1,2,10000,10000,256,2014223715,95,10000,257,2014223715,255,2014223716,1532892064,1336,96,28,10001,28,254,1338,257,10001,10001,97,1336,2014223716,2014223714,2014223715,29,29,64,1532892064,28,10001,4,64,97,0,1532892064,10001,95,10000,0,3,3,95,64,1338,27,96,65,1532892064,66,97,64,1338,1338,1338,10000,9999,27,1338,64,9999,65,28,5,1337,9999,4,96,1338,10001,66,2014223715,28,97,5,1336,1532892063,4,5,1338,97,1338,255,9999,10000,27,1337,1532892062,256,1338,66,1338,1338,97,1336,1336,64,10000,1338,255,1338,6,2014223715,95,1,65,64,5,2014223714,257,5,254,10000,29,3,9999,256,10000,2014223715,64,1338,3,2014223714,1532892063,4,2014223716,3,97,10000,28,1338,95,29,1338,256,97,0,2,1532892062,66,66,1532892064,95,1337,97,2,64,254,95,256,66,10001,6,64,1338,0,1,97,5,2014223715,1,257,10000,65,29,1532892064,1532892063,66,255,29,5,5,5,254,64,1338,27,4,6,1337,1336,6,1337,6,6,26,1336,6,1532892063,1532892063,2014223714,5,6,27,256,255,1532892064,29,64,1338,65,95,254,10001,1532892064,1,1532892064,2,26,1336,10001,10001,1,26,10000,2014223715,1336,254,1532892062,10000,257,1,1532892063,10001,97,95,10001,3,2,0,257,6,255,27,2014223715,255,26],{from: accounts[9]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[7],accounts[9],accounts[3],accounts[9],accounts[5],accounts[6],accounts[0],accounts[7],accounts[7],accounts[8],accounts[7],accounts[4],accounts[8],accounts[4],accounts[1],accounts[1],accounts[1],accounts[5],accounts[8],accounts[6],accounts[0],accounts[1],accounts[6],accounts[0],accounts[0],accounts[5],accounts[9],accounts[3],accounts[2],accounts[4],accounts[9],accounts[1],accounts[5],accounts[0],accounts[4],accounts[9],accounts[7],accounts[1],accounts[9],accounts[5],accounts[3],accounts[4],accounts[9],accounts[3],accounts[8],accounts[4],accounts[7],accounts[5],accounts[4],accounts[8],accounts[1],accounts[0],accounts[1],accounts[8],accounts[3],accounts[6],accounts[8],accounts[4],accounts[8],accounts[9],accounts[8],accounts[2],accounts[5],accounts[8],accounts[0],accounts[9],accounts[5],accounts[3],accounts[2],accounts[3],accounts[2],accounts[1],accounts[4],accounts[6],accounts[2],accounts[5],accounts[2],accounts[1],accounts[9],accounts[6],accounts[9],accounts[3],accounts[7],accounts[8],accounts[7],accounts[7],accounts[4],accounts[9],accounts[7],accounts[1],accounts[3],accounts[2],accounts[5],accounts[6],accounts[7],accounts[7],accounts[5],accounts[4],accounts[5],accounts[4],accounts[8],accounts[0],accounts[3],accounts[8],accounts[1],accounts[7],accounts[3],accounts[9],accounts[1],accounts[8],accounts[0],accounts[6],accounts[2],accounts[3],accounts[9],accounts[1],accounts[0],accounts[6],accounts[5],accounts[3],accounts[3],accounts[0],accounts[5],accounts[6],accounts[7],accounts[3],accounts[0],accounts[9],accounts[5],accounts[5],accounts[7],accounts[7],accounts[2],accounts[6],accounts[0],accounts[8],accounts[3],accounts[5],accounts[5],accounts[7],accounts[6],accounts[2],accounts[0],accounts[5],accounts[3],accounts[2],accounts[7],accounts[5],accounts[4],accounts[3],accounts[5],accounts[3],accounts[9],accounts[6],accounts[1],accounts[0],accounts[4],accounts[6],accounts[3],accounts[0],accounts[8],accounts[0],accounts[4],accounts[6],accounts[9],accounts[5],accounts[2],accounts[2],accounts[6],accounts[0],accounts[8],accounts[8],accounts[4],accounts[9],accounts[5],accounts[0],accounts[1],accounts[6],accounts[3],accounts[2],accounts[4],accounts[0],accounts[1],accounts[0],accounts[8],accounts[1],accounts[0],accounts[0],accounts[9],accounts[6],accounts[3],accounts[1],accounts[4],accounts[0],accounts[0],accounts[8],accounts[0],accounts[4],accounts[3],accounts[9],accounts[9],accounts[8],accounts[5],accounts[9],accounts[7],accounts[4],accounts[1],accounts[3],accounts[7],accounts[0],accounts[7],accounts[1],accounts[7],accounts[7],accounts[5],accounts[5],accounts[0],accounts[9],accounts[2],accounts[5],accounts[7],accounts[9],accounts[2],accounts[2],accounts[8],accounts[7],accounts[5],accounts[3],accounts[4],accounts[5],accounts[1],accounts[3],accounts[3],accounts[0],accounts[3],accounts[4],accounts[0],accounts[2],accounts[5],accounts[8],accounts[0],accounts[3],accounts[7],accounts[9],accounts[8],accounts[8],accounts[6],accounts[0],accounts[1],accounts[5],accounts[3],accounts[2],accounts[4],accounts[5],accounts[8],accounts[5]], [66,95,10001,10001,0,64,256,1337,97,257,95,4,10001,1,1336,1,2,10000,10000,256,2014223715,95,10000,257,2014223715,255,2014223716,1532892064,1336,96,28,10001,28,254,1338,257,10001,10001,97,1336,2014223716,2014223714,2014223715,29,29,64,1532892064,28,10001,4,64,97,0,1532892064,10001,95,10000,0,3,3,95,64,1338,27,96,65,1532892064,66,97,64,1338,1338,1338,10000,9999,27,1338,64,9999,65,28,5,1337,9999,4,96,1338,10001,66,2014223715,28,97,5,1336,1532892063,4,5,1338,97,1338,255,9999,10000,27,1337,1532892062,256,1338,66,1338,1338,97,1336,1336,64,10000,1338,255,1338,6,2014223715,95,1,65,64,5,2014223714,257,5,254,10000,29,3,9999,256,10000,2014223715,64,1338,3,2014223714,1532892063,4,2014223716,3,97,10000,28,1338,95,29,1338,256,97,0,2,1532892062,66,66,1532892064,95,1337,97,2,64,254,95,256,66,10001,6,64,1338,0,1,97,5,2014223715,1,257,10000,65,29,1532892064,1532892063,66,255,29,5,5,5,254,64,1338,27,4,6,1337,1336,6,1337,6,6,26,1336,6,1532892063,1532892063,2014223714,5,6,27,256,255,1532892064,29,64,1338,65,95,254,10001,1532892064,1,1532892064,2,26,1336,10001,10001,1,26,10000,2014223715,1336,254,1532892062,10000,257,1,1532892063,10001,97,95,10001,3,2,0,257,6,255,27,2014223715,255,26],{from: accounts[0]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([], [66,95,10001,10001,0,64,256,1337,97,257,95,4,10001,1,1336,1,2,10000,10000,256,2014223715,95,10000,257,2014223715,255,2014223716,1532892064,1336,96,28,10001,28,254,1338,257,10001,10001,97,1336,2014223716,2014223714,2014223715,29,29,64,1532892064,28,10001,4,64,97,0,1532892064,10001,95,10000,0,3,3,95,64,1338,27,96,65,1532892064,66,97,64,1338,1338,1338,10000,9999,27,1338,64,9999,65,28,5,1337,9999,4,96,1338,10001,66,2014223715,28,97,5,1336,1532892063,4,5,1338,97,1338,255,9999,10000,27,1337,1532892062,256,1338,66,1338,1338,97,1336,1336,64,10000,1338,255,1338,6,2014223715,95,1,65,64,5,2014223714,257,5,254,10000,29,3,9999,256,10000,2014223715,64,1338,3,2014223714,1532892063,4,2014223716,3,97,10000,28,1338,95,29,1338,256,97,0,2,1532892062,66,66,1532892064,95,1337,97,2,64,254,95,256,66,10001,6,64,1338,0,1,97,5,2014223715,1,257,10000,65,29,1532892064,1532892063,66,255,29,5,5,5,254,64,1338,27,4,6,1337,1336,6,1337,6,6,26,1336,6,1532892063,1532892063,2014223714,5,6,27,256,255,1532892064,29,64,1338,65,95,254,10001,1532892064,1,1532892064,2,26,1336,10001,10001,1,26,10000,2014223715,1336,254,1532892062,10000,257,1,1532892063,10001,97,95,10001,3,2,0,257,6,255,27,2014223715,255,26],{from: accounts[0]}),'revert');
  });
});
