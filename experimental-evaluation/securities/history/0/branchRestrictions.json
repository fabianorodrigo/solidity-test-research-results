,{
  "2020-11-10T03:47:52.857ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:47:59.273ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:05.606ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:11.937ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:18.348ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:24.860ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:31.427ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:38.091ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+194",
              "sol": "block.timestamp+194"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+194",
                "sol": "block.timestamp+194"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+194",
                "sol": "block.timestamp+194"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+194",
                "sol": "block.timestamp+194"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.819ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.820ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.823ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.827ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[7],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[6,255]",
              "sol": "[uint256(6),uint256(255)]"
            },
            {
              "js": "[9999,95]",
              "sol": "[uint256(9999),uint256(95)]"
            },
            {
              "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
              "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[6,255]",
                "sol": "[uint256(6),uint256(255)]"
              },
              {
                "js": "[9999,95]",
                "sol": "[uint256(9999),uint256(95)]"
              },
              {
                "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
                "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[6,255]",
                "sol": "[uint256(6),uint256(255)]"
              },
              {
                "js": "[9999,95]",
                "sol": "[uint256(9999),uint256(95)]"
              },
              {
                "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
                "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[5],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,255]",
                "sol": "[uint256(6),uint256(255)]"
              },
              {
                "js": "[9999,95]",
                "sol": "[uint256(9999),uint256(95)]"
              },
              {
                "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
                "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[2],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,255]",
                "sol": "[uint256(6),uint256(255)]"
              },
              {
                "js": "[9999,95]",
                "sol": "[uint256(9999),uint256(95)]"
              },
              {
                "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
                "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[2],accounts[4],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,255]",
                "sol": "[uint256(6),uint256(255)]"
              },
              {
                "js": "[9999,95]",
                "sol": "[uint256(9999),uint256(95)]"
              },
              {
                "js": "[[102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142],[1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213]]",
                "sol": "[bytes32(stringToBytes32(\"102,189,181,152,45,158,183,48,243,37,245,134,201,88,106,177,167,182,218,16,110,135,225,189,120,49,162,49,97,167,208,142\")),bytes32(stringToBytes32(\"1,235,165,111,118,112,50,113,146,51,135,4,196,175,235,212,187,106,94,39,160,180,149,159,122,77,243,36,166,139,63,213\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.831ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[125,95,225,120,53,89,106,140,6,211,55,229,20,98,110,254,12,240,202,5,135,43,112,98,48,104,53,197,79,43,255,104]",
              "sol": "stringToBytes32(\"125,95,225,120,53,89,106,140,6,211,55,229,20,98,110,254,12,240,202,5,135,43,112,98,48,104,53,197,79,43,255,104\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[125,95,225,120,53,89,106,140,6,211,55,229,20,98,110,254,12,240,202,5,135,43,112,98,48,104,53,197,79,43,255,104]",
                "sol": "stringToBytes32(\"125,95,225,120,53,89,106,140,6,211,55,229,20,98,110,254,12,240,202,5,135,43,112,98,48,104,53,197,79,43,255,104\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.831ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.832ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "[157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169]",
              "sol": "stringToBytes32(\"157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169\")"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "[157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169]",
                "sol": "stringToBytes32(\"157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169\")"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169]",
                "sol": "stringToBytes32(\"157,182,168,104,233,6,1,144,252,56,229,27,253,137,102,181,111,110,118,249,228,31,76,178,150,20,192,125,190,89,24,169\")"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12]",
              "sol": "stringToBytes32(\"30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12]",
                "sol": "stringToBytes32(\"30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12\")"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12]",
                "sol": "stringToBytes32(\"30,92,6,64,110,148,227,101,39,242,157,20,8,6,140,78,40,237,52,196,177,211,29,68,53,203,61,192,104,41,72,12\")"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.834ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.835ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[45,243,235,149,188,210,212,97,51,143,142,79,254,3,230,168,99,59,21,56,47,193,6,130,167,53,22,227,153,103,168,177],[104,92,90,227,198,113,176,79,88,161,183,128,76,83,247,235,82,251,101,70,53,99,104,43,180,104,251,137,109,68,96,178],[222,225,22,1,231,200,66,108,54,185,138,162,65,255,192,30,175,101,193,26,67,55,111,140,53,67,137,129,109,117,223,237],[33,83,109,18,166,52,236,193,219,140,197,229,106,121,28,188,47,68,231,96,48,22,51,102,92,158,251,70,171,167,4,229],[20,189,18,24,177,134,34,12,181,215,224,82,191,129,20,66,175,171,247,136,158,184,184,149,49,151,135,132,28,13,250,22],[197,138,171,128,62,18,205,172,147,219,100,17,7,65,135,131,63,67,58,106,7,124,236,251,161,132,236,206,246,105,210,196],[241,117,196,196,87,94,71,216,81,252,140,191,181,20,239,242,76,10,190,11,107,230,73,132,72,91,195,69,140,209,251,121],[181,28,11,79,252,201,153,82,222,81,104,166,195,40,108,26,223,54,231,39,41,102,96,30,41,24,5,180,23,10,152,39],[196,25,78,78,193,137,101,90,176,78,119,154,156,40,42,170,212,235,20,116,176,108,246,134,107,249,13,72,59,7,191,62],[87,128,4,20,253,26,98,130,106,111,145,224,9,208,15,17,250,141,222,11,229,112,164,42,225,242,155,171,56,87,198,244],[93,210,14,189,223,78,34,250,252,24,181,184,163,136,172,67,219,65,111,147,13,201,149,210,188,60,179,115,252,33,177,217],[139,53,178,7,92,19,144,201,183,46,73,94,232,71,145,94,86,18,241,201,222,128,219,100,163,179,157,29,32,253,47,16],[185,23,35,243,103,26,92,16,154,243,162,211,127,47,208,172,217,92,246,52,249,198,254,243,223,148,158,137,185,10,120,67],[249,95,70,71,165,240,91,88,84,88,129,40,239,54,215,238,214,118,5,211,80,123,226,113,226,187,236,178,203,191,67,178],[230,3,41,246,24,17,207,137,86,68,197,83,250,125,246,234,248,118,147,172,161,101,111,36,23,84,147,211,70,74,194,123],[6,64,45,50,2,231,45,137,46,87,153,225,100,211,29,155,62,233,185,122,176,206,155,136,100,121,72,18,62,95,148,159],[49,54,162,5,192,96,4,46,82,76,235,166,126,127,248,180,130,12,26,42,183,59,12,100,223,37,205,88,209,22,203,40],[137,182,27,39,171,219,102,159,18,235,61,236,118,154,162,26,139,89,108,75,41,125,51,92,55,196,159,118,123,68,229,153],[247,244,175,215,120,93,48,234,129,196,219,30,83,223,80,133,118,161,187,46,72,72,72,207,158,172,199,54,176,106,14,85],[186,137,134,153,117,93,51,94,170,70,127,70,25,232,223,237,158,92,10,21,172,237,128,19,44,141,229,80,40,77,251,175],[32,137,156,231,193,223,46,234,46,224,119,235,88,5,92,91,89,80,232,148,107,233,145,27,164,211,118,15,43,180,38,72],[176,161,196,190,54,87,231,4,220,31,29,212,11,131,28,219,240,66,176,70,226,5,249,163,30,247,52,183,252,188,111,229],[114,133,76,132,233,139,222,166,53,11,147,158,130,37,3,99,23,118,233,122,175,205,29,92,5,222,102,212,142,26,194,217],[168,72,155,231,146,163,247,55,4,182,107,66,38,102,145,152,51,132,135,124,28,102,108,250,155,108,4,193,69,8,230,23],[168,230,212,214,7,201,174,219,216,205,62,117,39,222,118,163,217,236,65,200,237,66,39,28,158,3,41,171,172,131,190,39],[253,36,250,200,41,169,121,146,187,2,77,242,25,74,120,190,116,109,5,154,192,140,99,116,151,169,182,111,111,62,252,83],[221,175,238,241,161,255,185,119,161,78,109,121,135,28,177,141,126,245,167,218,163,12,199,15,107,252,91,136,131,54,227,25],[9,207,190,27,57,2,77,119,166,129,84,125,87,52,81,239,24,250,206,30,34,9,37,195,163,0,201,245,210,231,146,51],[81,145,2,162,91,97,12,134,172,206,109,88,103,214,209,3,137,250,96,104,74,44,37,216,95,182,67,158,15,176,2,11],[248,252,28,121,72,38,110,70,124,203,74,230,204,30,224,206,102,198,255,143,200,105,240,153,59,67,107,79,181,179,67,25],[222,36,160,137,108,167,211,236,129,42,154,78,15,169,40,25,115,47,35,181,190,41,93,233,154,77,23,25,57,49,198,227],[223,185,178,92,59,180,70,99,233,230,28,240,228,100,133,44,38,106,34,154,93,188,185,167,65,179,133,164,245,157,148,242],[234,217,117,63,77,200,247,160,196,203,144,234,186,206,103,79,134,212,115,128,249,172,176,222,105,162,199,182,232,105,3,195],[1,186,140,221,105,16,9,130,46,252,103,160,109,49,151,236,10,249,186,238,85,40,13,65,181,15,196,251,175,13,175,59],[205,242,61,148,22,245,142,236,219,48,188,105,157,166,203,181,149,148,202,180,129,226,127,218,225,145,127,139,110,176,93,195],[88,55,66,60,88,12,158,9,144,54,163,251,3,137,152,57,237,130,3,187,178,179,93,156,58,151,87,216,56,159,164,184],[195,228,101,212,221,149,112,85,76,155,90,89,190,26,124,244,41,49,146,161,85,59,106,199,204,11,92,112,109,149,238,237],[48,214,0,131,241,96,153,241,91,1,37,12,3,253,60,92,203,182,218,155,248,253,73,104,81,76,122,114,189,26,53,238],[191,163,138,28,0,119,118,104,132,33,118,77,138,98,54,0,101,156,103,108,253,96,166,152,16,15,194,15,98,243,142,248],[36,23,182,245,35,49,248,176,220,19,53,253,154,185,193,51,35,132,157,118,205,97,28,152,126,152,195,148,182,213,228,44],[132,56,206,177,84,86,148,46,185,252,115,131,107,63,199,143,86,134,191,36,174,228,26,122,111,87,31,152,190,20,192,92],[9,250,39,172,14,75,37,224,15,209,35,131,140,161,250,161,225,167,42,160,127,184,162,153,147,107,232,45,246,31,13,12],[228,75,130,112,133,138,250,51,255,204,188,0,91,210,209,11,119,240,115,246,225,226,234,46,126,21,239,151,20,230,93,62],[241,34,12,118,24,76,154,1,224,211,63,202,32,67,15,97,96,154,23,154,58,233,28,133,50,239,227,255,142,199,210,147],[160,241,218,53,169,200,191,156,254,33,189,38,186,61,143,40,252,12,48,255,5,216,172,69,5,121,79,111,70,134,126,44],[227,98,75,144,69,166,98,214,177,80,193,36,143,118,79,197,0,44,101,245,16,109,141,67,232,45,11,201,247,61,88,91],[223,100,65,49,163,74,170,55,8,221,75,157,219,141,25,215,17,178,212,136,174,175,112,116,145,92,30,8,7,109,117,143],[170,40,191,156,109,31,159,6,165,172,139,66,28,96,178,243,230,60,82,144,163,125,250,161,229,6,198,31,149,249,86,160],[68,160,195,52,88,179,106,225,158,98,169,90,93,17,49,126,245,56,59,157,195,246,163,18,193,147,127,235,83,167,208,70],[77,213,62,56,84,221,71,90,83,166,43,110,178,7,45,232,45,67,219,69,109,191,242,216,148,51,111,58,217,12,199,196],[227,246,140,127,108,213,5,210,233,184,77,101,61,167,228,36,160,129,149,158,70,163,84,50,2,3,177,55,188,253,249,16],[250,92,162,140,116,32,213,29,59,88,165,101,115,59,43,226,54,202,207,236,201,132,241,236,122,85,175,46,213,215,172,41],[211,227,118,170,18,244,251,139,163,202,35,204,44,237,104,31,50,155,90,151,218,108,107,120,160,229,142,37,26,236,247,121],[165,128,38,247,7,148,37,231,152,66,3,241,56,179,117,127,14,93,198,129,228,74,112,149,208,133,168,7,64,43,192,4],[202,62,123,247,35,49,121,30,150,90,83,144,221,17,170,148,104,254,164,155,145,108,124,96,32,151,31,192,106,56,31,171],[62,142,202,140,39,101,66,107,212,64,198,75,15,246,172,160,17,236,9,243,253,89,53,149,109,97,245,166,159,84,189,192],[239,137,74,33,68,196,92,41,44,103,13,169,206,25,232,90,220,54,51,27,143,115,254,207,101,255,64,52,95,36,189,167],[191,28,213,210,100,92,171,209,81,116,118,72,45,15,217,150,64,17,88,174,209,115,86,110,152,70,203,100,184,230,182,117],[110,47,54,170,235,98,14,61,143,202,247,61,197,61,171,245,217,117,54,70,73,111,56,165,14,2,22,151,30,217,192,238],[227,178,253,193,225,127,58,110,195,107,114,3,131,105,222,182,71,190,171,1,183,11,235,196,17,223,205,159,89,200,137,183],[13,246,210,43,110,44,19,217,131,63,164,152,136,186,132,195,67,8,138,213,152,142,144,163,43,147,57,190,244,163,137,53],[83,27,230,66,2,138,29,8,11,157,21,215,255,111,167,66,178,112,216,195,56,4,25,118,248,14,230,84,68,196,119,40],[255,205,123,229,201,110,5,240,178,62,85,55,254,24,167,17,139,75,33,95,50,113,101,226,79,122,187,45,12,73,242,32],[103,124,33,188,168,216,81,246,117,53,67,28,193,160,238,39,27,98,93,112,165,83,127,50,124,219,163,108,113,127,62,175],[158,218,135,128,47,53,250,84,70,192,17,165,6,232,96,148,55,165,143,33,247,150,212,157,115,96,10,19,229,25,229,109],[23,41,12,62,142,234,250,251,169,184,121,29,113,241,163,183,169,175,80,52,154,204,136,200,13,151,181,198,171,230,88,10],[113,136,204,163,224,198,135,219,160,22,76,206,33,190,67,173,60,147,229,47,165,190,150,16,153,92,88,175,137,153,255,217],[76,140,125,77,213,168,203,162,150,109,207,198,122,92,183,92,216,218,29,30,182,6,202,180,75,146,232,9,165,162,254,20],[192,226,97,39,122,62,123,54,17,180,68,174,5,33,52,156,47,53,93,48,60,105,171,136,197,161,56,191,91,4,39,21],[217,117,77,158,247,127,217,144,123,189,130,187,61,85,21,116,71,144,202,139,214,76,183,27,46,238,148,225,73,75,223,60],[198,223,56,105,113,240,37,53,188,177,12,147,31,135,35,23,70,14,128,190,142,136,102,100,23,193,126,112,194,211,232,60],[165,217,101,201,49,48,70,171,44,219,166,45,156,56,159,41,85,16,135,121,75,150,46,218,123,217,208,130,235,13,108,65],[219,66,174,55,66,207,50,187,132,207,152,94,233,156,132,217,47,154,28,193,70,225,157,4,3,203,240,57,3,247,108,146],[167,47,65,90,140,43,29,124,103,191,210,105,31,215,38,57,74,210,131,39,23,201,215,76,80,188,158,54,43,112,198,21],[94,187,35,210,30,129,116,194,92,28,178,185,71,16,225,255,130,213,73,49,61,238,206,53,202,143,110,142,72,129,1,233],[17,145,156,183,206,237,64,19,189,186,16,136,21,204,83,224,191,180,97,32,25,167,105,29,203,45,25,11,16,157,192,1],[10,130,48,214,73,220,186,106,245,167,64,0,217,177,152,241,187,26,132,125,109,108,21,207,238,109,35,4,156,173,60,239],[178,76,177,75,113,69,9,81,116,162,173,145,218,86,49,135,213,243,241,229,105,225,22,128,125,16,74,66,26,48,172,100],[126,87,36,148,152,25,123,217,136,34,93,162,114,225,2,186,21,51,81,3,73,164,156,121,73,247,195,125,145,53,56,210],[145,214,120,188,251,3,222,129,192,187,88,101,98,204,30,234,60,115,15,88,47,0,122,234,81,24,45,176,200,173,31,172],[151,112,211,20,175,142,36,58,61,139,40,43,214,217,167,230,153,174,105,192,64,54,116,182,202,115,180,14,140,147,250,249],[139,253,183,27,237,50,38,54,202,179,91,104,177,178,229,115,23,150,252,15,44,172,4,164,255,185,152,97,174,41,2,103],[54,116,148,102,191,72,114,87,226,186,170,157,240,163,110,103,49,194,150,110,147,198,158,219,2,70,126,205,56,155,209,78],[65,148,114,8,162,50,176,183,42,76,222,202,147,187,233,40,145,60,168,69,45,250,68,56,181,78,184,179,222,146,201,64],[148,116,213,75,213,215,166,72,190,178,57,88,139,15,232,89,104,237,108,62,93,141,122,206,172,31,6,106,176,46,187,111],[23,186,216,198,113,188,108,15,90,137,90,147,52,210,115,214,96,230,31,76,26,44,235,60,74,61,218,139,222,167,45,55],[178,3,66,72,182,233,81,29,63,148,114,64,198,59,141,227,90,3,54,172,47,141,198,191,243,145,235,157,146,201,188,145],[225,15,186,45,152,182,166,237,181,110,31,200,189,103,239,52,77,61,248,235,0,17,131,243,75,247,23,155,204,123,97,237],[229,102,232,22,180,181,225,24,161,107,104,25,12,22,53,50,30,212,56,116,17,246,118,86,57,90,128,191,249,148,167,174],[227,20,41,123,190,71,16,67,107,12,47,119,189,54,164,166,207,5,156,28,169,195,249,158,108,47,19,148,184,174,210,187],[112,102,203,158,219,11,219,234,240,8,155,116,164,69,224,91,177,4,39,204,154,210,23,41,41,177,110,135,189,64,3,193],[213,17,238,5,239,174,126,85,233,194,129,179,237,183,67,251,55,81,186,176,33,22,243,26,139,83,186,137,211,56,72,176],[218,71,145,90,169,84,41,102,51,10,230,255,109,113,208,170,59,195,24,191,69,188,147,49,24,234,162,36,167,37,66,162],[223,249,191,115,190,185,197,192,206,254,174,93,85,12,71,212,170,212,109,114,11,71,220,0,76,27,83,205,178,214,159,34],[35,95,160,59,190,211,70,83,69,207,180,81,239,4,246,177,222,10,236,254,80,88,98,43,209,5,161,89,163,221,211,222],[54,43,94,28,166,139,42,222,169,236,109,49,153,98,228,79,1,22,11,30,112,86,36,221,207,85,26,17,216,1,160,212]]",
              "sol": "[bytes32(stringToBytes32(\"45,243,235,149,188,210,212,97,51,143,142,79,254,3,230,168,99,59,21,56,47,193,6,130,167,53,22,227,153,103,168,177\")),bytes32(stringToBytes32(\"104,92,90,227,198,113,176,79,88,161,183,128,76,83,247,235,82,251,101,70,53,99,104,43,180,104,251,137,109,68,96,178\")),bytes32(stringToBytes32(\"222,225,22,1,231,200,66,108,54,185,138,162,65,255,192,30,175,101,193,26,67,55,111,140,53,67,137,129,109,117,223,237\")),bytes32(stringToBytes32(\"33,83,109,18,166,52,236,193,219,140,197,229,106,121,28,188,47,68,231,96,48,22,51,102,92,158,251,70,171,167,4,229\")),bytes32(stringToBytes32(\"20,189,18,24,177,134,34,12,181,215,224,82,191,129,20,66,175,171,247,136,158,184,184,149,49,151,135,132,28,13,250,22\")),bytes32(stringToBytes32(\"197,138,171,128,62,18,205,172,147,219,100,17,7,65,135,131,63,67,58,106,7,124,236,251,161,132,236,206,246,105,210,196\")),bytes32(stringToBytes32(\"241,117,196,196,87,94,71,216,81,252,140,191,181,20,239,242,76,10,190,11,107,230,73,132,72,91,195,69,140,209,251,121\")),bytes32(stringToBytes32(\"181,28,11,79,252,201,153,82,222,81,104,166,195,40,108,26,223,54,231,39,41,102,96,30,41,24,5,180,23,10,152,39\")),bytes32(stringToBytes32(\"196,25,78,78,193,137,101,90,176,78,119,154,156,40,42,170,212,235,20,116,176,108,246,134,107,249,13,72,59,7,191,62\")),bytes32(stringToBytes32(\"87,128,4,20,253,26,98,130,106,111,145,224,9,208,15,17,250,141,222,11,229,112,164,42,225,242,155,171,56,87,198,244\")),bytes32(stringToBytes32(\"93,210,14,189,223,78,34,250,252,24,181,184,163,136,172,67,219,65,111,147,13,201,149,210,188,60,179,115,252,33,177,217\")),bytes32(stringToBytes32(\"139,53,178,7,92,19,144,201,183,46,73,94,232,71,145,94,86,18,241,201,222,128,219,100,163,179,157,29,32,253,47,16\")),bytes32(stringToBytes32(\"185,23,35,243,103,26,92,16,154,243,162,211,127,47,208,172,217,92,246,52,249,198,254,243,223,148,158,137,185,10,120,67\")),bytes32(stringToBytes32(\"249,95,70,71,165,240,91,88,84,88,129,40,239,54,215,238,214,118,5,211,80,123,226,113,226,187,236,178,203,191,67,178\")),bytes32(stringToBytes32(\"230,3,41,246,24,17,207,137,86,68,197,83,250,125,246,234,248,118,147,172,161,101,111,36,23,84,147,211,70,74,194,123\")),bytes32(stringToBytes32(\"6,64,45,50,2,231,45,137,46,87,153,225,100,211,29,155,62,233,185,122,176,206,155,136,100,121,72,18,62,95,148,159\")),bytes32(stringToBytes32(\"49,54,162,5,192,96,4,46,82,76,235,166,126,127,248,180,130,12,26,42,183,59,12,100,223,37,205,88,209,22,203,40\")),bytes32(stringToBytes32(\"137,182,27,39,171,219,102,159,18,235,61,236,118,154,162,26,139,89,108,75,41,125,51,92,55,196,159,118,123,68,229,153\")),bytes32(stringToBytes32(\"247,244,175,215,120,93,48,234,129,196,219,30,83,223,80,133,118,161,187,46,72,72,72,207,158,172,199,54,176,106,14,85\")),bytes32(stringToBytes32(\"186,137,134,153,117,93,51,94,170,70,127,70,25,232,223,237,158,92,10,21,172,237,128,19,44,141,229,80,40,77,251,175\")),bytes32(stringToBytes32(\"32,137,156,231,193,223,46,234,46,224,119,235,88,5,92,91,89,80,232,148,107,233,145,27,164,211,118,15,43,180,38,72\")),bytes32(stringToBytes32(\"176,161,196,190,54,87,231,4,220,31,29,212,11,131,28,219,240,66,176,70,226,5,249,163,30,247,52,183,252,188,111,229\")),bytes32(stringToBytes32(\"114,133,76,132,233,139,222,166,53,11,147,158,130,37,3,99,23,118,233,122,175,205,29,92,5,222,102,212,142,26,194,217\")),bytes32(stringToBytes32(\"168,72,155,231,146,163,247,55,4,182,107,66,38,102,145,152,51,132,135,124,28,102,108,250,155,108,4,193,69,8,230,23\")),bytes32(stringToBytes32(\"168,230,212,214,7,201,174,219,216,205,62,117,39,222,118,163,217,236,65,200,237,66,39,28,158,3,41,171,172,131,190,39\")),bytes32(stringToBytes32(\"253,36,250,200,41,169,121,146,187,2,77,242,25,74,120,190,116,109,5,154,192,140,99,116,151,169,182,111,111,62,252,83\")),bytes32(stringToBytes32(\"221,175,238,241,161,255,185,119,161,78,109,121,135,28,177,141,126,245,167,218,163,12,199,15,107,252,91,136,131,54,227,25\")),bytes32(stringToBytes32(\"9,207,190,27,57,2,77,119,166,129,84,125,87,52,81,239,24,250,206,30,34,9,37,195,163,0,201,245,210,231,146,51\")),bytes32(stringToBytes32(\"81,145,2,162,91,97,12,134,172,206,109,88,103,214,209,3,137,250,96,104,74,44,37,216,95,182,67,158,15,176,2,11\")),bytes32(stringToBytes32(\"248,252,28,121,72,38,110,70,124,203,74,230,204,30,224,206,102,198,255,143,200,105,240,153,59,67,107,79,181,179,67,25\")),bytes32(stringToBytes32(\"222,36,160,137,108,167,211,236,129,42,154,78,15,169,40,25,115,47,35,181,190,41,93,233,154,77,23,25,57,49,198,227\")),bytes32(stringToBytes32(\"223,185,178,92,59,180,70,99,233,230,28,240,228,100,133,44,38,106,34,154,93,188,185,167,65,179,133,164,245,157,148,242\")),bytes32(stringToBytes32(\"234,217,117,63,77,200,247,160,196,203,144,234,186,206,103,79,134,212,115,128,249,172,176,222,105,162,199,182,232,105,3,195\")),bytes32(stringToBytes32(\"1,186,140,221,105,16,9,130,46,252,103,160,109,49,151,236,10,249,186,238,85,40,13,65,181,15,196,251,175,13,175,59\")),bytes32(stringToBytes32(\"205,242,61,148,22,245,142,236,219,48,188,105,157,166,203,181,149,148,202,180,129,226,127,218,225,145,127,139,110,176,93,195\")),bytes32(stringToBytes32(\"88,55,66,60,88,12,158,9,144,54,163,251,3,137,152,57,237,130,3,187,178,179,93,156,58,151,87,216,56,159,164,184\")),bytes32(stringToBytes32(\"195,228,101,212,221,149,112,85,76,155,90,89,190,26,124,244,41,49,146,161,85,59,106,199,204,11,92,112,109,149,238,237\")),bytes32(stringToBytes32(\"48,214,0,131,241,96,153,241,91,1,37,12,3,253,60,92,203,182,218,155,248,253,73,104,81,76,122,114,189,26,53,238\")),bytes32(stringToBytes32(\"191,163,138,28,0,119,118,104,132,33,118,77,138,98,54,0,101,156,103,108,253,96,166,152,16,15,194,15,98,243,142,248\")),bytes32(stringToBytes32(\"36,23,182,245,35,49,248,176,220,19,53,253,154,185,193,51,35,132,157,118,205,97,28,152,126,152,195,148,182,213,228,44\")),bytes32(stringToBytes32(\"132,56,206,177,84,86,148,46,185,252,115,131,107,63,199,143,86,134,191,36,174,228,26,122,111,87,31,152,190,20,192,92\")),bytes32(stringToBytes32(\"9,250,39,172,14,75,37,224,15,209,35,131,140,161,250,161,225,167,42,160,127,184,162,153,147,107,232,45,246,31,13,12\")),bytes32(stringToBytes32(\"228,75,130,112,133,138,250,51,255,204,188,0,91,210,209,11,119,240,115,246,225,226,234,46,126,21,239,151,20,230,93,62\")),bytes32(stringToBytes32(\"241,34,12,118,24,76,154,1,224,211,63,202,32,67,15,97,96,154,23,154,58,233,28,133,50,239,227,255,142,199,210,147\")),bytes32(stringToBytes32(\"160,241,218,53,169,200,191,156,254,33,189,38,186,61,143,40,252,12,48,255,5,216,172,69,5,121,79,111,70,134,126,44\")),bytes32(stringToBytes32(\"227,98,75,144,69,166,98,214,177,80,193,36,143,118,79,197,0,44,101,245,16,109,141,67,232,45,11,201,247,61,88,91\")),bytes32(stringToBytes32(\"223,100,65,49,163,74,170,55,8,221,75,157,219,141,25,215,17,178,212,136,174,175,112,116,145,92,30,8,7,109,117,143\")),bytes32(stringToBytes32(\"170,40,191,156,109,31,159,6,165,172,139,66,28,96,178,243,230,60,82,144,163,125,250,161,229,6,198,31,149,249,86,160\")),bytes32(stringToBytes32(\"68,160,195,52,88,179,106,225,158,98,169,90,93,17,49,126,245,56,59,157,195,246,163,18,193,147,127,235,83,167,208,70\")),bytes32(stringToBytes32(\"77,213,62,56,84,221,71,90,83,166,43,110,178,7,45,232,45,67,219,69,109,191,242,216,148,51,111,58,217,12,199,196\")),bytes32(stringToBytes32(\"227,246,140,127,108,213,5,210,233,184,77,101,61,167,228,36,160,129,149,158,70,163,84,50,2,3,177,55,188,253,249,16\")),bytes32(stringToBytes32(\"250,92,162,140,116,32,213,29,59,88,165,101,115,59,43,226,54,202,207,236,201,132,241,236,122,85,175,46,213,215,172,41\")),bytes32(stringToBytes32(\"211,227,118,170,18,244,251,139,163,202,35,204,44,237,104,31,50,155,90,151,218,108,107,120,160,229,142,37,26,236,247,121\")),bytes32(stringToBytes32(\"165,128,38,247,7,148,37,231,152,66,3,241,56,179,117,127,14,93,198,129,228,74,112,149,208,133,168,7,64,43,192,4\")),bytes32(stringToBytes32(\"202,62,123,247,35,49,121,30,150,90,83,144,221,17,170,148,104,254,164,155,145,108,124,96,32,151,31,192,106,56,31,171\")),bytes32(stringToBytes32(\"62,142,202,140,39,101,66,107,212,64,198,75,15,246,172,160,17,236,9,243,253,89,53,149,109,97,245,166,159,84,189,192\")),bytes32(stringToBytes32(\"239,137,74,33,68,196,92,41,44,103,13,169,206,25,232,90,220,54,51,27,143,115,254,207,101,255,64,52,95,36,189,167\")),bytes32(stringToBytes32(\"191,28,213,210,100,92,171,209,81,116,118,72,45,15,217,150,64,17,88,174,209,115,86,110,152,70,203,100,184,230,182,117\")),bytes32(stringToBytes32(\"110,47,54,170,235,98,14,61,143,202,247,61,197,61,171,245,217,117,54,70,73,111,56,165,14,2,22,151,30,217,192,238\")),bytes32(stringToBytes32(\"227,178,253,193,225,127,58,110,195,107,114,3,131,105,222,182,71,190,171,1,183,11,235,196,17,223,205,159,89,200,137,183\")),bytes32(stringToBytes32(\"13,246,210,43,110,44,19,217,131,63,164,152,136,186,132,195,67,8,138,213,152,142,144,163,43,147,57,190,244,163,137,53\")),bytes32(stringToBytes32(\"83,27,230,66,2,138,29,8,11,157,21,215,255,111,167,66,178,112,216,195,56,4,25,118,248,14,230,84,68,196,119,40\")),bytes32(stringToBytes32(\"255,205,123,229,201,110,5,240,178,62,85,55,254,24,167,17,139,75,33,95,50,113,101,226,79,122,187,45,12,73,242,32\")),bytes32(stringToBytes32(\"103,124,33,188,168,216,81,246,117,53,67,28,193,160,238,39,27,98,93,112,165,83,127,50,124,219,163,108,113,127,62,175\")),bytes32(stringToBytes32(\"158,218,135,128,47,53,250,84,70,192,17,165,6,232,96,148,55,165,143,33,247,150,212,157,115,96,10,19,229,25,229,109\")),bytes32(stringToBytes32(\"23,41,12,62,142,234,250,251,169,184,121,29,113,241,163,183,169,175,80,52,154,204,136,200,13,151,181,198,171,230,88,10\")),bytes32(stringToBytes32(\"113,136,204,163,224,198,135,219,160,22,76,206,33,190,67,173,60,147,229,47,165,190,150,16,153,92,88,175,137,153,255,217\")),bytes32(stringToBytes32(\"76,140,125,77,213,168,203,162,150,109,207,198,122,92,183,92,216,218,29,30,182,6,202,180,75,146,232,9,165,162,254,20\")),bytes32(stringToBytes32(\"192,226,97,39,122,62,123,54,17,180,68,174,5,33,52,156,47,53,93,48,60,105,171,136,197,161,56,191,91,4,39,21\")),bytes32(stringToBytes32(\"217,117,77,158,247,127,217,144,123,189,130,187,61,85,21,116,71,144,202,139,214,76,183,27,46,238,148,225,73,75,223,60\")),bytes32(stringToBytes32(\"198,223,56,105,113,240,37,53,188,177,12,147,31,135,35,23,70,14,128,190,142,136,102,100,23,193,126,112,194,211,232,60\")),bytes32(stringToBytes32(\"165,217,101,201,49,48,70,171,44,219,166,45,156,56,159,41,85,16,135,121,75,150,46,218,123,217,208,130,235,13,108,65\")),bytes32(stringToBytes32(\"219,66,174,55,66,207,50,187,132,207,152,94,233,156,132,217,47,154,28,193,70,225,157,4,3,203,240,57,3,247,108,146\")),bytes32(stringToBytes32(\"167,47,65,90,140,43,29,124,103,191,210,105,31,215,38,57,74,210,131,39,23,201,215,76,80,188,158,54,43,112,198,21\")),bytes32(stringToBytes32(\"94,187,35,210,30,129,116,194,92,28,178,185,71,16,225,255,130,213,73,49,61,238,206,53,202,143,110,142,72,129,1,233\")),bytes32(stringToBytes32(\"17,145,156,183,206,237,64,19,189,186,16,136,21,204,83,224,191,180,97,32,25,167,105,29,203,45,25,11,16,157,192,1\")),bytes32(stringToBytes32(\"10,130,48,214,73,220,186,106,245,167,64,0,217,177,152,241,187,26,132,125,109,108,21,207,238,109,35,4,156,173,60,239\")),bytes32(stringToBytes32(\"178,76,177,75,113,69,9,81,116,162,173,145,218,86,49,135,213,243,241,229,105,225,22,128,125,16,74,66,26,48,172,100\")),bytes32(stringToBytes32(\"126,87,36,148,152,25,123,217,136,34,93,162,114,225,2,186,21,51,81,3,73,164,156,121,73,247,195,125,145,53,56,210\")),bytes32(stringToBytes32(\"145,214,120,188,251,3,222,129,192,187,88,101,98,204,30,234,60,115,15,88,47,0,122,234,81,24,45,176,200,173,31,172\")),bytes32(stringToBytes32(\"151,112,211,20,175,142,36,58,61,139,40,43,214,217,167,230,153,174,105,192,64,54,116,182,202,115,180,14,140,147,250,249\")),bytes32(stringToBytes32(\"139,253,183,27,237,50,38,54,202,179,91,104,177,178,229,115,23,150,252,15,44,172,4,164,255,185,152,97,174,41,2,103\")),bytes32(stringToBytes32(\"54,116,148,102,191,72,114,87,226,186,170,157,240,163,110,103,49,194,150,110,147,198,158,219,2,70,126,205,56,155,209,78\")),bytes32(stringToBytes32(\"65,148,114,8,162,50,176,183,42,76,222,202,147,187,233,40,145,60,168,69,45,250,68,56,181,78,184,179,222,146,201,64\")),bytes32(stringToBytes32(\"148,116,213,75,213,215,166,72,190,178,57,88,139,15,232,89,104,237,108,62,93,141,122,206,172,31,6,106,176,46,187,111\")),bytes32(stringToBytes32(\"23,186,216,198,113,188,108,15,90,137,90,147,52,210,115,214,96,230,31,76,26,44,235,60,74,61,218,139,222,167,45,55\")),bytes32(stringToBytes32(\"178,3,66,72,182,233,81,29,63,148,114,64,198,59,141,227,90,3,54,172,47,141,198,191,243,145,235,157,146,201,188,145\")),bytes32(stringToBytes32(\"225,15,186,45,152,182,166,237,181,110,31,200,189,103,239,52,77,61,248,235,0,17,131,243,75,247,23,155,204,123,97,237\")),bytes32(stringToBytes32(\"229,102,232,22,180,181,225,24,161,107,104,25,12,22,53,50,30,212,56,116,17,246,118,86,57,90,128,191,249,148,167,174\")),bytes32(stringToBytes32(\"227,20,41,123,190,71,16,67,107,12,47,119,189,54,164,166,207,5,156,28,169,195,249,158,108,47,19,148,184,174,210,187\")),bytes32(stringToBytes32(\"112,102,203,158,219,11,219,234,240,8,155,116,164,69,224,91,177,4,39,204,154,210,23,41,41,177,110,135,189,64,3,193\")),bytes32(stringToBytes32(\"213,17,238,5,239,174,126,85,233,194,129,179,237,183,67,251,55,81,186,176,33,22,243,26,139,83,186,137,211,56,72,176\")),bytes32(stringToBytes32(\"218,71,145,90,169,84,41,102,51,10,230,255,109,113,208,170,59,195,24,191,69,188,147,49,24,234,162,36,167,37,66,162\")),bytes32(stringToBytes32(\"223,249,191,115,190,185,197,192,206,254,174,93,85,12,71,212,170,212,109,114,11,71,220,0,76,27,83,205,178,214,159,34\")),bytes32(stringToBytes32(\"35,95,160,59,190,211,70,83,69,207,180,81,239,4,246,177,222,10,236,254,80,88,98,43,209,5,161,89,163,221,211,222\")),bytes32(stringToBytes32(\"54,43,94,28,166,139,42,222,169,236,109,49,153,98,228,79,1,22,11,30,112,86,36,221,207,85,26,17,216,1,160,212\"))]"
            },
            {
              "js": "[[30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74],[0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213],[139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4],[152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7],[30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180],[73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230],[98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226],[178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211],[94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13],[104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56],[90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14],[235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132],[101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105],[105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192],[85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47],[252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116],[9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207],[37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37],[51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226],[122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138],[160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132],[174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49],[105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15],[103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2],[150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134],[148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119],[79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204],[163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130],[57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92],[92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79],[199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49],[94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84],[238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33],[65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40],[81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132],[23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27],[58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81],[21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22],[207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132],[28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194],[219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71],[155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175],[251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232],[129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119],[202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135],[156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19],[189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64],[115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249],[221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20],[90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169],[142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58],[24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113],[252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196],[16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139],[108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175],[90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234],[252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196],[27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82],[218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61],[23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127],[109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111],[255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38],[12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220],[156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78],[164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17],[127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171],[255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97],[147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47],[160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133],[144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199],[229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141],[89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134],[115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210],[88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103],[109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180],[160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251],[85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80],[136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150],[45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164],[24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110],[160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171],[236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188],[90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128],[180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143],[14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239],[125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163],[140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169],[249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63],[187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65],[12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16],[66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61],[232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108],[201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31],[7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251],[175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205],[50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143]]",
              "sol": "[bytes32(stringToBytes32(\"30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74\")),bytes32(stringToBytes32(\"0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213\")),bytes32(stringToBytes32(\"139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4\")),bytes32(stringToBytes32(\"152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7\")),bytes32(stringToBytes32(\"30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180\")),bytes32(stringToBytes32(\"73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230\")),bytes32(stringToBytes32(\"98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226\")),bytes32(stringToBytes32(\"178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211\")),bytes32(stringToBytes32(\"94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13\")),bytes32(stringToBytes32(\"104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56\")),bytes32(stringToBytes32(\"90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14\")),bytes32(stringToBytes32(\"235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132\")),bytes32(stringToBytes32(\"101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105\")),bytes32(stringToBytes32(\"105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192\")),bytes32(stringToBytes32(\"85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47\")),bytes32(stringToBytes32(\"252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116\")),bytes32(stringToBytes32(\"9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207\")),bytes32(stringToBytes32(\"37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37\")),bytes32(stringToBytes32(\"51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226\")),bytes32(stringToBytes32(\"122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138\")),bytes32(stringToBytes32(\"160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132\")),bytes32(stringToBytes32(\"174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49\")),bytes32(stringToBytes32(\"105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15\")),bytes32(stringToBytes32(\"103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2\")),bytes32(stringToBytes32(\"150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134\")),bytes32(stringToBytes32(\"148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119\")),bytes32(stringToBytes32(\"79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204\")),bytes32(stringToBytes32(\"163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130\")),bytes32(stringToBytes32(\"57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92\")),bytes32(stringToBytes32(\"92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79\")),bytes32(stringToBytes32(\"199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49\")),bytes32(stringToBytes32(\"94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84\")),bytes32(stringToBytes32(\"238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33\")),bytes32(stringToBytes32(\"65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40\")),bytes32(stringToBytes32(\"81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132\")),bytes32(stringToBytes32(\"23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27\")),bytes32(stringToBytes32(\"58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81\")),bytes32(stringToBytes32(\"21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22\")),bytes32(stringToBytes32(\"207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132\")),bytes32(stringToBytes32(\"28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194\")),bytes32(stringToBytes32(\"219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71\")),bytes32(stringToBytes32(\"155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175\")),bytes32(stringToBytes32(\"251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232\")),bytes32(stringToBytes32(\"129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119\")),bytes32(stringToBytes32(\"202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135\")),bytes32(stringToBytes32(\"156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19\")),bytes32(stringToBytes32(\"189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64\")),bytes32(stringToBytes32(\"115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249\")),bytes32(stringToBytes32(\"221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20\")),bytes32(stringToBytes32(\"90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169\")),bytes32(stringToBytes32(\"142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58\")),bytes32(stringToBytes32(\"24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113\")),bytes32(stringToBytes32(\"252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196\")),bytes32(stringToBytes32(\"16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139\")),bytes32(stringToBytes32(\"108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175\")),bytes32(stringToBytes32(\"90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234\")),bytes32(stringToBytes32(\"252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196\")),bytes32(stringToBytes32(\"27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82\")),bytes32(stringToBytes32(\"218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61\")),bytes32(stringToBytes32(\"23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127\")),bytes32(stringToBytes32(\"109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111\")),bytes32(stringToBytes32(\"255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38\")),bytes32(stringToBytes32(\"12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220\")),bytes32(stringToBytes32(\"156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78\")),bytes32(stringToBytes32(\"164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17\")),bytes32(stringToBytes32(\"127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171\")),bytes32(stringToBytes32(\"255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97\")),bytes32(stringToBytes32(\"147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47\")),bytes32(stringToBytes32(\"160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133\")),bytes32(stringToBytes32(\"144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199\")),bytes32(stringToBytes32(\"229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141\")),bytes32(stringToBytes32(\"89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134\")),bytes32(stringToBytes32(\"115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210\")),bytes32(stringToBytes32(\"88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103\")),bytes32(stringToBytes32(\"109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180\")),bytes32(stringToBytes32(\"160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251\")),bytes32(stringToBytes32(\"85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80\")),bytes32(stringToBytes32(\"136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150\")),bytes32(stringToBytes32(\"45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164\")),bytes32(stringToBytes32(\"24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110\")),bytes32(stringToBytes32(\"160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171\")),bytes32(stringToBytes32(\"236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188\")),bytes32(stringToBytes32(\"90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128\")),bytes32(stringToBytes32(\"180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143\")),bytes32(stringToBytes32(\"14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239\")),bytes32(stringToBytes32(\"125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163\")),bytes32(stringToBytes32(\"140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169\")),bytes32(stringToBytes32(\"249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63\")),bytes32(stringToBytes32(\"187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65\")),bytes32(stringToBytes32(\"12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16\")),bytes32(stringToBytes32(\"66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61\")),bytes32(stringToBytes32(\"232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108\")),bytes32(stringToBytes32(\"201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31\")),bytes32(stringToBytes32(\"7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251\")),bytes32(stringToBytes32(\"175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205\")),bytes32(stringToBytes32(\"50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143\"))]"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[45,243,235,149,188,210,212,97,51,143,142,79,254,3,230,168,99,59,21,56,47,193,6,130,167,53,22,227,153,103,168,177],[104,92,90,227,198,113,176,79,88,161,183,128,76,83,247,235,82,251,101,70,53,99,104,43,180,104,251,137,109,68,96,178],[222,225,22,1,231,200,66,108,54,185,138,162,65,255,192,30,175,101,193,26,67,55,111,140,53,67,137,129,109,117,223,237],[33,83,109,18,166,52,236,193,219,140,197,229,106,121,28,188,47,68,231,96,48,22,51,102,92,158,251,70,171,167,4,229],[20,189,18,24,177,134,34,12,181,215,224,82,191,129,20,66,175,171,247,136,158,184,184,149,49,151,135,132,28,13,250,22],[197,138,171,128,62,18,205,172,147,219,100,17,7,65,135,131,63,67,58,106,7,124,236,251,161,132,236,206,246,105,210,196],[241,117,196,196,87,94,71,216,81,252,140,191,181,20,239,242,76,10,190,11,107,230,73,132,72,91,195,69,140,209,251,121],[181,28,11,79,252,201,153,82,222,81,104,166,195,40,108,26,223,54,231,39,41,102,96,30,41,24,5,180,23,10,152,39],[196,25,78,78,193,137,101,90,176,78,119,154,156,40,42,170,212,235,20,116,176,108,246,134,107,249,13,72,59,7,191,62],[87,128,4,20,253,26,98,130,106,111,145,224,9,208,15,17,250,141,222,11,229,112,164,42,225,242,155,171,56,87,198,244],[93,210,14,189,223,78,34,250,252,24,181,184,163,136,172,67,219,65,111,147,13,201,149,210,188,60,179,115,252,33,177,217],[139,53,178,7,92,19,144,201,183,46,73,94,232,71,145,94,86,18,241,201,222,128,219,100,163,179,157,29,32,253,47,16],[185,23,35,243,103,26,92,16,154,243,162,211,127,47,208,172,217,92,246,52,249,198,254,243,223,148,158,137,185,10,120,67],[249,95,70,71,165,240,91,88,84,88,129,40,239,54,215,238,214,118,5,211,80,123,226,113,226,187,236,178,203,191,67,178],[230,3,41,246,24,17,207,137,86,68,197,83,250,125,246,234,248,118,147,172,161,101,111,36,23,84,147,211,70,74,194,123],[6,64,45,50,2,231,45,137,46,87,153,225,100,211,29,155,62,233,185,122,176,206,155,136,100,121,72,18,62,95,148,159],[49,54,162,5,192,96,4,46,82,76,235,166,126,127,248,180,130,12,26,42,183,59,12,100,223,37,205,88,209,22,203,40],[137,182,27,39,171,219,102,159,18,235,61,236,118,154,162,26,139,89,108,75,41,125,51,92,55,196,159,118,123,68,229,153],[247,244,175,215,120,93,48,234,129,196,219,30,83,223,80,133,118,161,187,46,72,72,72,207,158,172,199,54,176,106,14,85],[186,137,134,153,117,93,51,94,170,70,127,70,25,232,223,237,158,92,10,21,172,237,128,19,44,141,229,80,40,77,251,175],[32,137,156,231,193,223,46,234,46,224,119,235,88,5,92,91,89,80,232,148,107,233,145,27,164,211,118,15,43,180,38,72],[176,161,196,190,54,87,231,4,220,31,29,212,11,131,28,219,240,66,176,70,226,5,249,163,30,247,52,183,252,188,111,229],[114,133,76,132,233,139,222,166,53,11,147,158,130,37,3,99,23,118,233,122,175,205,29,92,5,222,102,212,142,26,194,217],[168,72,155,231,146,163,247,55,4,182,107,66,38,102,145,152,51,132,135,124,28,102,108,250,155,108,4,193,69,8,230,23],[168,230,212,214,7,201,174,219,216,205,62,117,39,222,118,163,217,236,65,200,237,66,39,28,158,3,41,171,172,131,190,39],[253,36,250,200,41,169,121,146,187,2,77,242,25,74,120,190,116,109,5,154,192,140,99,116,151,169,182,111,111,62,252,83],[221,175,238,241,161,255,185,119,161,78,109,121,135,28,177,141,126,245,167,218,163,12,199,15,107,252,91,136,131,54,227,25],[9,207,190,27,57,2,77,119,166,129,84,125,87,52,81,239,24,250,206,30,34,9,37,195,163,0,201,245,210,231,146,51],[81,145,2,162,91,97,12,134,172,206,109,88,103,214,209,3,137,250,96,104,74,44,37,216,95,182,67,158,15,176,2,11],[248,252,28,121,72,38,110,70,124,203,74,230,204,30,224,206,102,198,255,143,200,105,240,153,59,67,107,79,181,179,67,25],[222,36,160,137,108,167,211,236,129,42,154,78,15,169,40,25,115,47,35,181,190,41,93,233,154,77,23,25,57,49,198,227],[223,185,178,92,59,180,70,99,233,230,28,240,228,100,133,44,38,106,34,154,93,188,185,167,65,179,133,164,245,157,148,242],[234,217,117,63,77,200,247,160,196,203,144,234,186,206,103,79,134,212,115,128,249,172,176,222,105,162,199,182,232,105,3,195],[1,186,140,221,105,16,9,130,46,252,103,160,109,49,151,236,10,249,186,238,85,40,13,65,181,15,196,251,175,13,175,59],[205,242,61,148,22,245,142,236,219,48,188,105,157,166,203,181,149,148,202,180,129,226,127,218,225,145,127,139,110,176,93,195],[88,55,66,60,88,12,158,9,144,54,163,251,3,137,152,57,237,130,3,187,178,179,93,156,58,151,87,216,56,159,164,184],[195,228,101,212,221,149,112,85,76,155,90,89,190,26,124,244,41,49,146,161,85,59,106,199,204,11,92,112,109,149,238,237],[48,214,0,131,241,96,153,241,91,1,37,12,3,253,60,92,203,182,218,155,248,253,73,104,81,76,122,114,189,26,53,238],[191,163,138,28,0,119,118,104,132,33,118,77,138,98,54,0,101,156,103,108,253,96,166,152,16,15,194,15,98,243,142,248],[36,23,182,245,35,49,248,176,220,19,53,253,154,185,193,51,35,132,157,118,205,97,28,152,126,152,195,148,182,213,228,44],[132,56,206,177,84,86,148,46,185,252,115,131,107,63,199,143,86,134,191,36,174,228,26,122,111,87,31,152,190,20,192,92],[9,250,39,172,14,75,37,224,15,209,35,131,140,161,250,161,225,167,42,160,127,184,162,153,147,107,232,45,246,31,13,12],[228,75,130,112,133,138,250,51,255,204,188,0,91,210,209,11,119,240,115,246,225,226,234,46,126,21,239,151,20,230,93,62],[241,34,12,118,24,76,154,1,224,211,63,202,32,67,15,97,96,154,23,154,58,233,28,133,50,239,227,255,142,199,210,147],[160,241,218,53,169,200,191,156,254,33,189,38,186,61,143,40,252,12,48,255,5,216,172,69,5,121,79,111,70,134,126,44],[227,98,75,144,69,166,98,214,177,80,193,36,143,118,79,197,0,44,101,245,16,109,141,67,232,45,11,201,247,61,88,91],[223,100,65,49,163,74,170,55,8,221,75,157,219,141,25,215,17,178,212,136,174,175,112,116,145,92,30,8,7,109,117,143],[170,40,191,156,109,31,159,6,165,172,139,66,28,96,178,243,230,60,82,144,163,125,250,161,229,6,198,31,149,249,86,160],[68,160,195,52,88,179,106,225,158,98,169,90,93,17,49,126,245,56,59,157,195,246,163,18,193,147,127,235,83,167,208,70],[77,213,62,56,84,221,71,90,83,166,43,110,178,7,45,232,45,67,219,69,109,191,242,216,148,51,111,58,217,12,199,196],[227,246,140,127,108,213,5,210,233,184,77,101,61,167,228,36,160,129,149,158,70,163,84,50,2,3,177,55,188,253,249,16],[250,92,162,140,116,32,213,29,59,88,165,101,115,59,43,226,54,202,207,236,201,132,241,236,122,85,175,46,213,215,172,41],[211,227,118,170,18,244,251,139,163,202,35,204,44,237,104,31,50,155,90,151,218,108,107,120,160,229,142,37,26,236,247,121],[165,128,38,247,7,148,37,231,152,66,3,241,56,179,117,127,14,93,198,129,228,74,112,149,208,133,168,7,64,43,192,4],[202,62,123,247,35,49,121,30,150,90,83,144,221,17,170,148,104,254,164,155,145,108,124,96,32,151,31,192,106,56,31,171],[62,142,202,140,39,101,66,107,212,64,198,75,15,246,172,160,17,236,9,243,253,89,53,149,109,97,245,166,159,84,189,192],[239,137,74,33,68,196,92,41,44,103,13,169,206,25,232,90,220,54,51,27,143,115,254,207,101,255,64,52,95,36,189,167],[191,28,213,210,100,92,171,209,81,116,118,72,45,15,217,150,64,17,88,174,209,115,86,110,152,70,203,100,184,230,182,117],[110,47,54,170,235,98,14,61,143,202,247,61,197,61,171,245,217,117,54,70,73,111,56,165,14,2,22,151,30,217,192,238],[227,178,253,193,225,127,58,110,195,107,114,3,131,105,222,182,71,190,171,1,183,11,235,196,17,223,205,159,89,200,137,183],[13,246,210,43,110,44,19,217,131,63,164,152,136,186,132,195,67,8,138,213,152,142,144,163,43,147,57,190,244,163,137,53],[83,27,230,66,2,138,29,8,11,157,21,215,255,111,167,66,178,112,216,195,56,4,25,118,248,14,230,84,68,196,119,40],[255,205,123,229,201,110,5,240,178,62,85,55,254,24,167,17,139,75,33,95,50,113,101,226,79,122,187,45,12,73,242,32],[103,124,33,188,168,216,81,246,117,53,67,28,193,160,238,39,27,98,93,112,165,83,127,50,124,219,163,108,113,127,62,175],[158,218,135,128,47,53,250,84,70,192,17,165,6,232,96,148,55,165,143,33,247,150,212,157,115,96,10,19,229,25,229,109],[23,41,12,62,142,234,250,251,169,184,121,29,113,241,163,183,169,175,80,52,154,204,136,200,13,151,181,198,171,230,88,10],[113,136,204,163,224,198,135,219,160,22,76,206,33,190,67,173,60,147,229,47,165,190,150,16,153,92,88,175,137,153,255,217],[76,140,125,77,213,168,203,162,150,109,207,198,122,92,183,92,216,218,29,30,182,6,202,180,75,146,232,9,165,162,254,20],[192,226,97,39,122,62,123,54,17,180,68,174,5,33,52,156,47,53,93,48,60,105,171,136,197,161,56,191,91,4,39,21],[217,117,77,158,247,127,217,144,123,189,130,187,61,85,21,116,71,144,202,139,214,76,183,27,46,238,148,225,73,75,223,60],[198,223,56,105,113,240,37,53,188,177,12,147,31,135,35,23,70,14,128,190,142,136,102,100,23,193,126,112,194,211,232,60],[165,217,101,201,49,48,70,171,44,219,166,45,156,56,159,41,85,16,135,121,75,150,46,218,123,217,208,130,235,13,108,65],[219,66,174,55,66,207,50,187,132,207,152,94,233,156,132,217,47,154,28,193,70,225,157,4,3,203,240,57,3,247,108,146],[167,47,65,90,140,43,29,124,103,191,210,105,31,215,38,57,74,210,131,39,23,201,215,76,80,188,158,54,43,112,198,21],[94,187,35,210,30,129,116,194,92,28,178,185,71,16,225,255,130,213,73,49,61,238,206,53,202,143,110,142,72,129,1,233],[17,145,156,183,206,237,64,19,189,186,16,136,21,204,83,224,191,180,97,32,25,167,105,29,203,45,25,11,16,157,192,1],[10,130,48,214,73,220,186,106,245,167,64,0,217,177,152,241,187,26,132,125,109,108,21,207,238,109,35,4,156,173,60,239],[178,76,177,75,113,69,9,81,116,162,173,145,218,86,49,135,213,243,241,229,105,225,22,128,125,16,74,66,26,48,172,100],[126,87,36,148,152,25,123,217,136,34,93,162,114,225,2,186,21,51,81,3,73,164,156,121,73,247,195,125,145,53,56,210],[145,214,120,188,251,3,222,129,192,187,88,101,98,204,30,234,60,115,15,88,47,0,122,234,81,24,45,176,200,173,31,172],[151,112,211,20,175,142,36,58,61,139,40,43,214,217,167,230,153,174,105,192,64,54,116,182,202,115,180,14,140,147,250,249],[139,253,183,27,237,50,38,54,202,179,91,104,177,178,229,115,23,150,252,15,44,172,4,164,255,185,152,97,174,41,2,103],[54,116,148,102,191,72,114,87,226,186,170,157,240,163,110,103,49,194,150,110,147,198,158,219,2,70,126,205,56,155,209,78],[65,148,114,8,162,50,176,183,42,76,222,202,147,187,233,40,145,60,168,69,45,250,68,56,181,78,184,179,222,146,201,64],[148,116,213,75,213,215,166,72,190,178,57,88,139,15,232,89,104,237,108,62,93,141,122,206,172,31,6,106,176,46,187,111],[23,186,216,198,113,188,108,15,90,137,90,147,52,210,115,214,96,230,31,76,26,44,235,60,74,61,218,139,222,167,45,55],[178,3,66,72,182,233,81,29,63,148,114,64,198,59,141,227,90,3,54,172,47,141,198,191,243,145,235,157,146,201,188,145],[225,15,186,45,152,182,166,237,181,110,31,200,189,103,239,52,77,61,248,235,0,17,131,243,75,247,23,155,204,123,97,237],[229,102,232,22,180,181,225,24,161,107,104,25,12,22,53,50,30,212,56,116,17,246,118,86,57,90,128,191,249,148,167,174],[227,20,41,123,190,71,16,67,107,12,47,119,189,54,164,166,207,5,156,28,169,195,249,158,108,47,19,148,184,174,210,187],[112,102,203,158,219,11,219,234,240,8,155,116,164,69,224,91,177,4,39,204,154,210,23,41,41,177,110,135,189,64,3,193],[213,17,238,5,239,174,126,85,233,194,129,179,237,183,67,251,55,81,186,176,33,22,243,26,139,83,186,137,211,56,72,176],[218,71,145,90,169,84,41,102,51,10,230,255,109,113,208,170,59,195,24,191,69,188,147,49,24,234,162,36,167,37,66,162],[223,249,191,115,190,185,197,192,206,254,174,93,85,12,71,212,170,212,109,114,11,71,220,0,76,27,83,205,178,214,159,34],[35,95,160,59,190,211,70,83,69,207,180,81,239,4,246,177,222,10,236,254,80,88,98,43,209,5,161,89,163,221,211,222],[54,43,94,28,166,139,42,222,169,236,109,49,153,98,228,79,1,22,11,30,112,86,36,221,207,85,26,17,216,1,160,212]]",
                "sol": "[bytes32(stringToBytes32(\"45,243,235,149,188,210,212,97,51,143,142,79,254,3,230,168,99,59,21,56,47,193,6,130,167,53,22,227,153,103,168,177\")),bytes32(stringToBytes32(\"104,92,90,227,198,113,176,79,88,161,183,128,76,83,247,235,82,251,101,70,53,99,104,43,180,104,251,137,109,68,96,178\")),bytes32(stringToBytes32(\"222,225,22,1,231,200,66,108,54,185,138,162,65,255,192,30,175,101,193,26,67,55,111,140,53,67,137,129,109,117,223,237\")),bytes32(stringToBytes32(\"33,83,109,18,166,52,236,193,219,140,197,229,106,121,28,188,47,68,231,96,48,22,51,102,92,158,251,70,171,167,4,229\")),bytes32(stringToBytes32(\"20,189,18,24,177,134,34,12,181,215,224,82,191,129,20,66,175,171,247,136,158,184,184,149,49,151,135,132,28,13,250,22\")),bytes32(stringToBytes32(\"197,138,171,128,62,18,205,172,147,219,100,17,7,65,135,131,63,67,58,106,7,124,236,251,161,132,236,206,246,105,210,196\")),bytes32(stringToBytes32(\"241,117,196,196,87,94,71,216,81,252,140,191,181,20,239,242,76,10,190,11,107,230,73,132,72,91,195,69,140,209,251,121\")),bytes32(stringToBytes32(\"181,28,11,79,252,201,153,82,222,81,104,166,195,40,108,26,223,54,231,39,41,102,96,30,41,24,5,180,23,10,152,39\")),bytes32(stringToBytes32(\"196,25,78,78,193,137,101,90,176,78,119,154,156,40,42,170,212,235,20,116,176,108,246,134,107,249,13,72,59,7,191,62\")),bytes32(stringToBytes32(\"87,128,4,20,253,26,98,130,106,111,145,224,9,208,15,17,250,141,222,11,229,112,164,42,225,242,155,171,56,87,198,244\")),bytes32(stringToBytes32(\"93,210,14,189,223,78,34,250,252,24,181,184,163,136,172,67,219,65,111,147,13,201,149,210,188,60,179,115,252,33,177,217\")),bytes32(stringToBytes32(\"139,53,178,7,92,19,144,201,183,46,73,94,232,71,145,94,86,18,241,201,222,128,219,100,163,179,157,29,32,253,47,16\")),bytes32(stringToBytes32(\"185,23,35,243,103,26,92,16,154,243,162,211,127,47,208,172,217,92,246,52,249,198,254,243,223,148,158,137,185,10,120,67\")),bytes32(stringToBytes32(\"249,95,70,71,165,240,91,88,84,88,129,40,239,54,215,238,214,118,5,211,80,123,226,113,226,187,236,178,203,191,67,178\")),bytes32(stringToBytes32(\"230,3,41,246,24,17,207,137,86,68,197,83,250,125,246,234,248,118,147,172,161,101,111,36,23,84,147,211,70,74,194,123\")),bytes32(stringToBytes32(\"6,64,45,50,2,231,45,137,46,87,153,225,100,211,29,155,62,233,185,122,176,206,155,136,100,121,72,18,62,95,148,159\")),bytes32(stringToBytes32(\"49,54,162,5,192,96,4,46,82,76,235,166,126,127,248,180,130,12,26,42,183,59,12,100,223,37,205,88,209,22,203,40\")),bytes32(stringToBytes32(\"137,182,27,39,171,219,102,159,18,235,61,236,118,154,162,26,139,89,108,75,41,125,51,92,55,196,159,118,123,68,229,153\")),bytes32(stringToBytes32(\"247,244,175,215,120,93,48,234,129,196,219,30,83,223,80,133,118,161,187,46,72,72,72,207,158,172,199,54,176,106,14,85\")),bytes32(stringToBytes32(\"186,137,134,153,117,93,51,94,170,70,127,70,25,232,223,237,158,92,10,21,172,237,128,19,44,141,229,80,40,77,251,175\")),bytes32(stringToBytes32(\"32,137,156,231,193,223,46,234,46,224,119,235,88,5,92,91,89,80,232,148,107,233,145,27,164,211,118,15,43,180,38,72\")),bytes32(stringToBytes32(\"176,161,196,190,54,87,231,4,220,31,29,212,11,131,28,219,240,66,176,70,226,5,249,163,30,247,52,183,252,188,111,229\")),bytes32(stringToBytes32(\"114,133,76,132,233,139,222,166,53,11,147,158,130,37,3,99,23,118,233,122,175,205,29,92,5,222,102,212,142,26,194,217\")),bytes32(stringToBytes32(\"168,72,155,231,146,163,247,55,4,182,107,66,38,102,145,152,51,132,135,124,28,102,108,250,155,108,4,193,69,8,230,23\")),bytes32(stringToBytes32(\"168,230,212,214,7,201,174,219,216,205,62,117,39,222,118,163,217,236,65,200,237,66,39,28,158,3,41,171,172,131,190,39\")),bytes32(stringToBytes32(\"253,36,250,200,41,169,121,146,187,2,77,242,25,74,120,190,116,109,5,154,192,140,99,116,151,169,182,111,111,62,252,83\")),bytes32(stringToBytes32(\"221,175,238,241,161,255,185,119,161,78,109,121,135,28,177,141,126,245,167,218,163,12,199,15,107,252,91,136,131,54,227,25\")),bytes32(stringToBytes32(\"9,207,190,27,57,2,77,119,166,129,84,125,87,52,81,239,24,250,206,30,34,9,37,195,163,0,201,245,210,231,146,51\")),bytes32(stringToBytes32(\"81,145,2,162,91,97,12,134,172,206,109,88,103,214,209,3,137,250,96,104,74,44,37,216,95,182,67,158,15,176,2,11\")),bytes32(stringToBytes32(\"248,252,28,121,72,38,110,70,124,203,74,230,204,30,224,206,102,198,255,143,200,105,240,153,59,67,107,79,181,179,67,25\")),bytes32(stringToBytes32(\"222,36,160,137,108,167,211,236,129,42,154,78,15,169,40,25,115,47,35,181,190,41,93,233,154,77,23,25,57,49,198,227\")),bytes32(stringToBytes32(\"223,185,178,92,59,180,70,99,233,230,28,240,228,100,133,44,38,106,34,154,93,188,185,167,65,179,133,164,245,157,148,242\")),bytes32(stringToBytes32(\"234,217,117,63,77,200,247,160,196,203,144,234,186,206,103,79,134,212,115,128,249,172,176,222,105,162,199,182,232,105,3,195\")),bytes32(stringToBytes32(\"1,186,140,221,105,16,9,130,46,252,103,160,109,49,151,236,10,249,186,238,85,40,13,65,181,15,196,251,175,13,175,59\")),bytes32(stringToBytes32(\"205,242,61,148,22,245,142,236,219,48,188,105,157,166,203,181,149,148,202,180,129,226,127,218,225,145,127,139,110,176,93,195\")),bytes32(stringToBytes32(\"88,55,66,60,88,12,158,9,144,54,163,251,3,137,152,57,237,130,3,187,178,179,93,156,58,151,87,216,56,159,164,184\")),bytes32(stringToBytes32(\"195,228,101,212,221,149,112,85,76,155,90,89,190,26,124,244,41,49,146,161,85,59,106,199,204,11,92,112,109,149,238,237\")),bytes32(stringToBytes32(\"48,214,0,131,241,96,153,241,91,1,37,12,3,253,60,92,203,182,218,155,248,253,73,104,81,76,122,114,189,26,53,238\")),bytes32(stringToBytes32(\"191,163,138,28,0,119,118,104,132,33,118,77,138,98,54,0,101,156,103,108,253,96,166,152,16,15,194,15,98,243,142,248\")),bytes32(stringToBytes32(\"36,23,182,245,35,49,248,176,220,19,53,253,154,185,193,51,35,132,157,118,205,97,28,152,126,152,195,148,182,213,228,44\")),bytes32(stringToBytes32(\"132,56,206,177,84,86,148,46,185,252,115,131,107,63,199,143,86,134,191,36,174,228,26,122,111,87,31,152,190,20,192,92\")),bytes32(stringToBytes32(\"9,250,39,172,14,75,37,224,15,209,35,131,140,161,250,161,225,167,42,160,127,184,162,153,147,107,232,45,246,31,13,12\")),bytes32(stringToBytes32(\"228,75,130,112,133,138,250,51,255,204,188,0,91,210,209,11,119,240,115,246,225,226,234,46,126,21,239,151,20,230,93,62\")),bytes32(stringToBytes32(\"241,34,12,118,24,76,154,1,224,211,63,202,32,67,15,97,96,154,23,154,58,233,28,133,50,239,227,255,142,199,210,147\")),bytes32(stringToBytes32(\"160,241,218,53,169,200,191,156,254,33,189,38,186,61,143,40,252,12,48,255,5,216,172,69,5,121,79,111,70,134,126,44\")),bytes32(stringToBytes32(\"227,98,75,144,69,166,98,214,177,80,193,36,143,118,79,197,0,44,101,245,16,109,141,67,232,45,11,201,247,61,88,91\")),bytes32(stringToBytes32(\"223,100,65,49,163,74,170,55,8,221,75,157,219,141,25,215,17,178,212,136,174,175,112,116,145,92,30,8,7,109,117,143\")),bytes32(stringToBytes32(\"170,40,191,156,109,31,159,6,165,172,139,66,28,96,178,243,230,60,82,144,163,125,250,161,229,6,198,31,149,249,86,160\")),bytes32(stringToBytes32(\"68,160,195,52,88,179,106,225,158,98,169,90,93,17,49,126,245,56,59,157,195,246,163,18,193,147,127,235,83,167,208,70\")),bytes32(stringToBytes32(\"77,213,62,56,84,221,71,90,83,166,43,110,178,7,45,232,45,67,219,69,109,191,242,216,148,51,111,58,217,12,199,196\")),bytes32(stringToBytes32(\"227,246,140,127,108,213,5,210,233,184,77,101,61,167,228,36,160,129,149,158,70,163,84,50,2,3,177,55,188,253,249,16\")),bytes32(stringToBytes32(\"250,92,162,140,116,32,213,29,59,88,165,101,115,59,43,226,54,202,207,236,201,132,241,236,122,85,175,46,213,215,172,41\")),bytes32(stringToBytes32(\"211,227,118,170,18,244,251,139,163,202,35,204,44,237,104,31,50,155,90,151,218,108,107,120,160,229,142,37,26,236,247,121\")),bytes32(stringToBytes32(\"165,128,38,247,7,148,37,231,152,66,3,241,56,179,117,127,14,93,198,129,228,74,112,149,208,133,168,7,64,43,192,4\")),bytes32(stringToBytes32(\"202,62,123,247,35,49,121,30,150,90,83,144,221,17,170,148,104,254,164,155,145,108,124,96,32,151,31,192,106,56,31,171\")),bytes32(stringToBytes32(\"62,142,202,140,39,101,66,107,212,64,198,75,15,246,172,160,17,236,9,243,253,89,53,149,109,97,245,166,159,84,189,192\")),bytes32(stringToBytes32(\"239,137,74,33,68,196,92,41,44,103,13,169,206,25,232,90,220,54,51,27,143,115,254,207,101,255,64,52,95,36,189,167\")),bytes32(stringToBytes32(\"191,28,213,210,100,92,171,209,81,116,118,72,45,15,217,150,64,17,88,174,209,115,86,110,152,70,203,100,184,230,182,117\")),bytes32(stringToBytes32(\"110,47,54,170,235,98,14,61,143,202,247,61,197,61,171,245,217,117,54,70,73,111,56,165,14,2,22,151,30,217,192,238\")),bytes32(stringToBytes32(\"227,178,253,193,225,127,58,110,195,107,114,3,131,105,222,182,71,190,171,1,183,11,235,196,17,223,205,159,89,200,137,183\")),bytes32(stringToBytes32(\"13,246,210,43,110,44,19,217,131,63,164,152,136,186,132,195,67,8,138,213,152,142,144,163,43,147,57,190,244,163,137,53\")),bytes32(stringToBytes32(\"83,27,230,66,2,138,29,8,11,157,21,215,255,111,167,66,178,112,216,195,56,4,25,118,248,14,230,84,68,196,119,40\")),bytes32(stringToBytes32(\"255,205,123,229,201,110,5,240,178,62,85,55,254,24,167,17,139,75,33,95,50,113,101,226,79,122,187,45,12,73,242,32\")),bytes32(stringToBytes32(\"103,124,33,188,168,216,81,246,117,53,67,28,193,160,238,39,27,98,93,112,165,83,127,50,124,219,163,108,113,127,62,175\")),bytes32(stringToBytes32(\"158,218,135,128,47,53,250,84,70,192,17,165,6,232,96,148,55,165,143,33,247,150,212,157,115,96,10,19,229,25,229,109\")),bytes32(stringToBytes32(\"23,41,12,62,142,234,250,251,169,184,121,29,113,241,163,183,169,175,80,52,154,204,136,200,13,151,181,198,171,230,88,10\")),bytes32(stringToBytes32(\"113,136,204,163,224,198,135,219,160,22,76,206,33,190,67,173,60,147,229,47,165,190,150,16,153,92,88,175,137,153,255,217\")),bytes32(stringToBytes32(\"76,140,125,77,213,168,203,162,150,109,207,198,122,92,183,92,216,218,29,30,182,6,202,180,75,146,232,9,165,162,254,20\")),bytes32(stringToBytes32(\"192,226,97,39,122,62,123,54,17,180,68,174,5,33,52,156,47,53,93,48,60,105,171,136,197,161,56,191,91,4,39,21\")),bytes32(stringToBytes32(\"217,117,77,158,247,127,217,144,123,189,130,187,61,85,21,116,71,144,202,139,214,76,183,27,46,238,148,225,73,75,223,60\")),bytes32(stringToBytes32(\"198,223,56,105,113,240,37,53,188,177,12,147,31,135,35,23,70,14,128,190,142,136,102,100,23,193,126,112,194,211,232,60\")),bytes32(stringToBytes32(\"165,217,101,201,49,48,70,171,44,219,166,45,156,56,159,41,85,16,135,121,75,150,46,218,123,217,208,130,235,13,108,65\")),bytes32(stringToBytes32(\"219,66,174,55,66,207,50,187,132,207,152,94,233,156,132,217,47,154,28,193,70,225,157,4,3,203,240,57,3,247,108,146\")),bytes32(stringToBytes32(\"167,47,65,90,140,43,29,124,103,191,210,105,31,215,38,57,74,210,131,39,23,201,215,76,80,188,158,54,43,112,198,21\")),bytes32(stringToBytes32(\"94,187,35,210,30,129,116,194,92,28,178,185,71,16,225,255,130,213,73,49,61,238,206,53,202,143,110,142,72,129,1,233\")),bytes32(stringToBytes32(\"17,145,156,183,206,237,64,19,189,186,16,136,21,204,83,224,191,180,97,32,25,167,105,29,203,45,25,11,16,157,192,1\")),bytes32(stringToBytes32(\"10,130,48,214,73,220,186,106,245,167,64,0,217,177,152,241,187,26,132,125,109,108,21,207,238,109,35,4,156,173,60,239\")),bytes32(stringToBytes32(\"178,76,177,75,113,69,9,81,116,162,173,145,218,86,49,135,213,243,241,229,105,225,22,128,125,16,74,66,26,48,172,100\")),bytes32(stringToBytes32(\"126,87,36,148,152,25,123,217,136,34,93,162,114,225,2,186,21,51,81,3,73,164,156,121,73,247,195,125,145,53,56,210\")),bytes32(stringToBytes32(\"145,214,120,188,251,3,222,129,192,187,88,101,98,204,30,234,60,115,15,88,47,0,122,234,81,24,45,176,200,173,31,172\")),bytes32(stringToBytes32(\"151,112,211,20,175,142,36,58,61,139,40,43,214,217,167,230,153,174,105,192,64,54,116,182,202,115,180,14,140,147,250,249\")),bytes32(stringToBytes32(\"139,253,183,27,237,50,38,54,202,179,91,104,177,178,229,115,23,150,252,15,44,172,4,164,255,185,152,97,174,41,2,103\")),bytes32(stringToBytes32(\"54,116,148,102,191,72,114,87,226,186,170,157,240,163,110,103,49,194,150,110,147,198,158,219,2,70,126,205,56,155,209,78\")),bytes32(stringToBytes32(\"65,148,114,8,162,50,176,183,42,76,222,202,147,187,233,40,145,60,168,69,45,250,68,56,181,78,184,179,222,146,201,64\")),bytes32(stringToBytes32(\"148,116,213,75,213,215,166,72,190,178,57,88,139,15,232,89,104,237,108,62,93,141,122,206,172,31,6,106,176,46,187,111\")),bytes32(stringToBytes32(\"23,186,216,198,113,188,108,15,90,137,90,147,52,210,115,214,96,230,31,76,26,44,235,60,74,61,218,139,222,167,45,55\")),bytes32(stringToBytes32(\"178,3,66,72,182,233,81,29,63,148,114,64,198,59,141,227,90,3,54,172,47,141,198,191,243,145,235,157,146,201,188,145\")),bytes32(stringToBytes32(\"225,15,186,45,152,182,166,237,181,110,31,200,189,103,239,52,77,61,248,235,0,17,131,243,75,247,23,155,204,123,97,237\")),bytes32(stringToBytes32(\"229,102,232,22,180,181,225,24,161,107,104,25,12,22,53,50,30,212,56,116,17,246,118,86,57,90,128,191,249,148,167,174\")),bytes32(stringToBytes32(\"227,20,41,123,190,71,16,67,107,12,47,119,189,54,164,166,207,5,156,28,169,195,249,158,108,47,19,148,184,174,210,187\")),bytes32(stringToBytes32(\"112,102,203,158,219,11,219,234,240,8,155,116,164,69,224,91,177,4,39,204,154,210,23,41,41,177,110,135,189,64,3,193\")),bytes32(stringToBytes32(\"213,17,238,5,239,174,126,85,233,194,129,179,237,183,67,251,55,81,186,176,33,22,243,26,139,83,186,137,211,56,72,176\")),bytes32(stringToBytes32(\"218,71,145,90,169,84,41,102,51,10,230,255,109,113,208,170,59,195,24,191,69,188,147,49,24,234,162,36,167,37,66,162\")),bytes32(stringToBytes32(\"223,249,191,115,190,185,197,192,206,254,174,93,85,12,71,212,170,212,109,114,11,71,220,0,76,27,83,205,178,214,159,34\")),bytes32(stringToBytes32(\"35,95,160,59,190,211,70,83,69,207,180,81,239,4,246,177,222,10,236,254,80,88,98,43,209,5,161,89,163,221,211,222\")),bytes32(stringToBytes32(\"54,43,94,28,166,139,42,222,169,236,109,49,153,98,228,79,1,22,11,30,112,86,36,221,207,85,26,17,216,1,160,212\"))]"
              },
              {
                "js": "[[30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74],[0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213],[139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4],[152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7],[30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180],[73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230],[98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226],[178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211],[94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13],[104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56],[90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14],[235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132],[101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105],[105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192],[85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47],[252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116],[9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207],[37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37],[51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226],[122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138],[160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132],[174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49],[105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15],[103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2],[150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134],[148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119],[79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204],[163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130],[57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92],[92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79],[199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49],[94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84],[238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33],[65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40],[81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132],[23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27],[58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81],[21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22],[207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132],[28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194],[219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71],[155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175],[251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232],[129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119],[202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135],[156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19],[189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64],[115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249],[221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20],[90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169],[142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58],[24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113],[252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196],[16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139],[108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175],[90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234],[252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196],[27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82],[218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61],[23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127],[109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111],[255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38],[12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220],[156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78],[164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17],[127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171],[255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97],[147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47],[160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133],[144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199],[229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141],[89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134],[115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210],[88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103],[109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180],[160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251],[85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80],[136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150],[45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164],[24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110],[160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171],[236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188],[90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128],[180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143],[14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239],[125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163],[140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169],[249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63],[187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65],[12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16],[66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61],[232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108],[201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31],[7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251],[175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205],[50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143]]",
                "sol": "[bytes32(stringToBytes32(\"30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74\")),bytes32(stringToBytes32(\"0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213\")),bytes32(stringToBytes32(\"139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4\")),bytes32(stringToBytes32(\"152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7\")),bytes32(stringToBytes32(\"30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180\")),bytes32(stringToBytes32(\"73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230\")),bytes32(stringToBytes32(\"98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226\")),bytes32(stringToBytes32(\"178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211\")),bytes32(stringToBytes32(\"94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13\")),bytes32(stringToBytes32(\"104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56\")),bytes32(stringToBytes32(\"90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14\")),bytes32(stringToBytes32(\"235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132\")),bytes32(stringToBytes32(\"101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105\")),bytes32(stringToBytes32(\"105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192\")),bytes32(stringToBytes32(\"85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47\")),bytes32(stringToBytes32(\"252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116\")),bytes32(stringToBytes32(\"9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207\")),bytes32(stringToBytes32(\"37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37\")),bytes32(stringToBytes32(\"51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226\")),bytes32(stringToBytes32(\"122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138\")),bytes32(stringToBytes32(\"160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132\")),bytes32(stringToBytes32(\"174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49\")),bytes32(stringToBytes32(\"105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15\")),bytes32(stringToBytes32(\"103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2\")),bytes32(stringToBytes32(\"150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134\")),bytes32(stringToBytes32(\"148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119\")),bytes32(stringToBytes32(\"79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204\")),bytes32(stringToBytes32(\"163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130\")),bytes32(stringToBytes32(\"57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92\")),bytes32(stringToBytes32(\"92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79\")),bytes32(stringToBytes32(\"199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49\")),bytes32(stringToBytes32(\"94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84\")),bytes32(stringToBytes32(\"238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33\")),bytes32(stringToBytes32(\"65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40\")),bytes32(stringToBytes32(\"81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132\")),bytes32(stringToBytes32(\"23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27\")),bytes32(stringToBytes32(\"58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81\")),bytes32(stringToBytes32(\"21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22\")),bytes32(stringToBytes32(\"207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132\")),bytes32(stringToBytes32(\"28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194\")),bytes32(stringToBytes32(\"219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71\")),bytes32(stringToBytes32(\"155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175\")),bytes32(stringToBytes32(\"251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232\")),bytes32(stringToBytes32(\"129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119\")),bytes32(stringToBytes32(\"202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135\")),bytes32(stringToBytes32(\"156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19\")),bytes32(stringToBytes32(\"189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64\")),bytes32(stringToBytes32(\"115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249\")),bytes32(stringToBytes32(\"221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20\")),bytes32(stringToBytes32(\"90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169\")),bytes32(stringToBytes32(\"142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58\")),bytes32(stringToBytes32(\"24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113\")),bytes32(stringToBytes32(\"252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196\")),bytes32(stringToBytes32(\"16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139\")),bytes32(stringToBytes32(\"108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175\")),bytes32(stringToBytes32(\"90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234\")),bytes32(stringToBytes32(\"252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196\")),bytes32(stringToBytes32(\"27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82\")),bytes32(stringToBytes32(\"218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61\")),bytes32(stringToBytes32(\"23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127\")),bytes32(stringToBytes32(\"109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111\")),bytes32(stringToBytes32(\"255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38\")),bytes32(stringToBytes32(\"12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220\")),bytes32(stringToBytes32(\"156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78\")),bytes32(stringToBytes32(\"164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17\")),bytes32(stringToBytes32(\"127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171\")),bytes32(stringToBytes32(\"255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97\")),bytes32(stringToBytes32(\"147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47\")),bytes32(stringToBytes32(\"160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133\")),bytes32(stringToBytes32(\"144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199\")),bytes32(stringToBytes32(\"229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141\")),bytes32(stringToBytes32(\"89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134\")),bytes32(stringToBytes32(\"115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210\")),bytes32(stringToBytes32(\"88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103\")),bytes32(stringToBytes32(\"109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180\")),bytes32(stringToBytes32(\"160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251\")),bytes32(stringToBytes32(\"85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80\")),bytes32(stringToBytes32(\"136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150\")),bytes32(stringToBytes32(\"45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164\")),bytes32(stringToBytes32(\"24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110\")),bytes32(stringToBytes32(\"160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171\")),bytes32(stringToBytes32(\"236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188\")),bytes32(stringToBytes32(\"90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128\")),bytes32(stringToBytes32(\"180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143\")),bytes32(stringToBytes32(\"14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239\")),bytes32(stringToBytes32(\"125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163\")),bytes32(stringToBytes32(\"140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169\")),bytes32(stringToBytes32(\"249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63\")),bytes32(stringToBytes32(\"187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65\")),bytes32(stringToBytes32(\"12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16\")),bytes32(stringToBytes32(\"66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61\")),bytes32(stringToBytes32(\"232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108\")),bytes32(stringToBytes32(\"201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31\")),bytes32(stringToBytes32(\"7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251\")),bytes32(stringToBytes32(\"175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205\")),bytes32(stringToBytes32(\"50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[122,146,82,104,5,58,245,43,90,242,60,108,193,24,57,137,10,251,70,101,108,237,19,217,252,120,126,93,176,231,220,167],[130,174,215,237,246,94,240,71,26,187,105,162,23,242,240,192,49,242,239,192,130,198,0,97,139,100,113,57,178,98,242,184],[172,252,16,27,233,26,37,114,50,182,121,232,207,196,42,150,147,14,105,194,3,68,92,141,72,163,133,135,87,8,122,118],[113,169,154,178,31,141,108,58,70,97,246,167,143,138,207,30,185,129,87,185,84,141,46,186,160,167,120,83,99,133,20,61],[202,116,15,38,91,10,126,227,197,218,28,94,114,116,164,193,41,243,109,172,158,172,184,23,128,239,187,117,32,152,164,168],[6,64,154,231,151,9,168,71,142,112,97,209,33,37,17,11,236,250,88,97,230,118,189,94,209,120,73,225,170,220,121,245],[210,143,244,133,62,158,7,193,28,60,6,130,163,155,54,46,143,239,255,10,71,48,166,79,104,80,204,24,178,250,136,110],[174,28,19,183,143,230,104,215,40,101,112,24,14,69,189,48,158,56,169,210,96,151,26,137,77,60,240,67,162,103,246,120],[117,54,87,238,1,0,157,255,80,214,105,149,157,245,216,26,223,186,95,190,94,98,181,45,18,62,16,96,237,171,84,85],[215,50,75,127,205,61,16,207,104,79,247,2,84,101,15,11,251,180,7,76,244,89,10,47,84,169,187,115,254,56,121,128],[154,75,51,185,143,49,160,188,224,134,157,218,165,51,228,236,151,215,216,170,238,28,3,65,125,189,152,243,53,28,239,36],[241,228,213,163,120,255,209,158,106,141,52,243,79,43,129,63,74,219,198,56,184,97,211,5,63,84,78,20,135,216,40,224],[149,254,100,26,113,203,154,29,179,182,189,107,216,249,246,250,143,159,145,177,146,1,97,233,30,62,216,195,39,188,135,169],[237,72,116,2,76,238,31,214,38,215,192,203,118,222,39,158,37,198,97,66,42,81,120,199,240,17,44,159,3,35,132,32],[176,179,123,230,163,148,116,233,168,121,146,144,162,131,49,181,21,104,15,225,69,52,21,198,206,24,117,131,218,84,142,79],[35,48,174,95,51,108,33,231,11,166,79,222,85,3,197,172,97,247,219,191,222,158,219,106,2,178,176,221,21,101,195,45],[57,86,165,168,169,93,37,86,69,182,186,18,105,58,126,185,183,95,137,227,86,238,232,149,72,150,66,134,202,103,96,117],[233,145,103,100,126,0,210,190,1,87,14,184,106,103,241,84,90,78,93,167,7,251,109,223,65,78,204,17,242,234,11,57],[95,23,115,31,47,96,45,242,33,134,138,143,173,34,81,191,99,64,224,9,216,223,112,236,2,233,243,139,123,215,238,243],[201,171,177,48,137,165,233,101,160,121,41,4,136,70,112,131,124,245,115,75,92,191,63,123,100,203,250,252,196,78,2,253],[255,102,39,109,65,197,82,158,24,50,150,188,182,113,118,121,166,92,141,218,61,217,221,83,24,13,43,243,119,187,237,20],[73,25,73,165,181,107,119,178,136,137,233,254,70,221,88,206,60,132,75,80,72,126,84,64,156,174,210,67,116,245,157,216],[46,44,137,125,131,4,129,163,166,84,123,215,158,183,144,69,136,25,133,120,153,66,203,48,210,88,225,207,79,159,244,140],[21,68,250,14,153,192,168,88,229,205,252,243,85,166,16,246,17,208,151,79,144,254,31,198,204,53,167,51,228,199,108,95],[114,80,62,186,241,225,226,107,87,45,167,146,74,183,104,89,48,91,24,35,91,230,216,95,215,16,175,153,82,88,161,143],[200,0,228,135,83,117,117,117,139,188,254,231,170,133,164,138,49,12,96,31,234,153,31,196,80,153,1,213,140,61,73,154],[184,150,207,49,135,214,200,210,1,165,27,212,21,15,67,129,110,251,212,220,153,166,163,210,254,156,246,43,163,126,246,194],[49,62,156,33,21,65,179,26,248,151,24,191,47,30,65,244,255,161,121,66,67,219,118,76,136,196,104,209,58,128,105,66],[227,55,120,91,161,168,55,222,37,234,187,218,251,2,242,68,219,22,27,72,117,87,134,79,243,6,24,166,174,120,81,186],[51,164,34,206,5,181,138,221,102,163,131,220,42,201,108,253,213,152,148,221,149,152,186,182,88,88,34,251,225,227,228,139],[1,17,209,193,185,230,155,27,248,70,223,39,37,149,213,163,255,154,183,84,169,212,51,214,62,91,164,30,221,22,199,201],[105,27,217,255,78,198,50,4,14,245,139,14,201,177,28,86,139,138,227,43,242,7,76,107,104,100,85,169,95,17,247,19],[16,240,26,21,173,245,45,61,36,151,226,198,169,80,236,41,106,112,234,51,160,184,39,171,198,49,57,123,103,146,36,249],[150,64,39,135,76,255,158,51,48,138,100,248,143,248,74,171,45,205,148,201,104,158,116,238,73,95,79,80,96,198,149,94],[30,40,219,140,76,237,187,157,63,80,225,62,136,208,98,148,230,141,143,26,26,41,106,21,176,107,51,159,246,168,210,193],[115,110,97,124,170,39,193,107,2,170,135,62,185,85,186,220,106,145,37,3,159,79,235,92,14,251,178,151,182,14,203,193],[81,85,181,150,12,73,242,121,178,234,224,204,246,108,159,5,227,215,47,185,246,126,196,194,118,228,20,131,105,116,74,211],[21,227,239,209,178,36,200,123,56,193,229,198,188,96,71,167,209,233,212,21,201,65,71,147,56,109,161,223,111,58,172,129],[174,133,142,157,75,20,209,142,79,11,219,250,116,80,77,254,15,186,249,254,89,3,249,80,166,75,108,245,85,217,30,73],[199,203,90,57,166,245,156,170,187,115,49,81,23,43,68,12,229,234,204,201,113,71,250,251,63,136,58,135,160,116,94,142],[175,152,147,17,106,246,7,144,209,221,52,153,56,231,230,122,242,68,88,249,68,7,11,185,140,170,14,134,38,8,217,176],[195,198,69,110,2,170,66,67,142,89,154,16,184,116,17,27,20,241,168,95,28,220,12,150,50,80,86,5,172,119,196,237],[193,200,189,193,105,192,238,60,244,189,44,43,27,138,179,113,112,194,194,56,38,200,113,93,168,9,60,186,212,50,162,218],[93,205,98,20,167,210,189,165,205,127,150,251,172,44,218,136,124,6,52,23,139,90,19,35,204,28,168,247,86,152,219,26],[30,216,87,107,209,234,133,1,90,26,253,152,48,174,208,144,78,141,79,213,227,178,202,220,2,60,64,243,65,108,234,217],[149,169,16,112,186,216,108,102,163,86,161,161,56,46,169,235,215,44,98,197,189,237,18,98,134,15,188,131,200,4,80,90],[50,70,211,144,164,157,58,31,236,247,76,40,13,237,35,56,158,140,146,246,6,35,211,17,177,113,221,199,215,86,29,92],[7,228,229,224,122,179,59,221,246,180,69,6,212,228,0,127,212,64,43,234,57,210,8,54,178,197,199,110,170,197,75,27],[32,1,46,88,245,240,234,251,72,37,122,46,39,231,253,125,5,160,142,185,191,201,29,40,25,201,11,173,150,132,71,158],[235,51,89,241,51,53,37,217,43,37,96,47,109,34,62,189,221,230,14,189,93,167,116,12,95,241,63,64,189,239,13,129],[100,121,43,117,132,130,36,164,69,155,33,24,135,0,115,120,211,4,235,107,252,169,178,171,240,184,214,64,7,7,182,60],[53,247,123,220,130,211,116,185,223,64,148,117,242,184,214,55,51,107,5,66,249,60,133,229,34,18,83,51,5,173,128,11],[152,56,254,5,45,252,205,202,103,8,137,237,80,216,151,198,92,181,43,24,56,48,229,195,140,234,197,197,236,228,142,62],[34,203,128,232,25,202,100,161,79,216,60,82,6,127,22,158,43,239,164,36,84,224,140,173,203,94,194,35,74,188,33,48],[165,249,127,68,102,195,5,159,130,223,32,198,179,206,223,143,69,209,84,181,141,43,55,26,125,20,54,78,190,37,104,59],[145,192,119,189,239,247,152,21,226,211,144,48,76,76,75,214,252,129,56,23,67,105,217,120,105,191,52,155,206,16,61,108],[137,117,207,21,241,249,194,153,56,99,143,201,110,29,97,64,172,196,71,63,80,47,192,128,48,113,102,52,67,67,129,163],[225,163,180,12,165,221,121,227,145,182,132,138,148,15,245,44,188,192,242,18,191,150,158,142,3,228,163,188,24,203,0,220],[60,118,189,192,0,203,235,222,195,24,19,33,168,90,73,29,124,172,175,113,0,236,148,33,159,142,203,219,58,45,16,73],[220,245,80,247,47,62,130,88,164,51,124,168,92,94,132,9,35,189,108,26,247,151,14,122,148,51,169,95,34,5,13,76],[50,81,40,7,245,245,41,204,14,55,171,242,145,26,62,241,239,193,118,136,54,159,230,116,170,191,176,17,197,110,247,203],[131,48,30,108,123,105,9,92,208,57,164,254,136,38,48,120,239,103,110,21,168,174,246,175,37,44,27,192,143,180,8,128],[117,219,113,227,102,245,153,73,92,65,7,101,141,176,160,236,134,31,58,41,127,118,219,63,227,95,144,224,29,214,27,238],[138,245,215,164,120,25,115,148,152,120,79,235,38,28,44,92,150,109,128,242,237,252,16,183,202,172,117,87,100,173,97,179],[6,149,144,35,187,91,23,136,103,163,81,171,132,248,92,244,220,5,34,229,105,63,67,64,201,251,65,0,207,59,147,126],[108,230,206,36,185,218,143,96,17,7,89,79,136,140,203,69,137,103,246,171,99,125,19,166,237,240,156,15,33,228,158,84],[95,57,223,218,31,8,245,45,0,201,177,89,129,111,68,31,135,112,149,103,133,27,207,200,62,172,159,87,157,65,229,32],[96,84,111,15,117,52,224,216,248,64,23,236,71,13,93,21,73,194,48,150,135,206,129,42,20,217,50,126,204,81,187,74],[115,93,119,193,51,130,48,46,8,252,69,135,226,31,55,165,179,231,159,152,99,241,207,7,75,139,108,165,51,104,188,201],[126,219,22,216,106,200,10,122,223,178,142,59,190,49,211,189,229,238,74,216,243,241,134,58,117,161,147,43,24,10,45,145],[95,0,2,59,173,15,45,83,195,213,23,236,52,241,181,160,16,115,8,225,71,23,24,20,15,234,218,6,214,83,162,43],[163,139,125,40,197,190,224,86,49,41,199,134,102,138,42,210,164,122,6,244,145,169,59,119,21,215,144,106,112,4,251,188],[132,30,20,10,60,226,227,242,121,41,213,201,169,25,145,163,105,206,252,21,160,172,102,222,83,161,36,35,45,46,71,7],[101,69,104,188,145,151,26,204,206,34,71,224,216,17,143,15,121,128,198,97,24,226,43,0,250,6,124,106,188,79,87,235],[12,105,71,193,95,204,26,106,253,109,184,23,35,223,99,238,192,150,1,240,202,137,138,236,113,124,199,108,246,100,134,173],[203,92,177,206,43,244,205,241,2,255,87,201,208,192,155,208,226,195,128,126,222,41,20,126,18,34,70,164,42,182,79,255],[24,31,254,138,182,171,123,186,103,232,58,57,226,18,154,166,227,192,41,195,195,24,186,73,166,178,2,225,106,222,251,134],[61,166,247,191,217,79,194,125,67,148,186,30,64,218,163,103,7,19,243,48,105,120,82,33,37,89,128,254,182,140,28,203],[182,46,196,31,249,75,37,179,129,199,30,121,90,123,117,194,67,255,132,199,205,146,171,190,83,207,18,161,42,54,106,193],[166,103,255,202,96,199,48,43,122,30,1,56,142,193,196,210,59,12,48,56,210,11,35,17,107,201,141,149,176,219,212,141],[245,84,14,116,18,99,163,158,109,72,11,93,46,88,186,62,9,182,223,90,233,158,38,125,255,233,203,75,222,163,4,46],[25,197,228,241,63,116,94,234,168,70,185,233,22,113,13,184,202,122,156,65,144,189,0,185,197,99,125,30,240,240,133,228],[85,1,89,183,228,237,83,99,161,64,129,133,104,116,239,183,39,123,142,121,82,214,24,88,185,69,155,200,91,195,175,196],[104,216,226,51,218,161,248,206,192,208,69,17,46,61,70,5,224,4,186,175,171,150,178,139,170,120,199,137,34,226,131,195],[17,190,216,19,86,146,255,57,54,250,140,96,69,134,61,39,225,244,86,236,151,105,69,165,179,78,184,194,137,189,27,82],[206,98,129,225,30,216,241,148,92,245,39,54,121,93,252,154,21,181,246,142,54,167,152,0,66,99,218,116,78,50,126,143],[40,66,48,222,111,48,7,4,97,45,68,146,154,94,3,176,62,45,186,105,81,218,171,86,10,203,241,3,110,45,127,175],[214,204,48,83,132,203,6,169,168,129,19,214,35,199,75,27,175,75,127,170,114,249,30,174,51,198,135,88,93,142,27,40],[62,80,207,169,143,64,84,137,116,169,125,49,218,193,237,71,91,1,15,160,11,167,137,60,198,13,113,36,1,186,205,17],[175,148,22,199,88,95,43,47,92,219,116,216,216,50,247,7,96,188,210,25,66,99,17,201,159,79,255,255,243,153,16,112],[130,64,65,61,150,222,245,254,47,71,76,119,44,88,2,28,238,112,196,238,65,145,182,52,68,53,243,149,155,114,144,116],[101,180,151,49,16,231,153,87,6,85,120,57,110,109,44,74,211,117,133,170,69,60,123,247,167,34,143,235,98,72,242,168],[224,77,6,209,65,140,103,108,110,235,135,175,90,109,128,102,130,27,163,233,44,159,118,97,207,127,35,89,140,185,92,243],[243,108,247,8,95,99,93,31,3,82,237,210,255,154,208,18,32,30,196,153,97,108,150,199,25,121,138,239,106,211,41,163],[52,166,8,93,83,50,118,27,200,254,232,185,144,207,104,249,151,149,193,21,41,37,6,11,176,9,69,91,101,90,176,83],[124,177,92,131,95,115,136,163,117,67,18,134,52,124,77,80,161,48,55,105,42,159,125,50,63,31,2,30,35,141,144,125],[66,209,88,203,94,176,248,92,155,97,169,104,135,80,219,198,227,173,211,165,140,178,137,59,94,90,140,122,188,18,24,93]]",
                "sol": "[stringToBytes32(\"118,40,218,112,78,160,82,227,123,146,220,31,74,64,27,16,53,12,73,67,226,242,195,61,28,70,156,47,184,198,224,78\"),stringToBytes32(\"216,133,198,189,154,81,168,12,81,93,112,74,152,63,10,153,159,192,226,79,121,25,193,240,196,52,130,76,198,19,244,208\"),stringToBytes32(\"12,205,91,150,18,26,119,64,64,43,11,100,245,169,157,48,242,115,55,12,97,133,151,223,140,194,126,1,31,173,59,227\"),stringToBytes32(\"84,121,237,122,68,160,248,68,51,247,64,28,77,195,166,233,120,4,32,166,213,111,103,218,171,239,38,136,217,31,216,139\"),stringToBytes32(\"2,127,215,209,19,159,196,80,221,85,186,31,119,162,46,255,200,170,188,208,98,110,217,186,25,197,78,105,70,245,94,159\"),stringToBytes32(\"72,47,246,44,5,212,112,16,194,121,100,232,27,45,39,141,143,81,116,213,90,10,121,46,8,205,254,178,218,127,66,228\"),stringToBytes32(\"208,82,183,187,175,169,226,48,130,22,228,65,170,206,113,170,9,200,216,201,238,73,254,211,75,51,47,65,236,100,227,163\"),stringToBytes32(\"226,36,209,210,58,167,54,34,238,188,175,119,231,141,79,231,220,57,13,84,250,234,203,239,51,58,246,49,152,20,142,185\"),stringToBytes32(\"236,109,147,175,188,100,149,235,44,200,75,243,117,204,143,57,133,147,53,128,160,175,148,31,130,181,56,213,64,237,190,239\"),stringToBytes32(\"98,118,196,101,31,152,187,141,124,79,100,176,125,50,44,197,255,240,242,249,146,138,167,120,82,131,33,30,231,61,232,67\"),stringToBytes32(\"95,131,239,31,193,56,244,1,177,106,199,212,94,103,233,68,141,159,85,119,218,133,227,56,0,16,98,253,52,234,118,165\"),stringToBytes32(\"85,135,41,166,209,32,117,18,51,41,91,84,48,163,124,36,166,101,214,246,205,104,223,81,137,155,133,193,42,220,199,83\"),stringToBytes32(\"158,61,78,110,179,181,145,216,219,220,208,202,98,72,240,90,95,168,213,150,143,26,207,160,25,45,73,179,195,124,196,148\"),stringToBytes32(\"217,5,34,3,250,91,160,191,69,51,26,153,112,195,68,252,24,119,230,146,98,82,185,44,219,65,91,61,53,76,171,227\"),stringToBytes32(\"170,65,123,197,105,191,163,111,37,95,164,128,190,223,181,32,115,20,110,107,250,82,106,88,130,120,25,58,196,192,68,148\"),stringToBytes32(\"94,48,247,16,239,205,124,164,114,97,183,117,56,132,170,246,134,186,62,60,208,96,165,142,228,81,37,232,45,69,90,107\"),stringToBytes32(\"40,147,214,72,199,85,248,218,126,26,47,222,128,122,81,143,107,67,116,4,173,221,79,210,31,31,176,172,254,156,131,252\"),stringToBytes32(\"118,228,66,108,164,116,141,186,217,113,137,185,69,137,11,158,142,163,251,111,156,136,206,188,113,42,2,10,173,175,153,181\"),stringToBytes32(\"28,182,92,207,247,54,122,118,92,181,106,165,91,132,17,163,197,182,213,51,89,9,128,25,254,212,218,24,18,243,219,131\"),stringToBytes32(\"55,110,231,114,48,107,212,147,147,235,52,217,103,203,167,129,19,210,161,157,7,102,29,94,161,251,89,20,40,155,88,92\"),stringToBytes32(\"82,113,60,74,96,119,1,159,248,240,142,147,246,222,43,110,197,173,210,51,175,173,4,110,240,101,29,173,199,189,81,123\"),stringToBytes32(\"141,66,152,166,143,243,210,211,221,128,87,42,86,62,127,205,34,8,35,38,91,212,206,22,79,139,248,46,225,74,100,106\"),stringToBytes32(\"39,56,152,30,213,75,38,13,237,87,150,1,224,13,80,159,150,166,242,17,53,171,66,215,132,196,223,151,46,8,58,117\"),stringToBytes32(\"2,22,72,147,206,141,227,196,167,50,218,218,140,142,74,167,231,96,168,111,20,232,148,41,32,10,230,146,215,27,253,151\"),stringToBytes32(\"67,91,195,43,198,102,79,9,190,92,59,170,132,180,49,203,165,151,59,124,2,249,183,125,48,155,229,227,39,191,145,106\"),stringToBytes32(\"227,92,218,58,238,101,212,4,58,236,152,103,55,136,92,194,124,110,94,237,33,55,86,54,243,44,115,46,73,46,38,80\"),stringToBytes32(\"84,6,238,189,233,76,94,177,136,186,68,235,108,128,66,122,174,222,112,220,150,70,53,194,168,19,136,19,88,175,123,128\"),stringToBytes32(\"134,87,10,76,138,175,20,21,9,24,161,60,146,178,100,150,106,141,246,198,204,215,202,158,208,200,10,77,248,39,72,180\"),stringToBytes32(\"255,51,248,58,10,70,88,13,145,113,232,197,148,26,194,106,240,202,255,242,70,213,128,92,6,81,153,192,75,187,63,36\"),stringToBytes32(\"149,166,177,73,45,207,195,249,252,69,111,1,68,89,93,140,70,63,129,193,78,132,209,28,193,239,147,124,223,177,83,244\"),stringToBytes32(\"49,205,12,152,211,21,96,157,209,158,209,56,60,36,127,104,191,63,228,192,142,171,193,203,95,65,227,144,176,133,199,168\"),stringToBytes32(\"169,188,219,33,46,125,133,157,61,50,171,45,146,136,51,238,182,216,86,32,142,168,121,151,22,156,150,227,35,148,216,165\"),stringToBytes32(\"72,232,234,193,184,118,5,237,255,129,68,199,199,84,63,194,75,55,207,184,103,10,47,243,14,75,86,137,56,65,220,144\"),stringToBytes32(\"3,93,179,214,63,101,192,43,108,201,236,124,220,154,214,232,34,157,148,123,118,105,23,125,177,237,88,96,196,67,132,118\"),stringToBytes32(\"248,33,129,26,53,46,56,44,20,225,222,197,81,164,194,97,9,112,75,127,181,37,90,224,127,99,59,220,141,125,230,77\"),stringToBytes32(\"98,41,43,23,140,192,39,119,69,219,79,172,170,88,44,143,195,133,154,248,92,12,13,89,57,89,39,84,229,11,44,172\"),stringToBytes32(\"129,91,151,41,179,181,34,13,119,225,66,39,245,32,102,63,69,71,140,145,193,45,173,96,105,88,207,8,18,187,2,62\"),stringToBytes32(\"76,250,246,49,249,86,192,109,218,76,23,146,92,121,35,116,135,60,189,139,191,84,165,248,191,180,63,6,7,254,36,208\"),stringToBytes32(\"229,133,205,8,22,136,133,4,174,84,215,23,144,196,65,45,49,101,248,146,91,42,154,129,49,13,126,115,158,17,73,27\"),stringToBytes32(\"8,195,156,91,117,213,37,135,150,83,4,54,213,202,211,203,91,158,188,70,164,190,10,38,231,60,3,110,35,124,163,254\"),stringToBytes32(\"152,219,34,29,46,32,130,197,19,76,220,147,13,122,216,8,204,111,22,52,46,8,92,90,11,177,232,50,214,80,66,220\"),stringToBytes32(\"118,137,130,31,205,228,88,247,244,75,216,135,178,253,87,51,48,149,216,38,228,230,127,183,8,158,147,232,154,21,152,165\"),stringToBytes32(\"110,114,204,151,131,41,237,5,104,2,126,220,77,123,82,246,142,123,82,228,181,88,86,184,147,186,205,51,216,60,140,149\"),stringToBytes32(\"32,119,231,64,84,92,116,219,20,255,146,80,55,7,171,75,90,130,192,229,167,38,42,102,244,219,201,222,110,106,250,6\"),stringToBytes32(\"250,67,202,117,133,82,249,157,128,166,168,65,152,227,211,126,21,238,7,106,195,151,73,16,243,5,144,113,243,252,85,108\"),stringToBytes32(\"59,172,29,16,161,147,46,0,43,209,195,94,48,240,180,114,63,119,196,218,245,66,237,138,127,6,192,196,210,58,183,231\"),stringToBytes32(\"192,14,8,109,128,70,50,135,127,26,160,233,119,70,165,246,176,67,6,91,11,13,82,120,50,23,80,103,243,247,45,128\"),stringToBytes32(\"182,201,121,148,213,164,243,80,167,239,109,164,203,11,48,84,162,204,98,89,109,238,85,120,46,141,55,232,86,203,27,111\"),stringToBytes32(\"242,44,142,202,91,174,132,217,204,154,193,120,8,165,167,23,91,185,67,126,121,17,227,183,85,217,9,48,52,84,168,14\"),stringToBytes32(\"110,132,134,201,15,72,98,56,168,49,62,57,225,6,121,120,226,41,231,82,193,105,63,205,128,230,82,238,181,52,147,138\"),stringToBytes32(\"46,81,114,83,57,178,35,24,129,189,114,228,168,248,165,173,204,121,128,165,146,120,183,196,114,228,76,141,129,234,141,22\"),stringToBytes32(\"174,48,228,42,212,13,15,174,118,118,118,112,157,235,147,243,108,108,11,78,221,86,149,218,13,199,58,216,232,43,193,75\"),stringToBytes32(\"84,84,165,155,180,112,160,128,149,86,76,32,107,235,6,78,126,124,163,121,253,127,217,235,181,110,15,68,106,242,225,14\"),stringToBytes32(\"17,34,163,224,29,63,98,4,60,186,70,237,149,36,29,251,213,19,65,247,156,9,208,22,190,219,4,173,130,100,46,44\"),stringToBytes32(\"134,178,121,156,55,172,2,1,10,110,221,30,25,183,144,191,249,210,209,50,150,160,139,151,72,119,3,28,93,239,215,196\"),stringToBytes32(\"103,121,64,58,248,14,175,40,24,107,150,136,90,23,157,148,192,50,5,215,202,14,165,92,20,156,43,171,107,58,147,163\"),stringToBytes32(\"38,123,159,195,133,229,148,26,0,79,108,79,177,196,70,28,28,75,203,205,140,126,32,19,129,107,197,1,82,210,121,124\"),stringToBytes32(\"156,227,225,144,20,81,32,130,70,159,169,65,187,202,225,3,237,2,78,251,175,181,130,20,125,57,86,9,46,243,112,132\"),stringToBytes32(\"229,12,52,232,163,166,46,142,10,183,135,177,85,229,221,71,96,249,9,121,139,16,155,186,241,50,191,218,193,16,228,184\"),stringToBytes32(\"31,100,237,144,19,147,161,138,203,99,114,252,153,110,203,20,52,18,254,186,221,56,172,172,209,182,111,168,224,43,253,162\"),stringToBytes32(\"235,2,228,225,178,244,15,176,113,87,117,131,180,112,131,7,220,227,231,177,32,217,84,203,28,209,198,105,95,209,243,95\"),stringToBytes32(\"53,126,236,126,37,64,184,221,89,196,167,116,177,90,132,221,237,182,96,148,58,80,219,55,132,218,226,157,205,76,166,15\"),stringToBytes32(\"253,38,122,139,125,151,129,43,4,175,136,197,106,144,58,117,204,238,211,161,96,15,133,128,120,49,45,60,183,195,33,240\"),stringToBytes32(\"111,193,106,90,233,155,166,99,198,60,219,228,14,109,249,121,121,248,19,31,1,54,204,91,203,152,141,4,151,190,237,2\"),stringToBytes32(\"93,251,34,75,36,145,152,113,224,98,14,63,125,64,52,253,59,157,230,252,151,234,207,203,34,251,170,98,119,125,132,124\"),stringToBytes32(\"164,149,234,176,19,20,7,202,188,244,31,238,190,187,205,84,186,233,187,178,123,95,129,58,72,40,37,44,91,47,237,242\"),stringToBytes32(\"17,5,139,209,144,235,178,125,32,80,52,147,200,141,118,162,53,66,231,145,132,189,219,128,3,6,188,221,213,120,21,150\"),stringToBytes32(\"68,121,18,24,130,83,26,18,28,192,232,15,57,202,108,128,240,52,76,205,7,137,238,138,224,181,238,50,99,3,60,38\"),stringToBytes32(\"219,129,172,252,177,102,202,140,248,187,175,183,68,208,223,161,199,34,116,61,1,161,34,165,209,156,2,159,48,212,233,46\"),stringToBytes32(\"65,190,126,155,90,133,246,253,135,235,119,201,155,8,122,40,199,76,131,80,209,233,236,65,106,9,83,177,245,40,192,126\"),stringToBytes32(\"198,11,119,95,179,91,50,194,152,40,27,130,96,184,152,62,32,114,231,99,255,166,247,87,52,234,162,23,22,83,59,72\"),stringToBytes32(\"115,131,254,24,145,16,84,202,29,211,65,41,50,198,49,143,71,93,122,8,140,89,194,176,18,171,28,182,179,140,81,202\"),stringToBytes32(\"155,173,66,104,23,243,199,62,226,29,96,52,79,50,253,93,154,21,28,217,177,37,215,82,208,176,226,29,186,154,224,18\"),stringToBytes32(\"193,180,132,238,243,208,54,70,22,192,177,36,36,206,55,67,46,143,214,132,66,58,194,44,10,37,52,252,121,23,4,176\"),stringToBytes32(\"252,167,165,223,143,145,157,247,238,203,199,170,97,176,178,112,160,238,77,251,108,90,223,17,97,101,75,243,22,31,176,78\"),stringToBytes32(\"241,193,148,101,146,50,3,61,46,55,60,82,153,6,133,104,227,105,101,102,131,224,179,97,223,75,107,128,161,213,149,159\"),stringToBytes32(\"45,2,196,168,3,252,173,24,61,144,2,229,212,56,222,238,176,203,128,204,161,104,227,87,10,170,36,193,233,206,190,207\"),stringToBytes32(\"1,26,166,254,234,63,213,205,235,31,119,82,69,248,81,21,199,98,131,157,162,164,219,60,94,224,147,78,222,90,21,72\"),stringToBytes32(\"205,116,249,154,149,87,232,215,138,194,107,41,209,85,43,40,80,14,118,59,224,253,60,94,13,7,130,101,192,37,103,23\"),stringToBytes32(\"187,122,24,172,198,35,84,123,148,120,244,198,78,146,125,137,48,4,174,25,10,67,48,70,48,239,68,15,9,64,46,57\"),stringToBytes32(\"167,164,215,224,91,58,216,230,245,123,226,36,139,94,185,114,68,27,57,173,172,55,22,29,130,76,242,61,167,150,76,247\"),stringToBytes32(\"2,178,231,71,64,47,210,120,132,223,89,212,13,39,58,7,3,14,192,112,192,73,39,189,67,37,42,161,145,107,104,181\"),stringToBytes32(\"207,248,70,206,212,79,53,143,195,131,210,235,196,180,104,117,116,113,237,9,8,162,112,39,251,116,220,18,119,60,26,206\"),stringToBytes32(\"30,232,105,152,212,72,222,32,92,119,250,177,220,13,130,175,209,124,244,196,167,15,137,12,229,174,250,212,129,57,126,82\"),stringToBytes32(\"51,53,253,150,229,152,47,176,197,191,28,44,44,44,35,108,29,250,4,127,1,13,161,170,154,0,155,139,53,103,88,197\"),stringToBytes32(\"5,89,71,230,193,131,78,90,51,43,192,84,59,224,134,203,14,109,177,49,100,201,68,108,220,252,165,191,65,117,22,208\"),stringToBytes32(\"23,43,25,201,190,227,76,109,215,248,113,26,176,164,245,88,5,146,139,209,93,130,106,39,202,184,149,72,176,123,241,132\"),stringToBytes32(\"10,5,30,34,243,96,119,174,56,156,75,95,31,10,92,218,19,166,94,31,61,171,169,118,140,139,52,29,243,179,54,111\"),stringToBytes32(\"55,14,190,208,27,6,127,215,140,233,153,92,162,104,8,197,59,12,124,133,9,180,43,188,89,79,195,206,220,185,23,61\"),stringToBytes32(\"116,191,21,37,155,98,197,39,239,185,214,248,223,200,170,103,93,217,170,22,85,97,98,103,213,251,187,12,247,164,124,26\"),stringToBytes32(\"207,162,150,3,201,79,13,212,117,73,35,150,39,183,155,204,54,138,243,20,209,12,5,129,242,53,142,25,99,66,66,243\"),stringToBytes32(\"70,31,36,207,20,41,157,168,206,216,196,179,22,189,105,194,213,207,217,90,209,145,133,92,102,206,76,234,213,225,117,164\"),stringToBytes32(\"68,166,227,110,247,163,140,228,133,192,244,231,86,12,178,144,53,114,179,53,66,122,84,157,249,75,229,139,27,90,32,217\"),stringToBytes32(\"65,210,228,98,53,48,89,143,175,170,117,42,90,246,8,46,50,46,44,253,163,78,82,200,63,199,216,53,219,91,41,224\"),stringToBytes32(\"140,241,5,103,77,119,165,156,74,57,173,56,57,124,143,32,243,117,71,226,199,84,11,148,46,153,226,49,67,128,103,96\"),stringToBytes32(\"95,156,88,115,177,253,193,208,207,41,132,220,216,123,58,34,100,13,86,48,174,233,52,187,248,70,211,196,229,7,92,20\"),stringToBytes32(\"4,227,37,49,156,40,171,197,14,246,127,113,195,37,3,120,175,163,52,43,85,221,164,34,145,190,148,204,138,143,240,12\")]"
              },
              {
                "js": "[[30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74],[0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213],[139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4],[152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7],[30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180],[73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230],[98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226],[178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211],[94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13],[104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56],[90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14],[235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132],[101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105],[105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192],[85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47],[252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116],[9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207],[37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37],[51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226],[122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138],[160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132],[174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49],[105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15],[103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2],[150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134],[148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119],[79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204],[163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130],[57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92],[92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79],[199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49],[94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84],[238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33],[65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40],[81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132],[23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27],[58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81],[21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22],[207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132],[28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194],[219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71],[155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175],[251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232],[129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119],[202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135],[156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19],[189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64],[115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249],[221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20],[90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169],[142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58],[24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113],[252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196],[16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139],[108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175],[90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234],[252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196],[27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82],[218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61],[23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127],[109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111],[255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38],[12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220],[156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78],[164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17],[127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171],[255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97],[147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47],[160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133],[144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199],[229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141],[89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134],[115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210],[88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103],[109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180],[160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251],[85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80],[136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150],[45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164],[24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110],[160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171],[236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188],[90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128],[180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143],[14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239],[125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163],[140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169],[249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63],[187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65],[12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16],[66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61],[232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108],[201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31],[7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251],[175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205],[50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143]]",
                "sol": "[bytes32(stringToBytes32(\"30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74\")),bytes32(stringToBytes32(\"0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213\")),bytes32(stringToBytes32(\"139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4\")),bytes32(stringToBytes32(\"152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7\")),bytes32(stringToBytes32(\"30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180\")),bytes32(stringToBytes32(\"73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230\")),bytes32(stringToBytes32(\"98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226\")),bytes32(stringToBytes32(\"178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211\")),bytes32(stringToBytes32(\"94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13\")),bytes32(stringToBytes32(\"104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56\")),bytes32(stringToBytes32(\"90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14\")),bytes32(stringToBytes32(\"235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132\")),bytes32(stringToBytes32(\"101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105\")),bytes32(stringToBytes32(\"105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192\")),bytes32(stringToBytes32(\"85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47\")),bytes32(stringToBytes32(\"252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116\")),bytes32(stringToBytes32(\"9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207\")),bytes32(stringToBytes32(\"37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37\")),bytes32(stringToBytes32(\"51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226\")),bytes32(stringToBytes32(\"122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138\")),bytes32(stringToBytes32(\"160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132\")),bytes32(stringToBytes32(\"174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49\")),bytes32(stringToBytes32(\"105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15\")),bytes32(stringToBytes32(\"103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2\")),bytes32(stringToBytes32(\"150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134\")),bytes32(stringToBytes32(\"148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119\")),bytes32(stringToBytes32(\"79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204\")),bytes32(stringToBytes32(\"163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130\")),bytes32(stringToBytes32(\"57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92\")),bytes32(stringToBytes32(\"92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79\")),bytes32(stringToBytes32(\"199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49\")),bytes32(stringToBytes32(\"94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84\")),bytes32(stringToBytes32(\"238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33\")),bytes32(stringToBytes32(\"65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40\")),bytes32(stringToBytes32(\"81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132\")),bytes32(stringToBytes32(\"23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27\")),bytes32(stringToBytes32(\"58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81\")),bytes32(stringToBytes32(\"21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22\")),bytes32(stringToBytes32(\"207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132\")),bytes32(stringToBytes32(\"28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194\")),bytes32(stringToBytes32(\"219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71\")),bytes32(stringToBytes32(\"155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175\")),bytes32(stringToBytes32(\"251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232\")),bytes32(stringToBytes32(\"129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119\")),bytes32(stringToBytes32(\"202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135\")),bytes32(stringToBytes32(\"156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19\")),bytes32(stringToBytes32(\"189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64\")),bytes32(stringToBytes32(\"115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249\")),bytes32(stringToBytes32(\"221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20\")),bytes32(stringToBytes32(\"90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169\")),bytes32(stringToBytes32(\"142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58\")),bytes32(stringToBytes32(\"24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113\")),bytes32(stringToBytes32(\"252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196\")),bytes32(stringToBytes32(\"16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139\")),bytes32(stringToBytes32(\"108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175\")),bytes32(stringToBytes32(\"90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234\")),bytes32(stringToBytes32(\"252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196\")),bytes32(stringToBytes32(\"27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82\")),bytes32(stringToBytes32(\"218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61\")),bytes32(stringToBytes32(\"23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127\")),bytes32(stringToBytes32(\"109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111\")),bytes32(stringToBytes32(\"255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38\")),bytes32(stringToBytes32(\"12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220\")),bytes32(stringToBytes32(\"156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78\")),bytes32(stringToBytes32(\"164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17\")),bytes32(stringToBytes32(\"127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171\")),bytes32(stringToBytes32(\"255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97\")),bytes32(stringToBytes32(\"147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47\")),bytes32(stringToBytes32(\"160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133\")),bytes32(stringToBytes32(\"144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199\")),bytes32(stringToBytes32(\"229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141\")),bytes32(stringToBytes32(\"89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134\")),bytes32(stringToBytes32(\"115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210\")),bytes32(stringToBytes32(\"88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103\")),bytes32(stringToBytes32(\"109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180\")),bytes32(stringToBytes32(\"160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251\")),bytes32(stringToBytes32(\"85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80\")),bytes32(stringToBytes32(\"136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150\")),bytes32(stringToBytes32(\"45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164\")),bytes32(stringToBytes32(\"24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110\")),bytes32(stringToBytes32(\"160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171\")),bytes32(stringToBytes32(\"236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188\")),bytes32(stringToBytes32(\"90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128\")),bytes32(stringToBytes32(\"180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143\")),bytes32(stringToBytes32(\"14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239\")),bytes32(stringToBytes32(\"125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163\")),bytes32(stringToBytes32(\"140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169\")),bytes32(stringToBytes32(\"249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63\")),bytes32(stringToBytes32(\"187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65\")),bytes32(stringToBytes32(\"12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16\")),bytes32(stringToBytes32(\"66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61\")),bytes32(stringToBytes32(\"232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108\")),bytes32(stringToBytes32(\"201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31\")),bytes32(stringToBytes32(\"7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251\")),bytes32(stringToBytes32(\"175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205\")),bytes32(stringToBytes32(\"50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74],[0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213],[139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4],[152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7],[30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180],[73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230],[98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226],[178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211],[94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13],[104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56],[90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14],[235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132],[101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105],[105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192],[85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47],[252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116],[9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207],[37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37],[51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226],[122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138],[160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132],[174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49],[105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15],[103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2],[150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134],[148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119],[79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204],[163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130],[57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92],[92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79],[199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49],[94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84],[238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33],[65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40],[81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132],[23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27],[58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81],[21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22],[207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132],[28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194],[219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71],[155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175],[251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232],[129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119],[202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135],[156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19],[189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64],[115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249],[221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20],[90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169],[142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58],[24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113],[252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196],[16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139],[108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175],[90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234],[252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196],[27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82],[218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61],[23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127],[109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111],[255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38],[12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220],[156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78],[164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17],[127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171],[255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97],[147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47],[160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133],[144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199],[229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141],[89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134],[115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210],[88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103],[109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180],[160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251],[85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80],[136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150],[45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164],[24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110],[160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171],[236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188],[90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128],[180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143],[14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239],[125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163],[140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169],[249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63],[187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65],[12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16],[66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61],[232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108],[201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31],[7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251],[175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205],[50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143]]",
                "sol": "[bytes32(stringToBytes32(\"30,33,173,147,246,101,5,194,33,229,195,205,253,49,72,78,117,8,126,247,110,251,89,166,48,29,234,219,37,52,230,74\")),bytes32(stringToBytes32(\"0,155,12,172,174,153,74,224,150,202,231,185,157,31,80,182,82,233,0,3,12,183,5,107,139,222,209,104,35,148,143,213\")),bytes32(stringToBytes32(\"139,213,53,231,210,215,201,17,198,121,227,85,46,73,148,131,122,169,107,70,34,90,207,34,27,114,18,61,130,44,190,4\")),bytes32(stringToBytes32(\"152,43,186,242,6,70,233,56,166,115,216,241,239,200,14,46,187,196,199,77,137,214,58,24,94,157,119,145,58,225,123,7\")),bytes32(stringToBytes32(\"30,120,117,50,145,139,180,171,16,9,86,12,137,243,207,175,107,17,81,61,65,222,140,118,185,171,246,83,0,98,248,180\")),bytes32(stringToBytes32(\"73,65,105,240,20,210,80,145,61,42,228,191,150,44,84,215,171,129,169,130,151,78,211,253,221,86,43,9,52,119,26,230\")),bytes32(stringToBytes32(\"98,149,255,120,133,236,85,66,126,152,195,139,163,45,52,142,243,230,67,228,208,80,123,234,101,153,80,72,127,79,172,226\")),bytes32(stringToBytes32(\"178,128,50,108,250,171,32,246,254,123,45,61,249,128,215,172,134,39,76,243,228,97,40,247,6,115,150,123,75,23,101,211\")),bytes32(stringToBytes32(\"94,251,196,168,77,240,122,122,13,42,121,248,100,216,11,5,53,122,218,220,143,177,201,196,243,176,108,50,12,43,164,13\")),bytes32(stringToBytes32(\"104,52,249,145,233,94,216,132,35,199,163,100,236,123,198,32,129,212,149,243,80,44,252,78,51,137,193,13,147,236,190,56\")),bytes32(stringToBytes32(\"90,53,96,90,88,238,249,224,189,143,107,18,158,219,63,178,85,176,37,96,36,29,164,55,244,164,197,212,225,172,14,14\")),bytes32(stringToBytes32(\"235,217,215,220,112,87,150,118,205,162,93,85,32,194,121,239,200,217,144,133,252,124,71,157,107,246,49,193,139,78,82,132\")),bytes32(stringToBytes32(\"101,148,219,136,59,122,143,42,41,193,43,3,224,241,96,17,21,215,54,207,243,113,187,187,113,173,145,158,114,14,106,105\")),bytes32(stringToBytes32(\"105,231,29,245,199,189,81,64,244,59,137,76,148,247,2,111,112,0,83,80,255,32,3,158,139,251,104,230,132,132,97,192\")),bytes32(stringToBytes32(\"85,217,60,233,5,116,102,125,114,24,132,85,167,120,95,52,45,225,63,153,81,98,111,51,41,165,248,178,154,9,151,47\")),bytes32(stringToBytes32(\"252,233,0,108,198,196,188,115,32,9,114,104,174,58,48,239,60,194,136,214,216,250,13,119,170,57,184,49,150,1,59,116\")),bytes32(stringToBytes32(\"9,120,138,153,255,152,229,2,90,57,104,51,240,143,91,10,236,207,249,80,57,143,121,73,4,175,98,81,59,116,68,207\")),bytes32(stringToBytes32(\"37,162,163,15,202,117,15,125,7,201,240,223,206,90,141,210,43,59,214,71,111,33,108,185,147,108,45,191,83,241,29,37\")),bytes32(stringToBytes32(\"51,11,236,33,207,128,32,247,161,78,68,161,208,3,211,105,133,163,52,141,223,207,25,205,234,11,71,138,92,57,220,226\")),bytes32(stringToBytes32(\"122,107,202,38,187,143,213,79,46,12,33,42,251,117,128,190,109,79,99,226,131,186,36,19,201,45,108,171,76,230,29,138\")),bytes32(stringToBytes32(\"160,65,151,196,236,245,209,38,146,228,156,108,252,99,16,42,204,37,15,220,42,47,180,75,54,122,206,64,68,180,148,132\")),bytes32(stringToBytes32(\"174,131,240,99,123,89,99,128,143,202,23,115,76,59,96,85,157,81,63,55,107,48,158,119,227,73,113,38,22,210,19,49\")),bytes32(stringToBytes32(\"105,89,145,169,210,80,207,197,44,94,190,75,24,37,53,245,66,162,47,100,185,38,211,116,147,159,96,254,84,221,132,15\")),bytes32(stringToBytes32(\"103,49,235,160,204,225,228,197,143,233,191,36,176,248,111,83,151,127,213,174,151,193,122,241,78,80,68,32,29,72,229,2\")),bytes32(stringToBytes32(\"150,203,60,212,219,42,214,148,91,111,62,209,120,4,7,64,53,151,162,167,53,241,247,34,22,191,178,59,213,249,237,134\")),bytes32(stringToBytes32(\"148,24,108,29,241,95,249,170,17,73,43,120,253,47,31,105,63,37,63,191,113,214,255,76,75,135,230,209,56,113,159,119\")),bytes32(stringToBytes32(\"79,70,77,167,210,163,251,5,207,54,14,196,198,124,119,119,55,174,154,143,110,42,214,255,73,93,59,59,176,80,57,204\")),bytes32(stringToBytes32(\"163,145,189,70,86,29,233,5,118,45,44,126,209,232,128,152,196,44,208,43,133,111,9,219,51,161,40,157,40,169,82,130\")),bytes32(stringToBytes32(\"57,99,194,133,201,34,88,146,122,108,60,235,216,29,251,35,167,75,131,7,227,60,111,85,119,179,113,86,8,168,216,92\")),bytes32(stringToBytes32(\"92,111,2,215,16,186,67,7,101,242,250,158,158,46,235,101,62,199,94,161,23,150,167,69,220,244,106,71,166,212,63,79\")),bytes32(stringToBytes32(\"199,121,65,202,191,81,181,133,218,250,167,83,22,231,59,52,92,159,222,181,142,201,46,115,235,23,244,145,235,71,130,49\")),bytes32(stringToBytes32(\"94,93,195,120,49,250,165,19,252,204,206,2,177,222,224,206,105,46,229,235,36,130,68,235,82,60,61,45,177,217,196,84\")),bytes32(stringToBytes32(\"238,98,204,190,102,18,68,65,104,189,244,210,240,205,102,213,11,137,219,92,10,95,218,64,77,60,139,16,217,155,146,33\")),bytes32(stringToBytes32(\"65,129,86,98,156,194,237,158,233,234,121,83,192,60,135,13,2,38,13,197,32,184,184,86,177,182,171,109,0,96,129,40\")),bytes32(stringToBytes32(\"81,200,156,52,246,217,163,50,208,7,38,119,210,197,150,196,52,162,85,41,14,228,189,150,86,97,0,37,77,93,175,132\")),bytes32(stringToBytes32(\"23,4,192,96,36,184,196,150,133,137,252,87,103,61,66,16,131,180,220,41,76,144,214,121,163,249,7,154,246,67,13,27\")),bytes32(stringToBytes32(\"58,33,132,128,250,204,111,152,239,70,2,196,60,93,46,206,165,68,99,122,179,119,163,149,32,14,178,39,202,212,156,81\")),bytes32(stringToBytes32(\"21,179,40,77,99,209,160,81,133,114,38,165,230,200,14,120,60,43,106,150,90,194,188,66,103,86,10,198,155,206,138,22\")),bytes32(stringToBytes32(\"207,45,41,191,99,102,205,62,3,1,29,97,2,74,186,91,124,57,42,104,228,208,210,104,203,61,229,129,9,183,245,132\")),bytes32(stringToBytes32(\"28,167,192,207,77,172,38,192,223,87,22,4,164,27,1,97,63,243,163,88,240,185,231,83,239,125,233,68,242,20,81,194\")),bytes32(stringToBytes32(\"219,30,96,46,31,55,31,57,201,74,145,82,104,232,45,247,35,79,159,3,154,138,89,8,91,199,116,224,225,113,229,71\")),bytes32(stringToBytes32(\"155,124,249,29,233,208,139,71,22,234,133,216,4,109,88,8,113,231,64,114,222,17,107,97,87,207,198,197,170,245,167,175\")),bytes32(stringToBytes32(\"251,17,183,75,0,78,77,241,197,2,170,255,63,208,80,207,12,215,189,124,70,111,228,79,57,145,32,199,150,19,189,232\")),bytes32(stringToBytes32(\"129,53,201,67,27,155,0,218,91,215,116,34,111,62,76,151,195,244,224,49,206,151,16,112,143,90,117,125,119,237,235,119\")),bytes32(stringToBytes32(\"202,106,125,56,251,132,121,134,216,242,162,253,214,176,35,207,159,98,249,199,53,181,140,47,32,157,31,190,233,214,240,135\")),bytes32(stringToBytes32(\"156,223,182,107,186,212,33,172,23,193,8,154,187,189,32,38,25,176,6,114,193,55,96,14,195,211,88,248,218,239,176,19\")),bytes32(stringToBytes32(\"189,28,45,200,76,177,46,62,234,202,230,60,247,231,16,83,149,252,130,105,32,50,61,19,165,254,48,69,142,28,110,64\")),bytes32(stringToBytes32(\"115,225,12,165,6,198,131,184,12,61,244,1,138,128,196,201,162,145,38,157,18,238,87,19,109,236,78,40,40,137,36,249\")),bytes32(stringToBytes32(\"221,118,110,110,69,129,180,133,216,200,72,36,213,5,185,7,47,231,99,25,16,123,42,121,11,247,205,181,242,193,197,20\")),bytes32(stringToBytes32(\"90,246,30,73,168,245,37,1,127,130,212,198,151,99,39,147,59,124,254,250,52,82,44,23,140,14,23,58,141,158,143,169\")),bytes32(stringToBytes32(\"142,52,176,255,183,198,38,116,11,92,128,25,142,56,121,155,69,52,226,27,65,140,211,101,47,32,139,10,135,44,85,58\")),bytes32(stringToBytes32(\"24,151,22,112,224,65,102,136,24,70,165,11,145,162,166,236,47,43,36,22,151,128,87,179,73,247,63,67,68,25,195,113\")),bytes32(stringToBytes32(\"252,234,225,8,17,58,116,149,131,25,132,203,167,83,10,91,52,1,66,49,152,5,107,99,78,129,71,151,41,99,33,196\")),bytes32(stringToBytes32(\"16,21,207,219,96,249,144,17,66,118,14,199,120,191,230,127,109,148,194,229,54,146,224,218,121,59,230,190,19,138,55,139\")),bytes32(stringToBytes32(\"108,204,176,118,249,80,7,221,226,148,116,164,128,100,30,173,68,112,185,186,181,40,120,44,171,89,216,213,209,30,145,175\")),bytes32(stringToBytes32(\"90,178,183,29,137,109,19,154,50,200,16,147,195,211,188,52,181,253,111,167,42,121,18,89,211,238,52,126,126,46,26,234\")),bytes32(stringToBytes32(\"252,47,107,200,68,186,36,236,38,26,172,175,205,10,233,238,77,93,17,229,153,15,211,41,203,214,51,149,39,177,38,196\")),bytes32(stringToBytes32(\"27,122,253,69,168,82,74,235,159,235,201,118,179,122,42,206,24,195,112,66,177,82,164,69,230,96,94,152,233,64,236,82\")),bytes32(stringToBytes32(\"218,52,3,247,240,70,51,180,116,197,253,148,126,89,193,179,26,36,184,213,213,130,139,240,224,14,223,25,44,168,110,61\")),bytes32(stringToBytes32(\"23,201,89,36,14,253,186,188,121,188,46,54,103,93,166,39,98,49,129,127,142,40,177,98,96,31,42,59,111,49,140,127\")),bytes32(stringToBytes32(\"109,156,143,250,59,185,252,100,205,186,114,208,58,23,138,213,221,249,78,107,117,214,196,75,26,41,129,59,159,20,167,111\")),bytes32(stringToBytes32(\"255,216,197,78,254,231,153,44,64,47,49,93,0,53,231,204,226,177,61,251,85,84,59,4,143,27,70,37,51,47,65,38\")),bytes32(stringToBytes32(\"12,146,22,48,171,34,143,164,101,96,152,167,186,1,145,131,163,247,220,180,81,155,60,44,79,187,147,123,147,10,19,220\")),bytes32(stringToBytes32(\"156,59,107,175,176,35,223,8,219,123,78,92,18,91,48,77,170,100,35,229,254,59,2,29,115,31,230,49,225,204,45,78\")),bytes32(stringToBytes32(\"164,49,179,201,219,117,77,169,143,166,253,166,251,99,95,58,243,200,192,206,185,186,225,183,69,35,50,254,63,249,253,17\")),bytes32(stringToBytes32(\"127,59,71,190,172,90,206,65,212,205,117,23,235,197,62,204,182,148,184,37,33,32,149,144,169,165,210,228,107,12,98,171\")),bytes32(stringToBytes32(\"255,192,143,185,10,69,232,55,103,182,244,218,107,78,110,182,0,238,139,91,187,199,194,247,54,73,176,135,159,139,194,97\")),bytes32(stringToBytes32(\"147,192,226,72,216,189,242,190,86,228,151,156,161,203,118,69,38,163,99,233,35,149,130,54,200,65,92,136,78,125,0,47\")),bytes32(stringToBytes32(\"160,0,136,232,20,237,194,245,219,245,248,28,209,208,90,40,171,224,213,200,12,233,149,56,231,201,46,29,90,240,141,133\")),bytes32(stringToBytes32(\"144,43,206,139,244,115,41,75,202,157,2,234,248,85,45,212,9,199,249,246,58,249,123,242,131,1,66,90,107,187,117,199\")),bytes32(stringToBytes32(\"229,127,145,57,233,48,246,211,112,232,150,200,87,94,16,232,208,20,238,204,55,255,60,86,112,2,125,124,151,153,164,141\")),bytes32(stringToBytes32(\"89,109,129,20,231,126,251,128,254,232,250,79,55,251,111,197,240,96,169,166,167,26,9,59,120,72,26,3,196,161,152,134\")),bytes32(stringToBytes32(\"115,15,213,61,201,254,96,9,77,34,162,196,11,29,134,5,117,251,232,69,58,54,176,224,37,126,211,132,195,27,228,210\")),bytes32(stringToBytes32(\"88,159,171,70,41,145,173,179,140,255,244,43,79,19,111,7,46,92,54,185,58,108,120,24,8,44,255,108,253,90,193,103\")),bytes32(stringToBytes32(\"109,164,174,79,204,194,25,32,252,162,45,215,46,57,21,227,229,222,3,252,74,87,45,119,189,201,75,8,116,140,146,180\")),bytes32(stringToBytes32(\"160,0,88,137,236,232,178,42,160,125,254,86,93,0,210,201,71,96,30,209,171,157,81,4,125,245,19,59,9,199,185,251\")),bytes32(stringToBytes32(\"85,125,81,182,41,190,65,214,143,209,64,2,116,56,61,167,200,254,168,62,184,6,197,123,176,185,42,249,210,82,129,80\")),bytes32(stringToBytes32(\"136,64,57,170,77,30,228,242,114,83,125,230,192,100,74,46,217,109,74,117,119,215,23,186,47,128,229,145,190,135,166,150\")),bytes32(stringToBytes32(\"45,245,128,216,28,158,207,48,210,88,30,160,176,246,85,13,175,249,1,16,130,201,195,114,69,119,160,156,63,126,132,164\")),bytes32(stringToBytes32(\"24,209,80,72,127,226,24,182,173,245,221,249,110,144,37,237,128,167,126,137,202,28,7,180,51,204,141,250,35,218,190,110\")),bytes32(stringToBytes32(\"160,231,146,70,78,134,145,91,10,218,92,238,7,230,207,98,151,217,37,189,193,230,199,116,24,250,36,193,34,62,212,171\")),bytes32(stringToBytes32(\"236,247,99,61,6,25,121,232,147,15,72,147,250,177,15,135,51,227,123,62,47,67,82,169,203,30,131,61,4,21,50,188\")),bytes32(stringToBytes32(\"90,216,145,27,233,29,58,20,53,74,222,128,226,142,194,71,19,86,5,126,136,47,206,74,141,106,46,244,45,187,86,128\")),bytes32(stringToBytes32(\"180,64,97,107,105,240,131,140,162,22,21,71,248,66,173,185,246,14,255,39,208,140,169,84,193,6,10,149,40,72,96,143\")),bytes32(stringToBytes32(\"14,133,94,71,56,78,155,129,245,48,216,89,23,241,133,180,193,192,11,241,14,23,19,32,14,80,215,130,229,120,240,239\")),bytes32(stringToBytes32(\"125,152,103,144,210,60,135,27,106,43,142,195,105,124,178,16,190,85,119,66,42,217,199,226,187,188,72,69,227,148,54,163\")),bytes32(stringToBytes32(\"140,30,33,124,227,155,214,87,131,137,228,22,87,96,208,75,148,231,196,212,117,202,116,190,204,46,244,81,61,83,76,169\")),bytes32(stringToBytes32(\"249,84,1,9,51,197,240,136,10,196,136,220,23,154,105,190,190,78,125,179,102,43,101,49,96,192,74,238,91,82,116,63\")),bytes32(stringToBytes32(\"187,169,115,121,237,27,154,100,145,29,221,124,86,173,72,20,90,129,112,161,77,150,38,127,82,48,57,185,81,67,97,65\")),bytes32(stringToBytes32(\"12,41,7,7,160,205,83,51,49,96,7,37,79,29,219,203,4,31,209,24,212,150,74,76,47,249,93,171,214,224,201,16\")),bytes32(stringToBytes32(\"66,182,16,175,130,179,111,0,164,119,12,173,249,83,223,254,36,210,130,71,184,45,11,51,23,184,163,229,2,120,32,61\")),bytes32(stringToBytes32(\"232,71,124,223,84,204,19,63,3,93,126,225,254,171,202,69,119,20,243,3,31,140,236,236,216,125,27,246,157,93,175,108\")),bytes32(stringToBytes32(\"201,165,83,191,66,68,230,178,226,249,156,62,186,224,42,228,38,196,0,206,223,197,34,140,217,11,22,180,222,211,103,31\")),bytes32(stringToBytes32(\"7,122,246,80,165,189,218,43,11,239,125,72,4,201,213,102,179,210,65,114,198,175,145,211,223,144,213,52,245,109,99,251\")),bytes32(stringToBytes32(\"175,65,242,124,107,68,160,212,52,204,142,147,113,172,221,101,163,72,142,148,16,214,137,126,157,199,52,82,235,194,11,205\")),bytes32(stringToBytes32(\"50,94,128,142,108,180,246,27,42,184,204,219,84,138,69,99,197,163,107,176,4,204,253,183,119,145,83,102,147,84,235,143\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.857ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"\\x19Ethereum Signed Message:\\n32\"",
                "sol": "\"\\x19Ethereum Signed Message:\\n32\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.862ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[0],accounts[3],accounts[7],accounts[5],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[7],accounts[1],accounts[0],accounts[2],accounts[4],accounts[9],accounts[0],accounts[0],accounts[3],accounts[5],accounts[1],accounts[0],accounts[1],accounts[1],accounts[5],accounts[6],accounts[1],accounts[3],accounts[4],accounts[3],accounts[8],accounts[7],accounts[9],accounts[1],accounts[3],accounts[0],accounts[4],accounts[9],accounts[2],accounts[8],accounts[2],accounts[5],accounts[4],accounts[2],accounts[7],accounts[4],accounts[2],accounts[6],accounts[4],accounts[0],accounts[0],accounts[0],accounts[0],accounts[8],accounts[9],accounts[0],accounts[0],accounts[0],accounts[6],accounts[3],accounts[3],accounts[3],accounts[9],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[96,64,26,95,2014223716,3,1532892062,254,26,254,66,254,0,254,2,1336,2014223715,257,65,2,256,1532892063,2014223714,97,1337,97,65,2014223716,10001,95,1532892064,1532892062,96,95,2014223716,5,255,97,97,256,26,255,95,256,1338,2014223715,255,95,2014223716,1336,97,1338,2014223715,3,27,1532892063,1532892064,4,10000,257,10000,26,95,255]",
              "sol": "[uint256(96),uint256(64),uint256(26),uint256(95),uint256(2014223716),uint256(3),uint256(1532892062),uint256(254),uint256(26),uint256(254),uint256(66),uint256(254),uint256(0),uint256(254),uint256(2),uint256(1336),uint256(2014223715),uint256(257),uint256(65),uint256(2),uint256(256),uint256(1532892063),uint256(2014223714),uint256(97),uint256(1337),uint256(97),uint256(65),uint256(2014223716),uint256(10001),uint256(95),uint256(1532892064),uint256(1532892062),uint256(96),uint256(95),uint256(2014223716),uint256(5),uint256(255),uint256(97),uint256(97),uint256(256),uint256(26),uint256(255),uint256(95),uint256(256),uint256(1338),uint256(2014223715),uint256(255),uint256(95),uint256(2014223716),uint256(1336),uint256(97),uint256(1338),uint256(2014223715),uint256(3),uint256(27),uint256(1532892063),uint256(1532892064),uint256(4),uint256(10000),uint256(257),uint256(10000),uint256(26),uint256(95),uint256(255)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[3],accounts[7],accounts[5],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[7],accounts[1],accounts[0],accounts[2],accounts[4],accounts[9],accounts[0],accounts[0],accounts[3],accounts[5],accounts[1],accounts[0],accounts[1],accounts[1],accounts[5],accounts[6],accounts[1],accounts[3],accounts[4],accounts[3],accounts[8],accounts[7],accounts[9],accounts[1],accounts[3],accounts[0],accounts[4],accounts[9],accounts[2],accounts[8],accounts[2],accounts[5],accounts[4],accounts[2],accounts[7],accounts[4],accounts[2],accounts[6],accounts[4],accounts[0],accounts[0],accounts[0],accounts[0],accounts[8],accounts[9],accounts[0],accounts[0],accounts[0],accounts[6],accounts[3],accounts[3],accounts[3],accounts[9],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[96,64,26,95,2014223716,3,1532892062,254,26,254,66,254,0,254,2,1336,2014223715,257,65,2,256,1532892063,2014223714,97,1337,97,65,2014223716,10001,95,1532892064,1532892062,96,95,2014223716,5,255,97,97,256,26,255,95,256,1338,2014223715,255,95,2014223716,1336,97,1338,2014223715,3,27,1532892063,1532892064,4,10000,257,10000,26,95,255]",
                "sol": "[uint256(96),uint256(64),uint256(26),uint256(95),uint256(2014223716),uint256(3),uint256(1532892062),uint256(254),uint256(26),uint256(254),uint256(66),uint256(254),uint256(0),uint256(254),uint256(2),uint256(1336),uint256(2014223715),uint256(257),uint256(65),uint256(2),uint256(256),uint256(1532892063),uint256(2014223714),uint256(97),uint256(1337),uint256(97),uint256(65),uint256(2014223716),uint256(10001),uint256(95),uint256(1532892064),uint256(1532892062),uint256(96),uint256(95),uint256(2014223716),uint256(5),uint256(255),uint256(97),uint256(97),uint256(256),uint256(26),uint256(255),uint256(95),uint256(256),uint256(1338),uint256(2014223715),uint256(255),uint256(95),uint256(2014223716),uint256(1336),uint256(97),uint256(1338),uint256(2014223715),uint256(3),uint256(27),uint256(1532892063),uint256(1532892064),uint256(4),uint256(10000),uint256(257),uint256(10000),uint256(26),uint256(95),uint256(255)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[9],accounts[1],accounts[6],accounts[2],accounts[4],accounts[6],accounts[2],accounts[0],accounts[0],accounts[9],accounts[7],accounts[4],accounts[8],accounts[0],accounts[7],accounts[0],accounts[9],accounts[8],accounts[0],accounts[3],accounts[9],accounts[9],accounts[2],accounts[1],accounts[5],accounts[2],accounts[1],accounts[6],accounts[1],accounts[6],accounts[0],accounts[6],accounts[7],accounts[2],accounts[3],accounts[6],accounts[9],accounts[5],accounts[3],accounts[1],accounts[8],accounts[4],accounts[3],accounts[3],accounts[3],accounts[4],accounts[5],accounts[4],accounts[9],accounts[3],accounts[1],accounts[4],accounts[9],accounts[2],accounts[4],accounts[7],accounts[7],accounts[3],accounts[6],accounts[6],accounts[9],accounts[6],accounts[9],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[96,64,26,95,2014223716,3,1532892062,254,26,254,66,254,0,254,2,1336,2014223715,257,65,2,256,1532892063,2014223714,97,1337,97,65,2014223716,10001,95,1532892064,1532892062,96,95,2014223716,5,255,97,97,256,26,255,95,256,1338,2014223715,255,95,2014223716,1336,97,1338,2014223715,3,27,1532892063,1532892064,4,10000,257,10000,26,95,255]",
                "sol": "[uint256(96),uint256(64),uint256(26),uint256(95),uint256(2014223716),uint256(3),uint256(1532892062),uint256(254),uint256(26),uint256(254),uint256(66),uint256(254),uint256(0),uint256(254),uint256(2),uint256(1336),uint256(2014223715),uint256(257),uint256(65),uint256(2),uint256(256),uint256(1532892063),uint256(2014223714),uint256(97),uint256(1337),uint256(97),uint256(65),uint256(2014223716),uint256(10001),uint256(95),uint256(1532892064),uint256(1532892062),uint256(96),uint256(95),uint256(2014223716),uint256(5),uint256(255),uint256(97),uint256(97),uint256(256),uint256(26),uint256(255),uint256(95),uint256(256),uint256(1338),uint256(2014223715),uint256(255),uint256(95),uint256(2014223716),uint256(1336),uint256(97),uint256(1338),uint256(2014223715),uint256(3),uint256(27),uint256(1532892063),uint256(1532892064),uint256(4),uint256(10000),uint256(257),uint256(10000),uint256(26),uint256(95),uint256(255)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[96,64,26,95,2014223716,3,1532892062,254,26,254,66,254,0,254,2,1336,2014223715,257,65,2,256,1532892063,2014223714,97,1337,97,65,2014223716,10001,95,1532892064,1532892062,96,95,2014223716,5,255,97,97,256,26,255,95,256,1338,2014223715,255,95,2014223716,1336,97,1338,2014223715,3,27,1532892063,1532892064,4,10000,257,10000,26,95,255]",
                "sol": "[uint256(96),uint256(64),uint256(26),uint256(95),uint256(2014223716),uint256(3),uint256(1532892062),uint256(254),uint256(26),uint256(254),uint256(66),uint256(254),uint256(0),uint256(254),uint256(2),uint256(1336),uint256(2014223715),uint256(257),uint256(65),uint256(2),uint256(256),uint256(1532892063),uint256(2014223714),uint256(97),uint256(1337),uint256(97),uint256(65),uint256(2014223716),uint256(10001),uint256(95),uint256(1532892064),uint256(1532892062),uint256(96),uint256(95),uint256(2014223716),uint256(5),uint256(255),uint256(97),uint256(97),uint256(256),uint256(26),uint256(255),uint256(95),uint256(256),uint256(1338),uint256(2014223715),uint256(255),uint256(95),uint256(2014223716),uint256(1336),uint256(97),uint256(1338),uint256(2014223715),uint256(3),uint256(27),uint256(1532892063),uint256(1532892064),uint256(4),uint256(10000),uint256(257),uint256(10000),uint256(26),uint256(95),uint256(255)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.865ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.866ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[4],accounts[0],accounts[5],accounts[6],accounts[0],accounts[5],accounts[9],accounts[4],accounts[8],accounts[1],accounts[8],accounts[0],accounts[3],accounts[9],accounts[8],accounts[4],accounts[4],accounts[2],accounts[0],accounts[5],accounts[0],accounts[3],accounts[3],accounts[0],accounts[0],accounts[6],accounts[3],accounts[3],accounts[4],accounts[6],accounts[5],accounts[3],accounts[0],accounts[5],accounts[5],accounts[7],accounts[5],accounts[5],accounts[1],accounts[1],accounts[3],accounts[6],accounts[9],accounts[0],accounts[4],accounts[0],accounts[2],accounts[7],accounts[7],accounts[5],accounts[6],accounts[7],accounts[8],accounts[0],accounts[4],accounts[8],accounts[2],accounts[9],accounts[0],accounts[5],accounts[3],accounts[7],accounts[8],accounts[1],accounts[6],accounts[6],accounts[2],accounts[8],accounts[5],accounts[1],accounts[3],accounts[6],accounts[9],accounts[6],accounts[7],accounts[5],accounts[3],accounts[6],accounts[8],accounts[5],accounts[6],accounts[6],accounts[6],accounts[1],accounts[5],accounts[9],accounts[7],accounts[7],accounts[3],accounts[2],accounts[9],accounts[2],accounts[8],accounts[3],accounts[5],accounts[0],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[4],accounts[0],accounts[5],accounts[6],accounts[0],accounts[5],accounts[9],accounts[4],accounts[8],accounts[1],accounts[8],accounts[0],accounts[3],accounts[9],accounts[8],accounts[4],accounts[4],accounts[2],accounts[0],accounts[5],accounts[0],accounts[3],accounts[3],accounts[0],accounts[0],accounts[6],accounts[3],accounts[3],accounts[4],accounts[6],accounts[5],accounts[3],accounts[0],accounts[5],accounts[5],accounts[7],accounts[5],accounts[5],accounts[1],accounts[1],accounts[3],accounts[6],accounts[9],accounts[0],accounts[4],accounts[0],accounts[2],accounts[7],accounts[7],accounts[5],accounts[6],accounts[7],accounts[8],accounts[0],accounts[4],accounts[8],accounts[2],accounts[9],accounts[0],accounts[5],accounts[3],accounts[7],accounts[8],accounts[1],accounts[6],accounts[6],accounts[2],accounts[8],accounts[5],accounts[1],accounts[3],accounts[6],accounts[9],accounts[6],accounts[7],accounts[5],accounts[3],accounts[6],accounts[8],accounts[5],accounts[6],accounts[6],accounts[6],accounts[1],accounts[5],accounts[9],accounts[7],accounts[7],accounts[3],accounts[2],accounts[9],accounts[2],accounts[8],accounts[3],accounts[5],accounts[0],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[4],accounts[0],accounts[5],accounts[6],accounts[0],accounts[5],accounts[9],accounts[4],accounts[8],accounts[1],accounts[8],accounts[0],accounts[3],accounts[9],accounts[8],accounts[4],accounts[4],accounts[2],accounts[0],accounts[5],accounts[0],accounts[3],accounts[3],accounts[0],accounts[0],accounts[6],accounts[3],accounts[3],accounts[4],accounts[6],accounts[5],accounts[3],accounts[0],accounts[5],accounts[5],accounts[7],accounts[5],accounts[5],accounts[1],accounts[1],accounts[3],accounts[6],accounts[9],accounts[0],accounts[4],accounts[0],accounts[2],accounts[7],accounts[7],accounts[5],accounts[6],accounts[7],accounts[8],accounts[0],accounts[4],accounts[8],accounts[2],accounts[9],accounts[0],accounts[5],accounts[3],accounts[7],accounts[8],accounts[1],accounts[6],accounts[6],accounts[2],accounts[8],accounts[5],accounts[1],accounts[3],accounts[6],accounts[9],accounts[6],accounts[7],accounts[5],accounts[3],accounts[6],accounts[8],accounts[5],accounts[6],accounts[6],accounts[6],accounts[1],accounts[5],accounts[9],accounts[7],accounts[7],accounts[3],accounts[2],accounts[9],accounts[2],accounts[8],accounts[3],accounts[5],accounts[0],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.871ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.872ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+251",
              "sol": "block.timestamp+251"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+251",
                "sol": "block.timestamp+251"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.878ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.887ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.891ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.899ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.903ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.906ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.907ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.908ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[0],accounts[5],accounts[9],accounts[5],accounts[5],accounts[4],accounts[0],accounts[0],accounts[8],accounts[8],accounts[5],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[3],accounts[2],accounts[6],accounts[6],accounts[1],accounts[1],accounts[1],accounts[3],accounts[0],accounts[4],accounts[0],accounts[6],accounts[4],accounts[0],accounts[6],accounts[6],accounts[0],accounts[9],accounts[5],accounts[4],accounts[3],accounts[6],accounts[1],accounts[1],accounts[0],accounts[9],accounts[0],accounts[3],accounts[2],accounts[7],accounts[5],accounts[0],accounts[9],accounts[4],accounts[0],accounts[2],accounts[2],accounts[7],accounts[0],accounts[1],accounts[0],accounts[5],accounts[8],accounts[2],accounts[0],accounts[1],accounts[0],accounts[9],accounts[3],accounts[0],accounts[3],accounts[3],accounts[3],accounts[5],accounts[4],accounts[9],accounts[4],accounts[3],accounts[0],accounts[7],accounts[2],accounts[3],accounts[7],accounts[4],accounts[1],accounts[0],accounts[8],accounts[0],accounts[9],accounts[4],accounts[6],accounts[6],accounts[1],accounts[4],accounts[6],accounts[4],accounts[6],accounts[2],accounts[6],accounts[3],accounts[9],accounts[1],accounts[8],accounts[0],accounts[6],accounts[6],accounts[3],accounts[3],accounts[1],accounts[0],accounts[4],accounts[4],accounts[4],accounts[3],accounts[6],accounts[5],accounts[8],accounts[8],accounts[7],accounts[5],accounts[1],accounts[5],accounts[2],accounts[0],accounts[0],accounts[0],accounts[7],accounts[6],accounts[0],accounts[3],accounts[9],accounts[5],accounts[3],accounts[0],accounts[3],accounts[2],accounts[5],accounts[5],accounts[8],accounts[7],accounts[4],accounts[9],accounts[1],accounts[7],accounts[4],accounts[1],accounts[6],accounts[4],accounts[0],accounts[3],accounts[6],accounts[4],accounts[4],accounts[5],accounts[7],accounts[5],accounts[3],accounts[0],accounts[2],accounts[5],accounts[5],accounts[4],accounts[0],accounts[2],accounts[1],accounts[5],accounts[9],accounts[6],accounts[7],accounts[9],accounts[0],accounts[1],accounts[4],accounts[5],accounts[0],accounts[3],accounts[6],accounts[6],accounts[8],accounts[3],accounts[0],accounts[9],accounts[2],accounts[2],accounts[3],accounts[8],accounts[2],accounts[8],accounts[6],accounts[5],accounts[9],accounts[0],accounts[2],accounts[4],accounts[5],accounts[0],accounts[6],accounts[4],accounts[4],accounts[8],accounts[9],accounts[3],accounts[5],accounts[7],accounts[1],accounts[1],accounts[3],accounts[9],accounts[3],accounts[5],accounts[5],accounts[1],accounts[4],accounts[2],accounts[8],accounts[2],accounts[9],accounts[8],accounts[4],accounts[5],accounts[8],accounts[2],accounts[4],accounts[7],accounts[1],accounts[7],accounts[2],accounts[4],accounts[2],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[3],accounts[1],accounts[2],accounts[7],accounts[7],accounts[2],accounts[7],accounts[4],accounts[3],accounts[5],accounts[2],accounts[9],accounts[1],accounts[3],accounts[2],accounts[0],accounts[7],accounts[5],accounts[5],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0],accounts[5],accounts[9],accounts[5],accounts[5],accounts[4],accounts[0],accounts[0],accounts[8],accounts[8],accounts[5],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[3],accounts[2],accounts[6],accounts[6],accounts[1],accounts[1],accounts[1],accounts[3],accounts[0],accounts[4],accounts[0],accounts[6],accounts[4],accounts[0],accounts[6],accounts[6],accounts[0],accounts[9],accounts[5],accounts[4],accounts[3],accounts[6],accounts[1],accounts[1],accounts[0],accounts[9],accounts[0],accounts[3],accounts[2],accounts[7],accounts[5],accounts[0],accounts[9],accounts[4],accounts[0],accounts[2],accounts[2],accounts[7],accounts[0],accounts[1],accounts[0],accounts[5],accounts[8],accounts[2],accounts[0],accounts[1],accounts[0],accounts[9],accounts[3],accounts[0],accounts[3],accounts[3],accounts[3],accounts[5],accounts[4],accounts[9],accounts[4],accounts[3],accounts[0],accounts[7],accounts[2],accounts[3],accounts[7],accounts[4],accounts[1],accounts[0],accounts[8],accounts[0],accounts[9],accounts[4],accounts[6],accounts[6],accounts[1],accounts[4],accounts[6],accounts[4],accounts[6],accounts[2],accounts[6],accounts[3],accounts[9],accounts[1],accounts[8],accounts[0],accounts[6],accounts[6],accounts[3],accounts[3],accounts[1],accounts[0],accounts[4],accounts[4],accounts[4],accounts[3],accounts[6],accounts[5],accounts[8],accounts[8],accounts[7],accounts[5],accounts[1],accounts[5],accounts[2],accounts[0],accounts[0],accounts[0],accounts[7],accounts[6],accounts[0],accounts[3],accounts[9],accounts[5],accounts[3],accounts[0],accounts[3],accounts[2],accounts[5],accounts[5],accounts[8],accounts[7],accounts[4],accounts[9],accounts[1],accounts[7],accounts[4],accounts[1],accounts[6],accounts[4],accounts[0],accounts[3],accounts[6],accounts[4],accounts[4],accounts[5],accounts[7],accounts[5],accounts[3],accounts[0],accounts[2],accounts[5],accounts[5],accounts[4],accounts[0],accounts[2],accounts[1],accounts[5],accounts[9],accounts[6],accounts[7],accounts[9],accounts[0],accounts[1],accounts[4],accounts[5],accounts[0],accounts[3],accounts[6],accounts[6],accounts[8],accounts[3],accounts[0],accounts[9],accounts[2],accounts[2],accounts[3],accounts[8],accounts[2],accounts[8],accounts[6],accounts[5],accounts[9],accounts[0],accounts[2],accounts[4],accounts[5],accounts[0],accounts[6],accounts[4],accounts[4],accounts[8],accounts[9],accounts[3],accounts[5],accounts[7],accounts[1],accounts[1],accounts[3],accounts[9],accounts[3],accounts[5],accounts[5],accounts[1],accounts[4],accounts[2],accounts[8],accounts[2],accounts[9],accounts[8],accounts[4],accounts[5],accounts[8],accounts[2],accounts[4],accounts[7],accounts[1],accounts[7],accounts[2],accounts[4],accounts[2],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[3],accounts[1],accounts[2],accounts[7],accounts[7],accounts[2],accounts[7],accounts[4],accounts[3],accounts[5],accounts[2],accounts[9],accounts[1],accounts[3],accounts[2],accounts[0],accounts[7],accounts[5],accounts[5],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[0],accounts[5],accounts[9],accounts[5],accounts[5],accounts[4],accounts[0],accounts[0],accounts[8],accounts[8],accounts[5],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[3],accounts[2],accounts[6],accounts[6],accounts[1],accounts[1],accounts[1],accounts[3],accounts[0],accounts[4],accounts[0],accounts[6],accounts[4],accounts[0],accounts[6],accounts[6],accounts[0],accounts[9],accounts[5],accounts[4],accounts[3],accounts[6],accounts[1],accounts[1],accounts[0],accounts[9],accounts[0],accounts[3],accounts[2],accounts[7],accounts[5],accounts[0],accounts[9],accounts[4],accounts[0],accounts[2],accounts[2],accounts[7],accounts[0],accounts[1],accounts[0],accounts[5],accounts[8],accounts[2],accounts[0],accounts[1],accounts[0],accounts[9],accounts[3],accounts[0],accounts[3],accounts[3],accounts[3],accounts[5],accounts[4],accounts[9],accounts[4],accounts[3],accounts[0],accounts[7],accounts[2],accounts[3],accounts[7],accounts[4],accounts[1],accounts[0],accounts[8],accounts[0],accounts[9],accounts[4],accounts[6],accounts[6],accounts[1],accounts[4],accounts[6],accounts[4],accounts[6],accounts[2],accounts[6],accounts[3],accounts[9],accounts[1],accounts[8],accounts[0],accounts[6],accounts[6],accounts[3],accounts[3],accounts[1],accounts[0],accounts[4],accounts[4],accounts[4],accounts[3],accounts[6],accounts[5],accounts[8],accounts[8],accounts[7],accounts[5],accounts[1],accounts[5],accounts[2],accounts[0],accounts[0],accounts[0],accounts[7],accounts[6],accounts[0],accounts[3],accounts[9],accounts[5],accounts[3],accounts[0],accounts[3],accounts[2],accounts[5],accounts[5],accounts[8],accounts[7],accounts[4],accounts[9],accounts[1],accounts[7],accounts[4],accounts[1],accounts[6],accounts[4],accounts[0],accounts[3],accounts[6],accounts[4],accounts[4],accounts[5],accounts[7],accounts[5],accounts[3],accounts[0],accounts[2],accounts[5],accounts[5],accounts[4],accounts[0],accounts[2],accounts[1],accounts[5],accounts[9],accounts[6],accounts[7],accounts[9],accounts[0],accounts[1],accounts[4],accounts[5],accounts[0],accounts[3],accounts[6],accounts[6],accounts[8],accounts[3],accounts[0],accounts[9],accounts[2],accounts[2],accounts[3],accounts[8],accounts[2],accounts[8],accounts[6],accounts[5],accounts[9],accounts[0],accounts[2],accounts[4],accounts[5],accounts[0],accounts[6],accounts[4],accounts[4],accounts[8],accounts[9],accounts[3],accounts[5],accounts[7],accounts[1],accounts[1],accounts[3],accounts[9],accounts[3],accounts[5],accounts[5],accounts[1],accounts[4],accounts[2],accounts[8],accounts[2],accounts[9],accounts[8],accounts[4],accounts[5],accounts[8],accounts[2],accounts[4],accounts[7],accounts[1],accounts[7],accounts[2],accounts[4],accounts[2],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[3],accounts[1],accounts[2],accounts[7],accounts[7],accounts[2],accounts[7],accounts[4],accounts[3],accounts[5],accounts[2],accounts[9],accounts[1],accounts[3],accounts[2],accounts[0],accounts[7],accounts[5],accounts[5],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.915ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:48:44.916ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:48:44.916ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}