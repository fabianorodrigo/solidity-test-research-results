,{
  "2020-11-10T17:04:59.050ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:05.371ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:11.630ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:18.030ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:24.585ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:31.273ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:39.373ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:47.616ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:05:55.683ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:03.932ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:10.804ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:17.598ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+0",
              "sol": "block.timestamp+0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+0",
                "sol": "block.timestamp+0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+0",
                "sol": "block.timestamp+0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+0",
                "sol": "block.timestamp+0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:25.736ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+322",
              "sol": "block.timestamp+322"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+322",
                "sol": "block.timestamp+322"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+322",
                "sol": "block.timestamp+322"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+322",
                "sol": "block.timestamp+322"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.643ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.644ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.646ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.652ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[9],accounts[9],accounts[8],accounts[7],accounts[2],accounts[7],accounts[4],accounts[2],accounts[3],accounts[3],accounts[0],accounts[1],accounts[9],accounts[5],accounts[7],accounts[6],accounts[7],accounts[9],accounts[0],accounts[7],accounts[1],accounts[7],accounts[0],accounts[9],accounts[6],accounts[1],accounts[3],accounts[0],accounts[1],accounts[3],accounts[8],accounts[9],accounts[5],accounts[8],accounts[5],accounts[2],accounts[6],accounts[0],accounts[8],accounts[1],accounts[9],accounts[7],accounts[1],accounts[1],accounts[5],accounts[2],accounts[7],accounts[4],accounts[3],accounts[9],accounts[9],accounts[1],accounts[6],accounts[9],accounts[2],accounts[2],accounts[9],accounts[4],accounts[4],accounts[7],accounts[8],accounts[7],accounts[3],accounts[1],accounts[9],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
              "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
            },
            {
              "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
              "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
            },
            {
              "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
              "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[9],accounts[8],accounts[7],accounts[2],accounts[7],accounts[4],accounts[2],accounts[3],accounts[3],accounts[0],accounts[1],accounts[9],accounts[5],accounts[7],accounts[6],accounts[7],accounts[9],accounts[0],accounts[7],accounts[1],accounts[7],accounts[0],accounts[9],accounts[6],accounts[1],accounts[3],accounts[0],accounts[1],accounts[3],accounts[8],accounts[9],accounts[5],accounts[8],accounts[5],accounts[2],accounts[6],accounts[0],accounts[8],accounts[1],accounts[9],accounts[7],accounts[1],accounts[1],accounts[5],accounts[2],accounts[7],accounts[4],accounts[3],accounts[9],accounts[9],accounts[1],accounts[6],accounts[9],accounts[2],accounts[2],accounts[9],accounts[4],accounts[4],accounts[7],accounts[8],accounts[7],accounts[3],accounts[1],accounts[9],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
                "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
              },
              {
                "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
                "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
              },
              {
                "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
                "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
                "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
              },
              {
                "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
                "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
              },
              {
                "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
                "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[3],accounts[3],accounts[3],accounts[7],accounts[2],accounts[8],accounts[1],accounts[2],accounts[8],accounts[1],accounts[6],accounts[9],accounts[6],accounts[7],accounts[4],accounts[0],accounts[2],accounts[7],accounts[4],accounts[6],accounts[6],accounts[0],accounts[1],accounts[9],accounts[7],accounts[2],accounts[9],accounts[9],accounts[1],accounts[8],accounts[0],accounts[7],accounts[8],accounts[9],accounts[8],accounts[0],accounts[3],accounts[9],accounts[4],accounts[1],accounts[2],accounts[6],accounts[1],accounts[7],accounts[6],accounts[5],accounts[5],accounts[8],accounts[5],accounts[9],accounts[7],accounts[1],accounts[1],accounts[1],accounts[6],accounts[4],accounts[5],accounts[6],accounts[5],accounts[4],accounts[5],accounts[8],accounts[0],accounts[1],accounts[8],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
                "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
              },
              {
                "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
                "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
              },
              {
                "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
                "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[2],accounts[2],accounts[0],accounts[6],accounts[3],accounts[3],accounts[7],accounts[4],accounts[2],accounts[1],accounts[7],accounts[6],accounts[8],accounts[8],accounts[2],accounts[8],accounts[1],accounts[6],accounts[5],accounts[8],accounts[5],accounts[8],accounts[9],accounts[6],accounts[9],accounts[7],accounts[6],accounts[5],accounts[9],accounts[3],accounts[9],accounts[4],accounts[0],accounts[4],accounts[0],accounts[8],accounts[0],accounts[6],accounts[4],accounts[0],accounts[6],accounts[1],accounts[4],accounts[8],accounts[6],accounts[6],accounts[6],accounts[5],accounts[2],accounts[0],accounts[7],accounts[1],accounts[3],accounts[7],accounts[5],accounts[3],accounts[1],accounts[8],accounts[2],accounts[8],accounts[3],accounts[4],accounts[5],accounts[2],accounts[9],accounts[1]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
                "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
              },
              {
                "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
                "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
              },
              {
                "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
                "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[2],accounts[7],accounts[5],accounts[3],accounts[1],accounts[8],accounts[0],accounts[9],accounts[2],accounts[9],accounts[2],accounts[5],accounts[6],accounts[6],accounts[6],accounts[8],accounts[4],accounts[8],accounts[3],accounts[0],accounts[7],accounts[4],accounts[8],accounts[5],accounts[3],accounts[1],accounts[9],accounts[3],accounts[3],accounts[8],accounts[4],accounts[9],accounts[2],accounts[5],accounts[2],accounts[5],accounts[0],accounts[8],accounts[4],accounts[8],accounts[2],accounts[4],accounts[0],accounts[8],accounts[9],accounts[9],accounts[1],accounts[0],accounts[5],accounts[0],accounts[7],accounts[2],accounts[8],accounts[2],accounts[5],accounts[0],accounts[9],accounts[9],accounts[6],accounts[6],accounts[6],accounts[7],accounts[1],accounts[8],accounts[5],accounts[3]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[28,66,27,1337,4,2014223714,96,26,29,9999,0,257,2014223714,10001,4,97,2014223716,2014223716,97,10000,0,10001,1,1532892064,254,26,1532892063,1338,2014223715,2014223714,2014223716,2014223715,1532892063,95,2014223716,1337,5,6,26,1338,2014223714,2,255,26,1336,97,6,95,95,256,6,1337,96,5,95,1,1336,3,257,97,1336,97,28,65,2014223716,1337]",
                "sol": "[uint256(28),uint256(66),uint256(27),uint256(1337),uint256(4),uint256(2014223714),uint256(96),uint256(26),uint256(29),uint256(9999),uint256(0),uint256(257),uint256(2014223714),uint256(10001),uint256(4),uint256(97),uint256(2014223716),uint256(2014223716),uint256(97),uint256(10000),uint256(0),uint256(10001),uint256(1),uint256(1532892064),uint256(254),uint256(26),uint256(1532892063),uint256(1338),uint256(2014223715),uint256(2014223714),uint256(2014223716),uint256(2014223715),uint256(1532892063),uint256(95),uint256(2014223716),uint256(1337),uint256(5),uint256(6),uint256(26),uint256(1338),uint256(2014223714),uint256(2),uint256(255),uint256(26),uint256(1336),uint256(97),uint256(6),uint256(95),uint256(95),uint256(256),uint256(6),uint256(1337),uint256(96),uint256(5),uint256(95),uint256(1),uint256(1336),uint256(3),uint256(257),uint256(97),uint256(1336),uint256(97),uint256(28),uint256(65),uint256(2014223716),uint256(1337)]"
              },
              {
                "js": "[1336,257,5,2014223714,28,257,4,28,96,5,2014223716,97,257,29,1338,1337,1337,64,66,65,4,64,255,0,257,28,1532892063,2014223716,0,64,1,1,65,254,5,0,5,97,257,3,1,1338,10000,29,1,97,64,2014223714,0,1532892062,2014223714,1337,96,9999,1337,1532892063,254,2,3,2,95,26,4,2014223714,257,1337]",
                "sol": "[uint256(1336),uint256(257),uint256(5),uint256(2014223714),uint256(28),uint256(257),uint256(4),uint256(28),uint256(96),uint256(5),uint256(2014223716),uint256(97),uint256(257),uint256(29),uint256(1338),uint256(1337),uint256(1337),uint256(64),uint256(66),uint256(65),uint256(4),uint256(64),uint256(255),uint256(0),uint256(257),uint256(28),uint256(1532892063),uint256(2014223716),uint256(0),uint256(64),uint256(1),uint256(1),uint256(65),uint256(254),uint256(5),uint256(0),uint256(5),uint256(97),uint256(257),uint256(3),uint256(1),uint256(1338),uint256(10000),uint256(29),uint256(1),uint256(97),uint256(64),uint256(2014223714),uint256(0),uint256(1532892062),uint256(2014223714),uint256(1337),uint256(96),uint256(9999),uint256(1337),uint256(1532892063),uint256(254),uint256(2),uint256(3),uint256(2),uint256(95),uint256(26),uint256(4),uint256(2014223714),uint256(257),uint256(1337)]"
              },
              {
                "js": "[[91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127],[16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102],[40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211],[210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78],[18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41],[199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163],[219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8],[151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136],[6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139],[69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139],[189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195],[4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113],[36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192],[98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216],[139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70],[191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95],[199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0],[139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187],[53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152],[235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141],[50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65],[248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98],[222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140],[138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164],[140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204],[108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94],[131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189],[132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50],[62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168],[204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205],[68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210],[58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146],[42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177],[185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40],[90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90],[29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112],[90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45],[96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206],[141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239],[134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115],[21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78],[220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145],[132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28],[86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66],[173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100],[35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51],[70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123],[39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82],[123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111],[213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104],[242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244],[247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232],[107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74],[7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75],[202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141],[185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87],[37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179],[185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224],[122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204],[125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227],[116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122],[45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194],[205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81],[43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29],[63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91],[224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14]]",
                "sol": "[bytes32(stringToBytes32(\"91,231,254,48,140,112,160,183,28,66,169,1,188,116,143,227,140,247,37,48,246,106,142,195,155,111,221,232,179,13,134,127\")),bytes32(stringToBytes32(\"16,203,87,251,111,39,250,205,81,192,214,176,82,65,15,129,159,83,60,94,91,192,121,176,213,235,76,27,174,205,209,102\")),bytes32(stringToBytes32(\"40,175,212,24,214,144,221,175,135,209,166,2,94,25,219,69,126,34,75,224,188,238,242,120,0,172,93,119,220,250,167,211\")),bytes32(stringToBytes32(\"210,139,8,164,107,122,166,6,96,75,80,145,7,215,119,196,103,98,202,53,132,36,102,33,110,25,182,28,248,112,131,78\")),bytes32(stringToBytes32(\"18,100,83,47,252,53,64,10,7,214,159,144,103,153,132,158,211,251,186,119,223,75,100,56,213,32,127,114,6,147,111,41\")),bytes32(stringToBytes32(\"199,112,44,98,61,7,168,170,150,9,54,44,200,108,227,205,111,222,240,219,252,148,228,130,81,213,217,87,74,236,141,163\")),bytes32(stringToBytes32(\"219,138,6,215,76,151,167,132,252,37,132,84,220,200,128,244,243,149,23,44,159,107,124,240,179,74,77,116,118,5,16,8\")),bytes32(stringToBytes32(\"151,4,126,229,166,114,104,130,107,42,162,34,156,116,212,18,209,26,179,50,189,175,70,73,8,2,58,244,89,221,179,136\")),bytes32(stringToBytes32(\"6,122,230,200,157,196,16,145,192,32,15,234,105,114,20,66,44,24,3,80,92,229,212,216,92,234,17,130,105,127,21,139\")),bytes32(stringToBytes32(\"69,255,71,246,107,221,231,249,212,59,255,26,50,65,241,242,42,119,250,190,71,223,250,252,201,113,184,67,204,134,97,139\")),bytes32(stringToBytes32(\"189,182,38,103,140,171,255,229,35,168,142,106,111,158,100,154,70,42,6,162,244,139,210,229,68,84,8,84,42,127,4,195\")),bytes32(stringToBytes32(\"4,244,222,243,19,18,241,250,17,31,115,131,22,103,99,166,203,52,64,32,88,15,20,87,77,188,254,69,208,34,117,113\")),bytes32(stringToBytes32(\"36,239,93,134,158,67,14,7,8,59,4,233,15,146,253,83,138,31,221,135,113,93,41,146,197,11,209,124,179,130,68,192\")),bytes32(stringToBytes32(\"98,3,234,70,238,58,38,228,118,65,138,2,85,35,38,146,100,171,124,192,160,146,61,163,233,150,23,41,245,127,162,216\")),bytes32(stringToBytes32(\"139,26,205,72,159,168,17,227,153,63,32,59,169,52,111,122,229,161,214,57,43,67,246,73,185,9,211,248,253,44,198,70\")),bytes32(stringToBytes32(\"191,194,69,206,47,129,17,20,66,249,38,197,35,94,71,178,186,243,189,184,119,84,72,43,159,90,183,84,94,198,129,95\")),bytes32(stringToBytes32(\"199,191,39,238,93,252,6,212,190,236,136,235,130,41,27,170,181,82,253,171,22,26,126,222,124,10,191,236,43,110,3,0\")),bytes32(stringToBytes32(\"139,188,25,96,202,120,193,205,128,239,127,0,103,115,231,165,252,34,136,76,94,1,32,238,197,151,130,31,80,77,71,187\")),bytes32(stringToBytes32(\"53,232,192,133,193,114,22,123,188,239,152,225,118,133,184,48,4,148,18,125,125,216,85,42,0,172,163,171,152,224,187,152\")),bytes32(stringToBytes32(\"235,59,25,86,127,17,203,61,111,250,23,33,160,67,26,211,173,38,172,250,158,84,86,189,100,79,73,27,71,34,245,141\")),bytes32(stringToBytes32(\"50,129,84,55,204,162,29,25,85,96,187,194,123,62,9,247,107,86,146,66,67,95,246,244,158,32,166,79,110,206,223,65\")),bytes32(stringToBytes32(\"248,210,61,236,167,199,117,159,101,148,149,74,114,224,25,159,50,156,231,115,124,187,91,106,144,240,49,95,11,38,36,98\")),bytes32(stringToBytes32(\"222,171,67,160,80,217,254,11,197,124,180,160,85,147,194,128,59,30,251,126,165,157,183,193,109,179,57,242,65,200,206,140\")),bytes32(stringToBytes32(\"138,119,222,25,211,51,41,34,175,243,197,180,11,44,106,19,158,5,15,135,155,181,64,165,46,93,47,93,169,202,44,164\")),bytes32(stringToBytes32(\"140,79,157,118,176,152,97,137,168,142,210,216,227,109,77,98,139,185,174,227,205,139,222,207,206,108,129,212,30,120,248,204\")),bytes32(stringToBytes32(\"108,62,236,237,46,175,167,174,170,170,10,219,116,160,208,243,151,80,201,8,22,137,88,237,135,70,61,52,13,210,52,94\")),bytes32(stringToBytes32(\"131,75,185,61,251,86,146,251,241,65,65,67,23,107,179,179,66,158,100,220,65,228,158,96,135,102,69,10,32,33,219,189\")),bytes32(stringToBytes32(\"132,24,91,130,203,224,167,191,211,91,2,64,215,203,167,142,64,7,249,56,67,232,49,181,201,177,28,212,173,225,116,50\")),bytes32(stringToBytes32(\"62,39,145,215,69,255,253,173,146,28,15,200,48,127,158,49,6,28,131,127,174,202,151,137,72,243,100,9,196,254,134,168\")),bytes32(stringToBytes32(\"204,112,204,229,177,205,156,181,87,32,245,62,106,233,165,55,51,44,215,40,29,237,43,18,104,146,71,231,49,188,242,205\")),bytes32(stringToBytes32(\"68,79,21,85,84,90,138,189,50,30,238,51,125,20,72,98,217,175,165,155,233,172,246,51,231,97,243,255,239,176,122,210\")),bytes32(stringToBytes32(\"58,190,88,34,186,226,66,70,250,251,235,167,63,186,77,124,251,160,174,193,24,80,86,245,133,95,249,199,141,79,220,146\")),bytes32(stringToBytes32(\"42,164,44,99,21,103,135,22,93,235,68,246,46,22,103,121,123,70,37,156,76,152,101,58,168,89,193,28,217,240,138,177\")),bytes32(stringToBytes32(\"185,182,185,47,215,205,174,117,232,239,136,110,99,137,89,247,120,83,31,169,150,151,136,92,165,121,173,180,91,32,170,40\")),bytes32(stringToBytes32(\"90,65,14,3,43,71,11,124,28,37,181,131,140,143,104,55,110,5,78,169,124,35,206,155,78,108,62,222,19,204,74,90\")),bytes32(stringToBytes32(\"29,233,185,67,8,202,24,224,26,135,225,254,218,47,226,148,61,117,126,178,214,5,246,11,228,3,133,76,168,205,224,112\")),bytes32(stringToBytes32(\"90,225,23,165,242,101,170,0,77,237,168,165,59,175,35,122,170,112,26,246,30,237,72,186,118,238,219,145,15,17,231,45\")),bytes32(stringToBytes32(\"96,23,168,15,248,11,244,108,116,33,57,126,26,161,115,40,28,81,174,99,99,138,136,239,251,41,168,23,83,146,242,206\")),bytes32(stringToBytes32(\"141,254,150,142,7,242,0,246,82,42,84,47,198,225,182,251,16,72,157,97,28,242,61,92,145,185,100,41,81,17,183,239\")),bytes32(stringToBytes32(\"134,190,36,126,32,133,159,249,125,186,189,59,254,239,224,207,80,88,97,98,40,201,71,4,47,203,142,53,53,210,6,115\")),bytes32(stringToBytes32(\"21,239,203,55,64,81,183,80,82,123,131,65,236,213,113,132,185,186,16,97,126,95,74,45,63,40,167,192,102,23,168,78\")),bytes32(stringToBytes32(\"220,10,145,159,244,179,168,187,104,202,205,108,232,169,62,21,89,30,126,195,75,8,61,211,21,234,149,114,235,191,22,145\")),bytes32(stringToBytes32(\"132,98,193,18,51,227,136,123,65,241,243,53,137,129,168,35,172,154,233,60,63,36,50,119,49,231,113,182,87,14,11,28\")),bytes32(stringToBytes32(\"86,192,177,61,31,240,203,94,55,11,165,32,125,75,81,185,231,229,202,127,167,204,28,173,136,106,62,252,212,87,237,66\")),bytes32(stringToBytes32(\"173,12,77,178,226,109,88,27,32,31,219,203,167,186,44,10,125,2,251,160,107,221,29,230,17,251,167,252,34,163,137,100\")),bytes32(stringToBytes32(\"35,167,233,112,64,15,76,216,67,103,153,80,14,192,212,81,32,123,79,35,205,53,58,208,190,120,109,107,84,152,81,51\")),bytes32(stringToBytes32(\"70,227,88,46,252,191,51,104,132,207,22,47,132,170,211,16,181,36,94,110,166,31,25,130,48,251,47,121,205,180,147,123\")),bytes32(stringToBytes32(\"39,36,181,93,152,59,129,59,5,119,20,202,116,243,111,192,67,7,249,24,252,242,15,106,140,192,124,214,99,49,146,82\")),bytes32(stringToBytes32(\"123,110,185,169,154,101,196,250,241,18,59,161,151,0,194,69,140,68,254,178,138,53,191,66,142,196,253,179,187,229,192,111\")),bytes32(stringToBytes32(\"213,248,169,84,28,69,252,234,190,98,212,217,77,158,172,253,179,130,119,220,253,32,79,198,175,153,222,220,131,246,84,104\")),bytes32(stringToBytes32(\"242,139,220,95,146,114,215,97,150,189,100,188,97,211,76,135,59,244,241,200,55,187,6,176,220,24,5,168,248,12,162,244\")),bytes32(stringToBytes32(\"247,136,174,184,209,167,196,138,224,58,102,247,183,64,113,84,182,63,39,52,53,222,199,127,188,133,37,49,238,16,147,232\")),bytes32(stringToBytes32(\"107,157,170,81,215,166,77,134,112,154,80,47,134,217,51,96,180,161,183,248,44,212,0,232,172,29,239,72,34,174,237,74\")),bytes32(stringToBytes32(\"7,115,222,164,51,179,35,43,60,131,135,142,232,47,248,30,204,25,98,43,194,37,213,6,19,184,235,181,182,176,56,75\")),bytes32(stringToBytes32(\"202,47,183,144,75,139,131,51,105,124,56,163,231,10,199,142,101,233,162,124,7,130,22,68,76,254,192,29,168,107,161,141\")),bytes32(stringToBytes32(\"185,225,188,176,40,235,134,186,208,225,251,95,204,150,164,64,139,101,244,41,90,229,65,105,62,149,170,200,247,103,173,87\")),bytes32(stringToBytes32(\"37,173,135,198,139,43,60,204,157,119,242,136,185,229,130,59,146,30,135,122,137,146,203,173,214,188,238,162,170,254,72,179\")),bytes32(stringToBytes32(\"185,201,132,26,205,176,224,193,134,167,122,193,96,120,10,5,148,113,26,243,51,91,145,11,126,23,156,105,217,251,115,224\")),bytes32(stringToBytes32(\"122,225,230,112,188,18,125,52,229,8,95,244,24,141,25,118,147,186,122,74,146,90,43,110,58,191,129,167,0,206,52,204\")),bytes32(stringToBytes32(\"125,152,243,199,38,122,24,238,75,244,174,255,232,34,59,217,129,162,60,219,1,130,160,85,42,165,178,151,109,14,226,227\")),bytes32(stringToBytes32(\"116,67,96,11,60,133,80,117,15,80,44,166,83,216,39,100,153,46,105,68,39,15,79,191,254,104,120,171,28,48,105,122\")),bytes32(stringToBytes32(\"45,149,48,70,89,209,144,32,237,79,34,207,116,207,175,140,29,171,192,55,204,200,58,76,224,37,127,191,46,186,163,194\")),bytes32(stringToBytes32(\"205,39,81,126,49,193,23,185,205,217,105,182,190,96,71,123,180,193,121,143,246,206,184,154,53,255,26,19,82,37,3,81\")),bytes32(stringToBytes32(\"43,224,10,75,231,16,239,29,193,131,0,181,27,187,200,208,32,138,114,243,233,78,118,26,33,157,229,176,150,246,126,29\")),bytes32(stringToBytes32(\"63,65,241,38,18,57,104,146,152,89,103,127,108,58,243,6,222,5,107,98,46,153,172,112,183,105,243,221,225,175,254,91\")),bytes32(stringToBytes32(\"224,180,191,243,131,185,91,193,34,115,107,223,107,171,154,203,146,192,174,235,183,210,138,64,142,182,151,170,110,143,207,14\"))]"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.667ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[142,97,54,122,89,182,183,54,49,33,104,191,188,50,163,94,93,125,165,246,194,134,22,39,126,3,118,146,123,86,215,119]",
              "sol": "stringToBytes32(\"142,97,54,122,89,182,183,54,49,33,104,191,188,50,163,94,93,125,165,246,194,134,22,39,126,3,118,146,123,86,215,119\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[142,97,54,122,89,182,183,54,49,33,104,191,188,50,163,94,93,125,165,246,194,134,22,39,126,3,118,146,123,86,215,119]",
                "sol": "stringToBytes32(\"142,97,54,122,89,182,183,54,49,33,104,191,188,50,163,94,93,125,165,246,194,134,22,39,126,3,118,146,123,86,215,119\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.668ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.669ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127]",
              "sol": "stringToBytes32(\"187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127\")"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127]",
                "sol": "stringToBytes32(\"187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127\")"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127]",
                "sol": "stringToBytes32(\"187,145,79,46,178,72,52,98,97,138,1,202,34,207,88,246,92,177,243,252,228,237,152,221,2,168,212,116,173,87,23,127\")"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "[208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139]",
              "sol": "stringToBytes32(\"208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "[208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139]",
                "sol": "stringToBytes32(\"208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139\")"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139]",
                "sol": "stringToBytes32(\"208,219,149,41,203,175,173,177,184,204,20,11,106,85,194,156,181,31,27,219,214,184,229,102,90,128,39,131,212,200,106,139\")"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.673ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.674ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[223,100,190,137,100,62,252,99,61,25,223,62,97,193,221,83,130,96,213,145,46,254,65,135,95,26,223,182,252,102,82,235],[158,98,93,13,6,221,176,106,236,29,161,158,95,177,120,37,2,12,42,221,66,141,243,21,150,107,138,198,72,250,49,220],[127,225,224,197,120,209,220,179,43,67,239,19,149,178,22,248,249,25,176,12,26,249,218,106,109,173,220,239,113,229,179,116],[167,175,43,246,189,19,158,153,24,176,124,76,98,69,185,94,91,142,227,209,242,218,4,93,116,202,176,190,52,13,185,153],[243,176,0,247,53,49,75,206,58,176,118,101,23,138,224,141,53,159,148,196,18,5,163,76,147,107,151,23,66,33,209,252],[54,186,37,140,113,66,21,8,196,229,95,64,10,178,85,52,62,163,164,114,120,226,223,194,179,83,64,111,176,103,213,133],[0,211,180,41,34,34,112,67,79,108,184,86,6,200,233,178,245,41,1,32,190,56,136,229,204,19,73,144,132,57,133,25],[167,136,250,47,72,7,113,101,147,88,250,15,137,114,87,224,116,194,50,17,39,159,253,101,183,246,37,95,161,31,50,176],[234,46,214,190,143,111,211,191,254,218,103,254,217,215,76,216,23,82,159,232,102,112,127,87,163,246,220,215,161,138,69,165],[80,77,69,178,154,189,91,128,159,7,147,64,24,134,69,142,166,23,232,78,140,238,36,202,207,209,30,65,85,243,215,33],[86,2,235,42,167,241,233,130,51,29,9,142,167,243,220,189,228,108,213,12,125,92,212,51,105,119,65,34,93,174,163,39],[110,106,190,247,89,141,156,170,196,90,170,94,74,241,5,63,222,211,56,172,213,15,138,218,106,180,25,195,58,61,250,78],[105,61,145,73,232,189,136,202,228,212,38,24,223,163,95,251,83,92,218,172,2,40,253,53,102,137,62,7,254,126,193,119],[210,206,76,193,211,242,128,141,26,60,208,86,24,224,143,213,129,6,235,219,23,196,20,170,95,243,13,69,157,165,246,163],[200,11,122,136,162,111,129,180,68,116,170,62,175,188,143,233,77,69,165,97,143,48,230,226,227,158,192,21,133,243,43,107],[99,189,252,90,213,161,253,180,40,228,31,21,30,243,156,67,166,229,21,189,199,80,221,40,2,144,49,38,58,116,178,47],[252,65,132,246,134,221,35,103,200,156,115,42,75,249,253,146,241,1,162,120,122,184,228,164,147,162,110,137,2,116,142,232],[5,213,210,232,130,138,215,56,204,48,80,202,52,97,235,50,98,81,59,130,59,166,154,59,84,172,189,64,219,115,91,169],[37,153,18,100,84,236,64,97,231,137,249,108,20,117,132,128,8,55,8,127,135,192,216,35,66,93,14,54,74,78,207,228],[218,79,233,117,145,110,75,54,35,71,15,146,2,141,190,212,3,252,249,252,23,123,177,98,159,46,63,147,62,86,190,50],[196,225,211,195,19,164,25,254,248,78,110,159,90,214,170,76,170,114,107,211,205,254,173,169,112,89,66,49,124,182,183,115],[129,80,202,225,255,137,5,111,118,166,25,241,24,14,238,53,248,174,61,101,94,150,241,132,77,118,172,104,56,8,28,172],[182,51,248,49,86,179,177,232,197,235,128,218,204,93,5,19,17,114,169,4,171,200,237,170,161,133,128,23,203,229,222,128],[127,61,129,55,29,89,19,135,222,219,123,39,83,48,133,129,226,154,53,65,212,145,169,122,85,125,207,144,254,145,193,70],[9,27,0,202,32,136,158,160,226,75,233,140,39,65,3,5,148,1,180,249,168,25,249,76,193,16,38,89,229,84,67,244],[12,87,241,238,99,126,181,190,178,161,217,205,0,110,93,133,157,72,124,42,181,180,249,170,101,6,159,138,157,203,156,53],[176,74,133,116,125,22,125,211,132,194,118,136,8,109,245,184,83,1,185,117,228,91,131,164,101,116,9,83,218,105,182,31],[169,104,8,16,230,31,79,73,152,14,169,194,108,107,224,246,57,48,201,142,107,232,137,214,61,156,220,101,206,104,54,52],[229,21,73,7,205,104,153,121,125,73,174,90,162,230,165,233,245,110,46,178,218,220,19,9,183,252,26,44,247,201,45,202],[210,68,236,111,40,140,241,190,186,192,24,148,197,153,7,180,82,30,233,241,50,150,98,158,116,155,202,192,232,183,179,60],[229,137,163,40,153,111,232,143,132,57,104,142,130,21,47,23,157,247,28,42,213,210,131,209,118,240,186,88,40,127,75,183],[82,110,73,212,250,171,116,50,83,251,1,115,139,229,141,66,87,111,141,28,170,186,61,40,136,98,157,171,160,226,29,122],[185,214,18,198,13,45,16,144,56,103,7,163,233,148,217,12,71,219,127,6,42,240,178,236,85,203,160,203,128,199,10,27],[123,111,141,67,102,200,161,216,56,29,21,47,248,32,44,108,50,253,245,121,58,149,142,10,168,136,254,30,246,237,172,106],[79,172,34,135,246,223,198,212,189,192,123,11,21,135,150,33,206,235,23,158,171,114,58,201,246,90,248,238,92,43,8,90],[91,143,90,7,124,24,149,131,146,32,73,134,250,66,164,181,248,104,72,254,214,224,108,212,207,7,192,9,52,61,64,107],[110,254,251,46,99,164,31,24,127,36,102,232,4,55,169,27,150,54,44,55,45,210,98,126,239,92,21,30,88,254,238,83],[165,16,218,153,150,161,67,186,105,105,178,2,85,145,118,247,165,110,165,114,25,120,44,194,139,172,163,144,30,133,222,120],[82,252,52,79,197,43,75,174,12,57,55,249,69,162,53,83,204,47,20,41,34,234,77,14,138,104,179,169,169,13,166,94],[113,143,52,225,16,141,247,199,196,135,101,144,180,116,252,199,110,10,187,65,215,167,235,49,46,162,254,193,88,148,199,99],[112,195,155,49,140,30,111,201,187,73,86,132,113,183,63,156,32,158,109,198,89,54,125,23,144,189,253,89,225,170,178,88],[59,115,30,2,212,179,12,155,1,251,218,212,251,13,16,53,32,248,13,67,155,34,39,185,238,178,25,100,152,199,203,229],[159,43,202,253,122,132,197,133,144,28,19,6,24,12,67,100,121,26,150,19,110,24,93,233,9,116,122,222,223,220,13,80],[121,125,36,58,243,187,207,161,80,85,141,221,236,32,45,162,204,103,96,200,18,163,120,19,12,196,158,198,159,115,19,25],[5,247,254,100,42,57,74,162,192,42,74,109,39,171,49,43,126,52,233,239,252,12,17,185,219,158,252,26,60,200,7,253],[95,117,179,23,61,47,66,81,88,117,78,47,242,111,51,47,60,82,78,7,253,207,65,55,135,96,194,250,39,13,241,35],[140,84,205,32,91,34,72,95,85,210,164,74,252,32,137,213,36,185,6,34,207,139,216,251,73,120,92,234,88,168,206,233],[231,145,108,54,35,43,234,10,247,230,143,207,49,139,211,191,48,113,38,99,152,213,22,98,230,167,244,68,127,248,233,220],[93,224,15,43,168,80,232,166,79,83,28,119,129,93,214,53,116,187,94,83,87,163,58,221,82,38,35,198,99,104,70,50],[4,121,224,83,199,26,134,67,33,136,196,250,209,213,172,133,237,245,234,96,171,117,60,152,254,130,77,223,203,16,95,202],[11,129,232,122,70,70,30,14,210,76,246,143,3,32,146,236,66,232,85,150,181,51,117,92,215,211,168,189,9,142,179,143],[190,57,192,252,242,120,46,19,106,190,15,24,26,58,94,19,147,220,143,85,222,82,59,190,63,133,223,81,182,63,29,178],[176,184,41,83,35,190,93,98,225,160,92,173,38,152,64,250,41,148,205,14,35,225,46,253,249,132,157,107,74,247,126,171],[154,109,91,59,153,170,27,84,73,123,189,14,122,27,94,133,148,199,211,9,170,91,44,143,148,29,13,159,68,242,243,217],[21,69,170,37,250,40,150,166,23,237,227,239,197,152,119,242,169,68,98,167,235,162,228,26,103,225,238,79,132,34,217,124],[135,12,19,214,193,204,246,58,1,85,234,196,37,190,141,42,42,220,80,48,124,249,155,57,134,249,51,71,67,3,131,153],[154,113,211,146,67,190,186,205,249,52,11,43,13,233,200,253,77,92,25,108,187,89,216,74,189,85,112,49,134,10,101,87],[67,200,191,96,86,224,76,250,197,142,221,63,121,63,22,64,139,159,196,124,98,5,69,240,175,108,194,221,31,154,250,155],[85,101,109,89,235,62,108,246,198,193,226,250,184,197,141,217,84,25,201,167,40,170,72,75,155,36,126,148,96,100,237,7],[12,57,140,254,185,70,1,215,15,232,142,169,240,112,157,44,82,40,40,25,2,221,17,214,132,105,198,12,218,226,174,127],[131,64,123,79,43,140,7,240,249,173,227,201,78,216,35,166,127,214,246,82,57,203,160,78,135,65,120,21,95,30,240,230],[0,168,31,30,15,92,187,219,40,204,139,49,18,178,101,2,130,112,177,157,225,94,108,73,86,110,227,56,191,94,7,100],[136,175,235,109,48,19,25,55,21,12,91,169,42,26,93,168,35,0,168,167,180,135,198,213,170,199,178,166,217,226,151,196],[193,0,221,209,151,191,131,239,252,215,160,136,237,164,97,91,97,254,170,190,22,211,152,108,93,182,75,172,76,142,210,168]]",
              "sol": "[bytes32(stringToBytes32(\"223,100,190,137,100,62,252,99,61,25,223,62,97,193,221,83,130,96,213,145,46,254,65,135,95,26,223,182,252,102,82,235\")),bytes32(stringToBytes32(\"158,98,93,13,6,221,176,106,236,29,161,158,95,177,120,37,2,12,42,221,66,141,243,21,150,107,138,198,72,250,49,220\")),bytes32(stringToBytes32(\"127,225,224,197,120,209,220,179,43,67,239,19,149,178,22,248,249,25,176,12,26,249,218,106,109,173,220,239,113,229,179,116\")),bytes32(stringToBytes32(\"167,175,43,246,189,19,158,153,24,176,124,76,98,69,185,94,91,142,227,209,242,218,4,93,116,202,176,190,52,13,185,153\")),bytes32(stringToBytes32(\"243,176,0,247,53,49,75,206,58,176,118,101,23,138,224,141,53,159,148,196,18,5,163,76,147,107,151,23,66,33,209,252\")),bytes32(stringToBytes32(\"54,186,37,140,113,66,21,8,196,229,95,64,10,178,85,52,62,163,164,114,120,226,223,194,179,83,64,111,176,103,213,133\")),bytes32(stringToBytes32(\"0,211,180,41,34,34,112,67,79,108,184,86,6,200,233,178,245,41,1,32,190,56,136,229,204,19,73,144,132,57,133,25\")),bytes32(stringToBytes32(\"167,136,250,47,72,7,113,101,147,88,250,15,137,114,87,224,116,194,50,17,39,159,253,101,183,246,37,95,161,31,50,176\")),bytes32(stringToBytes32(\"234,46,214,190,143,111,211,191,254,218,103,254,217,215,76,216,23,82,159,232,102,112,127,87,163,246,220,215,161,138,69,165\")),bytes32(stringToBytes32(\"80,77,69,178,154,189,91,128,159,7,147,64,24,134,69,142,166,23,232,78,140,238,36,202,207,209,30,65,85,243,215,33\")),bytes32(stringToBytes32(\"86,2,235,42,167,241,233,130,51,29,9,142,167,243,220,189,228,108,213,12,125,92,212,51,105,119,65,34,93,174,163,39\")),bytes32(stringToBytes32(\"110,106,190,247,89,141,156,170,196,90,170,94,74,241,5,63,222,211,56,172,213,15,138,218,106,180,25,195,58,61,250,78\")),bytes32(stringToBytes32(\"105,61,145,73,232,189,136,202,228,212,38,24,223,163,95,251,83,92,218,172,2,40,253,53,102,137,62,7,254,126,193,119\")),bytes32(stringToBytes32(\"210,206,76,193,211,242,128,141,26,60,208,86,24,224,143,213,129,6,235,219,23,196,20,170,95,243,13,69,157,165,246,163\")),bytes32(stringToBytes32(\"200,11,122,136,162,111,129,180,68,116,170,62,175,188,143,233,77,69,165,97,143,48,230,226,227,158,192,21,133,243,43,107\")),bytes32(stringToBytes32(\"99,189,252,90,213,161,253,180,40,228,31,21,30,243,156,67,166,229,21,189,199,80,221,40,2,144,49,38,58,116,178,47\")),bytes32(stringToBytes32(\"252,65,132,246,134,221,35,103,200,156,115,42,75,249,253,146,241,1,162,120,122,184,228,164,147,162,110,137,2,116,142,232\")),bytes32(stringToBytes32(\"5,213,210,232,130,138,215,56,204,48,80,202,52,97,235,50,98,81,59,130,59,166,154,59,84,172,189,64,219,115,91,169\")),bytes32(stringToBytes32(\"37,153,18,100,84,236,64,97,231,137,249,108,20,117,132,128,8,55,8,127,135,192,216,35,66,93,14,54,74,78,207,228\")),bytes32(stringToBytes32(\"218,79,233,117,145,110,75,54,35,71,15,146,2,141,190,212,3,252,249,252,23,123,177,98,159,46,63,147,62,86,190,50\")),bytes32(stringToBytes32(\"196,225,211,195,19,164,25,254,248,78,110,159,90,214,170,76,170,114,107,211,205,254,173,169,112,89,66,49,124,182,183,115\")),bytes32(stringToBytes32(\"129,80,202,225,255,137,5,111,118,166,25,241,24,14,238,53,248,174,61,101,94,150,241,132,77,118,172,104,56,8,28,172\")),bytes32(stringToBytes32(\"182,51,248,49,86,179,177,232,197,235,128,218,204,93,5,19,17,114,169,4,171,200,237,170,161,133,128,23,203,229,222,128\")),bytes32(stringToBytes32(\"127,61,129,55,29,89,19,135,222,219,123,39,83,48,133,129,226,154,53,65,212,145,169,122,85,125,207,144,254,145,193,70\")),bytes32(stringToBytes32(\"9,27,0,202,32,136,158,160,226,75,233,140,39,65,3,5,148,1,180,249,168,25,249,76,193,16,38,89,229,84,67,244\")),bytes32(stringToBytes32(\"12,87,241,238,99,126,181,190,178,161,217,205,0,110,93,133,157,72,124,42,181,180,249,170,101,6,159,138,157,203,156,53\")),bytes32(stringToBytes32(\"176,74,133,116,125,22,125,211,132,194,118,136,8,109,245,184,83,1,185,117,228,91,131,164,101,116,9,83,218,105,182,31\")),bytes32(stringToBytes32(\"169,104,8,16,230,31,79,73,152,14,169,194,108,107,224,246,57,48,201,142,107,232,137,214,61,156,220,101,206,104,54,52\")),bytes32(stringToBytes32(\"229,21,73,7,205,104,153,121,125,73,174,90,162,230,165,233,245,110,46,178,218,220,19,9,183,252,26,44,247,201,45,202\")),bytes32(stringToBytes32(\"210,68,236,111,40,140,241,190,186,192,24,148,197,153,7,180,82,30,233,241,50,150,98,158,116,155,202,192,232,183,179,60\")),bytes32(stringToBytes32(\"229,137,163,40,153,111,232,143,132,57,104,142,130,21,47,23,157,247,28,42,213,210,131,209,118,240,186,88,40,127,75,183\")),bytes32(stringToBytes32(\"82,110,73,212,250,171,116,50,83,251,1,115,139,229,141,66,87,111,141,28,170,186,61,40,136,98,157,171,160,226,29,122\")),bytes32(stringToBytes32(\"185,214,18,198,13,45,16,144,56,103,7,163,233,148,217,12,71,219,127,6,42,240,178,236,85,203,160,203,128,199,10,27\")),bytes32(stringToBytes32(\"123,111,141,67,102,200,161,216,56,29,21,47,248,32,44,108,50,253,245,121,58,149,142,10,168,136,254,30,246,237,172,106\")),bytes32(stringToBytes32(\"79,172,34,135,246,223,198,212,189,192,123,11,21,135,150,33,206,235,23,158,171,114,58,201,246,90,248,238,92,43,8,90\")),bytes32(stringToBytes32(\"91,143,90,7,124,24,149,131,146,32,73,134,250,66,164,181,248,104,72,254,214,224,108,212,207,7,192,9,52,61,64,107\")),bytes32(stringToBytes32(\"110,254,251,46,99,164,31,24,127,36,102,232,4,55,169,27,150,54,44,55,45,210,98,126,239,92,21,30,88,254,238,83\")),bytes32(stringToBytes32(\"165,16,218,153,150,161,67,186,105,105,178,2,85,145,118,247,165,110,165,114,25,120,44,194,139,172,163,144,30,133,222,120\")),bytes32(stringToBytes32(\"82,252,52,79,197,43,75,174,12,57,55,249,69,162,53,83,204,47,20,41,34,234,77,14,138,104,179,169,169,13,166,94\")),bytes32(stringToBytes32(\"113,143,52,225,16,141,247,199,196,135,101,144,180,116,252,199,110,10,187,65,215,167,235,49,46,162,254,193,88,148,199,99\")),bytes32(stringToBytes32(\"112,195,155,49,140,30,111,201,187,73,86,132,113,183,63,156,32,158,109,198,89,54,125,23,144,189,253,89,225,170,178,88\")),bytes32(stringToBytes32(\"59,115,30,2,212,179,12,155,1,251,218,212,251,13,16,53,32,248,13,67,155,34,39,185,238,178,25,100,152,199,203,229\")),bytes32(stringToBytes32(\"159,43,202,253,122,132,197,133,144,28,19,6,24,12,67,100,121,26,150,19,110,24,93,233,9,116,122,222,223,220,13,80\")),bytes32(stringToBytes32(\"121,125,36,58,243,187,207,161,80,85,141,221,236,32,45,162,204,103,96,200,18,163,120,19,12,196,158,198,159,115,19,25\")),bytes32(stringToBytes32(\"5,247,254,100,42,57,74,162,192,42,74,109,39,171,49,43,126,52,233,239,252,12,17,185,219,158,252,26,60,200,7,253\")),bytes32(stringToBytes32(\"95,117,179,23,61,47,66,81,88,117,78,47,242,111,51,47,60,82,78,7,253,207,65,55,135,96,194,250,39,13,241,35\")),bytes32(stringToBytes32(\"140,84,205,32,91,34,72,95,85,210,164,74,252,32,137,213,36,185,6,34,207,139,216,251,73,120,92,234,88,168,206,233\")),bytes32(stringToBytes32(\"231,145,108,54,35,43,234,10,247,230,143,207,49,139,211,191,48,113,38,99,152,213,22,98,230,167,244,68,127,248,233,220\")),bytes32(stringToBytes32(\"93,224,15,43,168,80,232,166,79,83,28,119,129,93,214,53,116,187,94,83,87,163,58,221,82,38,35,198,99,104,70,50\")),bytes32(stringToBytes32(\"4,121,224,83,199,26,134,67,33,136,196,250,209,213,172,133,237,245,234,96,171,117,60,152,254,130,77,223,203,16,95,202\")),bytes32(stringToBytes32(\"11,129,232,122,70,70,30,14,210,76,246,143,3,32,146,236,66,232,85,150,181,51,117,92,215,211,168,189,9,142,179,143\")),bytes32(stringToBytes32(\"190,57,192,252,242,120,46,19,106,190,15,24,26,58,94,19,147,220,143,85,222,82,59,190,63,133,223,81,182,63,29,178\")),bytes32(stringToBytes32(\"176,184,41,83,35,190,93,98,225,160,92,173,38,152,64,250,41,148,205,14,35,225,46,253,249,132,157,107,74,247,126,171\")),bytes32(stringToBytes32(\"154,109,91,59,153,170,27,84,73,123,189,14,122,27,94,133,148,199,211,9,170,91,44,143,148,29,13,159,68,242,243,217\")),bytes32(stringToBytes32(\"21,69,170,37,250,40,150,166,23,237,227,239,197,152,119,242,169,68,98,167,235,162,228,26,103,225,238,79,132,34,217,124\")),bytes32(stringToBytes32(\"135,12,19,214,193,204,246,58,1,85,234,196,37,190,141,42,42,220,80,48,124,249,155,57,134,249,51,71,67,3,131,153\")),bytes32(stringToBytes32(\"154,113,211,146,67,190,186,205,249,52,11,43,13,233,200,253,77,92,25,108,187,89,216,74,189,85,112,49,134,10,101,87\")),bytes32(stringToBytes32(\"67,200,191,96,86,224,76,250,197,142,221,63,121,63,22,64,139,159,196,124,98,5,69,240,175,108,194,221,31,154,250,155\")),bytes32(stringToBytes32(\"85,101,109,89,235,62,108,246,198,193,226,250,184,197,141,217,84,25,201,167,40,170,72,75,155,36,126,148,96,100,237,7\")),bytes32(stringToBytes32(\"12,57,140,254,185,70,1,215,15,232,142,169,240,112,157,44,82,40,40,25,2,221,17,214,132,105,198,12,218,226,174,127\")),bytes32(stringToBytes32(\"131,64,123,79,43,140,7,240,249,173,227,201,78,216,35,166,127,214,246,82,57,203,160,78,135,65,120,21,95,30,240,230\")),bytes32(stringToBytes32(\"0,168,31,30,15,92,187,219,40,204,139,49,18,178,101,2,130,112,177,157,225,94,108,73,86,110,227,56,191,94,7,100\")),bytes32(stringToBytes32(\"136,175,235,109,48,19,25,55,21,12,91,169,42,26,93,168,35,0,168,167,180,135,198,213,170,199,178,166,217,226,151,196\")),bytes32(stringToBytes32(\"193,0,221,209,151,191,131,239,252,215,160,136,237,164,97,91,97,254,170,190,22,211,152,108,93,182,75,172,76,142,210,168\"))]"
            },
            {
              "js": "[[91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125],[102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190],[67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203],[150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12],[61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115],[62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199],[204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97],[203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242],[131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105],[106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114],[123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239],[50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175],[105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25],[31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116],[80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13],[46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25],[123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141],[68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248],[77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254],[237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170],[42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97],[234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73],[137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225],[154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60],[208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136],[5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219],[200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133],[153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88],[83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200],[4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87],[201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16],[16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22],[54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4],[154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173],[191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39],[149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111],[236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156],[198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66],[181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117],[160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1],[15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66],[47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66],[133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249],[191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125],[139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112],[172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58],[244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62],[131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228],[140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210],[41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78],[38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146],[112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62],[214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9],[197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222],[119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7],[139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41],[181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125],[24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142],[219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102],[130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100],[21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205],[42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229],[244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115],[107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85]]",
              "sol": "[bytes32(stringToBytes32(\"91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125\")),bytes32(stringToBytes32(\"102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190\")),bytes32(stringToBytes32(\"67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203\")),bytes32(stringToBytes32(\"150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12\")),bytes32(stringToBytes32(\"61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115\")),bytes32(stringToBytes32(\"62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199\")),bytes32(stringToBytes32(\"204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97\")),bytes32(stringToBytes32(\"203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242\")),bytes32(stringToBytes32(\"131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105\")),bytes32(stringToBytes32(\"106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114\")),bytes32(stringToBytes32(\"123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239\")),bytes32(stringToBytes32(\"50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175\")),bytes32(stringToBytes32(\"105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25\")),bytes32(stringToBytes32(\"31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116\")),bytes32(stringToBytes32(\"80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13\")),bytes32(stringToBytes32(\"46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25\")),bytes32(stringToBytes32(\"123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141\")),bytes32(stringToBytes32(\"68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248\")),bytes32(stringToBytes32(\"77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254\")),bytes32(stringToBytes32(\"237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170\")),bytes32(stringToBytes32(\"42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97\")),bytes32(stringToBytes32(\"234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73\")),bytes32(stringToBytes32(\"137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225\")),bytes32(stringToBytes32(\"154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60\")),bytes32(stringToBytes32(\"208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136\")),bytes32(stringToBytes32(\"5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219\")),bytes32(stringToBytes32(\"200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133\")),bytes32(stringToBytes32(\"153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88\")),bytes32(stringToBytes32(\"83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200\")),bytes32(stringToBytes32(\"4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87\")),bytes32(stringToBytes32(\"201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16\")),bytes32(stringToBytes32(\"16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22\")),bytes32(stringToBytes32(\"54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4\")),bytes32(stringToBytes32(\"154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173\")),bytes32(stringToBytes32(\"191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39\")),bytes32(stringToBytes32(\"149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111\")),bytes32(stringToBytes32(\"236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156\")),bytes32(stringToBytes32(\"198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66\")),bytes32(stringToBytes32(\"181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117\")),bytes32(stringToBytes32(\"160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1\")),bytes32(stringToBytes32(\"15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66\")),bytes32(stringToBytes32(\"47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66\")),bytes32(stringToBytes32(\"133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249\")),bytes32(stringToBytes32(\"191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125\")),bytes32(stringToBytes32(\"139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112\")),bytes32(stringToBytes32(\"172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58\")),bytes32(stringToBytes32(\"244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62\")),bytes32(stringToBytes32(\"131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228\")),bytes32(stringToBytes32(\"140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210\")),bytes32(stringToBytes32(\"41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78\")),bytes32(stringToBytes32(\"38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146\")),bytes32(stringToBytes32(\"112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62\")),bytes32(stringToBytes32(\"214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9\")),bytes32(stringToBytes32(\"197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222\")),bytes32(stringToBytes32(\"119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7\")),bytes32(stringToBytes32(\"139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41\")),bytes32(stringToBytes32(\"181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125\")),bytes32(stringToBytes32(\"24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142\")),bytes32(stringToBytes32(\"219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102\")),bytes32(stringToBytes32(\"130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100\")),bytes32(stringToBytes32(\"21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205\")),bytes32(stringToBytes32(\"42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229\")),bytes32(stringToBytes32(\"244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115\")),bytes32(stringToBytes32(\"107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85\"))]"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[223,100,190,137,100,62,252,99,61,25,223,62,97,193,221,83,130,96,213,145,46,254,65,135,95,26,223,182,252,102,82,235],[158,98,93,13,6,221,176,106,236,29,161,158,95,177,120,37,2,12,42,221,66,141,243,21,150,107,138,198,72,250,49,220],[127,225,224,197,120,209,220,179,43,67,239,19,149,178,22,248,249,25,176,12,26,249,218,106,109,173,220,239,113,229,179,116],[167,175,43,246,189,19,158,153,24,176,124,76,98,69,185,94,91,142,227,209,242,218,4,93,116,202,176,190,52,13,185,153],[243,176,0,247,53,49,75,206,58,176,118,101,23,138,224,141,53,159,148,196,18,5,163,76,147,107,151,23,66,33,209,252],[54,186,37,140,113,66,21,8,196,229,95,64,10,178,85,52,62,163,164,114,120,226,223,194,179,83,64,111,176,103,213,133],[0,211,180,41,34,34,112,67,79,108,184,86,6,200,233,178,245,41,1,32,190,56,136,229,204,19,73,144,132,57,133,25],[167,136,250,47,72,7,113,101,147,88,250,15,137,114,87,224,116,194,50,17,39,159,253,101,183,246,37,95,161,31,50,176],[234,46,214,190,143,111,211,191,254,218,103,254,217,215,76,216,23,82,159,232,102,112,127,87,163,246,220,215,161,138,69,165],[80,77,69,178,154,189,91,128,159,7,147,64,24,134,69,142,166,23,232,78,140,238,36,202,207,209,30,65,85,243,215,33],[86,2,235,42,167,241,233,130,51,29,9,142,167,243,220,189,228,108,213,12,125,92,212,51,105,119,65,34,93,174,163,39],[110,106,190,247,89,141,156,170,196,90,170,94,74,241,5,63,222,211,56,172,213,15,138,218,106,180,25,195,58,61,250,78],[105,61,145,73,232,189,136,202,228,212,38,24,223,163,95,251,83,92,218,172,2,40,253,53,102,137,62,7,254,126,193,119],[210,206,76,193,211,242,128,141,26,60,208,86,24,224,143,213,129,6,235,219,23,196,20,170,95,243,13,69,157,165,246,163],[200,11,122,136,162,111,129,180,68,116,170,62,175,188,143,233,77,69,165,97,143,48,230,226,227,158,192,21,133,243,43,107],[99,189,252,90,213,161,253,180,40,228,31,21,30,243,156,67,166,229,21,189,199,80,221,40,2,144,49,38,58,116,178,47],[252,65,132,246,134,221,35,103,200,156,115,42,75,249,253,146,241,1,162,120,122,184,228,164,147,162,110,137,2,116,142,232],[5,213,210,232,130,138,215,56,204,48,80,202,52,97,235,50,98,81,59,130,59,166,154,59,84,172,189,64,219,115,91,169],[37,153,18,100,84,236,64,97,231,137,249,108,20,117,132,128,8,55,8,127,135,192,216,35,66,93,14,54,74,78,207,228],[218,79,233,117,145,110,75,54,35,71,15,146,2,141,190,212,3,252,249,252,23,123,177,98,159,46,63,147,62,86,190,50],[196,225,211,195,19,164,25,254,248,78,110,159,90,214,170,76,170,114,107,211,205,254,173,169,112,89,66,49,124,182,183,115],[129,80,202,225,255,137,5,111,118,166,25,241,24,14,238,53,248,174,61,101,94,150,241,132,77,118,172,104,56,8,28,172],[182,51,248,49,86,179,177,232,197,235,128,218,204,93,5,19,17,114,169,4,171,200,237,170,161,133,128,23,203,229,222,128],[127,61,129,55,29,89,19,135,222,219,123,39,83,48,133,129,226,154,53,65,212,145,169,122,85,125,207,144,254,145,193,70],[9,27,0,202,32,136,158,160,226,75,233,140,39,65,3,5,148,1,180,249,168,25,249,76,193,16,38,89,229,84,67,244],[12,87,241,238,99,126,181,190,178,161,217,205,0,110,93,133,157,72,124,42,181,180,249,170,101,6,159,138,157,203,156,53],[176,74,133,116,125,22,125,211,132,194,118,136,8,109,245,184,83,1,185,117,228,91,131,164,101,116,9,83,218,105,182,31],[169,104,8,16,230,31,79,73,152,14,169,194,108,107,224,246,57,48,201,142,107,232,137,214,61,156,220,101,206,104,54,52],[229,21,73,7,205,104,153,121,125,73,174,90,162,230,165,233,245,110,46,178,218,220,19,9,183,252,26,44,247,201,45,202],[210,68,236,111,40,140,241,190,186,192,24,148,197,153,7,180,82,30,233,241,50,150,98,158,116,155,202,192,232,183,179,60],[229,137,163,40,153,111,232,143,132,57,104,142,130,21,47,23,157,247,28,42,213,210,131,209,118,240,186,88,40,127,75,183],[82,110,73,212,250,171,116,50,83,251,1,115,139,229,141,66,87,111,141,28,170,186,61,40,136,98,157,171,160,226,29,122],[185,214,18,198,13,45,16,144,56,103,7,163,233,148,217,12,71,219,127,6,42,240,178,236,85,203,160,203,128,199,10,27],[123,111,141,67,102,200,161,216,56,29,21,47,248,32,44,108,50,253,245,121,58,149,142,10,168,136,254,30,246,237,172,106],[79,172,34,135,246,223,198,212,189,192,123,11,21,135,150,33,206,235,23,158,171,114,58,201,246,90,248,238,92,43,8,90],[91,143,90,7,124,24,149,131,146,32,73,134,250,66,164,181,248,104,72,254,214,224,108,212,207,7,192,9,52,61,64,107],[110,254,251,46,99,164,31,24,127,36,102,232,4,55,169,27,150,54,44,55,45,210,98,126,239,92,21,30,88,254,238,83],[165,16,218,153,150,161,67,186,105,105,178,2,85,145,118,247,165,110,165,114,25,120,44,194,139,172,163,144,30,133,222,120],[82,252,52,79,197,43,75,174,12,57,55,249,69,162,53,83,204,47,20,41,34,234,77,14,138,104,179,169,169,13,166,94],[113,143,52,225,16,141,247,199,196,135,101,144,180,116,252,199,110,10,187,65,215,167,235,49,46,162,254,193,88,148,199,99],[112,195,155,49,140,30,111,201,187,73,86,132,113,183,63,156,32,158,109,198,89,54,125,23,144,189,253,89,225,170,178,88],[59,115,30,2,212,179,12,155,1,251,218,212,251,13,16,53,32,248,13,67,155,34,39,185,238,178,25,100,152,199,203,229],[159,43,202,253,122,132,197,133,144,28,19,6,24,12,67,100,121,26,150,19,110,24,93,233,9,116,122,222,223,220,13,80],[121,125,36,58,243,187,207,161,80,85,141,221,236,32,45,162,204,103,96,200,18,163,120,19,12,196,158,198,159,115,19,25],[5,247,254,100,42,57,74,162,192,42,74,109,39,171,49,43,126,52,233,239,252,12,17,185,219,158,252,26,60,200,7,253],[95,117,179,23,61,47,66,81,88,117,78,47,242,111,51,47,60,82,78,7,253,207,65,55,135,96,194,250,39,13,241,35],[140,84,205,32,91,34,72,95,85,210,164,74,252,32,137,213,36,185,6,34,207,139,216,251,73,120,92,234,88,168,206,233],[231,145,108,54,35,43,234,10,247,230,143,207,49,139,211,191,48,113,38,99,152,213,22,98,230,167,244,68,127,248,233,220],[93,224,15,43,168,80,232,166,79,83,28,119,129,93,214,53,116,187,94,83,87,163,58,221,82,38,35,198,99,104,70,50],[4,121,224,83,199,26,134,67,33,136,196,250,209,213,172,133,237,245,234,96,171,117,60,152,254,130,77,223,203,16,95,202],[11,129,232,122,70,70,30,14,210,76,246,143,3,32,146,236,66,232,85,150,181,51,117,92,215,211,168,189,9,142,179,143],[190,57,192,252,242,120,46,19,106,190,15,24,26,58,94,19,147,220,143,85,222,82,59,190,63,133,223,81,182,63,29,178],[176,184,41,83,35,190,93,98,225,160,92,173,38,152,64,250,41,148,205,14,35,225,46,253,249,132,157,107,74,247,126,171],[154,109,91,59,153,170,27,84,73,123,189,14,122,27,94,133,148,199,211,9,170,91,44,143,148,29,13,159,68,242,243,217],[21,69,170,37,250,40,150,166,23,237,227,239,197,152,119,242,169,68,98,167,235,162,228,26,103,225,238,79,132,34,217,124],[135,12,19,214,193,204,246,58,1,85,234,196,37,190,141,42,42,220,80,48,124,249,155,57,134,249,51,71,67,3,131,153],[154,113,211,146,67,190,186,205,249,52,11,43,13,233,200,253,77,92,25,108,187,89,216,74,189,85,112,49,134,10,101,87],[67,200,191,96,86,224,76,250,197,142,221,63,121,63,22,64,139,159,196,124,98,5,69,240,175,108,194,221,31,154,250,155],[85,101,109,89,235,62,108,246,198,193,226,250,184,197,141,217,84,25,201,167,40,170,72,75,155,36,126,148,96,100,237,7],[12,57,140,254,185,70,1,215,15,232,142,169,240,112,157,44,82,40,40,25,2,221,17,214,132,105,198,12,218,226,174,127],[131,64,123,79,43,140,7,240,249,173,227,201,78,216,35,166,127,214,246,82,57,203,160,78,135,65,120,21,95,30,240,230],[0,168,31,30,15,92,187,219,40,204,139,49,18,178,101,2,130,112,177,157,225,94,108,73,86,110,227,56,191,94,7,100],[136,175,235,109,48,19,25,55,21,12,91,169,42,26,93,168,35,0,168,167,180,135,198,213,170,199,178,166,217,226,151,196],[193,0,221,209,151,191,131,239,252,215,160,136,237,164,97,91,97,254,170,190,22,211,152,108,93,182,75,172,76,142,210,168]]",
                "sol": "[bytes32(stringToBytes32(\"223,100,190,137,100,62,252,99,61,25,223,62,97,193,221,83,130,96,213,145,46,254,65,135,95,26,223,182,252,102,82,235\")),bytes32(stringToBytes32(\"158,98,93,13,6,221,176,106,236,29,161,158,95,177,120,37,2,12,42,221,66,141,243,21,150,107,138,198,72,250,49,220\")),bytes32(stringToBytes32(\"127,225,224,197,120,209,220,179,43,67,239,19,149,178,22,248,249,25,176,12,26,249,218,106,109,173,220,239,113,229,179,116\")),bytes32(stringToBytes32(\"167,175,43,246,189,19,158,153,24,176,124,76,98,69,185,94,91,142,227,209,242,218,4,93,116,202,176,190,52,13,185,153\")),bytes32(stringToBytes32(\"243,176,0,247,53,49,75,206,58,176,118,101,23,138,224,141,53,159,148,196,18,5,163,76,147,107,151,23,66,33,209,252\")),bytes32(stringToBytes32(\"54,186,37,140,113,66,21,8,196,229,95,64,10,178,85,52,62,163,164,114,120,226,223,194,179,83,64,111,176,103,213,133\")),bytes32(stringToBytes32(\"0,211,180,41,34,34,112,67,79,108,184,86,6,200,233,178,245,41,1,32,190,56,136,229,204,19,73,144,132,57,133,25\")),bytes32(stringToBytes32(\"167,136,250,47,72,7,113,101,147,88,250,15,137,114,87,224,116,194,50,17,39,159,253,101,183,246,37,95,161,31,50,176\")),bytes32(stringToBytes32(\"234,46,214,190,143,111,211,191,254,218,103,254,217,215,76,216,23,82,159,232,102,112,127,87,163,246,220,215,161,138,69,165\")),bytes32(stringToBytes32(\"80,77,69,178,154,189,91,128,159,7,147,64,24,134,69,142,166,23,232,78,140,238,36,202,207,209,30,65,85,243,215,33\")),bytes32(stringToBytes32(\"86,2,235,42,167,241,233,130,51,29,9,142,167,243,220,189,228,108,213,12,125,92,212,51,105,119,65,34,93,174,163,39\")),bytes32(stringToBytes32(\"110,106,190,247,89,141,156,170,196,90,170,94,74,241,5,63,222,211,56,172,213,15,138,218,106,180,25,195,58,61,250,78\")),bytes32(stringToBytes32(\"105,61,145,73,232,189,136,202,228,212,38,24,223,163,95,251,83,92,218,172,2,40,253,53,102,137,62,7,254,126,193,119\")),bytes32(stringToBytes32(\"210,206,76,193,211,242,128,141,26,60,208,86,24,224,143,213,129,6,235,219,23,196,20,170,95,243,13,69,157,165,246,163\")),bytes32(stringToBytes32(\"200,11,122,136,162,111,129,180,68,116,170,62,175,188,143,233,77,69,165,97,143,48,230,226,227,158,192,21,133,243,43,107\")),bytes32(stringToBytes32(\"99,189,252,90,213,161,253,180,40,228,31,21,30,243,156,67,166,229,21,189,199,80,221,40,2,144,49,38,58,116,178,47\")),bytes32(stringToBytes32(\"252,65,132,246,134,221,35,103,200,156,115,42,75,249,253,146,241,1,162,120,122,184,228,164,147,162,110,137,2,116,142,232\")),bytes32(stringToBytes32(\"5,213,210,232,130,138,215,56,204,48,80,202,52,97,235,50,98,81,59,130,59,166,154,59,84,172,189,64,219,115,91,169\")),bytes32(stringToBytes32(\"37,153,18,100,84,236,64,97,231,137,249,108,20,117,132,128,8,55,8,127,135,192,216,35,66,93,14,54,74,78,207,228\")),bytes32(stringToBytes32(\"218,79,233,117,145,110,75,54,35,71,15,146,2,141,190,212,3,252,249,252,23,123,177,98,159,46,63,147,62,86,190,50\")),bytes32(stringToBytes32(\"196,225,211,195,19,164,25,254,248,78,110,159,90,214,170,76,170,114,107,211,205,254,173,169,112,89,66,49,124,182,183,115\")),bytes32(stringToBytes32(\"129,80,202,225,255,137,5,111,118,166,25,241,24,14,238,53,248,174,61,101,94,150,241,132,77,118,172,104,56,8,28,172\")),bytes32(stringToBytes32(\"182,51,248,49,86,179,177,232,197,235,128,218,204,93,5,19,17,114,169,4,171,200,237,170,161,133,128,23,203,229,222,128\")),bytes32(stringToBytes32(\"127,61,129,55,29,89,19,135,222,219,123,39,83,48,133,129,226,154,53,65,212,145,169,122,85,125,207,144,254,145,193,70\")),bytes32(stringToBytes32(\"9,27,0,202,32,136,158,160,226,75,233,140,39,65,3,5,148,1,180,249,168,25,249,76,193,16,38,89,229,84,67,244\")),bytes32(stringToBytes32(\"12,87,241,238,99,126,181,190,178,161,217,205,0,110,93,133,157,72,124,42,181,180,249,170,101,6,159,138,157,203,156,53\")),bytes32(stringToBytes32(\"176,74,133,116,125,22,125,211,132,194,118,136,8,109,245,184,83,1,185,117,228,91,131,164,101,116,9,83,218,105,182,31\")),bytes32(stringToBytes32(\"169,104,8,16,230,31,79,73,152,14,169,194,108,107,224,246,57,48,201,142,107,232,137,214,61,156,220,101,206,104,54,52\")),bytes32(stringToBytes32(\"229,21,73,7,205,104,153,121,125,73,174,90,162,230,165,233,245,110,46,178,218,220,19,9,183,252,26,44,247,201,45,202\")),bytes32(stringToBytes32(\"210,68,236,111,40,140,241,190,186,192,24,148,197,153,7,180,82,30,233,241,50,150,98,158,116,155,202,192,232,183,179,60\")),bytes32(stringToBytes32(\"229,137,163,40,153,111,232,143,132,57,104,142,130,21,47,23,157,247,28,42,213,210,131,209,118,240,186,88,40,127,75,183\")),bytes32(stringToBytes32(\"82,110,73,212,250,171,116,50,83,251,1,115,139,229,141,66,87,111,141,28,170,186,61,40,136,98,157,171,160,226,29,122\")),bytes32(stringToBytes32(\"185,214,18,198,13,45,16,144,56,103,7,163,233,148,217,12,71,219,127,6,42,240,178,236,85,203,160,203,128,199,10,27\")),bytes32(stringToBytes32(\"123,111,141,67,102,200,161,216,56,29,21,47,248,32,44,108,50,253,245,121,58,149,142,10,168,136,254,30,246,237,172,106\")),bytes32(stringToBytes32(\"79,172,34,135,246,223,198,212,189,192,123,11,21,135,150,33,206,235,23,158,171,114,58,201,246,90,248,238,92,43,8,90\")),bytes32(stringToBytes32(\"91,143,90,7,124,24,149,131,146,32,73,134,250,66,164,181,248,104,72,254,214,224,108,212,207,7,192,9,52,61,64,107\")),bytes32(stringToBytes32(\"110,254,251,46,99,164,31,24,127,36,102,232,4,55,169,27,150,54,44,55,45,210,98,126,239,92,21,30,88,254,238,83\")),bytes32(stringToBytes32(\"165,16,218,153,150,161,67,186,105,105,178,2,85,145,118,247,165,110,165,114,25,120,44,194,139,172,163,144,30,133,222,120\")),bytes32(stringToBytes32(\"82,252,52,79,197,43,75,174,12,57,55,249,69,162,53,83,204,47,20,41,34,234,77,14,138,104,179,169,169,13,166,94\")),bytes32(stringToBytes32(\"113,143,52,225,16,141,247,199,196,135,101,144,180,116,252,199,110,10,187,65,215,167,235,49,46,162,254,193,88,148,199,99\")),bytes32(stringToBytes32(\"112,195,155,49,140,30,111,201,187,73,86,132,113,183,63,156,32,158,109,198,89,54,125,23,144,189,253,89,225,170,178,88\")),bytes32(stringToBytes32(\"59,115,30,2,212,179,12,155,1,251,218,212,251,13,16,53,32,248,13,67,155,34,39,185,238,178,25,100,152,199,203,229\")),bytes32(stringToBytes32(\"159,43,202,253,122,132,197,133,144,28,19,6,24,12,67,100,121,26,150,19,110,24,93,233,9,116,122,222,223,220,13,80\")),bytes32(stringToBytes32(\"121,125,36,58,243,187,207,161,80,85,141,221,236,32,45,162,204,103,96,200,18,163,120,19,12,196,158,198,159,115,19,25\")),bytes32(stringToBytes32(\"5,247,254,100,42,57,74,162,192,42,74,109,39,171,49,43,126,52,233,239,252,12,17,185,219,158,252,26,60,200,7,253\")),bytes32(stringToBytes32(\"95,117,179,23,61,47,66,81,88,117,78,47,242,111,51,47,60,82,78,7,253,207,65,55,135,96,194,250,39,13,241,35\")),bytes32(stringToBytes32(\"140,84,205,32,91,34,72,95,85,210,164,74,252,32,137,213,36,185,6,34,207,139,216,251,73,120,92,234,88,168,206,233\")),bytes32(stringToBytes32(\"231,145,108,54,35,43,234,10,247,230,143,207,49,139,211,191,48,113,38,99,152,213,22,98,230,167,244,68,127,248,233,220\")),bytes32(stringToBytes32(\"93,224,15,43,168,80,232,166,79,83,28,119,129,93,214,53,116,187,94,83,87,163,58,221,82,38,35,198,99,104,70,50\")),bytes32(stringToBytes32(\"4,121,224,83,199,26,134,67,33,136,196,250,209,213,172,133,237,245,234,96,171,117,60,152,254,130,77,223,203,16,95,202\")),bytes32(stringToBytes32(\"11,129,232,122,70,70,30,14,210,76,246,143,3,32,146,236,66,232,85,150,181,51,117,92,215,211,168,189,9,142,179,143\")),bytes32(stringToBytes32(\"190,57,192,252,242,120,46,19,106,190,15,24,26,58,94,19,147,220,143,85,222,82,59,190,63,133,223,81,182,63,29,178\")),bytes32(stringToBytes32(\"176,184,41,83,35,190,93,98,225,160,92,173,38,152,64,250,41,148,205,14,35,225,46,253,249,132,157,107,74,247,126,171\")),bytes32(stringToBytes32(\"154,109,91,59,153,170,27,84,73,123,189,14,122,27,94,133,148,199,211,9,170,91,44,143,148,29,13,159,68,242,243,217\")),bytes32(stringToBytes32(\"21,69,170,37,250,40,150,166,23,237,227,239,197,152,119,242,169,68,98,167,235,162,228,26,103,225,238,79,132,34,217,124\")),bytes32(stringToBytes32(\"135,12,19,214,193,204,246,58,1,85,234,196,37,190,141,42,42,220,80,48,124,249,155,57,134,249,51,71,67,3,131,153\")),bytes32(stringToBytes32(\"154,113,211,146,67,190,186,205,249,52,11,43,13,233,200,253,77,92,25,108,187,89,216,74,189,85,112,49,134,10,101,87\")),bytes32(stringToBytes32(\"67,200,191,96,86,224,76,250,197,142,221,63,121,63,22,64,139,159,196,124,98,5,69,240,175,108,194,221,31,154,250,155\")),bytes32(stringToBytes32(\"85,101,109,89,235,62,108,246,198,193,226,250,184,197,141,217,84,25,201,167,40,170,72,75,155,36,126,148,96,100,237,7\")),bytes32(stringToBytes32(\"12,57,140,254,185,70,1,215,15,232,142,169,240,112,157,44,82,40,40,25,2,221,17,214,132,105,198,12,218,226,174,127\")),bytes32(stringToBytes32(\"131,64,123,79,43,140,7,240,249,173,227,201,78,216,35,166,127,214,246,82,57,203,160,78,135,65,120,21,95,30,240,230\")),bytes32(stringToBytes32(\"0,168,31,30,15,92,187,219,40,204,139,49,18,178,101,2,130,112,177,157,225,94,108,73,86,110,227,56,191,94,7,100\")),bytes32(stringToBytes32(\"136,175,235,109,48,19,25,55,21,12,91,169,42,26,93,168,35,0,168,167,180,135,198,213,170,199,178,166,217,226,151,196\")),bytes32(stringToBytes32(\"193,0,221,209,151,191,131,239,252,215,160,136,237,164,97,91,97,254,170,190,22,211,152,108,93,182,75,172,76,142,210,168\"))]"
              },
              {
                "js": "[[91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125],[102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190],[67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203],[150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12],[61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115],[62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199],[204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97],[203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242],[131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105],[106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114],[123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239],[50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175],[105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25],[31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116],[80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13],[46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25],[123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141],[68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248],[77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254],[237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170],[42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97],[234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73],[137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225],[154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60],[208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136],[5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219],[200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133],[153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88],[83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200],[4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87],[201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16],[16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22],[54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4],[154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173],[191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39],[149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111],[236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156],[198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66],[181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117],[160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1],[15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66],[47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66],[133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249],[191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125],[139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112],[172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58],[244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62],[131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228],[140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210],[41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78],[38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146],[112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62],[214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9],[197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222],[119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7],[139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41],[181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125],[24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142],[219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102],[130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100],[21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205],[42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229],[244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115],[107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85]]",
                "sol": "[bytes32(stringToBytes32(\"91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125\")),bytes32(stringToBytes32(\"102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190\")),bytes32(stringToBytes32(\"67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203\")),bytes32(stringToBytes32(\"150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12\")),bytes32(stringToBytes32(\"61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115\")),bytes32(stringToBytes32(\"62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199\")),bytes32(stringToBytes32(\"204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97\")),bytes32(stringToBytes32(\"203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242\")),bytes32(stringToBytes32(\"131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105\")),bytes32(stringToBytes32(\"106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114\")),bytes32(stringToBytes32(\"123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239\")),bytes32(stringToBytes32(\"50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175\")),bytes32(stringToBytes32(\"105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25\")),bytes32(stringToBytes32(\"31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116\")),bytes32(stringToBytes32(\"80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13\")),bytes32(stringToBytes32(\"46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25\")),bytes32(stringToBytes32(\"123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141\")),bytes32(stringToBytes32(\"68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248\")),bytes32(stringToBytes32(\"77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254\")),bytes32(stringToBytes32(\"237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170\")),bytes32(stringToBytes32(\"42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97\")),bytes32(stringToBytes32(\"234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73\")),bytes32(stringToBytes32(\"137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225\")),bytes32(stringToBytes32(\"154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60\")),bytes32(stringToBytes32(\"208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136\")),bytes32(stringToBytes32(\"5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219\")),bytes32(stringToBytes32(\"200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133\")),bytes32(stringToBytes32(\"153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88\")),bytes32(stringToBytes32(\"83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200\")),bytes32(stringToBytes32(\"4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87\")),bytes32(stringToBytes32(\"201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16\")),bytes32(stringToBytes32(\"16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22\")),bytes32(stringToBytes32(\"54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4\")),bytes32(stringToBytes32(\"154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173\")),bytes32(stringToBytes32(\"191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39\")),bytes32(stringToBytes32(\"149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111\")),bytes32(stringToBytes32(\"236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156\")),bytes32(stringToBytes32(\"198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66\")),bytes32(stringToBytes32(\"181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117\")),bytes32(stringToBytes32(\"160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1\")),bytes32(stringToBytes32(\"15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66\")),bytes32(stringToBytes32(\"47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66\")),bytes32(stringToBytes32(\"133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249\")),bytes32(stringToBytes32(\"191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125\")),bytes32(stringToBytes32(\"139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112\")),bytes32(stringToBytes32(\"172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58\")),bytes32(stringToBytes32(\"244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62\")),bytes32(stringToBytes32(\"131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228\")),bytes32(stringToBytes32(\"140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210\")),bytes32(stringToBytes32(\"41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78\")),bytes32(stringToBytes32(\"38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146\")),bytes32(stringToBytes32(\"112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62\")),bytes32(stringToBytes32(\"214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9\")),bytes32(stringToBytes32(\"197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222\")),bytes32(stringToBytes32(\"119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7\")),bytes32(stringToBytes32(\"139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41\")),bytes32(stringToBytes32(\"181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125\")),bytes32(stringToBytes32(\"24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142\")),bytes32(stringToBytes32(\"219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102\")),bytes32(stringToBytes32(\"130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100\")),bytes32(stringToBytes32(\"21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205\")),bytes32(stringToBytes32(\"42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229\")),bytes32(stringToBytes32(\"244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115\")),bytes32(stringToBytes32(\"107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[31,234,53,71,165,179,70,200,137,61,230,156,167,192,166,212,87,120,180,212,240,81,100,248,126,148,219,72,16,116,12,140],[133,14,238,141,243,99,221,89,101,128,7,23,49,248,180,133,35,129,162,116,110,149,59,19,12,157,135,7,44,20,151,42],[171,74,147,217,120,226,224,104,64,253,111,14,197,43,57,116,136,231,51,28,32,30,194,241,205,84,117,218,248,2,144,80],[51,227,245,60,207,70,136,171,82,59,208,235,143,113,200,129,100,199,207,66,154,18,119,127,52,125,139,27,96,65,200,186],[23,178,157,134,229,75,213,101,46,99,216,21,46,94,7,13,205,116,86,3,215,33,52,148,38,225,233,156,67,61,50,249],[241,170,159,117,2,157,238,236,162,251,121,82,40,236,242,37,243,163,214,82,5,74,25,114,190,71,43,210,137,202,44,191],[117,128,148,45,226,133,66,251,149,0,137,112,221,130,83,92,50,19,211,253,28,232,161,136,246,20,176,128,107,156,163,180],[186,206,35,118,131,55,164,77,18,9,105,48,111,226,139,201,20,99,47,219,124,179,95,121,153,73,246,15,95,57,122,21],[113,115,117,145,135,10,168,207,111,151,177,191,25,97,175,119,81,155,153,76,23,247,36,182,9,102,215,75,105,222,92,229],[122,106,153,194,134,36,253,254,59,91,55,126,161,90,196,81,153,67,31,66,119,12,246,222,90,25,111,7,56,230,37,161],[73,136,140,109,21,74,28,217,208,24,109,195,38,227,76,178,22,49,187,96,176,59,84,207,3,84,190,105,231,81,170,15],[127,14,148,220,19,252,129,236,76,33,63,166,57,234,151,248,78,46,85,247,82,196,155,36,196,182,144,11,2,214,75,188],[51,151,200,107,58,218,113,43,74,39,183,95,246,88,62,247,107,93,184,38,155,9,33,20,130,23,151,73,183,142,26,31],[128,217,217,185,90,217,2,37,110,123,243,156,138,201,82,22,62,15,53,10,34,45,246,73,118,178,11,171,112,21,173,106],[55,130,216,31,173,226,57,179,3,38,94,31,224,121,47,138,182,65,243,196,158,136,217,28,104,11,132,154,126,112,205,253],[7,55,115,253,35,248,19,97,65,167,188,147,168,232,164,220,104,61,247,81,235,19,156,251,217,3,152,61,93,12,181,23],[97,7,78,211,199,84,71,131,187,1,151,150,152,169,239,16,21,212,69,198,101,113,63,156,164,95,105,89,81,136,182,187],[243,196,212,203,56,190,86,198,116,70,183,62,148,150,10,124,163,201,247,106,5,46,108,190,161,4,181,10,216,69,167,201],[54,142,215,80,81,125,47,95,63,111,4,75,45,215,159,115,193,93,175,10,226,3,9,11,151,143,165,206,203,63,47,215],[36,32,216,199,19,134,182,227,160,4,127,238,66,164,105,1,242,228,57,1,239,6,223,10,195,210,167,111,195,14,46,26],[236,249,141,107,78,198,59,51,119,31,242,159,191,49,183,129,172,99,107,41,8,186,79,74,108,57,186,146,59,44,97,52],[140,31,137,193,0,129,149,240,239,113,163,208,93,248,228,185,159,66,129,1,142,224,253,142,142,181,109,234,11,193,82,159],[10,183,194,101,40,38,95,98,57,191,18,105,56,30,13,47,86,72,203,117,82,215,173,215,233,97,180,149,67,252,144,111],[12,58,167,96,73,79,128,28,104,129,119,71,9,74,54,172,205,116,102,118,197,57,96,180,123,128,78,142,39,231,88,72],[87,96,188,79,59,85,99,181,60,167,203,196,65,20,154,237,78,65,57,245,222,29,255,109,169,201,53,241,241,81,246,81],[182,99,22,239,7,185,8,131,186,236,175,74,165,200,186,111,36,117,183,143,205,60,139,198,58,58,214,156,139,36,216,60],[188,50,204,62,237,121,56,74,72,20,145,33,101,156,118,185,72,56,163,224,233,114,213,126,72,103,112,3,15,141,66,246],[195,63,120,210,163,117,254,84,118,63,210,181,110,180,86,142,27,100,142,130,217,193,250,255,126,171,27,80,140,192,27,136],[155,254,37,109,51,5,164,197,77,201,102,187,46,1,223,95,194,245,74,53,185,2,135,210,67,244,232,55,244,127,182,99],[72,120,157,202,167,204,190,41,238,149,98,21,168,179,95,14,50,226,49,131,49,38,231,153,93,240,217,241,137,179,1,64],[20,83,30,84,17,147,165,194,37,13,8,3,134,117,68,104,52,80,236,81,20,252,131,232,237,109,54,10,29,44,87,96],[44,95,65,71,43,118,21,82,64,54,187,5,50,78,125,32,248,31,214,166,172,102,163,93,119,71,52,102,214,9,0,65],[195,165,232,71,107,71,186,179,157,245,26,204,57,104,175,148,72,255,162,89,146,11,217,118,225,60,51,109,222,132,153,129],[110,74,236,106,233,179,202,113,239,137,185,154,193,253,185,53,105,135,236,13,35,192,254,15,214,24,240,52,90,249,3,192],[245,1,68,127,78,11,211,239,117,247,167,13,116,27,64,229,114,216,148,82,3,231,244,30,107,143,233,29,153,198,169,12],[107,244,74,151,81,186,200,112,219,176,69,37,36,248,158,174,129,236,132,142,211,221,127,228,84,219,172,12,165,183,150,226],[74,36,33,54,157,115,153,205,216,156,122,165,170,32,143,173,239,38,1,169,99,0,173,18,146,43,228,28,168,173,184,210],[182,243,138,40,80,15,142,62,173,39,137,1,30,187,154,149,96,32,172,3,110,189,194,190,224,175,233,156,66,194,172,53],[94,225,102,36,47,82,142,167,6,210,66,29,38,121,193,106,137,241,148,13,211,161,127,196,81,217,226,9,195,235,241,243],[201,82,98,57,238,181,113,105,65,200,174,220,250,50,131,43,61,74,201,3,84,93,46,40,127,44,15,37,178,255,145,181],[247,198,238,90,83,99,155,85,139,162,6,225,71,216,79,33,191,112,207,34,140,41,67,65,28,169,52,146,123,117,164,117],[65,221,137,135,51,76,62,176,213,192,177,3,29,172,149,74,130,42,154,24,128,213,36,117,243,85,98,161,104,31,153,215],[161,194,176,220,202,255,221,53,234,39,23,121,66,117,177,37,135,77,58,159,180,182,139,158,5,122,104,102,166,76,210,27],[46,107,196,230,131,235,160,40,212,193,15,220,58,125,255,194,101,155,68,244,96,25,250,181,120,44,219,198,193,89,73,210],[35,54,46,181,159,56,87,142,174,132,66,40,11,144,42,87,40,204,181,16,166,137,126,181,206,62,234,12,251,124,100,202],[173,187,14,186,4,0,23,22,159,74,215,24,215,62,83,0,219,205,158,70,211,48,153,184,122,128,172,12,150,251,161,146],[68,190,60,207,110,169,108,18,109,221,138,46,204,38,36,196,3,107,1,21,240,177,140,29,18,203,193,63,124,51,5,21],[243,90,98,31,8,195,122,240,91,166,173,217,232,1,248,246,135,42,182,54,65,105,133,123,153,99,232,155,7,92,114,220],[86,77,149,47,54,106,118,72,243,170,232,197,139,220,223,21,172,202,81,37,167,250,85,134,191,124,84,118,54,90,42,195],[226,125,42,184,92,73,229,214,164,84,28,212,166,192,33,175,71,47,98,126,68,160,71,131,79,15,249,91,49,118,244,193],[136,169,181,155,32,151,217,244,11,232,31,132,233,192,169,119,66,187,30,65,72,80,169,217,102,85,150,95,182,192,167,115],[91,175,121,156,19,36,94,250,162,73,189,17,135,233,155,21,206,65,166,43,153,214,83,168,13,234,192,131,182,210,209,217],[24,182,64,214,227,80,13,190,46,192,255,240,98,173,38,72,244,189,243,68,152,219,61,41,121,12,171,99,171,161,128,179],[226,217,28,216,105,135,207,122,191,168,98,67,248,74,193,230,82,48,22,250,85,19,251,228,226,91,99,7,239,169,107,209],[171,69,46,210,236,160,249,213,128,219,208,19,116,51,54,252,98,90,164,72,244,224,86,66,203,156,67,14,124,203,53,60],[190,234,25,77,246,148,155,66,76,83,84,241,193,43,169,156,137,147,189,206,199,123,236,17,78,67,185,182,76,75,28,96],[228,87,234,15,208,56,170,19,73,184,11,66,20,184,179,87,52,84,71,100,139,163,100,85,4,11,124,63,91,109,151,64],[83,150,115,228,34,217,180,65,98,198,22,212,89,228,173,131,44,157,233,134,146,14,243,237,51,209,126,162,123,105,69,166],[212,206,88,31,218,14,129,40,131,124,241,166,130,47,99,237,106,23,169,23,161,210,78,179,106,15,134,84,231,124,158,13],[158,69,146,166,230,126,236,98,187,29,211,20,53,10,66,98,29,235,61,234,9,105,5,55,220,36,33,248,136,154,68,3],[248,213,127,60,12,56,253,21,52,53,171,252,247,186,8,64,151,23,114,227,70,44,244,146,30,214,121,113,178,62,244,121],[94,36,219,11,125,180,222,141,145,143,209,104,101,9,224,129,58,118,23,146,35,98,109,77,231,175,86,185,68,125,151,57],[144,207,224,249,83,86,17,186,171,138,74,71,246,102,254,122,171,236,221,208,214,17,143,244,191,1,199,249,177,55,114,180],[158,232,14,207,232,160,234,243,160,242,42,165,87,132,8,146,131,40,52,127,86,117,181,51,200,44,32,237,11,156,224,40],[190,64,164,165,158,138,40,253,246,14,53,181,36,66,240,124,79,197,207,69,42,199,214,76,148,58,135,133,248,52,22,43]]",
                "sol": "[stringToBytes32(\"123,22,17,196,124,72,74,143,96,222,175,17,150,28,41,122,138,234,124,115,84,71,249,62,37,105,144,96,124,176,72,196\"),stringToBytes32(\"125,96,255,130,92,244,165,246,79,14,222,220,12,215,18,85,12,138,49,181,161,175,37,12,129,93,41,140,114,206,150,198\"),stringToBytes32(\"201,88,201,111,86,50,109,149,163,29,225,51,83,53,30,87,198,8,117,201,73,5,38,234,11,46,134,171,145,72,18,26\"),stringToBytes32(\"118,225,10,34,42,196,176,18,43,147,31,197,183,62,13,82,24,243,1,245,47,114,248,207,37,94,91,98,105,107,213,194\"),stringToBytes32(\"32,211,97,146,21,77,100,101,88,183,165,233,236,236,176,121,99,31,0,143,27,193,140,105,85,204,134,217,109,74,20,216\"),stringToBytes32(\"153,81,223,1,46,120,27,72,187,216,152,105,101,74,120,48,57,160,181,158,52,87,218,46,65,181,135,189,127,40,244,147\"),stringToBytes32(\"223,138,176,2,40,141,42,153,206,151,9,37,142,226,217,176,58,73,226,86,20,22,68,78,83,17,65,153,92,26,127,156\"),stringToBytes32(\"231,162,167,63,191,99,25,36,24,26,95,6,148,210,157,97,151,147,60,6,151,210,128,160,50,115,83,56,161,70,67,249\"),stringToBytes32(\"136,91,224,28,109,226,134,158,36,228,129,91,215,208,86,44,12,242,135,1,16,169,161,67,185,244,209,199,134,51,167,60\"),stringToBytes32(\"93,201,187,144,10,179,113,178,247,161,80,96,214,147,182,240,54,28,122,66,124,1,219,67,225,17,252,46,61,215,139,120\"),stringToBytes32(\"107,180,72,165,19,119,205,210,182,223,190,94,128,11,68,159,151,159,92,238,122,145,233,202,67,141,2,136,221,151,146,184\"),stringToBytes32(\"183,30,152,147,22,159,219,165,233,138,178,109,24,93,250,147,27,28,29,130,42,41,217,181,180,12,125,209,27,112,75,146\"),stringToBytes32(\"55,220,47,98,23,56,192,206,166,204,53,253,165,241,31,254,41,136,241,10,108,250,180,82,173,46,244,141,155,236,200,221\"),stringToBytes32(\"133,18,73,227,166,188,83,12,235,37,172,202,175,222,233,147,229,152,129,217,208,86,30,109,103,9,72,148,131,144,180,121\"),stringToBytes32(\"250,198,41,69,133,252,228,57,42,150,91,31,216,4,196,113,229,70,254,203,116,122,214,60,124,144,151,133,42,248,55,114\"),stringToBytes32(\"129,86,174,44,112,35,30,245,254,11,156,217,240,237,246,34,204,85,177,192,210,80,87,96,177,183,7,171,29,176,6,61\"),stringToBytes32(\"218,73,61,1,224,40,68,14,61,235,208,203,106,158,107,101,117,152,122,251,120,127,134,255,252,200,40,92,112,116,193,183\"),stringToBytes32(\"154,247,242,36,11,32,96,81,205,131,131,46,254,5,38,149,17,209,248,8,250,76,81,149,36,148,152,142,210,231,172,252\"),stringToBytes32(\"107,242,72,197,13,123,255,157,15,136,212,95,231,29,102,217,96,249,37,174,61,35,156,6,195,159,135,162,241,113,0,103\"),stringToBytes32(\"15,16,54,166,79,88,252,70,78,59,80,85,119,185,68,86,117,22,189,1,180,59,182,26,18,119,52,247,221,236,246,202\"),stringToBytes32(\"14,106,73,15,78,210,66,199,193,187,25,124,165,194,125,196,238,139,68,36,141,84,148,234,96,214,17,206,0,94,120,128\"),stringToBytes32(\"228,38,250,145,223,101,155,203,115,237,204,135,3,29,243,191,105,109,56,3,166,148,171,10,104,169,149,58,0,54,133,49\"),stringToBytes32(\"15,149,152,160,136,178,245,68,90,39,38,176,220,90,236,234,117,45,34,209,191,216,69,67,7,84,138,104,52,199,2,140\"),stringToBytes32(\"201,212,122,235,234,233,108,198,126,180,79,221,220,97,43,100,27,18,133,141,62,159,196,20,110,8,153,140,150,104,21,34\"),stringToBytes32(\"97,77,152,127,25,21,116,118,88,254,239,51,24,210,74,15,75,168,81,29,53,196,147,148,87,211,62,69,69,115,162,60\"),stringToBytes32(\"19,77,25,184,67,34,214,46,149,143,248,147,99,181,193,12,46,113,207,68,176,129,19,70,50,14,37,145,21,253,131,152\"),stringToBytes32(\"20,129,107,97,91,72,137,125,172,177,218,19,138,237,186,180,251,136,125,162,187,168,73,101,104,34,194,83,36,223,88,72\"),stringToBytes32(\"197,1,40,182,212,217,164,169,63,221,160,32,106,188,160,61,240,218,229,116,31,69,155,239,251,207,238,190,30,120,21,144\"),stringToBytes32(\"83,142,195,82,79,187,192,182,119,31,101,123,76,39,173,29,165,92,121,103,140,99,78,243,55,179,123,137,208,84,180,243\"),stringToBytes32(\"126,239,173,16,237,19,22,182,108,228,76,13,219,126,182,102,235,188,182,232,222,34,171,124,117,23,95,120,98,237,156,181\"),stringToBytes32(\"41,46,72,56,165,241,174,158,212,88,116,195,211,173,33,163,117,219,123,134,225,61,139,157,230,101,149,30,187,138,89,203\"),stringToBytes32(\"245,27,168,240,83,71,197,7,13,219,159,226,59,181,174,121,177,182,60,91,86,41,48,182,34,144,175,68,94,252,88,49\"),stringToBytes32(\"171,127,78,31,189,197,117,200,113,248,136,162,127,142,90,131,210,140,32,9,1,99,114,188,40,39,175,187,61,12,95,223\"),stringToBytes32(\"77,168,186,1,100,196,129,49,70,212,29,254,106,89,76,227,146,64,58,123,220,227,163,119,239,47,56,70,107,254,245,147\"),stringToBytes32(\"158,139,37,88,5,130,102,135,228,82,114,50,143,96,76,13,172,140,109,54,112,216,14,128,223,53,106,242,141,18,93,170\"),stringToBytes32(\"101,123,120,96,32,142,246,234,67,204,58,227,161,96,58,69,134,199,209,242,249,55,33,7,126,51,13,17,240,201,152,53\"),stringToBytes32(\"15,91,35,204,201,101,150,103,26,132,110,92,120,84,50,167,42,140,63,137,28,38,149,43,142,13,70,36,110,109,235,34\"),stringToBytes32(\"219,6,97,78,207,45,217,8,128,225,113,27,91,104,223,80,106,21,49,142,40,196,82,105,208,33,183,114,47,223,178,177\"),stringToBytes32(\"93,37,47,55,176,119,156,195,66,35,205,166,2,72,139,249,11,129,61,61,10,180,90,147,146,239,62,221,96,244,201,188\"),stringToBytes32(\"71,101,29,187,183,50,195,54,237,85,240,13,96,243,244,208,73,82,90,213,168,253,23,60,182,161,73,249,35,127,241,94\"),stringToBytes32(\"46,128,99,73,143,11,62,67,14,114,204,79,193,84,16,57,227,43,176,210,40,92,145,144,60,248,140,79,134,120,113,80\"),stringToBytes32(\"194,66,220,131,98,32,212,2,138,179,126,2,6,167,239,4,228,227,137,232,49,75,50,117,94,229,207,71,28,51,70,216\"),stringToBytes32(\"9,134,153,92,141,252,34,53,211,154,214,19,181,129,6,111,61,126,4,23,253,225,180,12,90,234,215,238,221,145,117,214\"),stringToBytes32(\"121,96,148,135,228,113,219,39,235,69,249,179,159,195,154,62,133,140,17,10,114,217,158,124,110,170,240,215,18,103,81,134\"),stringToBytes32(\"233,50,242,69,96,87,52,201,165,8,187,194,124,22,157,180,119,121,132,52,243,41,4,59,60,214,93,90,98,175,161,113\"),stringToBytes32(\"243,80,87,90,122,172,11,255,102,13,61,215,128,224,17,233,170,184,242,232,64,183,129,244,23,36,221,59,7,86,215,213\"),stringToBytes32(\"239,192,249,180,214,114,42,232,93,30,244,68,223,53,3,245,9,98,128,132,181,54,43,195,136,174,220,193,20,31,176,207\"),stringToBytes32(\"210,42,219,225,174,176,91,161,232,231,181,192,163,43,184,38,233,110,21,219,161,186,106,79,194,83,84,55,123,170,1,155\"),stringToBytes32(\"72,185,206,72,192,20,74,21,245,76,150,212,145,129,235,177,177,198,80,111,125,124,172,70,93,102,237,232,196,16,150,168\"),stringToBytes32(\"59,143,250,16,95,98,229,184,251,88,176,188,244,202,91,18,180,76,113,153,186,154,39,211,46,229,163,40,36,102,136,129\"),stringToBytes32(\"240,110,201,6,227,191,218,21,138,247,79,86,177,37,215,48,105,203,134,243,115,8,171,186,68,65,112,132,186,125,53,241\"),stringToBytes32(\"189,3,60,204,247,108,197,68,148,165,64,122,22,212,185,131,95,186,88,191,207,48,21,43,70,99,214,26,103,64,108,221\"),stringToBytes32(\"151,96,207,126,107,124,164,171,43,189,157,55,216,198,2,51,70,119,236,75,174,116,71,188,247,202,54,226,121,104,214,205\"),stringToBytes32(\"20,11,185,115,210,82,255,22,163,194,254,137,226,185,71,67,231,199,117,36,129,12,238,133,229,246,43,74,182,83,10,120\"),stringToBytes32(\"25,53,82,220,3,207,192,194,98,65,169,246,209,197,74,136,251,122,193,77,39,6,236,137,101,104,89,125,29,123,79,195\"),stringToBytes32(\"65,206,40,76,221,144,221,55,174,71,200,47,29,31,214,217,184,235,200,176,188,182,120,93,224,186,238,184,228,159,176,91\"),stringToBytes32(\"110,127,172,202,63,248,73,209,131,39,243,144,14,187,32,174,65,31,68,37,236,86,12,10,194,132,139,234,63,211,250,46\"),stringToBytes32(\"105,38,125,158,96,173,233,221,186,157,213,31,186,46,59,156,17,180,103,222,135,48,68,37,224,252,225,81,61,173,10,102\"),stringToBytes32(\"8,0,10,123,19,12,236,244,252,70,247,156,200,37,38,43,88,160,218,10,137,42,241,143,167,186,64,5,231,168,215,152\"),stringToBytes32(\"116,164,184,39,169,26,254,145,145,23,209,49,237,97,66,13,160,127,85,153,41,1,73,108,87,167,236,248,204,195,96,139\"),stringToBytes32(\"237,245,113,115,122,184,13,219,52,156,45,237,179,241,248,88,39,253,73,76,214,227,147,203,201,95,180,164,175,133,191,211\"),stringToBytes32(\"85,22,1,31,210,219,84,101,235,109,110,232,184,39,110,151,200,23,145,35,124,222,169,192,181,14,149,163,169,229,238,75\"),stringToBytes32(\"52,143,206,178,7,159,8,207,76,3,48,222,229,157,234,78,62,92,107,84,81,158,96,127,239,194,178,167,59,164,187,103\"),stringToBytes32(\"90,225,254,38,107,76,154,83,198,14,66,4,247,223,215,252,213,41,190,59,245,43,181,48,126,236,221,244,140,151,45,181\"),stringToBytes32(\"14,66,115,247,35,95,48,125,234,158,168,89,138,135,179,235,141,133,75,133,68,239,134,174,130,191,80,235,127,134,215,97\")]"
              },
              {
                "js": "[[91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125],[102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190],[67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203],[150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12],[61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115],[62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199],[204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97],[203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242],[131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105],[106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114],[123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239],[50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175],[105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25],[31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116],[80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13],[46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25],[123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141],[68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248],[77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254],[237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170],[42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97],[234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73],[137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225],[154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60],[208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136],[5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219],[200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133],[153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88],[83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200],[4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87],[201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16],[16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22],[54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4],[154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173],[191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39],[149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111],[236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156],[198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66],[181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117],[160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1],[15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66],[47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66],[133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249],[191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125],[139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112],[172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58],[244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62],[131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228],[140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210],[41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78],[38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146],[112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62],[214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9],[197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222],[119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7],[139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41],[181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125],[24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142],[219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102],[130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100],[21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205],[42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229],[244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115],[107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85]]",
                "sol": "[bytes32(stringToBytes32(\"91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125\")),bytes32(stringToBytes32(\"102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190\")),bytes32(stringToBytes32(\"67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203\")),bytes32(stringToBytes32(\"150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12\")),bytes32(stringToBytes32(\"61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115\")),bytes32(stringToBytes32(\"62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199\")),bytes32(stringToBytes32(\"204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97\")),bytes32(stringToBytes32(\"203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242\")),bytes32(stringToBytes32(\"131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105\")),bytes32(stringToBytes32(\"106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114\")),bytes32(stringToBytes32(\"123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239\")),bytes32(stringToBytes32(\"50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175\")),bytes32(stringToBytes32(\"105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25\")),bytes32(stringToBytes32(\"31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116\")),bytes32(stringToBytes32(\"80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13\")),bytes32(stringToBytes32(\"46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25\")),bytes32(stringToBytes32(\"123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141\")),bytes32(stringToBytes32(\"68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248\")),bytes32(stringToBytes32(\"77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254\")),bytes32(stringToBytes32(\"237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170\")),bytes32(stringToBytes32(\"42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97\")),bytes32(stringToBytes32(\"234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73\")),bytes32(stringToBytes32(\"137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225\")),bytes32(stringToBytes32(\"154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60\")),bytes32(stringToBytes32(\"208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136\")),bytes32(stringToBytes32(\"5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219\")),bytes32(stringToBytes32(\"200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133\")),bytes32(stringToBytes32(\"153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88\")),bytes32(stringToBytes32(\"83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200\")),bytes32(stringToBytes32(\"4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87\")),bytes32(stringToBytes32(\"201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16\")),bytes32(stringToBytes32(\"16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22\")),bytes32(stringToBytes32(\"54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4\")),bytes32(stringToBytes32(\"154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173\")),bytes32(stringToBytes32(\"191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39\")),bytes32(stringToBytes32(\"149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111\")),bytes32(stringToBytes32(\"236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156\")),bytes32(stringToBytes32(\"198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66\")),bytes32(stringToBytes32(\"181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117\")),bytes32(stringToBytes32(\"160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1\")),bytes32(stringToBytes32(\"15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66\")),bytes32(stringToBytes32(\"47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66\")),bytes32(stringToBytes32(\"133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249\")),bytes32(stringToBytes32(\"191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125\")),bytes32(stringToBytes32(\"139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112\")),bytes32(stringToBytes32(\"172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58\")),bytes32(stringToBytes32(\"244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62\")),bytes32(stringToBytes32(\"131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228\")),bytes32(stringToBytes32(\"140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210\")),bytes32(stringToBytes32(\"41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78\")),bytes32(stringToBytes32(\"38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146\")),bytes32(stringToBytes32(\"112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62\")),bytes32(stringToBytes32(\"214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9\")),bytes32(stringToBytes32(\"197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222\")),bytes32(stringToBytes32(\"119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7\")),bytes32(stringToBytes32(\"139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41\")),bytes32(stringToBytes32(\"181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125\")),bytes32(stringToBytes32(\"24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142\")),bytes32(stringToBytes32(\"219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102\")),bytes32(stringToBytes32(\"130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100\")),bytes32(stringToBytes32(\"21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205\")),bytes32(stringToBytes32(\"42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229\")),bytes32(stringToBytes32(\"244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115\")),bytes32(stringToBytes32(\"107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125],[102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190],[67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203],[150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12],[61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115],[62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199],[204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97],[203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242],[131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105],[106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114],[123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239],[50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175],[105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25],[31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116],[80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13],[46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25],[123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141],[68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248],[77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254],[237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170],[42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97],[234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73],[137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225],[154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60],[208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136],[5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219],[200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133],[153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88],[83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200],[4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87],[201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16],[16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22],[54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4],[154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173],[191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39],[149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111],[236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156],[198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66],[181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117],[160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1],[15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66],[47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66],[133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249],[191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125],[139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112],[172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58],[244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62],[131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228],[140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210],[41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78],[38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146],[112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62],[214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9],[197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222],[119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7],[139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41],[181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125],[24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142],[219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102],[130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100],[21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205],[42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229],[244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115],[107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85]]",
                "sol": "[bytes32(stringToBytes32(\"91,169,79,155,218,180,101,61,118,57,205,54,125,172,80,69,169,167,187,50,89,200,240,3,235,252,88,49,159,184,185,125\")),bytes32(stringToBytes32(\"102,125,200,18,18,34,155,67,110,254,7,114,125,93,27,223,212,199,175,124,231,163,255,58,175,70,248,183,188,109,82,190\")),bytes32(stringToBytes32(\"67,225,14,104,17,242,188,201,27,48,6,153,199,215,46,81,227,108,96,188,171,13,45,243,240,234,108,69,64,16,91,203\")),bytes32(stringToBytes32(\"150,21,172,184,137,157,74,138,49,240,142,77,78,66,138,7,254,97,201,141,238,13,170,188,204,128,221,228,168,199,53,12\")),bytes32(stringToBytes32(\"61,207,113,208,174,42,105,167,106,18,228,212,40,252,154,226,213,158,242,12,210,242,144,125,80,214,66,48,140,226,165,115\")),bytes32(stringToBytes32(\"62,77,183,197,118,225,131,255,159,23,232,76,35,245,96,199,110,180,104,145,92,4,243,178,129,0,96,249,139,69,88,199\")),bytes32(stringToBytes32(\"204,158,94,213,245,234,44,178,214,56,255,162,107,239,191,22,42,180,225,109,106,114,106,131,157,95,202,78,172,212,79,97\")),bytes32(stringToBytes32(\"203,249,174,40,193,250,228,18,169,115,127,52,12,157,155,187,0,235,163,215,47,169,17,36,234,253,88,220,3,236,229,242\")),bytes32(stringToBytes32(\"131,16,220,63,45,54,208,237,69,5,131,128,86,251,81,56,93,122,74,93,108,23,94,90,227,177,89,57,211,138,247,105\")),bytes32(stringToBytes32(\"106,143,200,139,11,159,149,205,65,15,159,169,166,164,122,227,106,80,190,17,132,72,112,64,215,254,126,189,176,158,52,114\")),bytes32(stringToBytes32(\"123,235,225,86,78,63,60,99,137,233,236,60,239,151,9,214,53,84,189,25,10,141,72,170,169,253,226,31,3,204,25,239\")),bytes32(stringToBytes32(\"50,27,194,169,204,125,0,28,123,176,211,234,187,162,121,210,91,251,234,68,149,26,255,113,35,63,72,183,30,97,56,175\")),bytes32(stringToBytes32(\"105,26,151,125,65,212,244,244,112,204,167,162,223,97,52,254,43,217,141,190,223,54,57,91,9,126,33,178,72,123,34,25\")),bytes32(stringToBytes32(\"31,50,117,228,229,105,88,123,84,180,178,130,139,44,250,183,133,97,28,24,165,168,44,52,21,149,172,137,216,82,4,116\")),bytes32(stringToBytes32(\"80,134,175,154,133,205,52,173,1,254,97,115,92,225,115,66,79,6,116,73,152,165,68,202,255,60,224,143,13,62,67,13\")),bytes32(stringToBytes32(\"46,162,26,33,51,231,104,245,228,177,166,15,102,18,190,74,234,132,234,18,19,176,28,135,173,233,224,170,71,233,183,25\")),bytes32(stringToBytes32(\"123,94,148,222,86,43,100,73,57,16,1,224,205,15,179,40,167,112,37,225,193,234,174,37,23,105,59,18,31,181,170,141\")),bytes32(stringToBytes32(\"68,85,14,130,143,136,242,28,130,113,96,42,247,39,124,40,224,10,7,194,150,93,61,97,89,23,189,7,6,113,174,248\")),bytes32(stringToBytes32(\"77,60,9,175,191,227,99,233,199,107,34,27,183,131,45,168,99,89,99,53,231,55,168,105,73,128,163,171,166,114,236,254\")),bytes32(stringToBytes32(\"237,76,177,90,54,60,25,201,207,93,195,105,144,94,152,116,20,41,73,227,5,162,218,30,110,238,57,117,35,41,125,170\")),bytes32(stringToBytes32(\"42,175,216,63,52,206,185,140,129,213,140,51,181,242,228,159,168,184,51,191,130,101,144,182,235,37,5,213,223,44,103,97\")),bytes32(stringToBytes32(\"234,137,103,94,151,170,13,69,157,223,5,245,75,5,214,36,30,63,49,208,23,39,220,119,139,25,245,129,208,171,216,73\")),bytes32(stringToBytes32(\"137,81,162,65,127,187,207,19,110,55,95,241,97,183,229,211,149,178,203,167,234,202,90,132,186,224,10,214,219,140,189,225\")),bytes32(stringToBytes32(\"154,176,182,199,125,4,15,219,63,163,228,66,92,22,129,88,183,119,92,248,20,29,25,155,169,194,113,173,1,215,0,60\")),bytes32(stringToBytes32(\"208,68,151,53,26,83,192,214,253,107,187,193,194,12,11,59,186,175,228,125,38,49,177,14,133,224,174,62,62,91,37,136\")),bytes32(stringToBytes32(\"5,89,255,33,87,78,218,125,82,93,40,110,207,128,65,117,187,103,95,96,11,36,136,63,217,219,223,88,6,4,96,219\")),bytes32(stringToBytes32(\"200,226,130,236,192,48,49,243,91,233,82,196,162,99,182,88,125,186,61,193,213,101,98,215,27,13,212,158,69,186,57,133\")),bytes32(stringToBytes32(\"153,123,213,68,11,104,177,167,116,158,84,104,79,128,165,102,216,156,218,77,199,149,40,215,131,120,68,193,230,165,247,88\")),bytes32(stringToBytes32(\"83,87,42,160,55,75,6,215,147,24,119,91,45,232,22,61,162,209,191,0,128,231,25,91,66,203,24,151,3,25,51,200\")),bytes32(stringToBytes32(\"4,11,148,22,74,112,220,128,12,141,99,25,209,124,237,50,37,136,41,163,115,194,197,254,166,170,195,236,69,60,181,87\")),bytes32(stringToBytes32(\"201,244,51,23,18,206,124,115,252,5,15,70,26,72,191,242,75,195,24,82,151,134,109,46,77,53,52,63,68,178,222,16\")),bytes32(stringToBytes32(\"16,114,203,3,63,182,144,12,88,155,207,20,22,194,78,177,8,21,241,32,194,237,90,224,5,136,20,177,136,112,206,22\")),bytes32(stringToBytes32(\"54,44,89,209,211,28,106,66,96,102,163,244,8,156,251,252,95,148,14,185,154,50,105,86,68,82,60,195,66,163,35,4\")),bytes32(stringToBytes32(\"154,84,59,182,198,89,225,92,24,219,150,218,142,152,217,141,193,204,64,204,237,239,201,247,8,255,229,90,125,73,25,173\")),bytes32(stringToBytes32(\"191,27,189,174,208,35,134,76,204,197,168,164,143,86,70,142,231,14,240,121,195,47,16,191,129,202,91,164,45,86,70,39\")),bytes32(stringToBytes32(\"149,184,45,31,72,7,248,200,15,41,9,185,69,3,113,172,63,241,181,12,161,198,83,38,164,56,144,237,51,23,18,111\")),bytes32(stringToBytes32(\"236,116,204,128,204,46,90,14,42,184,5,72,149,241,42,63,91,230,139,127,13,69,72,254,193,193,71,187,97,127,119,156\")),bytes32(stringToBytes32(\"198,226,105,218,189,184,103,132,12,179,175,251,78,168,209,201,90,239,107,89,82,21,202,230,106,123,42,78,229,3,252,66\")),bytes32(stringToBytes32(\"181,75,84,242,27,96,28,248,77,117,14,50,1,80,207,165,219,125,180,235,151,117,65,76,97,212,70,164,238,210,241,117\")),bytes32(stringToBytes32(\"160,29,67,163,36,3,170,138,170,20,196,36,77,120,120,37,231,214,164,109,37,174,161,180,129,0,105,140,183,194,0,1\")),bytes32(stringToBytes32(\"15,243,88,205,25,30,81,111,236,37,184,76,29,122,108,177,89,97,15,212,54,109,208,130,92,28,218,47,45,122,146,66\")),bytes32(stringToBytes32(\"47,62,92,180,10,216,72,127,120,7,241,2,147,38,143,9,235,198,216,197,82,232,139,174,207,200,240,14,2,218,159,66\")),bytes32(stringToBytes32(\"133,137,239,150,119,195,46,160,53,159,98,47,46,171,78,151,32,151,170,48,217,252,118,27,39,170,101,180,242,242,249,249\")),bytes32(stringToBytes32(\"191,129,6,52,30,46,228,73,175,67,2,255,134,131,243,88,254,229,107,142,187,91,72,197,234,236,40,88,240,161,119,125\")),bytes32(stringToBytes32(\"139,97,35,30,247,3,133,218,235,174,26,18,119,78,175,18,192,249,141,160,99,250,223,251,42,1,43,21,163,164,73,112\")),bytes32(stringToBytes32(\"172,13,249,43,44,168,2,130,168,232,237,158,205,90,212,38,153,122,223,155,84,207,93,163,150,184,167,50,18,212,172,58\")),bytes32(stringToBytes32(\"244,237,115,91,115,117,204,109,135,253,172,119,61,131,138,239,52,192,68,17,245,201,184,55,10,157,160,238,189,201,60,62\")),bytes32(stringToBytes32(\"131,240,169,49,4,247,107,44,114,41,90,170,114,187,153,53,51,51,158,3,104,24,164,122,26,83,202,187,214,82,13,228\")),bytes32(stringToBytes32(\"140,91,230,69,39,255,170,92,147,55,198,67,10,84,119,55,234,236,100,142,32,17,1,101,205,187,210,7,44,242,195,210\")),bytes32(stringToBytes32(\"41,75,231,228,164,218,130,219,135,129,240,78,122,180,118,237,107,134,82,176,116,77,62,120,184,10,56,102,24,24,184,78\")),bytes32(stringToBytes32(\"38,156,55,173,35,182,244,60,166,107,172,55,75,121,67,193,91,57,74,186,200,212,205,8,163,243,99,123,101,173,11,146\")),bytes32(stringToBytes32(\"112,221,131,194,115,90,71,207,57,198,136,233,57,142,29,5,161,246,230,214,217,157,78,71,21,114,7,154,127,138,29,62\")),bytes32(stringToBytes32(\"214,245,122,178,50,163,160,100,155,26,114,21,71,130,2,24,136,254,67,255,107,147,11,187,130,98,181,2,48,118,27,9\")),bytes32(stringToBytes32(\"197,76,90,142,144,140,238,182,152,58,145,4,22,43,31,16,16,3,155,246,114,124,161,53,166,197,5,76,12,44,175,222\")),bytes32(stringToBytes32(\"119,2,1,18,41,58,139,222,86,229,210,201,157,170,213,234,102,150,8,247,237,115,154,209,49,5,75,243,82,222,83,7\")),bytes32(stringToBytes32(\"139,246,4,208,167,100,10,236,199,228,203,118,178,0,136,112,129,250,98,133,221,41,158,115,250,95,42,231,201,187,49,41\")),bytes32(stringToBytes32(\"181,145,104,226,240,135,169,200,24,8,22,229,175,194,113,195,138,179,102,89,176,158,242,110,57,22,178,91,192,168,175,125\")),bytes32(stringToBytes32(\"24,49,12,84,234,67,1,189,154,17,43,54,155,251,17,225,66,4,37,186,106,62,90,15,167,4,73,28,229,227,154,142\")),bytes32(stringToBytes32(\"219,75,18,160,43,195,57,172,255,4,195,209,214,176,195,27,17,136,234,182,120,62,75,125,173,16,175,90,100,222,211,102\")),bytes32(stringToBytes32(\"130,142,118,113,85,249,100,227,44,182,9,138,67,203,116,45,24,156,248,67,231,89,172,111,180,128,207,238,137,91,164,100\")),bytes32(stringToBytes32(\"21,166,181,99,121,163,2,74,248,202,182,32,200,130,128,126,175,116,72,254,243,237,30,7,121,177,185,108,140,85,58,205\")),bytes32(stringToBytes32(\"42,226,182,84,191,166,16,199,84,226,133,122,254,30,25,159,190,139,56,109,174,20,245,38,11,38,36,188,188,141,30,229\")),bytes32(stringToBytes32(\"244,150,6,101,197,142,77,1,217,21,127,255,254,61,111,65,39,250,100,74,115,62,3,170,164,234,231,11,121,178,71,115\")),bytes32(stringToBytes32(\"107,218,187,119,38,123,171,213,30,49,64,72,187,254,154,251,187,57,84,181,109,150,69,32,104,33,28,67,209,2,38,85\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.692ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"\\x19Ethereum Signed Message:\\n32\"",
                "sol": "\"\\x19Ethereum Signed Message:\\n32\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.697ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[2014223714]",
              "sol": "[uint256(2014223714)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[2014223714]",
                "sol": "[uint256(2014223714)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2014223714]",
                "sol": "[uint256(2014223714)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[2014223714]",
                "sol": "[uint256(2014223714)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.699ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.700ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[0],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.704ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.705ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+500",
              "sol": "block.timestamp+500"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+500",
                "sol": "block.timestamp+500"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.711ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.714ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.718ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.724ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.727ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.730ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.730ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.732ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[2],accounts[4],accounts[6],accounts[6],accounts[6],accounts[5],accounts[2],accounts[2],accounts[2],accounts[5],accounts[6],accounts[3],accounts[3],accounts[3],accounts[1],accounts[8],accounts[6],accounts[9],accounts[6],accounts[4],accounts[5],accounts[1],accounts[8],accounts[9],accounts[0],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[2],accounts[4],accounts[6],accounts[6],accounts[6],accounts[5],accounts[2],accounts[2],accounts[2],accounts[5],accounts[6],accounts[3],accounts[3],accounts[3],accounts[1],accounts[8],accounts[6],accounts[9],accounts[6],accounts[4],accounts[5],accounts[1],accounts[8],accounts[9],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[9],accounts[2],accounts[4],accounts[6],accounts[6],accounts[6],accounts[5],accounts[2],accounts[2],accounts[2],accounts[5],accounts[6],accounts[3],accounts[3],accounts[3],accounts[1],accounts[8],accounts[6],accounts[9],accounts[6],accounts[4],accounts[5],accounts[1],accounts[8],accounts[9],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.735ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:06:32.736ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:06:32.737ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}