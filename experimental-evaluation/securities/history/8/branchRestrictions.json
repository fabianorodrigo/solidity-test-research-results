,{
  "2020-11-10T21:25:32.108ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:25:38.347ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:25:44.640ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:25:51.013ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:25:57.432ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:04.249ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:10.891ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:17.582ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+402",
              "sol": "block.timestamp+402"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+402",
                "sol": "block.timestamp+402"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+402",
                "sol": "block.timestamp+402"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+402",
                "sol": "block.timestamp+402"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.520ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.523ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.525ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.528ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[8],accounts[8],accounts[8],accounts[8],accounts[8],accounts[7],accounts[5],accounts[5],accounts[9],accounts[0],accounts[8],accounts[6],accounts[3],accounts[0],accounts[2],accounts[3],accounts[2],accounts[2],accounts[9],accounts[1],accounts[7],accounts[7],accounts[1],accounts[3],accounts[7],accounts[6],accounts[3],accounts[6],accounts[4],accounts[0],accounts[4],accounts[9],accounts[1],accounts[5],accounts[2],accounts[5],accounts[6],accounts[5],accounts[5],accounts[0],accounts[5],accounts[5],accounts[4],accounts[5],accounts[1],accounts[8],accounts[4],accounts[0],accounts[8],accounts[3],accounts[6],accounts[1],accounts[1],accounts[0],accounts[9],accounts[5],accounts[0],accounts[5],accounts[1],accounts[9],accounts[3],accounts[9],accounts[4],accounts[8],accounts[7],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
              "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
            },
            {
              "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
              "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
            },
            {
              "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
              "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[8],accounts[8],accounts[8],accounts[8],accounts[7],accounts[5],accounts[5],accounts[9],accounts[0],accounts[8],accounts[6],accounts[3],accounts[0],accounts[2],accounts[3],accounts[2],accounts[2],accounts[9],accounts[1],accounts[7],accounts[7],accounts[1],accounts[3],accounts[7],accounts[6],accounts[3],accounts[6],accounts[4],accounts[0],accounts[4],accounts[9],accounts[1],accounts[5],accounts[2],accounts[5],accounts[6],accounts[5],accounts[5],accounts[0],accounts[5],accounts[5],accounts[4],accounts[5],accounts[1],accounts[8],accounts[4],accounts[0],accounts[8],accounts[3],accounts[6],accounts[1],accounts[1],accounts[0],accounts[9],accounts[5],accounts[0],accounts[5],accounts[1],accounts[9],accounts[3],accounts[9],accounts[4],accounts[8],accounts[7],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
                "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
              },
              {
                "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
                "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
              },
              {
                "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
                "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
                "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
              },
              {
                "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
                "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
              },
              {
                "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
                "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[2],accounts[0],accounts[7],accounts[9],accounts[2],accounts[7],accounts[0],accounts[1],accounts[0],accounts[0],accounts[8],accounts[1],accounts[6],accounts[4],accounts[7],accounts[3],accounts[9],accounts[7],accounts[8],accounts[0],accounts[7],accounts[5],accounts[6],accounts[2],accounts[8],accounts[0],accounts[7],accounts[3],accounts[3],accounts[1],accounts[5],accounts[0],accounts[3],accounts[4],accounts[0],accounts[4],accounts[2],accounts[7],accounts[7],accounts[1],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[6],accounts[1],accounts[1],accounts[1],accounts[3],accounts[4],accounts[6],accounts[9],accounts[7],accounts[6],accounts[4],accounts[1],accounts[0],accounts[7],accounts[3],accounts[9],accounts[6],accounts[7],accounts[8],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
                "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
              },
              {
                "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
                "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
              },
              {
                "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
                "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[3],accounts[2],accounts[4],accounts[4],accounts[7],accounts[9],accounts[3],accounts[0],accounts[7],accounts[4],accounts[6],accounts[0],accounts[3],accounts[1],accounts[2],accounts[5],accounts[4],accounts[0],accounts[8],accounts[1],accounts[8],accounts[3],accounts[1],accounts[2],accounts[2],accounts[8],accounts[4],accounts[3],accounts[2],accounts[5],accounts[1],accounts[2],accounts[0],accounts[4],accounts[2],accounts[9],accounts[2],accounts[3],accounts[0],accounts[2],accounts[3],accounts[4],accounts[0],accounts[1],accounts[3],accounts[7],accounts[7],accounts[6],accounts[3],accounts[3],accounts[5],accounts[3],accounts[1],accounts[3],accounts[6],accounts[4],accounts[5],accounts[8],accounts[2],accounts[9],accounts[6],accounts[3],accounts[3],accounts[4],accounts[1],accounts[3]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
                "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
              },
              {
                "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
                "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
              },
              {
                "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
                "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[4],accounts[1],accounts[0],accounts[5],accounts[7],accounts[3],accounts[6],accounts[7],accounts[2],accounts[9],accounts[4],accounts[9],accounts[1],accounts[5],accounts[5],accounts[8],accounts[7],accounts[5],accounts[4],accounts[1],accounts[8],accounts[2],accounts[6],accounts[2],accounts[8],accounts[3],accounts[7],accounts[0],accounts[2],accounts[3],accounts[1],accounts[7],accounts[5],accounts[0],accounts[0],accounts[1],accounts[7],accounts[2],accounts[6],accounts[9],accounts[2],accounts[9],accounts[1],accounts[7],accounts[3],accounts[8],accounts[3],accounts[4],accounts[5],accounts[5],accounts[1],accounts[0],accounts[6],accounts[7],accounts[3],accounts[3],accounts[3],accounts[9],accounts[2],accounts[2],accounts[5],accounts[2],accounts[5],accounts[8],accounts[5],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,2,2014223714,28,64,10000,1338,10001,256,1532892064,97,97,27,66,254,26,65,1337,27,1532892063,4,1337,255,1336,1,65,9999,64,66,2014223714,1532892064,5,1,2014223715,1338,2014223714,2,256,1337,255,65,29,0,255,65,2014223714,1532892063,9999,10001,1337,2014223714,2,9999,254,257,9999,2014223716,1,27,97,2014223715,27,1336,257,28,64]",
                "sol": "[uint256(1532892063),uint256(2),uint256(2014223714),uint256(28),uint256(64),uint256(10000),uint256(1338),uint256(10001),uint256(256),uint256(1532892064),uint256(97),uint256(97),uint256(27),uint256(66),uint256(254),uint256(26),uint256(65),uint256(1337),uint256(27),uint256(1532892063),uint256(4),uint256(1337),uint256(255),uint256(1336),uint256(1),uint256(65),uint256(9999),uint256(64),uint256(66),uint256(2014223714),uint256(1532892064),uint256(5),uint256(1),uint256(2014223715),uint256(1338),uint256(2014223714),uint256(2),uint256(256),uint256(1337),uint256(255),uint256(65),uint256(29),uint256(0),uint256(255),uint256(65),uint256(2014223714),uint256(1532892063),uint256(9999),uint256(10001),uint256(1337),uint256(2014223714),uint256(2),uint256(9999),uint256(254),uint256(257),uint256(9999),uint256(2014223716),uint256(1),uint256(27),uint256(97),uint256(2014223715),uint256(27),uint256(1336),uint256(257),uint256(28),uint256(64)]"
              },
              {
                "js": "[1337,95,64,257,27,0,10000,96,65,1,1532892062,1338,28,1338,10001,65,2,97,254,9999,1338,2014223716,254,9999,10001,27,64,10001,1336,254,254,9999,26,4,1532892062,10000,1532892063,27,1337,96,254,3,2014223714,2014223715,66,1337,0,3,3,254,1,1532892064,2014223715,10000,27,255,2014223714,255,29,10000,28,256,1532892064,1338,5,29]",
                "sol": "[uint256(1337),uint256(95),uint256(64),uint256(257),uint256(27),uint256(0),uint256(10000),uint256(96),uint256(65),uint256(1),uint256(1532892062),uint256(1338),uint256(28),uint256(1338),uint256(10001),uint256(65),uint256(2),uint256(97),uint256(254),uint256(9999),uint256(1338),uint256(2014223716),uint256(254),uint256(9999),uint256(10001),uint256(27),uint256(64),uint256(10001),uint256(1336),uint256(254),uint256(254),uint256(9999),uint256(26),uint256(4),uint256(1532892062),uint256(10000),uint256(1532892063),uint256(27),uint256(1337),uint256(96),uint256(254),uint256(3),uint256(2014223714),uint256(2014223715),uint256(66),uint256(1337),uint256(0),uint256(3),uint256(3),uint256(254),uint256(1),uint256(1532892064),uint256(2014223715),uint256(10000),uint256(27),uint256(255),uint256(2014223714),uint256(255),uint256(29),uint256(10000),uint256(28),uint256(256),uint256(1532892064),uint256(1338),uint256(5),uint256(29)]"
              },
              {
                "js": "[[198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118],[252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122],[59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184],[124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20],[212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32],[115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162],[90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0],[147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187],[168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90],[220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65],[23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211],[14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225],[231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94],[218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42],[85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79],[5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146],[248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85],[225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254],[86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213],[112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211],[178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222],[14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92],[135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56],[185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21],[16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170],[15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41],[4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35],[85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24],[214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204],[85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176],[102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123],[53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114],[29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209],[134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170],[125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157],[128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145],[125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102],[216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57],[131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180],[108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111],[138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85],[1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11],[175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144],[75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8],[65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103],[57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136],[27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198],[26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218],[125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215],[52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64],[43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154],[17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137],[151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93],[162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13],[29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110],[208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115],[223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218],[213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92],[108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18],[56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38],[92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118],[163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37],[106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233],[137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254],[132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31],[142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154]]",
                "sol": "[bytes32(stringToBytes32(\"198,60,243,163,111,242,100,220,157,82,151,70,171,23,142,201,105,239,107,233,98,199,77,206,136,85,10,221,211,135,3,118\")),bytes32(stringToBytes32(\"252,117,15,152,60,19,139,239,154,201,156,196,66,24,196,118,215,231,7,105,223,135,4,114,16,232,167,201,163,97,221,122\")),bytes32(stringToBytes32(\"59,168,55,142,72,52,208,39,191,254,252,52,185,156,180,126,23,250,164,143,81,104,152,206,225,33,9,55,222,26,222,184\")),bytes32(stringToBytes32(\"124,181,163,229,50,192,30,195,61,170,72,140,170,244,171,98,89,187,76,10,204,48,17,203,152,148,145,255,92,217,6,20\")),bytes32(stringToBytes32(\"212,3,102,46,109,235,130,225,12,125,210,58,78,204,69,121,230,148,80,252,182,247,224,148,51,230,15,222,196,38,224,32\")),bytes32(stringToBytes32(\"115,231,217,206,109,163,188,91,243,63,1,123,189,75,73,249,226,88,197,89,55,33,156,202,124,252,51,160,150,178,233,162\")),bytes32(stringToBytes32(\"90,163,77,83,56,148,12,105,117,238,165,143,218,18,176,163,154,189,4,141,46,114,7,106,173,149,103,59,12,148,56,0\")),bytes32(stringToBytes32(\"147,46,104,242,61,208,86,140,76,130,253,38,148,217,175,170,15,150,97,225,24,164,166,49,122,219,198,143,234,49,38,187\")),bytes32(stringToBytes32(\"168,152,49,183,212,5,9,116,174,13,109,85,76,199,170,172,114,19,79,126,170,199,234,167,204,211,251,223,229,128,92,90\")),bytes32(stringToBytes32(\"220,208,100,17,147,63,16,49,65,95,234,250,200,146,157,138,53,37,29,97,9,77,132,19,198,230,44,171,227,206,192,65\")),bytes32(stringToBytes32(\"23,33,18,192,190,32,226,9,42,166,47,148,250,170,167,55,33,59,52,86,162,144,218,204,214,181,149,82,197,173,24,211\")),bytes32(stringToBytes32(\"14,226,146,39,140,8,73,90,232,55,61,201,241,251,101,53,222,180,129,133,28,193,230,179,164,56,111,101,249,22,79,225\")),bytes32(stringToBytes32(\"231,231,201,33,122,132,76,250,86,72,27,225,51,207,68,172,88,18,144,126,108,182,217,159,254,244,58,173,178,132,129,94\")),bytes32(stringToBytes32(\"218,153,107,16,76,8,204,91,77,207,58,76,250,10,25,164,59,152,245,74,168,104,165,148,133,113,187,237,198,157,191,42\")),bytes32(stringToBytes32(\"85,162,80,226,96,118,105,229,189,228,149,68,218,154,60,72,169,68,118,170,85,53,143,92,119,183,65,40,164,0,25,79\")),bytes32(stringToBytes32(\"5,236,210,16,182,245,123,209,83,174,104,106,179,65,37,153,197,239,143,54,121,135,38,99,82,148,130,240,84,91,136,146\")),bytes32(stringToBytes32(\"248,45,175,43,0,97,181,144,194,222,159,250,73,168,211,161,28,151,61,125,7,28,44,214,96,54,167,242,113,118,201,85\")),bytes32(stringToBytes32(\"225,227,33,6,190,25,56,26,7,2,47,187,23,247,59,95,142,128,49,220,198,68,28,52,239,209,118,18,236,237,126,254\")),bytes32(stringToBytes32(\"86,35,234,57,123,47,225,171,226,117,240,173,35,156,208,103,168,186,116,107,240,254,217,208,105,135,239,4,196,81,140,213\")),bytes32(stringToBytes32(\"112,73,33,214,173,123,209,148,111,55,53,227,230,90,4,179,167,33,21,169,79,253,162,72,154,136,205,241,53,64,104,211\")),bytes32(stringToBytes32(\"178,203,49,68,70,38,1,28,177,254,84,225,181,25,38,119,7,5,189,145,206,17,41,209,44,70,74,221,16,77,218,222\")),bytes32(stringToBytes32(\"14,250,146,3,212,81,128,172,115,33,152,133,210,138,113,38,1,27,155,15,66,31,182,15,206,230,214,131,7,163,113,92\")),bytes32(stringToBytes32(\"135,221,226,245,68,202,51,36,55,112,77,47,51,79,56,255,52,220,38,91,28,94,5,142,229,163,152,67,74,200,108,56\")),bytes32(stringToBytes32(\"185,210,42,110,255,214,129,241,138,203,75,67,71,27,83,226,173,99,234,250,21,145,212,95,76,34,214,246,70,110,35,21\")),bytes32(stringToBytes32(\"16,139,198,232,161,6,7,33,241,161,210,250,55,69,224,104,102,26,78,202,63,26,236,28,216,220,36,253,47,78,56,170\")),bytes32(stringToBytes32(\"15,34,143,143,214,132,27,203,176,191,79,181,197,124,225,209,79,36,223,104,166,244,47,112,153,19,242,198,185,6,91,41\")),bytes32(stringToBytes32(\"4,15,49,226,240,192,199,162,237,161,114,121,179,90,207,102,100,54,192,225,85,129,60,60,139,182,52,54,161,41,34,35\")),bytes32(stringToBytes32(\"85,116,56,58,98,53,172,246,177,105,96,110,158,181,29,72,136,106,246,213,247,149,218,189,125,131,185,122,40,70,56,24\")),bytes32(stringToBytes32(\"214,181,34,12,239,77,39,49,99,134,142,120,37,168,33,173,210,190,151,119,231,164,89,228,67,195,47,104,1,173,160,204\")),bytes32(stringToBytes32(\"85,213,56,223,154,220,150,249,219,205,50,180,10,188,124,250,151,109,142,100,129,88,90,70,226,21,155,78,177,79,172,176\")),bytes32(stringToBytes32(\"102,86,19,226,225,184,86,250,149,84,162,94,251,22,195,208,73,176,191,188,28,137,253,13,79,118,123,229,147,66,243,123\")),bytes32(stringToBytes32(\"53,194,171,148,61,51,212,28,17,80,1,220,238,209,91,79,1,38,131,185,55,199,78,24,86,213,34,3,61,21,17,114\")),bytes32(stringToBytes32(\"29,16,168,118,129,221,20,238,146,162,111,220,149,109,16,231,209,252,13,163,165,40,222,59,36,227,1,172,106,235,36,209\")),bytes32(stringToBytes32(\"134,158,167,163,154,198,57,118,231,243,201,146,133,249,185,205,166,171,160,122,82,7,32,127,245,160,9,146,82,18,109,170\")),bytes32(stringToBytes32(\"125,169,0,47,226,169,192,241,233,221,7,75,90,247,103,238,33,53,32,93,47,4,227,254,114,123,224,17,48,91,169,157\")),bytes32(stringToBytes32(\"128,160,173,187,14,219,47,200,195,65,151,53,213,176,98,123,140,101,58,116,25,7,175,15,60,140,8,176,226,147,41,145\")),bytes32(stringToBytes32(\"125,193,23,128,8,56,28,214,90,149,139,214,238,205,72,43,24,65,81,36,121,101,46,103,5,130,80,118,147,119,58,102\")),bytes32(stringToBytes32(\"216,35,194,205,193,48,72,39,38,167,165,235,63,34,113,186,26,57,203,65,84,167,73,204,200,58,139,189,53,64,35,57\")),bytes32(stringToBytes32(\"131,140,116,123,181,189,187,140,47,63,60,44,173,221,19,135,162,20,232,41,215,89,35,46,200,182,101,240,129,63,248,180\")),bytes32(stringToBytes32(\"108,24,251,223,231,70,110,165,196,61,220,115,163,144,203,135,228,58,115,44,77,211,156,153,196,140,203,122,118,223,118,111\")),bytes32(stringToBytes32(\"138,93,93,121,135,152,13,145,24,24,153,127,231,6,1,194,50,38,255,6,10,58,4,120,0,54,84,81,138,250,224,85\")),bytes32(stringToBytes32(\"1,189,193,34,111,125,126,27,99,9,119,56,113,37,45,67,33,214,100,205,191,211,189,241,201,50,52,64,241,184,103,11\")),bytes32(stringToBytes32(\"175,175,81,29,229,115,190,195,82,240,227,177,109,71,29,88,194,151,250,141,28,18,170,86,49,124,179,165,31,249,104,144\")),bytes32(stringToBytes32(\"75,106,72,202,26,68,116,105,106,104,20,160,90,155,87,0,162,96,140,87,169,26,135,142,26,90,43,162,247,231,253,8\")),bytes32(stringToBytes32(\"65,113,119,247,211,6,156,206,73,173,114,184,235,231,202,55,129,141,205,29,53,214,148,147,59,212,44,145,7,13,125,103\")),bytes32(stringToBytes32(\"57,165,117,203,83,216,236,97,67,114,86,9,1,199,47,2,60,15,210,42,132,27,158,164,95,25,224,124,167,119,143,136\")),bytes32(stringToBytes32(\"27,116,75,250,129,116,42,24,214,133,63,103,69,133,82,186,7,186,33,139,128,51,252,156,176,175,106,139,213,155,104,198\")),bytes32(stringToBytes32(\"26,97,131,189,34,254,186,52,218,146,193,122,223,44,63,44,30,89,244,223,220,253,139,34,209,96,6,105,56,201,65,218\")),bytes32(stringToBytes32(\"125,162,145,249,134,101,158,175,28,246,64,197,153,102,198,21,196,93,134,184,137,136,92,231,249,224,106,206,22,126,144,215\")),bytes32(stringToBytes32(\"52,104,216,37,114,42,36,207,86,195,47,14,173,114,169,241,168,198,226,56,121,140,191,224,135,119,140,201,116,220,129,64\")),bytes32(stringToBytes32(\"43,138,194,60,129,79,63,42,43,142,164,238,246,180,210,94,135,88,21,22,141,133,101,167,181,221,221,82,250,227,211,154\")),bytes32(stringToBytes32(\"17,210,100,240,30,102,245,155,120,207,20,135,161,181,60,141,239,111,80,167,212,83,209,203,120,106,43,94,220,37,148,137\")),bytes32(stringToBytes32(\"151,57,172,244,89,221,8,105,97,54,34,170,138,248,172,13,88,72,179,255,10,100,114,6,39,253,58,137,117,207,126,93\")),bytes32(stringToBytes32(\"162,171,75,126,26,213,250,209,41,135,151,42,7,39,123,140,155,248,35,210,188,60,61,131,73,222,122,230,86,235,112,13\")),bytes32(stringToBytes32(\"29,168,65,227,86,103,40,34,55,44,235,15,129,62,57,90,9,113,118,176,22,212,121,159,76,232,183,193,214,235,204,110\")),bytes32(stringToBytes32(\"208,152,218,3,162,12,0,1,23,148,171,163,100,197,151,161,128,142,137,168,48,247,176,198,61,30,77,78,49,95,49,115\")),bytes32(stringToBytes32(\"223,103,203,233,72,252,26,79,157,101,192,163,205,234,8,238,102,223,44,178,188,26,60,154,249,139,151,68,189,33,39,218\")),bytes32(stringToBytes32(\"213,82,247,5,152,57,37,36,54,144,26,149,217,79,10,109,1,97,32,138,132,121,111,191,125,51,172,102,192,104,222,92\")),bytes32(stringToBytes32(\"108,87,131,220,62,77,24,29,214,49,177,136,222,54,70,243,144,26,107,21,175,96,0,80,152,38,89,245,129,105,87,18\")),bytes32(stringToBytes32(\"56,47,160,253,108,45,181,84,28,119,49,252,20,8,94,218,30,163,68,253,58,35,4,208,252,213,124,213,119,119,188,38\")),bytes32(stringToBytes32(\"92,121,52,34,101,200,24,143,134,203,194,88,226,136,157,28,219,163,12,92,149,155,92,107,138,210,38,45,74,159,174,118\")),bytes32(stringToBytes32(\"163,170,232,25,245,1,21,217,38,51,152,205,167,242,172,182,42,52,118,114,77,85,149,189,206,107,195,85,5,235,39,37\")),bytes32(stringToBytes32(\"106,149,97,144,219,218,208,54,187,204,147,192,247,226,103,192,178,253,224,74,58,183,32,135,184,91,253,59,242,88,82,233\")),bytes32(stringToBytes32(\"137,210,72,25,107,36,89,119,192,56,233,182,215,153,69,185,174,245,163,103,206,35,172,133,163,244,167,87,177,1,55,254\")),bytes32(stringToBytes32(\"132,210,77,168,179,151,207,80,201,146,5,194,18,74,1,226,14,171,59,73,155,25,153,217,69,214,155,73,57,27,101,31\")),bytes32(stringToBytes32(\"142,14,146,50,190,212,65,110,152,91,203,234,67,64,98,116,4,50,199,173,134,164,64,191,248,232,195,229,168,0,173,154\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.548ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[96,115,111,52,214,108,230,183,248,57,210,219,203,37,225,150,134,162,162,161,205,170,29,194,22,79,128,14,220,179,3,246]",
              "sol": "stringToBytes32(\"96,115,111,52,214,108,230,183,248,57,210,219,203,37,225,150,134,162,162,161,205,170,29,194,22,79,128,14,220,179,3,246\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[96,115,111,52,214,108,230,183,248,57,210,219,203,37,225,150,134,162,162,161,205,170,29,194,22,79,128,14,220,179,3,246]",
                "sol": "stringToBytes32(\"96,115,111,52,214,108,230,183,248,57,210,219,203,37,225,150,134,162,162,161,205,170,29,194,22,79,128,14,220,179,3,246\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.549ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.550ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243]",
              "sol": "stringToBytes32(\"145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243\")"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "[145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243]",
                "sol": "stringToBytes32(\"145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243\")"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243]",
                "sol": "stringToBytes32(\"145,254,120,208,138,15,32,36,62,211,156,162,187,219,55,200,215,33,89,33,61,50,212,172,116,42,129,114,39,243,43,243\")"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110]",
              "sol": "stringToBytes32(\"72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110\")"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "[72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110]",
                "sol": "stringToBytes32(\"72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110\")"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110]",
                "sol": "stringToBytes32(\"72,208,65,134,62,55,110,228,36,76,192,192,49,154,10,171,21,55,231,118,100,173,96,173,135,102,37,29,89,148,172,110\")"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.553ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.553ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[154,69,245,47,115,88,18,202,59,223,197,85,245,93,181,0,205,116,227,118,236,8,89,65,61,83,254,155,203,233,189,191],[175,173,120,84,210,132,151,140,164,65,213,145,234,245,247,205,53,249,95,196,181,2,134,99,230,90,166,39,102,98,23,207],[39,39,148,111,0,123,160,129,101,44,122,71,28,19,236,67,118,102,208,207,92,81,36,102,13,12,58,172,244,119,236,247],[152,132,78,21,167,213,11,175,168,199,91,133,12,208,2,92,79,21,224,254,217,239,220,59,77,249,17,16,183,124,25,250],[39,98,0,155,201,162,8,209,82,75,39,121,163,200,177,236,233,125,43,94,209,232,196,231,131,103,41,144,109,209,168,108]]",
              "sol": "[bytes32(stringToBytes32(\"154,69,245,47,115,88,18,202,59,223,197,85,245,93,181,0,205,116,227,118,236,8,89,65,61,83,254,155,203,233,189,191\")),bytes32(stringToBytes32(\"175,173,120,84,210,132,151,140,164,65,213,145,234,245,247,205,53,249,95,196,181,2,134,99,230,90,166,39,102,98,23,207\")),bytes32(stringToBytes32(\"39,39,148,111,0,123,160,129,101,44,122,71,28,19,236,67,118,102,208,207,92,81,36,102,13,12,58,172,244,119,236,247\")),bytes32(stringToBytes32(\"152,132,78,21,167,213,11,175,168,199,91,133,12,208,2,92,79,21,224,254,217,239,220,59,77,249,17,16,183,124,25,250\")),bytes32(stringToBytes32(\"39,98,0,155,201,162,8,209,82,75,39,121,163,200,177,236,233,125,43,94,209,232,196,231,131,103,41,144,109,209,168,108\"))]"
            },
            {
              "js": "[[185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148],[127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25],[152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110],[85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54],[112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165]]",
              "sol": "[bytes32(stringToBytes32(\"185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148\")),bytes32(stringToBytes32(\"127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25\")),bytes32(stringToBytes32(\"152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110\")),bytes32(stringToBytes32(\"85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54\")),bytes32(stringToBytes32(\"112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165\"))]"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[154,69,245,47,115,88,18,202,59,223,197,85,245,93,181,0,205,116,227,118,236,8,89,65,61,83,254,155,203,233,189,191],[175,173,120,84,210,132,151,140,164,65,213,145,234,245,247,205,53,249,95,196,181,2,134,99,230,90,166,39,102,98,23,207],[39,39,148,111,0,123,160,129,101,44,122,71,28,19,236,67,118,102,208,207,92,81,36,102,13,12,58,172,244,119,236,247],[152,132,78,21,167,213,11,175,168,199,91,133,12,208,2,92,79,21,224,254,217,239,220,59,77,249,17,16,183,124,25,250],[39,98,0,155,201,162,8,209,82,75,39,121,163,200,177,236,233,125,43,94,209,232,196,231,131,103,41,144,109,209,168,108]]",
                "sol": "[bytes32(stringToBytes32(\"154,69,245,47,115,88,18,202,59,223,197,85,245,93,181,0,205,116,227,118,236,8,89,65,61,83,254,155,203,233,189,191\")),bytes32(stringToBytes32(\"175,173,120,84,210,132,151,140,164,65,213,145,234,245,247,205,53,249,95,196,181,2,134,99,230,90,166,39,102,98,23,207\")),bytes32(stringToBytes32(\"39,39,148,111,0,123,160,129,101,44,122,71,28,19,236,67,118,102,208,207,92,81,36,102,13,12,58,172,244,119,236,247\")),bytes32(stringToBytes32(\"152,132,78,21,167,213,11,175,168,199,91,133,12,208,2,92,79,21,224,254,217,239,220,59,77,249,17,16,183,124,25,250\")),bytes32(stringToBytes32(\"39,98,0,155,201,162,8,209,82,75,39,121,163,200,177,236,233,125,43,94,209,232,196,231,131,103,41,144,109,209,168,108\"))]"
              },
              {
                "js": "[[185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148],[127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25],[152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110],[85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54],[112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165]]",
                "sol": "[bytes32(stringToBytes32(\"185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148\")),bytes32(stringToBytes32(\"127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25\")),bytes32(stringToBytes32(\"152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110\")),bytes32(stringToBytes32(\"85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54\")),bytes32(stringToBytes32(\"112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[203,194,204,228,218,18,83,120,127,32,12,43,229,149,253,248,171,244,118,186,127,47,11,29,3,178,60,220,39,221,46,127],[172,104,207,146,156,162,70,66,39,252,178,224,39,187,35,195,219,164,37,47,168,174,77,126,147,206,192,238,29,238,17,181],[224,138,76,177,52,184,144,156,24,57,105,39,166,49,198,34,159,224,3,2,52,31,210,185,177,139,5,161,156,83,165,231],[101,93,12,19,73,255,147,40,1,108,189,108,79,158,121,167,50,203,254,58,42,37,230,217,88,229,201,213,148,168,66,255],[221,69,230,130,36,112,167,38,46,52,189,79,235,34,30,121,246,142,90,36,17,28,234,31,172,235,199,177,11,41,210,8],[183,169,64,185,241,56,84,198,122,62,141,182,124,158,194,115,21,57,133,250,181,213,130,213,215,197,173,36,236,97,88,67]]",
                "sol": "[stringToBytes32(\"199,72,123,217,143,1,1,26,51,162,234,20,132,146,10,75,59,35,49,116,194,161,168,54,220,132,212,10,221,90,198,24\"),stringToBytes32(\"14,62,254,255,227,40,69,149,128,37,182,100,60,0,137,43,175,27,48,102,199,18,110,198,251,139,142,192,108,168,109,102\"),stringToBytes32(\"139,217,210,101,79,233,9,13,234,73,233,21,65,96,254,3,141,245,59,186,190,43,66,146,16,69,152,55,89,216,25,196\"),stringToBytes32(\"17,231,26,243,50,54,38,13,108,2,8,192,140,33,159,6,73,19,160,61,83,233,165,30,22,110,178,13,88,207,96,200\"),stringToBytes32(\"99,116,172,83,197,100,174,96,65,13,185,77,221,208,204,3,252,39,96,100,37,227,209,199,86,183,144,96,70,165,144,243\"),stringToBytes32(\"205,202,244,118,43,15,230,149,48,166,100,189,188,58,227,119,217,47,92,73,236,212,25,11,134,107,192,254,110,221,42,125\")]"
              },
              {
                "js": "[[185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148],[127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25],[152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110],[85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54],[112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165]]",
                "sol": "[bytes32(stringToBytes32(\"185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148\")),bytes32(stringToBytes32(\"127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25\")),bytes32(stringToBytes32(\"152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110\")),bytes32(stringToBytes32(\"85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54\")),bytes32(stringToBytes32(\"112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148],[127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25],[152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110],[85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54],[112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165]]",
                "sol": "[bytes32(stringToBytes32(\"185,26,226,86,73,126,1,20,126,168,141,255,84,165,119,140,38,96,210,43,35,226,59,248,19,50,90,69,147,153,137,148\")),bytes32(stringToBytes32(\"127,198,37,229,93,22,124,26,57,196,106,173,25,75,79,31,141,169,95,83,164,217,108,88,159,44,111,87,3,216,170,25\")),bytes32(stringToBytes32(\"152,62,96,135,139,132,58,177,223,210,165,252,47,144,133,194,53,17,148,120,137,75,74,247,23,205,191,139,189,55,137,110\")),bytes32(stringToBytes32(\"85,148,95,112,242,108,21,249,206,28,4,176,171,119,63,143,109,12,48,177,113,224,76,142,129,22,235,150,169,167,154,54\")),bytes32(stringToBytes32(\"112,15,105,60,238,45,203,75,237,18,113,203,54,215,204,254,115,213,238,77,142,48,22,41,46,16,26,21,76,87,128,165\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.559ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.565ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[2],accounts[1],accounts[2],accounts[8],accounts[4],accounts[6],accounts[8],accounts[9],accounts[8],accounts[1],accounts[4],accounts[8],accounts[7],accounts[5],accounts[1],accounts[0],accounts[4],accounts[8],accounts[4],accounts[9],accounts[2],accounts[2],accounts[4],accounts[5],accounts[2],accounts[6],accounts[3],accounts[2],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[26,9999,64,6,1532892063,26,3,1532892063,29,95,28,95,9999,2014223714,254,3,0,1532892063,10000,28,2014223714,254,2014223714,254,1338,1532892062,0,95,256]",
              "sol": "[uint256(26),uint256(9999),uint256(64),uint256(6),uint256(1532892063),uint256(26),uint256(3),uint256(1532892063),uint256(29),uint256(95),uint256(28),uint256(95),uint256(9999),uint256(2014223714),uint256(254),uint256(3),uint256(0),uint256(1532892063),uint256(10000),uint256(28),uint256(2014223714),uint256(254),uint256(2014223714),uint256(254),uint256(1338),uint256(1532892062),uint256(0),uint256(95),uint256(256)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[2],accounts[1],accounts[2],accounts[8],accounts[4],accounts[6],accounts[8],accounts[9],accounts[8],accounts[1],accounts[4],accounts[8],accounts[7],accounts[5],accounts[1],accounts[0],accounts[4],accounts[8],accounts[4],accounts[9],accounts[2],accounts[2],accounts[4],accounts[5],accounts[2],accounts[6],accounts[3],accounts[2],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[26,9999,64,6,1532892063,26,3,1532892063,29,95,28,95,9999,2014223714,254,3,0,1532892063,10000,28,2014223714,254,2014223714,254,1338,1532892062,0,95,256]",
                "sol": "[uint256(26),uint256(9999),uint256(64),uint256(6),uint256(1532892063),uint256(26),uint256(3),uint256(1532892063),uint256(29),uint256(95),uint256(28),uint256(95),uint256(9999),uint256(2014223714),uint256(254),uint256(3),uint256(0),uint256(1532892063),uint256(10000),uint256(28),uint256(2014223714),uint256(254),uint256(2014223714),uint256(254),uint256(1338),uint256(1532892062),uint256(0),uint256(95),uint256(256)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[7],accounts[8],accounts[0],accounts[6],accounts[6],accounts[4],accounts[3],accounts[8],accounts[0],accounts[1],accounts[6],accounts[4],accounts[6],accounts[4],accounts[0],accounts[4],accounts[5],accounts[3],accounts[8],accounts[6],accounts[0],accounts[5],accounts[8],accounts[1],accounts[8],accounts[1],accounts[4],accounts[6],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[26,9999,64,6,1532892063,26,3,1532892063,29,95,28,95,9999,2014223714,254,3,0,1532892063,10000,28,2014223714,254,2014223714,254,1338,1532892062,0,95,256]",
                "sol": "[uint256(26),uint256(9999),uint256(64),uint256(6),uint256(1532892063),uint256(26),uint256(3),uint256(1532892063),uint256(29),uint256(95),uint256(28),uint256(95),uint256(9999),uint256(2014223714),uint256(254),uint256(3),uint256(0),uint256(1532892063),uint256(10000),uint256(28),uint256(2014223714),uint256(254),uint256(2014223714),uint256(254),uint256(1338),uint256(1532892062),uint256(0),uint256(95),uint256(256)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[26,9999,64,6,1532892063,26,3,1532892063,29,95,28,95,9999,2014223714,254,3,0,1532892063,10000,28,2014223714,254,2014223714,254,1338,1532892062,0,95,256]",
                "sol": "[uint256(26),uint256(9999),uint256(64),uint256(6),uint256(1532892063),uint256(26),uint256(3),uint256(1532892063),uint256(29),uint256(95),uint256(28),uint256(95),uint256(9999),uint256(2014223714),uint256(254),uint256(3),uint256(0),uint256(1532892063),uint256(10000),uint256(28),uint256(2014223714),uint256(254),uint256(2014223714),uint256(254),uint256(1338),uint256(1532892062),uint256(0),uint256(95),uint256(256)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.567ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.569ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[9],accounts[7],accounts[0],accounts[4],accounts[4],accounts[1],accounts[8],accounts[8],accounts[6],accounts[5],accounts[4],accounts[9],accounts[9],accounts[1],accounts[0],accounts[8],accounts[4],accounts[0],accounts[6],accounts[3],accounts[1],accounts[8],accounts[4],accounts[5],accounts[5],accounts[3],accounts[2],accounts[6],accounts[6],accounts[7],accounts[3],accounts[9],accounts[4],accounts[9],accounts[1],accounts[8],accounts[5],accounts[6],accounts[6],accounts[1],accounts[6],accounts[6],accounts[5],accounts[8],accounts[9],accounts[5],accounts[0],accounts[0],accounts[3],accounts[0],accounts[0],accounts[4],accounts[3],accounts[9],accounts[1],accounts[5],accounts[9],accounts[1],accounts[7],accounts[0],accounts[9],accounts[1],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[9],accounts[7],accounts[0],accounts[4],accounts[4],accounts[1],accounts[8],accounts[8],accounts[6],accounts[5],accounts[4],accounts[9],accounts[9],accounts[1],accounts[0],accounts[8],accounts[4],accounts[0],accounts[6],accounts[3],accounts[1],accounts[8],accounts[4],accounts[5],accounts[5],accounts[3],accounts[2],accounts[6],accounts[6],accounts[7],accounts[3],accounts[9],accounts[4],accounts[9],accounts[1],accounts[8],accounts[5],accounts[6],accounts[6],accounts[1],accounts[6],accounts[6],accounts[5],accounts[8],accounts[9],accounts[5],accounts[0],accounts[0],accounts[3],accounts[0],accounts[0],accounts[4],accounts[3],accounts[9],accounts[1],accounts[5],accounts[9],accounts[1],accounts[7],accounts[0],accounts[9],accounts[1],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[7],accounts[9],accounts[7],accounts[0],accounts[4],accounts[4],accounts[1],accounts[8],accounts[8],accounts[6],accounts[5],accounts[4],accounts[9],accounts[9],accounts[1],accounts[0],accounts[8],accounts[4],accounts[0],accounts[6],accounts[3],accounts[1],accounts[8],accounts[4],accounts[5],accounts[5],accounts[3],accounts[2],accounts[6],accounts[6],accounts[7],accounts[3],accounts[9],accounts[4],accounts[9],accounts[1],accounts[8],accounts[5],accounts[6],accounts[6],accounts[1],accounts[6],accounts[6],accounts[5],accounts[8],accounts[9],accounts[5],accounts[0],accounts[0],accounts[3],accounts[0],accounts[0],accounts[4],accounts[3],accounts[9],accounts[1],accounts[5],accounts[9],accounts[1],accounts[7],accounts[0],accounts[9],accounts[1],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.572ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.573ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+133",
              "sol": "block.timestamp+133"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+133",
                "sol": "block.timestamp+133"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.579ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.586ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.591ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.597ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.601ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.604ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.604ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.605ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[4],accounts[9],accounts[2],accounts[7],accounts[0],accounts[4],accounts[8],accounts[1],accounts[8],accounts[7],accounts[2],accounts[4],accounts[9],accounts[6],accounts[5],accounts[2],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[8],accounts[2],accounts[3],accounts[2],accounts[3],accounts[1],accounts[1],accounts[7],accounts[8],accounts[1],accounts[0],accounts[3],accounts[6],accounts[0],accounts[9],accounts[2],accounts[7],accounts[2],accounts[3],accounts[6],accounts[6],accounts[8],accounts[1],accounts[9],accounts[9],accounts[3],accounts[3],accounts[2],accounts[9],accounts[5],accounts[4],accounts[0],accounts[4],accounts[1],accounts[0],accounts[8],accounts[5],accounts[4],accounts[4],accounts[7],accounts[7],accounts[4],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[4],accounts[9],accounts[2],accounts[7],accounts[0],accounts[4],accounts[8],accounts[1],accounts[8],accounts[7],accounts[2],accounts[4],accounts[9],accounts[6],accounts[5],accounts[2],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[8],accounts[2],accounts[3],accounts[2],accounts[3],accounts[1],accounts[1],accounts[7],accounts[8],accounts[1],accounts[0],accounts[3],accounts[6],accounts[0],accounts[9],accounts[2],accounts[7],accounts[2],accounts[3],accounts[6],accounts[6],accounts[8],accounts[1],accounts[9],accounts[9],accounts[3],accounts[3],accounts[2],accounts[9],accounts[5],accounts[4],accounts[0],accounts[4],accounts[1],accounts[0],accounts[8],accounts[5],accounts[4],accounts[4],accounts[7],accounts[7],accounts[4],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[4],accounts[9],accounts[2],accounts[7],accounts[0],accounts[4],accounts[8],accounts[1],accounts[8],accounts[7],accounts[2],accounts[4],accounts[9],accounts[6],accounts[5],accounts[2],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[8],accounts[2],accounts[3],accounts[2],accounts[3],accounts[1],accounts[1],accounts[7],accounts[8],accounts[1],accounts[0],accounts[3],accounts[6],accounts[0],accounts[9],accounts[2],accounts[7],accounts[2],accounts[3],accounts[6],accounts[6],accounts[8],accounts[1],accounts[9],accounts[9],accounts[3],accounts[3],accounts[2],accounts[9],accounts[5],accounts[4],accounts[0],accounts[4],accounts[1],accounts[0],accounts[8],accounts[5],accounts[4],accounts[4],accounts[7],accounts[7],accounts[4],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.607ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T21:26:24.608ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T21:26:24.609ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}