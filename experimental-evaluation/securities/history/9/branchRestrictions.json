,{
  "2020-11-10T23:47:18.664ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:25.071ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:31.577ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:38.006ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:44.571ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:51.190ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:47:59.393ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:06.115ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:12.882ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+514",
              "sol": "block.timestamp+514"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+514",
                "sol": "block.timestamp+514"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+514",
                "sol": "block.timestamp+514"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+514",
                "sol": "block.timestamp+514"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.742ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.743ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.745ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.748ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[1],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[9],accounts[1],accounts[3],accounts[2],accounts[3],accounts[6],accounts[7],accounts[2],accounts[1],accounts[9],accounts[4],accounts[4],accounts[5],accounts[6],accounts[7],accounts[4],accounts[9],accounts[5],accounts[9],accounts[0],accounts[9],accounts[3],accounts[7],accounts[9],accounts[7],accounts[6],accounts[6],accounts[2],accounts[0],accounts[9],accounts[5],accounts[8],accounts[0],accounts[0],accounts[0],accounts[8],accounts[3],accounts[8],accounts[6],accounts[2],accounts[4],accounts[1],accounts[4],accounts[7],accounts[0],accounts[6],accounts[9],accounts[3],accounts[5],accounts[8],accounts[6],accounts[4],accounts[7],accounts[4],accounts[6],accounts[3],accounts[3],accounts[6],accounts[9],accounts[1],accounts[9],accounts[7],accounts[3],accounts[1],accounts[3],accounts[2],accounts[1],accounts[1],accounts[3],accounts[3],accounts[0],accounts[8],accounts[3],accounts[9],accounts[8],accounts[2],accounts[8],accounts[1],accounts[5],accounts[1],accounts[1],accounts[8],accounts[9],accounts[8],accounts[9],accounts[4],accounts[8],accounts[4],accounts[3],accounts[6],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
              "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
            },
            {
              "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
              "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
            },
            {
              "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
              "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[9],accounts[1],accounts[3],accounts[2],accounts[3],accounts[6],accounts[7],accounts[2],accounts[1],accounts[9],accounts[4],accounts[4],accounts[5],accounts[6],accounts[7],accounts[4],accounts[9],accounts[5],accounts[9],accounts[0],accounts[9],accounts[3],accounts[7],accounts[9],accounts[7],accounts[6],accounts[6],accounts[2],accounts[0],accounts[9],accounts[5],accounts[8],accounts[0],accounts[0],accounts[0],accounts[8],accounts[3],accounts[8],accounts[6],accounts[2],accounts[4],accounts[1],accounts[4],accounts[7],accounts[0],accounts[6],accounts[9],accounts[3],accounts[5],accounts[8],accounts[6],accounts[4],accounts[7],accounts[4],accounts[6],accounts[3],accounts[3],accounts[6],accounts[9],accounts[1],accounts[9],accounts[7],accounts[3],accounts[1],accounts[3],accounts[2],accounts[1],accounts[1],accounts[3],accounts[3],accounts[0],accounts[8],accounts[3],accounts[9],accounts[8],accounts[2],accounts[8],accounts[1],accounts[5],accounts[1],accounts[1],accounts[8],accounts[9],accounts[8],accounts[9],accounts[4],accounts[8],accounts[4],accounts[3],accounts[6],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
                "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
              },
              {
                "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
                "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
              },
              {
                "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
                "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
                "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
              },
              {
                "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
                "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
              },
              {
                "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
                "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[4],accounts[4],accounts[2],accounts[0],accounts[5],accounts[5],accounts[6],accounts[7],accounts[8],accounts[5],accounts[8],accounts[8],accounts[1],accounts[4],accounts[7],accounts[5],accounts[7],accounts[2],accounts[8],accounts[5],accounts[6],accounts[6],accounts[2],accounts[8],accounts[2],accounts[7],accounts[4],accounts[2],accounts[5],accounts[8],accounts[3],accounts[3],accounts[8],accounts[4],accounts[5],accounts[2],accounts[2],accounts[1],accounts[3],accounts[6],accounts[9],accounts[9],accounts[5],accounts[0],accounts[6],accounts[0],accounts[3],accounts[8],accounts[1],accounts[1],accounts[4],accounts[1],accounts[2],accounts[2],accounts[0],accounts[4],accounts[2],accounts[2],accounts[4],accounts[3],accounts[4],accounts[3],accounts[4],accounts[7],accounts[7],accounts[1],accounts[0],accounts[7],accounts[5],accounts[9],accounts[5],accounts[6],accounts[4],accounts[6],accounts[5],accounts[6],accounts[4],accounts[4],accounts[9],accounts[1],accounts[5],accounts[3],accounts[4],accounts[9],accounts[3],accounts[7],accounts[7],accounts[1],accounts[2],accounts[8],accounts[0],accounts[1],accounts[7],accounts[2],accounts[8],accounts[3],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
                "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
              },
              {
                "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
                "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
              },
              {
                "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
                "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[4],accounts[8],accounts[5],accounts[3],accounts[3],accounts[0],accounts[4],accounts[4],accounts[7],accounts[2],accounts[5],accounts[5],accounts[1],accounts[3],accounts[8],accounts[3],accounts[9],accounts[6],accounts[4],accounts[6],accounts[3],accounts[7],accounts[6],accounts[7],accounts[4],accounts[5],accounts[7],accounts[2],accounts[8],accounts[5],accounts[7],accounts[0],accounts[8],accounts[2],accounts[2],accounts[4],accounts[0],accounts[8],accounts[7],accounts[1],accounts[9],accounts[6],accounts[6],accounts[0],accounts[0],accounts[5],accounts[4],accounts[2],accounts[9],accounts[9],accounts[0],accounts[6],accounts[3],accounts[3],accounts[5],accounts[8],accounts[1],accounts[2],accounts[2],accounts[0],accounts[2],accounts[5],accounts[1],accounts[3],accounts[1],accounts[1],accounts[8],accounts[5],accounts[6],accounts[1],accounts[0],accounts[7],accounts[5],accounts[9],accounts[6],accounts[3],accounts[3],accounts[9],accounts[7],accounts[4],accounts[2],accounts[0],accounts[8],accounts[2],accounts[1],accounts[0],accounts[4],accounts[8],accounts[6],accounts[8],accounts[2],accounts[3],accounts[2],accounts[9],accounts[7],accounts[3],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
                "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
              },
              {
                "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
                "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
              },
              {
                "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
                "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[9],accounts[9],accounts[9],accounts[6],accounts[9],accounts[3],accounts[6],accounts[4],accounts[3],accounts[7],accounts[4],accounts[7],accounts[0],accounts[5],accounts[2],accounts[5],accounts[0],accounts[2],accounts[0],accounts[9],accounts[1],accounts[2],accounts[1],accounts[0],accounts[7],accounts[3],accounts[5],accounts[0],accounts[9],accounts[0],accounts[7],accounts[3],accounts[9],accounts[8],accounts[7],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[9],accounts[6],accounts[9],accounts[5],accounts[7],accounts[7],accounts[1],accounts[9],accounts[0],accounts[5],accounts[8],accounts[8],accounts[2],accounts[2],accounts[7],accounts[5],accounts[8],accounts[3],accounts[2],accounts[2],accounts[7],accounts[0],accounts[4],accounts[0],accounts[4],accounts[1],accounts[6],accounts[6],accounts[6],accounts[0],accounts[4],accounts[9],accounts[4],accounts[4],accounts[0],accounts[9],accounts[8],accounts[5],accounts[1],accounts[5],accounts[4],accounts[2],accounts[6],accounts[1],accounts[2],accounts[3],accounts[7],accounts[8],accounts[3],accounts[3],accounts[0],accounts[4],accounts[6],accounts[0],accounts[4],accounts[9],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[64,28,96,6,9999,256,1336,28,2,27,10001,95,10000,27,28,257,5,2014223714,2014223715,0,2,2014223715,2014223716,26,4,29,1338,257,28,29,6,2,2014223715,1338,1338,27,256,2,1532892062,5,95,95,26,1,1532892064,2,257,2014223716,27,9999,1336,95,9999,29,1532892064,2014223714,97,254,2014223715,6,1336,257,95,4,27,255,2014223715,1338,64,10001,6,95,10000,28,2014223716,5,257,66,64,1337,97,95,5,9999,255,256,257,1,1,28,10001,4,5,95,97,29,257]",
                "sol": "[uint256(64),uint256(28),uint256(96),uint256(6),uint256(9999),uint256(256),uint256(1336),uint256(28),uint256(2),uint256(27),uint256(10001),uint256(95),uint256(10000),uint256(27),uint256(28),uint256(257),uint256(5),uint256(2014223714),uint256(2014223715),uint256(0),uint256(2),uint256(2014223715),uint256(2014223716),uint256(26),uint256(4),uint256(29),uint256(1338),uint256(257),uint256(28),uint256(29),uint256(6),uint256(2),uint256(2014223715),uint256(1338),uint256(1338),uint256(27),uint256(256),uint256(2),uint256(1532892062),uint256(5),uint256(95),uint256(95),uint256(26),uint256(1),uint256(1532892064),uint256(2),uint256(257),uint256(2014223716),uint256(27),uint256(9999),uint256(1336),uint256(95),uint256(9999),uint256(29),uint256(1532892064),uint256(2014223714),uint256(97),uint256(254),uint256(2014223715),uint256(6),uint256(1336),uint256(257),uint256(95),uint256(4),uint256(27),uint256(255),uint256(2014223715),uint256(1338),uint256(64),uint256(10001),uint256(6),uint256(95),uint256(10000),uint256(28),uint256(2014223716),uint256(5),uint256(257),uint256(66),uint256(64),uint256(1337),uint256(97),uint256(95),uint256(5),uint256(9999),uint256(255),uint256(256),uint256(257),uint256(1),uint256(1),uint256(28),uint256(10001),uint256(4),uint256(5),uint256(95),uint256(97),uint256(29),uint256(257)]"
              },
              {
                "js": "[96,1532892062,257,9999,2,1,255,2014223715,2014223714,1532892062,29,2014223714,27,2014223716,254,2,3,1532892062,10001,26,0,1532892063,2014223714,0,1338,256,1336,27,26,10000,2014223715,2014223716,10000,96,2014223715,2014223715,2014223715,5,6,1532892063,97,4,255,1532892063,65,0,96,64,64,254,1532892064,96,66,2,95,26,257,1336,255,0,1,5,2014223716,9999,1336,9999,1532892063,64,2014223715,64,5,257,257,3,97,95,1,5,28,65,1337,27,2014223715,1532892062,28,27,97,4,6,5,257,2,6,2014223716,0,97,64]",
                "sol": "[uint256(96),uint256(1532892062),uint256(257),uint256(9999),uint256(2),uint256(1),uint256(255),uint256(2014223715),uint256(2014223714),uint256(1532892062),uint256(29),uint256(2014223714),uint256(27),uint256(2014223716),uint256(254),uint256(2),uint256(3),uint256(1532892062),uint256(10001),uint256(26),uint256(0),uint256(1532892063),uint256(2014223714),uint256(0),uint256(1338),uint256(256),uint256(1336),uint256(27),uint256(26),uint256(10000),uint256(2014223715),uint256(2014223716),uint256(10000),uint256(96),uint256(2014223715),uint256(2014223715),uint256(2014223715),uint256(5),uint256(6),uint256(1532892063),uint256(97),uint256(4),uint256(255),uint256(1532892063),uint256(65),uint256(0),uint256(96),uint256(64),uint256(64),uint256(254),uint256(1532892064),uint256(96),uint256(66),uint256(2),uint256(95),uint256(26),uint256(257),uint256(1336),uint256(255),uint256(0),uint256(1),uint256(5),uint256(2014223716),uint256(9999),uint256(1336),uint256(9999),uint256(1532892063),uint256(64),uint256(2014223715),uint256(64),uint256(5),uint256(257),uint256(257),uint256(3),uint256(97),uint256(95),uint256(1),uint256(5),uint256(28),uint256(65),uint256(1337),uint256(27),uint256(2014223715),uint256(1532892062),uint256(28),uint256(27),uint256(97),uint256(4),uint256(6),uint256(5),uint256(257),uint256(2),uint256(6),uint256(2014223716),uint256(0),uint256(97),uint256(64)]"
              },
              {
                "js": "[[172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199],[3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107],[183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40],[16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175],[223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33],[112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153],[50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15],[235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129],[10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161],[198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69],[251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151],[14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189],[107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198],[34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96],[25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205],[132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72],[168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250],[29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39],[106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28],[176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143],[245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180],[184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137],[215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124],[86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158],[204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147],[39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250],[122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168],[120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4],[4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83],[153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64],[254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3],[157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54],[1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15],[102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108],[113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213],[29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64],[123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239],[193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75],[11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121],[77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196],[173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109],[64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42],[81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213],[24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172],[72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126],[247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79],[183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253],[99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9],[37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194],[183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0],[184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107],[185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231],[113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240],[92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45],[229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45],[109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143],[36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87],[73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66],[183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152],[142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217],[125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156],[246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154],[103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201],[218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111],[140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122],[89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39],[50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236],[47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149],[171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132],[181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194],[163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117],[223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10],[37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237],[146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28],[224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74],[127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153],[36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200],[11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101],[210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219],[73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65],[114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83],[113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74],[50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201],[77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55],[176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111],[106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138],[39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28],[81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18],[94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34],[24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13],[22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29],[39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178],[43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81],[108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163],[7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160],[90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173],[40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155]]",
                "sol": "[bytes32(stringToBytes32(\"172,255,242,248,231,91,166,249,139,185,204,17,233,41,180,228,94,144,58,226,135,53,208,18,69,124,37,146,248,101,195,199\")),bytes32(stringToBytes32(\"3,210,17,197,73,66,52,187,29,120,195,234,84,35,189,233,165,43,173,88,137,147,56,65,41,169,188,110,62,116,40,107\")),bytes32(stringToBytes32(\"183,81,176,144,64,208,70,42,13,194,155,0,39,135,166,211,253,171,89,148,158,234,238,203,80,128,44,37,141,239,52,40\")),bytes32(stringToBytes32(\"16,34,199,80,208,159,36,130,200,189,72,135,64,88,120,115,46,193,5,218,170,168,43,80,255,35,58,68,29,240,239,175\")),bytes32(stringToBytes32(\"223,58,171,74,0,191,76,36,130,84,160,205,152,157,118,54,255,39,232,25,251,139,179,50,218,36,118,145,33,55,122,33\")),bytes32(stringToBytes32(\"112,219,195,160,188,185,171,120,174,191,141,98,254,225,214,179,27,166,47,3,15,91,100,246,36,51,219,79,149,93,175,153\")),bytes32(stringToBytes32(\"50,247,96,196,15,53,181,76,123,35,90,75,131,210,110,149,16,4,157,62,178,186,48,49,121,185,209,159,201,68,143,15\")),bytes32(stringToBytes32(\"235,240,242,172,15,202,238,242,250,250,118,38,122,181,33,168,95,16,208,159,136,227,110,195,226,133,192,128,68,134,135,129\")),bytes32(stringToBytes32(\"10,218,13,159,250,19,4,236,165,21,175,189,196,173,114,95,225,205,0,111,167,61,186,7,248,252,103,152,95,12,95,161\")),bytes32(stringToBytes32(\"198,3,229,60,105,122,166,203,176,135,144,9,108,41,16,62,79,184,67,22,78,162,44,55,141,231,53,158,35,27,130,69\")),bytes32(stringToBytes32(\"251,124,101,100,48,192,126,100,38,170,36,23,43,111,128,109,176,143,143,176,85,215,30,94,83,55,86,139,242,70,134,151\")),bytes32(stringToBytes32(\"14,189,241,104,241,161,148,74,91,118,254,34,211,170,19,249,155,224,38,121,107,116,166,224,61,247,94,162,231,14,177,189\")),bytes32(stringToBytes32(\"107,90,155,70,51,107,208,238,99,85,76,206,28,91,203,158,206,19,51,247,165,37,23,42,159,100,154,123,131,172,54,198\")),bytes32(stringToBytes32(\"34,154,68,92,153,214,6,169,132,60,119,208,253,120,72,88,200,81,25,132,211,249,28,193,24,254,64,172,210,240,93,96\")),bytes32(stringToBytes32(\"25,231,211,180,72,244,80,141,209,119,216,57,4,17,115,149,135,71,152,218,160,3,223,214,61,134,231,73,177,120,89,205\")),bytes32(stringToBytes32(\"132,145,103,11,155,109,161,218,41,161,238,40,205,198,162,4,217,31,92,188,146,209,66,61,67,162,126,21,111,146,230,72\")),bytes32(stringToBytes32(\"168,171,13,41,200,172,141,107,73,35,109,242,7,227,83,56,76,220,221,83,28,81,174,180,131,113,49,154,42,166,254,250\")),bytes32(stringToBytes32(\"29,103,156,48,1,4,8,218,76,183,41,215,42,225,24,146,99,108,156,173,184,135,12,235,8,13,129,214,222,120,143,39\")),bytes32(stringToBytes32(\"106,33,20,214,33,65,228,140,129,253,28,57,76,7,125,55,95,225,2,50,11,56,32,226,82,182,203,54,11,252,87,28\")),bytes32(stringToBytes32(\"176,99,41,18,71,190,194,251,137,149,188,38,72,118,239,207,114,153,130,26,180,84,215,174,104,170,34,81,110,64,79,143\")),bytes32(stringToBytes32(\"245,136,7,99,142,232,218,148,109,18,155,183,199,87,244,165,151,89,91,255,146,224,231,238,62,29,239,79,33,189,27,180\")),bytes32(stringToBytes32(\"184,185,94,104,180,59,72,136,201,150,49,5,121,33,205,113,79,115,10,32,112,67,138,38,134,8,121,33,179,161,121,137\")),bytes32(stringToBytes32(\"215,140,59,40,52,34,45,34,215,129,127,164,120,123,105,152,209,76,224,232,133,155,241,41,236,139,222,156,93,252,200,124\")),bytes32(stringToBytes32(\"86,95,242,80,7,54,23,236,19,93,40,253,120,114,46,127,239,226,102,196,9,187,107,40,26,209,101,185,98,128,159,158\")),bytes32(stringToBytes32(\"204,169,161,55,57,55,45,3,180,220,106,90,5,80,186,92,67,72,73,5,108,247,211,93,207,198,99,246,62,119,180,147\")),bytes32(stringToBytes32(\"39,21,192,101,200,170,223,180,223,216,83,153,155,153,199,139,61,208,93,225,58,120,41,0,59,135,91,200,229,66,6,250\")),bytes32(stringToBytes32(\"122,46,99,12,3,24,67,165,97,227,161,129,102,151,59,195,173,107,51,214,99,44,211,29,151,115,222,90,120,63,168,168\")),bytes32(stringToBytes32(\"120,243,172,196,114,178,226,90,243,212,213,7,189,36,8,175,19,1,169,99,101,38,225,198,224,103,214,176,181,50,34,4\")),bytes32(stringToBytes32(\"4,152,232,70,55,93,198,147,177,68,12,31,93,70,10,218,63,19,190,173,122,45,111,13,110,181,44,181,193,222,165,83\")),bytes32(stringToBytes32(\"153,2,126,11,172,140,187,71,171,96,250,85,109,163,122,33,202,57,233,54,17,181,211,171,4,121,60,93,187,245,32,64\")),bytes32(stringToBytes32(\"254,234,78,32,138,57,227,93,70,186,101,198,239,29,191,88,137,250,218,98,227,201,117,18,76,115,126,197,43,74,74,3\")),bytes32(stringToBytes32(\"157,235,83,197,147,147,77,8,102,217,146,24,167,53,88,117,202,121,232,23,16,144,203,174,135,25,115,117,142,38,231,54\")),bytes32(stringToBytes32(\"1,170,112,84,146,77,241,68,141,196,248,228,114,244,65,216,25,240,51,248,39,10,103,239,122,30,134,24,81,112,146,15\")),bytes32(stringToBytes32(\"102,100,156,207,142,246,229,87,229,190,128,252,78,82,74,213,228,184,144,47,119,146,145,18,19,189,217,225,201,180,75,108\")),bytes32(stringToBytes32(\"113,85,251,46,185,140,25,43,81,252,226,34,255,218,249,147,169,228,92,35,222,66,167,205,144,79,83,74,35,125,32,213\")),bytes32(stringToBytes32(\"29,182,38,9,15,144,174,11,86,185,243,147,143,207,12,139,176,8,222,176,135,49,105,1,187,154,72,149,235,231,115,64\")),bytes32(stringToBytes32(\"123,170,231,153,211,111,162,104,103,216,108,171,81,188,53,27,197,59,149,68,12,92,110,76,237,45,122,65,159,237,227,239\")),bytes32(stringToBytes32(\"193,48,174,66,61,105,143,198,125,219,139,153,223,28,227,192,7,99,9,110,56,230,33,7,190,220,131,236,8,136,115,75\")),bytes32(stringToBytes32(\"11,73,117,39,59,145,148,227,46,82,205,178,37,42,177,109,66,178,108,2,111,157,131,100,69,88,7,5,145,34,8,121\")),bytes32(stringToBytes32(\"77,131,36,254,250,14,226,130,48,59,26,223,103,56,197,70,177,169,36,230,235,100,88,164,242,140,53,150,46,0,235,196\")),bytes32(stringToBytes32(\"173,250,78,136,169,75,190,194,108,204,140,205,62,1,204,246,26,148,3,116,160,69,177,237,209,32,92,7,165,124,155,109\")),bytes32(stringToBytes32(\"64,19,129,72,223,94,4,252,224,210,177,44,40,146,1,51,214,36,99,254,114,92,105,224,152,152,48,205,152,64,139,42\")),bytes32(stringToBytes32(\"81,85,255,213,51,18,207,14,230,245,199,233,5,43,210,174,100,15,73,23,8,13,235,236,137,85,97,45,96,199,207,213\")),bytes32(stringToBytes32(\"24,36,38,142,128,93,78,4,140,137,60,201,6,36,39,152,63,191,211,186,25,5,156,80,159,160,154,19,206,1,130,172\")),bytes32(stringToBytes32(\"72,154,106,15,9,0,117,97,78,142,224,117,102,239,21,192,38,184,173,116,148,211,101,127,95,5,30,15,109,31,178,126\")),bytes32(stringToBytes32(\"247,100,60,239,213,184,139,192,117,196,173,40,158,100,144,79,101,217,22,169,200,107,33,245,226,198,210,87,195,72,143,79\")),bytes32(stringToBytes32(\"183,41,63,9,54,53,43,168,36,217,24,108,13,200,188,198,135,48,21,3,248,211,153,15,151,187,219,72,15,71,0,253\")),bytes32(stringToBytes32(\"99,8,154,222,7,70,59,231,9,203,179,60,139,216,186,84,21,240,34,49,183,62,146,127,45,21,25,203,81,155,92,9\")),bytes32(stringToBytes32(\"37,4,93,93,26,56,86,151,157,215,170,7,59,129,230,151,64,50,212,114,16,94,32,210,136,18,89,77,79,84,154,194\")),bytes32(stringToBytes32(\"183,49,144,61,217,72,66,22,222,35,46,255,165,55,186,191,225,194,82,216,249,196,158,12,228,48,225,158,243,96,110,0\")),bytes32(stringToBytes32(\"184,160,190,148,127,174,114,6,144,188,105,195,255,224,41,106,148,243,2,52,38,186,206,143,134,188,118,181,208,144,243,107\")),bytes32(stringToBytes32(\"185,209,27,111,80,21,231,180,69,194,242,127,104,197,163,125,108,56,168,229,63,199,75,109,154,192,150,100,48,150,107,231\")),bytes32(stringToBytes32(\"113,13,31,4,81,228,174,202,98,173,19,16,43,181,51,201,10,250,118,49,170,164,68,102,0,139,226,178,149,11,111,240\")),bytes32(stringToBytes32(\"92,13,91,216,55,3,216,55,159,226,211,218,186,228,19,251,66,139,115,108,173,25,46,152,121,156,112,168,226,14,4,45\")),bytes32(stringToBytes32(\"229,8,124,85,60,23,112,16,225,212,29,106,114,135,103,109,151,93,103,237,105,252,131,173,145,83,211,124,59,204,136,45\")),bytes32(stringToBytes32(\"109,11,102,30,4,100,28,161,129,192,208,28,77,127,51,166,0,26,26,170,157,111,142,223,86,88,79,114,172,244,146,143\")),bytes32(stringToBytes32(\"36,36,105,149,7,228,111,13,94,218,24,134,252,46,17,189,182,220,123,231,59,210,70,168,157,78,170,56,129,30,18,87\")),bytes32(stringToBytes32(\"73,129,186,52,9,69,198,110,140,22,108,92,224,150,20,138,30,15,248,205,24,43,220,238,106,181,135,136,223,48,134,66\")),bytes32(stringToBytes32(\"183,128,84,236,98,26,189,54,198,182,195,63,197,171,225,123,181,226,210,213,241,126,255,130,175,144,54,155,197,237,208,152\")),bytes32(stringToBytes32(\"142,55,164,78,64,47,236,156,163,107,196,99,231,198,194,208,121,140,227,199,44,72,29,92,81,139,103,198,169,239,139,217\")),bytes32(stringToBytes32(\"125,164,230,164,107,5,235,119,243,104,78,37,9,62,150,61,37,201,85,127,36,36,179,106,2,193,186,90,106,86,163,156\")),bytes32(stringToBytes32(\"246,190,190,48,241,156,72,173,187,92,239,186,42,159,174,192,149,84,171,28,110,130,158,101,146,72,63,109,236,40,218,154\")),bytes32(stringToBytes32(\"103,41,23,53,39,8,139,235,234,84,141,64,2,188,239,170,52,186,157,212,95,133,20,253,0,26,89,57,243,37,183,201\")),bytes32(stringToBytes32(\"218,22,217,132,195,221,7,183,119,127,91,154,132,134,161,37,73,227,82,66,72,85,60,186,238,24,203,126,216,166,215,111\")),bytes32(stringToBytes32(\"140,239,115,187,68,115,215,195,150,228,46,84,106,161,23,146,213,104,11,159,20,249,141,13,131,100,116,56,194,132,178,122\")),bytes32(stringToBytes32(\"89,120,59,26,189,108,239,60,106,241,193,28,205,139,90,124,113,122,218,34,223,62,117,156,102,48,216,120,128,71,147,39\")),bytes32(stringToBytes32(\"50,114,88,84,174,83,32,193,112,126,208,52,107,14,191,116,150,198,66,93,35,22,175,118,72,115,241,22,201,76,181,236\")),bytes32(stringToBytes32(\"47,200,70,167,1,110,104,168,6,240,245,103,3,121,168,159,233,187,253,93,64,44,36,205,119,27,206,35,22,168,213,149\")),bytes32(stringToBytes32(\"171,112,192,88,110,151,100,31,162,212,207,97,140,220,233,82,54,35,202,136,38,249,66,32,131,247,75,25,31,232,14,132\")),bytes32(stringToBytes32(\"181,241,42,126,177,195,123,181,47,187,55,44,31,166,248,66,94,71,98,157,165,134,235,151,162,226,138,212,94,51,135,194\")),bytes32(stringToBytes32(\"163,209,213,124,132,4,62,52,232,226,140,206,68,142,69,209,75,116,185,119,211,46,173,29,69,73,227,173,26,152,101,117\")),bytes32(stringToBytes32(\"223,181,240,247,18,249,97,36,183,169,244,99,148,202,235,163,207,250,152,191,112,19,221,90,70,224,155,6,124,221,35,10\")),bytes32(stringToBytes32(\"37,82,68,249,49,29,130,169,3,87,204,178,192,178,91,254,124,197,235,1,247,145,247,176,233,239,9,189,20,57,243,237\")),bytes32(stringToBytes32(\"146,0,128,85,231,141,98,190,110,241,1,4,87,166,162,206,177,150,101,214,233,42,128,150,86,118,140,80,253,205,110,28\")),bytes32(stringToBytes32(\"224,124,2,222,132,1,92,119,126,153,202,233,166,122,237,8,82,97,252,242,255,36,21,170,130,167,234,124,240,101,207,74\")),bytes32(stringToBytes32(\"127,25,67,120,17,171,205,174,79,5,28,6,36,132,82,182,216,9,122,158,123,215,229,242,195,165,217,130,12,216,138,153\")),bytes32(stringToBytes32(\"36,82,163,52,43,240,234,5,221,165,222,245,178,8,101,164,245,213,198,9,67,19,116,248,87,170,135,29,234,235,103,200\")),bytes32(stringToBytes32(\"11,23,124,160,219,252,229,4,203,196,23,126,38,187,239,82,188,252,49,107,91,7,30,219,106,23,91,223,5,205,168,101\")),bytes32(stringToBytes32(\"210,68,197,170,181,107,38,135,64,205,204,124,129,177,3,103,71,95,159,169,159,162,66,181,82,152,33,139,36,182,91,219\")),bytes32(stringToBytes32(\"73,8,220,138,160,208,71,116,31,85,236,139,209,121,91,155,113,38,69,191,3,225,182,187,81,102,154,224,244,32,67,65\")),bytes32(stringToBytes32(\"114,52,4,118,69,43,154,132,218,57,214,118,140,62,9,248,235,130,250,150,194,234,188,67,108,218,244,253,171,227,49,83\")),bytes32(stringToBytes32(\"113,210,6,234,250,2,68,127,169,70,141,238,247,117,140,173,152,192,161,162,111,231,174,240,63,1,170,43,250,200,208,74\")),bytes32(stringToBytes32(\"50,49,230,151,253,227,109,130,177,12,158,250,114,12,1,88,24,186,171,145,186,103,173,76,80,202,123,176,97,123,70,201\")),bytes32(stringToBytes32(\"77,206,101,168,118,158,139,109,207,127,153,92,158,145,16,31,252,107,90,26,137,53,37,216,2,85,229,157,60,33,138,55\")),bytes32(stringToBytes32(\"176,200,199,119,49,183,129,102,84,49,82,248,101,121,117,186,90,47,238,110,164,83,80,169,132,56,86,184,142,62,46,111\")),bytes32(stringToBytes32(\"106,75,177,110,99,125,132,162,114,150,182,204,8,135,69,55,13,17,227,160,20,47,208,171,35,33,220,248,114,169,247,138\")),bytes32(stringToBytes32(\"39,169,24,55,216,229,20,139,24,3,87,100,96,140,154,103,145,198,129,5,141,180,100,4,164,202,210,91,183,246,211,28\")),bytes32(stringToBytes32(\"81,168,154,184,71,167,82,26,48,166,129,110,11,133,79,9,177,193,133,249,247,56,98,104,110,75,160,185,81,59,2,18\")),bytes32(stringToBytes32(\"94,176,62,86,14,160,53,12,161,102,225,192,178,42,30,155,30,68,69,54,11,3,103,135,208,188,167,90,198,74,226,34\")),bytes32(stringToBytes32(\"24,96,108,96,103,180,241,85,124,74,8,236,112,196,165,200,121,88,148,40,123,65,45,16,110,69,195,104,38,89,166,13\")),bytes32(stringToBytes32(\"22,43,148,131,245,204,72,186,7,229,121,202,74,198,178,187,16,16,46,7,41,225,195,230,184,66,235,130,175,83,100,29\")),bytes32(stringToBytes32(\"39,62,134,169,35,46,216,201,251,234,84,4,17,171,134,10,74,117,84,36,17,219,205,120,108,131,206,89,1,232,189,178\")),bytes32(stringToBytes32(\"43,101,144,184,24,106,205,109,63,228,170,247,252,232,58,239,2,238,68,98,11,144,40,30,205,242,6,161,250,50,98,81\")),bytes32(stringToBytes32(\"108,26,12,83,53,209,242,129,226,223,177,100,75,127,56,38,244,198,159,28,154,221,18,127,131,213,202,28,127,139,133,163\")),bytes32(stringToBytes32(\"7,98,164,82,73,200,38,7,60,126,53,162,47,126,179,154,231,145,114,26,21,198,197,9,175,173,0,64,236,99,32,160\")),bytes32(stringToBytes32(\"90,240,250,215,237,227,47,141,0,211,161,137,206,217,111,225,22,230,236,34,81,190,243,78,19,178,52,155,88,78,50,173\")),bytes32(stringToBytes32(\"40,101,98,145,61,101,17,2,200,134,84,253,102,159,132,130,254,152,190,165,21,187,219,92,250,250,107,149,126,182,32,155\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.770ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[89,217,142,75,41,92,22,58,135,131,89,185,192,39,18,153,101,197,190,13,143,59,5,109,6,253,35,20,127,50,235,181]",
              "sol": "stringToBytes32(\"89,217,142,75,41,92,22,58,135,131,89,185,192,39,18,153,101,197,190,13,143,59,5,109,6,253,35,20,127,50,235,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[89,217,142,75,41,92,22,58,135,131,89,185,192,39,18,153,101,197,190,13,143,59,5,109,6,253,35,20,127,50,235,181]",
                "sol": "stringToBytes32(\"89,217,142,75,41,92,22,58,135,131,89,185,192,39,18,153,101,197,190,13,143,59,5,109,6,253,35,20,127,50,235,181\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.771ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.772ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247]",
              "sol": "stringToBytes32(\"77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247]",
                "sol": "stringToBytes32(\"77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247\")"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247]",
                "sol": "stringToBytes32(\"77,116,90,242,218,123,249,253,153,3,176,143,244,196,242,224,75,91,57,151,79,252,74,207,179,222,230,175,226,100,75,247\")"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "[222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86]",
              "sol": "stringToBytes32(\"222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86\")"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "[222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86]",
                "sol": "stringToBytes32(\"222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86\")"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86]",
                "sol": "stringToBytes32(\"222,164,80,32,211,178,40,45,173,158,86,35,91,161,56,230,15,115,12,200,164,55,132,127,189,204,115,7,227,4,236,86\")"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.776ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.777ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[217,161,12,221,245,105,40,201,119,216,170,81,18,218,183,91,0,172,99,41,90,248,13,43,108,74,94,123,93,230,25,173],[211,65,207,170,134,141,252,153,66,129,235,73,99,239,24,94,29,81,246,30,186,42,201,27,41,171,225,8,77,87,83,26],[26,98,79,145,242,148,73,180,132,73,248,252,121,55,147,139,84,139,81,94,166,99,200,236,57,132,89,87,45,247,125,167],[82,40,221,237,207,250,5,5,140,89,185,93,123,244,69,113,45,89,255,93,73,169,196,160,199,36,232,190,45,140,101,110],[252,128,35,169,43,177,41,181,252,221,229,27,164,102,71,211,242,222,152,102,125,176,89,116,89,8,185,43,103,185,172,179],[167,185,76,83,66,249,3,16,92,23,102,129,248,242,43,72,161,237,122,88,140,157,218,135,121,55,231,30,134,222,246,31]]",
              "sol": "[bytes32(stringToBytes32(\"217,161,12,221,245,105,40,201,119,216,170,81,18,218,183,91,0,172,99,41,90,248,13,43,108,74,94,123,93,230,25,173\")),bytes32(stringToBytes32(\"211,65,207,170,134,141,252,153,66,129,235,73,99,239,24,94,29,81,246,30,186,42,201,27,41,171,225,8,77,87,83,26\")),bytes32(stringToBytes32(\"26,98,79,145,242,148,73,180,132,73,248,252,121,55,147,139,84,139,81,94,166,99,200,236,57,132,89,87,45,247,125,167\")),bytes32(stringToBytes32(\"82,40,221,237,207,250,5,5,140,89,185,93,123,244,69,113,45,89,255,93,73,169,196,160,199,36,232,190,45,140,101,110\")),bytes32(stringToBytes32(\"252,128,35,169,43,177,41,181,252,221,229,27,164,102,71,211,242,222,152,102,125,176,89,116,89,8,185,43,103,185,172,179\")),bytes32(stringToBytes32(\"167,185,76,83,66,249,3,16,92,23,102,129,248,242,43,72,161,237,122,88,140,157,218,135,121,55,231,30,134,222,246,31\"))]"
            },
            {
              "js": "[[4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193],[50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172],[241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78],[76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174],[251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214],[107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97]]",
              "sol": "[bytes32(stringToBytes32(\"4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193\")),bytes32(stringToBytes32(\"50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172\")),bytes32(stringToBytes32(\"241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78\")),bytes32(stringToBytes32(\"76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174\")),bytes32(stringToBytes32(\"251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214\")),bytes32(stringToBytes32(\"107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97\"))]"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[217,161,12,221,245,105,40,201,119,216,170,81,18,218,183,91,0,172,99,41,90,248,13,43,108,74,94,123,93,230,25,173],[211,65,207,170,134,141,252,153,66,129,235,73,99,239,24,94,29,81,246,30,186,42,201,27,41,171,225,8,77,87,83,26],[26,98,79,145,242,148,73,180,132,73,248,252,121,55,147,139,84,139,81,94,166,99,200,236,57,132,89,87,45,247,125,167],[82,40,221,237,207,250,5,5,140,89,185,93,123,244,69,113,45,89,255,93,73,169,196,160,199,36,232,190,45,140,101,110],[252,128,35,169,43,177,41,181,252,221,229,27,164,102,71,211,242,222,152,102,125,176,89,116,89,8,185,43,103,185,172,179],[167,185,76,83,66,249,3,16,92,23,102,129,248,242,43,72,161,237,122,88,140,157,218,135,121,55,231,30,134,222,246,31]]",
                "sol": "[bytes32(stringToBytes32(\"217,161,12,221,245,105,40,201,119,216,170,81,18,218,183,91,0,172,99,41,90,248,13,43,108,74,94,123,93,230,25,173\")),bytes32(stringToBytes32(\"211,65,207,170,134,141,252,153,66,129,235,73,99,239,24,94,29,81,246,30,186,42,201,27,41,171,225,8,77,87,83,26\")),bytes32(stringToBytes32(\"26,98,79,145,242,148,73,180,132,73,248,252,121,55,147,139,84,139,81,94,166,99,200,236,57,132,89,87,45,247,125,167\")),bytes32(stringToBytes32(\"82,40,221,237,207,250,5,5,140,89,185,93,123,244,69,113,45,89,255,93,73,169,196,160,199,36,232,190,45,140,101,110\")),bytes32(stringToBytes32(\"252,128,35,169,43,177,41,181,252,221,229,27,164,102,71,211,242,222,152,102,125,176,89,116,89,8,185,43,103,185,172,179\")),bytes32(stringToBytes32(\"167,185,76,83,66,249,3,16,92,23,102,129,248,242,43,72,161,237,122,88,140,157,218,135,121,55,231,30,134,222,246,31\"))]"
              },
              {
                "js": "[[4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193],[50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172],[241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78],[76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174],[251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214],[107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97]]",
                "sol": "[bytes32(stringToBytes32(\"4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193\")),bytes32(stringToBytes32(\"50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172\")),bytes32(stringToBytes32(\"241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78\")),bytes32(stringToBytes32(\"76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174\")),bytes32(stringToBytes32(\"251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214\")),bytes32(stringToBytes32(\"107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[112,143,151,8,114,181,247,208,43,230,4,62,119,120,176,70,249,229,20,112,201,83,182,90,107,229,99,210,66,115,123,89],[255,142,137,239,193,234,234,62,94,135,23,131,56,122,156,98,1,240,101,138,8,43,30,164,63,164,107,197,132,191,2,189],[17,169,104,60,96,50,135,110,56,194,4,45,225,32,86,125,109,151,64,147,173,39,230,94,185,160,197,114,224,198,2,211],[12,132,115,27,243,200,156,20,179,195,100,98,163,148,210,128,88,165,198,177,215,197,135,98,92,116,65,49,107,187,139,30],[121,126,46,33,177,208,21,14,110,236,47,45,91,140,226,152,47,48,144,24,205,230,59,206,14,238,119,95,246,56,178,160],[183,59,144,81,200,219,80,96,164,114,62,76,229,195,203,116,111,247,227,209,181,107,154,188,177,252,36,222,92,173,179,164],[38,80,115,61,106,20,252,146,74,153,5,76,160,68,100,84,172,2,156,112,193,112,77,97,19,36,33,237,40,50,211,71]]",
                "sol": "[stringToBytes32(\"207,229,183,87,215,156,235,79,254,141,154,150,155,67,215,68,99,61,9,12,128,245,24,246,121,56,56,125,86,140,55,193\"),stringToBytes32(\"211,146,63,113,193,233,147,27,102,190,114,1,29,173,38,107,109,170,180,8,79,191,140,229,7,179,228,236,245,198,164,228\"),stringToBytes32(\"101,205,83,160,49,133,35,97,168,110,10,25,252,234,111,176,34,119,150,175,40,68,11,250,53,56,185,48,71,164,253,186\"),stringToBytes32(\"155,213,212,234,179,33,52,228,2,107,237,202,201,22,97,127,175,206,160,46,67,232,117,187,107,179,244,238,245,38,94,184\"),stringToBytes32(\"170,200,195,111,173,139,122,176,16,10,95,229,173,195,4,244,236,51,198,237,92,230,153,106,95,60,236,89,42,245,47,30\"),stringToBytes32(\"79,17,172,193,184,76,148,76,121,83,248,153,77,242,210,41,76,7,109,251,246,69,96,203,193,143,8,58,203,50,77,14\"),stringToBytes32(\"173,223,109,246,152,198,224,120,25,149,229,167,39,173,144,192,18,141,235,110,238,33,170,251,203,92,120,235,53,21,14,33\")]"
              },
              {
                "js": "[[4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193],[50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172],[241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78],[76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174],[251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214],[107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97]]",
                "sol": "[bytes32(stringToBytes32(\"4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193\")),bytes32(stringToBytes32(\"50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172\")),bytes32(stringToBytes32(\"241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78\")),bytes32(stringToBytes32(\"76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174\")),bytes32(stringToBytes32(\"251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214\")),bytes32(stringToBytes32(\"107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193],[50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172],[241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78],[76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174],[251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214],[107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97]]",
                "sol": "[bytes32(stringToBytes32(\"4,247,197,225,65,195,44,226,203,251,193,148,201,161,94,197,46,167,248,247,100,12,170,28,170,42,78,125,206,195,252,193\")),bytes32(stringToBytes32(\"50,220,232,126,237,57,127,20,108,205,228,197,167,96,28,14,119,79,22,159,43,187,179,25,209,239,32,232,104,51,148,172\")),bytes32(stringToBytes32(\"241,15,105,95,39,107,111,192,232,65,110,171,47,15,159,84,210,140,0,171,87,1,25,123,49,229,132,179,93,46,181,78\")),bytes32(stringToBytes32(\"76,229,169,118,2,230,152,3,235,86,163,167,120,48,156,27,223,21,244,11,65,58,194,77,212,173,220,56,41,40,147,174\")),bytes32(stringToBytes32(\"251,83,53,200,238,126,206,50,152,22,171,180,253,108,164,233,163,138,34,177,66,215,38,67,208,14,181,109,162,27,106,214\")),bytes32(stringToBytes32(\"107,112,225,133,101,237,145,218,177,41,119,191,188,104,111,254,238,51,243,116,164,225,203,247,165,181,158,52,212,61,247,97\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.788ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"mqkobs\"",
              "sol": "\"mqkobs\""
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"mqkobs\"",
                "sol": "\"mqkobs\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.794ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[3],accounts[3],accounts[5],accounts[7],accounts[0],accounts[8],accounts[4],accounts[4],accounts[6],accounts[2],accounts[1],accounts[4],accounts[0],accounts[4],accounts[0],accounts[5],accounts[8],accounts[8],accounts[3],accounts[4],accounts[0],accounts[2],accounts[8],accounts[8],accounts[6],accounts[1],accounts[6],accounts[3],accounts[1],accounts[1],accounts[4],accounts[4],accounts[7],accounts[1],accounts[6],accounts[7],accounts[2],accounts[4],accounts[1],accounts[1],accounts[2],accounts[1],accounts[5],accounts[1],accounts[7],accounts[8],accounts[4],accounts[6],accounts[2],accounts[5],accounts[4],accounts[0],accounts[3],accounts[1],accounts[9],accounts[1],accounts[1],accounts[0],accounts[1],accounts[1],accounts[3],accounts[6],accounts[3],accounts[2],accounts[7],accounts[3],accounts[6],accounts[7],accounts[3],accounts[4],accounts[0],accounts[1],accounts[4],accounts[8],accounts[9],accounts[1],accounts[0],accounts[0],accounts[5],accounts[9],accounts[0],accounts[5],accounts[8],accounts[3],accounts[4],accounts[6],accounts[0],accounts[9],accounts[4],accounts[3],accounts[7],accounts[4],accounts[2],accounts[1],accounts[1],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1336,2014223715,66,1532892063,2014223714,27,0,2014223715,10001,1532892062,10001,6,1532892064,66,10001,28,1532892062,66,256,29,10001,5,27,29,1532892064,255,66,28,97,10001,96,254,97,66,6,1337,97,5,26,10000,95,1336,1338,1337,28,10000,254,97,27,1336,2014223715,1532892064,10001,27,6,1532892064,64,6,27,0,5,1532892062,28,10000,256,1338,64,97,1,10000,64,1336,2014223716,9999,2014223716,4,2014223716,95,4,96,10000,26,29,28,6,28,0,255,0,2014223714,64,1337,1336,65,5,28,28]",
              "sol": "[uint256(1336),uint256(2014223715),uint256(66),uint256(1532892063),uint256(2014223714),uint256(27),uint256(0),uint256(2014223715),uint256(10001),uint256(1532892062),uint256(10001),uint256(6),uint256(1532892064),uint256(66),uint256(10001),uint256(28),uint256(1532892062),uint256(66),uint256(256),uint256(29),uint256(10001),uint256(5),uint256(27),uint256(29),uint256(1532892064),uint256(255),uint256(66),uint256(28),uint256(97),uint256(10001),uint256(96),uint256(254),uint256(97),uint256(66),uint256(6),uint256(1337),uint256(97),uint256(5),uint256(26),uint256(10000),uint256(95),uint256(1336),uint256(1338),uint256(1337),uint256(28),uint256(10000),uint256(254),uint256(97),uint256(27),uint256(1336),uint256(2014223715),uint256(1532892064),uint256(10001),uint256(27),uint256(6),uint256(1532892064),uint256(64),uint256(6),uint256(27),uint256(0),uint256(5),uint256(1532892062),uint256(28),uint256(10000),uint256(256),uint256(1338),uint256(64),uint256(97),uint256(1),uint256(10000),uint256(64),uint256(1336),uint256(2014223716),uint256(9999),uint256(2014223716),uint256(4),uint256(2014223716),uint256(95),uint256(4),uint256(96),uint256(10000),uint256(26),uint256(29),uint256(28),uint256(6),uint256(28),uint256(0),uint256(255),uint256(0),uint256(2014223714),uint256(64),uint256(1337),uint256(1336),uint256(65),uint256(5),uint256(28),uint256(28)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[3],accounts[3],accounts[5],accounts[7],accounts[0],accounts[8],accounts[4],accounts[4],accounts[6],accounts[2],accounts[1],accounts[4],accounts[0],accounts[4],accounts[0],accounts[5],accounts[8],accounts[8],accounts[3],accounts[4],accounts[0],accounts[2],accounts[8],accounts[8],accounts[6],accounts[1],accounts[6],accounts[3],accounts[1],accounts[1],accounts[4],accounts[4],accounts[7],accounts[1],accounts[6],accounts[7],accounts[2],accounts[4],accounts[1],accounts[1],accounts[2],accounts[1],accounts[5],accounts[1],accounts[7],accounts[8],accounts[4],accounts[6],accounts[2],accounts[5],accounts[4],accounts[0],accounts[3],accounts[1],accounts[9],accounts[1],accounts[1],accounts[0],accounts[1],accounts[1],accounts[3],accounts[6],accounts[3],accounts[2],accounts[7],accounts[3],accounts[6],accounts[7],accounts[3],accounts[4],accounts[0],accounts[1],accounts[4],accounts[8],accounts[9],accounts[1],accounts[0],accounts[0],accounts[5],accounts[9],accounts[0],accounts[5],accounts[8],accounts[3],accounts[4],accounts[6],accounts[0],accounts[9],accounts[4],accounts[3],accounts[7],accounts[4],accounts[2],accounts[1],accounts[1],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1336,2014223715,66,1532892063,2014223714,27,0,2014223715,10001,1532892062,10001,6,1532892064,66,10001,28,1532892062,66,256,29,10001,5,27,29,1532892064,255,66,28,97,10001,96,254,97,66,6,1337,97,5,26,10000,95,1336,1338,1337,28,10000,254,97,27,1336,2014223715,1532892064,10001,27,6,1532892064,64,6,27,0,5,1532892062,28,10000,256,1338,64,97,1,10000,64,1336,2014223716,9999,2014223716,4,2014223716,95,4,96,10000,26,29,28,6,28,0,255,0,2014223714,64,1337,1336,65,5,28,28]",
                "sol": "[uint256(1336),uint256(2014223715),uint256(66),uint256(1532892063),uint256(2014223714),uint256(27),uint256(0),uint256(2014223715),uint256(10001),uint256(1532892062),uint256(10001),uint256(6),uint256(1532892064),uint256(66),uint256(10001),uint256(28),uint256(1532892062),uint256(66),uint256(256),uint256(29),uint256(10001),uint256(5),uint256(27),uint256(29),uint256(1532892064),uint256(255),uint256(66),uint256(28),uint256(97),uint256(10001),uint256(96),uint256(254),uint256(97),uint256(66),uint256(6),uint256(1337),uint256(97),uint256(5),uint256(26),uint256(10000),uint256(95),uint256(1336),uint256(1338),uint256(1337),uint256(28),uint256(10000),uint256(254),uint256(97),uint256(27),uint256(1336),uint256(2014223715),uint256(1532892064),uint256(10001),uint256(27),uint256(6),uint256(1532892064),uint256(64),uint256(6),uint256(27),uint256(0),uint256(5),uint256(1532892062),uint256(28),uint256(10000),uint256(256),uint256(1338),uint256(64),uint256(97),uint256(1),uint256(10000),uint256(64),uint256(1336),uint256(2014223716),uint256(9999),uint256(2014223716),uint256(4),uint256(2014223716),uint256(95),uint256(4),uint256(96),uint256(10000),uint256(26),uint256(29),uint256(28),uint256(6),uint256(28),uint256(0),uint256(255),uint256(0),uint256(2014223714),uint256(64),uint256(1337),uint256(1336),uint256(65),uint256(5),uint256(28),uint256(28)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[8],accounts[4],accounts[9],accounts[6],accounts[5],accounts[2],accounts[4],accounts[2],accounts[7],accounts[0],accounts[7],accounts[1],accounts[0],accounts[8],accounts[3],accounts[3],accounts[3],accounts[9],accounts[4],accounts[1],accounts[3],accounts[0],accounts[0],accounts[9],accounts[8],accounts[1],accounts[6],accounts[6],accounts[8],accounts[1],accounts[4],accounts[2],accounts[3],accounts[8],accounts[6],accounts[6],accounts[4],accounts[7],accounts[5],accounts[7],accounts[9],accounts[6],accounts[3],accounts[7],accounts[9],accounts[1],accounts[1],accounts[5],accounts[6],accounts[1],accounts[0],accounts[2],accounts[6],accounts[4],accounts[9],accounts[9],accounts[3],accounts[6],accounts[9],accounts[6],accounts[2],accounts[2],accounts[9],accounts[2],accounts[6],accounts[2],accounts[3],accounts[2],accounts[1],accounts[4],accounts[9],accounts[6],accounts[8],accounts[1],accounts[5],accounts[5],accounts[9],accounts[9],accounts[7],accounts[9],accounts[0],accounts[9],accounts[1],accounts[8],accounts[5],accounts[5],accounts[5],accounts[1],accounts[4],accounts[1],accounts[6],accounts[6],accounts[2],accounts[6],accounts[5],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1336,2014223715,66,1532892063,2014223714,27,0,2014223715,10001,1532892062,10001,6,1532892064,66,10001,28,1532892062,66,256,29,10001,5,27,29,1532892064,255,66,28,97,10001,96,254,97,66,6,1337,97,5,26,10000,95,1336,1338,1337,28,10000,254,97,27,1336,2014223715,1532892064,10001,27,6,1532892064,64,6,27,0,5,1532892062,28,10000,256,1338,64,97,1,10000,64,1336,2014223716,9999,2014223716,4,2014223716,95,4,96,10000,26,29,28,6,28,0,255,0,2014223714,64,1337,1336,65,5,28,28]",
                "sol": "[uint256(1336),uint256(2014223715),uint256(66),uint256(1532892063),uint256(2014223714),uint256(27),uint256(0),uint256(2014223715),uint256(10001),uint256(1532892062),uint256(10001),uint256(6),uint256(1532892064),uint256(66),uint256(10001),uint256(28),uint256(1532892062),uint256(66),uint256(256),uint256(29),uint256(10001),uint256(5),uint256(27),uint256(29),uint256(1532892064),uint256(255),uint256(66),uint256(28),uint256(97),uint256(10001),uint256(96),uint256(254),uint256(97),uint256(66),uint256(6),uint256(1337),uint256(97),uint256(5),uint256(26),uint256(10000),uint256(95),uint256(1336),uint256(1338),uint256(1337),uint256(28),uint256(10000),uint256(254),uint256(97),uint256(27),uint256(1336),uint256(2014223715),uint256(1532892064),uint256(10001),uint256(27),uint256(6),uint256(1532892064),uint256(64),uint256(6),uint256(27),uint256(0),uint256(5),uint256(1532892062),uint256(28),uint256(10000),uint256(256),uint256(1338),uint256(64),uint256(97),uint256(1),uint256(10000),uint256(64),uint256(1336),uint256(2014223716),uint256(9999),uint256(2014223716),uint256(4),uint256(2014223716),uint256(95),uint256(4),uint256(96),uint256(10000),uint256(26),uint256(29),uint256(28),uint256(6),uint256(28),uint256(0),uint256(255),uint256(0),uint256(2014223714),uint256(64),uint256(1337),uint256(1336),uint256(65),uint256(5),uint256(28),uint256(28)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1336,2014223715,66,1532892063,2014223714,27,0,2014223715,10001,1532892062,10001,6,1532892064,66,10001,28,1532892062,66,256,29,10001,5,27,29,1532892064,255,66,28,97,10001,96,254,97,66,6,1337,97,5,26,10000,95,1336,1338,1337,28,10000,254,97,27,1336,2014223715,1532892064,10001,27,6,1532892064,64,6,27,0,5,1532892062,28,10000,256,1338,64,97,1,10000,64,1336,2014223716,9999,2014223716,4,2014223716,95,4,96,10000,26,29,28,6,28,0,255,0,2014223714,64,1337,1336,65,5,28,28]",
                "sol": "[uint256(1336),uint256(2014223715),uint256(66),uint256(1532892063),uint256(2014223714),uint256(27),uint256(0),uint256(2014223715),uint256(10001),uint256(1532892062),uint256(10001),uint256(6),uint256(1532892064),uint256(66),uint256(10001),uint256(28),uint256(1532892062),uint256(66),uint256(256),uint256(29),uint256(10001),uint256(5),uint256(27),uint256(29),uint256(1532892064),uint256(255),uint256(66),uint256(28),uint256(97),uint256(10001),uint256(96),uint256(254),uint256(97),uint256(66),uint256(6),uint256(1337),uint256(97),uint256(5),uint256(26),uint256(10000),uint256(95),uint256(1336),uint256(1338),uint256(1337),uint256(28),uint256(10000),uint256(254),uint256(97),uint256(27),uint256(1336),uint256(2014223715),uint256(1532892064),uint256(10001),uint256(27),uint256(6),uint256(1532892064),uint256(64),uint256(6),uint256(27),uint256(0),uint256(5),uint256(1532892062),uint256(28),uint256(10000),uint256(256),uint256(1338),uint256(64),uint256(97),uint256(1),uint256(10000),uint256(64),uint256(1336),uint256(2014223716),uint256(9999),uint256(2014223716),uint256(4),uint256(2014223716),uint256(95),uint256(4),uint256(96),uint256(10000),uint256(26),uint256(29),uint256(28),uint256(6),uint256(28),uint256(0),uint256(255),uint256(0),uint256(2014223714),uint256(64),uint256(1337),uint256(1336),uint256(65),uint256(5),uint256(28),uint256(28)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.803ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.804ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[4],accounts[5],accounts[3],accounts[3],accounts[8],accounts[1],accounts[3],accounts[5],accounts[6],accounts[2],accounts[4],accounts[8],accounts[5],accounts[3],accounts[0],accounts[6],accounts[6],accounts[2],accounts[5],accounts[6],accounts[3],accounts[0],accounts[1],accounts[6],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[4],accounts[5],accounts[3],accounts[3],accounts[8],accounts[1],accounts[3],accounts[5],accounts[6],accounts[2],accounts[4],accounts[8],accounts[5],accounts[3],accounts[0],accounts[6],accounts[6],accounts[2],accounts[5],accounts[6],accounts[3],accounts[0],accounts[1],accounts[6],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[7],accounts[4],accounts[5],accounts[3],accounts[3],accounts[8],accounts[1],accounts[3],accounts[5],accounts[6],accounts[2],accounts[4],accounts[8],accounts[5],accounts[3],accounts[0],accounts[6],accounts[6],accounts[2],accounts[5],accounts[6],accounts[3],accounts[0],accounts[1],accounts[6],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.810ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.811ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
              "sol": "block.timestamp+833"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+833",
                "sol": "block.timestamp+833"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.815ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.820ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.824ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.828ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.833ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.836ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.837ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.838ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[4],accounts[5],accounts[3],accounts[0],accounts[1],accounts[0],accounts[5],accounts[0],accounts[0],accounts[0],accounts[5],accounts[3],accounts[6],accounts[6],accounts[4],accounts[0],accounts[2],accounts[9],accounts[4],accounts[7],accounts[8],accounts[5],accounts[0],accounts[9],accounts[1],accounts[0],accounts[2],accounts[6],accounts[7],accounts[6],accounts[9],accounts[4],accounts[8],accounts[0],accounts[5],accounts[2],accounts[9],accounts[3],accounts[8],accounts[2],accounts[1],accounts[9],accounts[9],accounts[8],accounts[7],accounts[7],accounts[5],accounts[8],accounts[3],accounts[8],accounts[8],accounts[3],accounts[5],accounts[4],accounts[9],accounts[0],accounts[9],accounts[6],accounts[5],accounts[9],accounts[3],accounts[4],accounts[9]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[4],accounts[5],accounts[3],accounts[0],accounts[1],accounts[0],accounts[5],accounts[0],accounts[0],accounts[0],accounts[5],accounts[3],accounts[6],accounts[6],accounts[4],accounts[0],accounts[2],accounts[9],accounts[4],accounts[7],accounts[8],accounts[5],accounts[0],accounts[9],accounts[1],accounts[0],accounts[2],accounts[6],accounts[7],accounts[6],accounts[9],accounts[4],accounts[8],accounts[0],accounts[5],accounts[2],accounts[9],accounts[3],accounts[8],accounts[2],accounts[1],accounts[9],accounts[9],accounts[8],accounts[7],accounts[7],accounts[5],accounts[8],accounts[3],accounts[8],accounts[8],accounts[3],accounts[5],accounts[4],accounts[9],accounts[0],accounts[9],accounts[6],accounts[5],accounts[9],accounts[3],accounts[4],accounts[9]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[1],accounts[4],accounts[5],accounts[3],accounts[0],accounts[1],accounts[0],accounts[5],accounts[0],accounts[0],accounts[0],accounts[5],accounts[3],accounts[6],accounts[6],accounts[4],accounts[0],accounts[2],accounts[9],accounts[4],accounts[7],accounts[8],accounts[5],accounts[0],accounts[9],accounts[1],accounts[0],accounts[2],accounts[6],accounts[7],accounts[6],accounts[9],accounts[4],accounts[8],accounts[0],accounts[5],accounts[2],accounts[9],accounts[3],accounts[8],accounts[2],accounts[1],accounts[9],accounts[9],accounts[8],accounts[7],accounts[7],accounts[5],accounts[8],accounts[3],accounts[8],accounts[8],accounts[3],accounts[5],accounts[4],accounts[9],accounts[0],accounts[9],accounts[6],accounts[5],accounts[9],accounts[3],accounts[4],accounts[9]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.840ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:48:19.841ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:48:19.842ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}