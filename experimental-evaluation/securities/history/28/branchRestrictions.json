,{
  "2020-11-13T00:08:45.661ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:08:51.964ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:08:58.208ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:04.503ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:11.069ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:17.706ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:25.739ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:33.990ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:41.999ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:48.761ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:09:55.343ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+667",
              "sol": "block.timestamp+667"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+667",
                "sol": "block.timestamp+667"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+667",
                "sol": "block.timestamp+667"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+667",
                "sol": "block.timestamp+667"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.071ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.073ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.075ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.079ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[4],accounts[0],accounts[8]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1337,97,5]",
              "sol": "[uint256(1337),uint256(97),uint256(5)]"
            },
            {
              "js": "[0,2014223714,95]",
              "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
            },
            {
              "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
              "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[4],accounts[0],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1337,97,5]",
                "sol": "[uint256(1337),uint256(97),uint256(5)]"
              },
              {
                "js": "[0,2014223714,95]",
                "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
              },
              {
                "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
                "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1337,97,5]",
                "sol": "[uint256(1337),uint256(97),uint256(5)]"
              },
              {
                "js": "[0,2014223714,95]",
                "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
              },
              {
                "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
                "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[1],accounts[0],accounts[6]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1337,97,5]",
                "sol": "[uint256(1337),uint256(97),uint256(5)]"
              },
              {
                "js": "[0,2014223714,95]",
                "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
              },
              {
                "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
                "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[2],accounts[3],accounts[2],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1337,97,5]",
                "sol": "[uint256(1337),uint256(97),uint256(5)]"
              },
              {
                "js": "[0,2014223714,95]",
                "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
              },
              {
                "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
                "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[8],accounts[9],accounts[6]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1337,97,5]",
                "sol": "[uint256(1337),uint256(97),uint256(5)]"
              },
              {
                "js": "[0,2014223714,95]",
                "sol": "[uint256(0),uint256(2014223714),uint256(95)]"
              },
              {
                "js": "[[243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204],[61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85],[195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183]]",
                "sol": "[bytes32(stringToBytes32(\"243,152,185,137,207,229,138,36,149,156,30,218,121,184,242,208,66,47,182,223,229,139,218,252,179,187,210,3,160,52,106,204\")),bytes32(stringToBytes32(\"61,10,47,141,111,215,1,120,91,195,78,246,91,133,231,178,64,126,157,62,251,75,205,35,194,167,165,87,100,208,179,85\")),bytes32(stringToBytes32(\"195,115,66,19,20,28,127,108,208,113,125,119,93,56,147,236,106,140,130,47,202,92,137,236,115,109,47,45,164,2,255,183\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.084ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[186,63,192,242,96,184,84,136,217,9,187,36,133,121,125,210,148,72,192,110,142,67,208,95,196,245,29,212,67,228,106,216]",
              "sol": "stringToBytes32(\"186,63,192,242,96,184,84,136,217,9,187,36,133,121,125,210,148,72,192,110,142,67,208,95,196,245,29,212,67,228,106,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[186,63,192,242,96,184,84,136,217,9,187,36,133,121,125,210,148,72,192,110,142,67,208,95,196,245,29,212,67,228,106,216]",
                "sol": "stringToBytes32(\"186,63,192,242,96,184,84,136,217,9,187,36,133,121,125,210,148,72,192,110,142,67,208,95,196,245,29,212,67,228,106,216\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.085ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.086ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216]",
              "sol": "stringToBytes32(\"153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216]",
                "sol": "stringToBytes32(\"153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216\")"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216]",
                "sol": "stringToBytes32(\"153,65,189,168,13,237,156,104,92,57,15,238,52,196,11,103,164,47,74,222,164,121,166,176,179,248,218,133,224,50,236,216\")"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "[25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225]",
              "sol": "stringToBytes32(\"25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225\")"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "[25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225]",
                "sol": "stringToBytes32(\"25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225]",
                "sol": "stringToBytes32(\"25,125,159,154,252,37,228,215,18,5,90,189,253,3,172,211,173,231,210,189,137,88,14,169,131,15,185,249,2,106,177,225\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.089ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.089ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[189,63,245,243,141,6,196,249,120,206,36,58,56,234,225,209,19,61,57,44,181,96,49,22,80,62,125,151,106,52,254,10],[111,161,225,220,167,55,76,85,158,216,161,27,57,220,45,181,244,25,226,90,59,17,247,68,100,172,55,209,24,26,46,162],[60,199,35,114,76,35,107,38,35,105,36,97,67,60,82,233,146,9,16,227,109,169,160,42,19,52,82,253,160,218,183,42],[39,142,75,172,10,131,52,5,8,20,154,102,95,171,212,102,6,153,0,118,31,208,109,253,212,188,143,206,35,146,179,221],[221,101,176,202,68,108,99,225,50,5,108,2,62,52,75,160,106,165,180,136,200,163,197,156,134,12,21,9,225,57,176,111],[85,95,85,207,72,94,182,160,191,93,222,151,240,250,143,29,172,2,176,224,48,175,85,183,30,212,79,7,123,234,140,166],[7,2,43,47,107,248,62,60,147,199,226,87,121,207,43,243,40,111,187,194,16,78,48,59,114,57,234,135,176,36,201,68],[61,145,15,31,237,134,192,67,4,11,28,35,2,71,184,174,75,68,199,138,237,234,70,74,244,155,70,193,21,62,19,187],[12,197,47,250,73,242,168,170,123,69,171,106,42,1,94,170,222,187,64,158,229,157,158,114,28,224,252,1,206,122,239,53],[117,111,241,132,245,46,137,250,171,215,240,109,152,35,241,238,79,18,196,107,46,34,88,9,1,88,175,102,242,196,106,93],[18,50,22,94,254,222,229,141,145,65,127,220,154,17,9,194,6,33,255,251,52,204,131,93,60,223,221,217,7,7,3,145],[228,203,116,103,213,83,43,200,79,152,107,237,60,255,87,32,179,27,248,161,250,83,31,160,177,39,6,130,99,203,36,111],[242,114,138,87,56,186,181,98,57,151,215,84,18,0,68,182,126,60,183,215,222,135,226,46,30,134,180,123,175,117,88,93],[120,34,61,195,179,132,218,191,85,233,22,120,82,13,158,50,11,143,62,28,230,25,162,150,131,117,169,108,71,106,161,113],[50,202,160,37,160,119,157,114,16,227,164,4,80,42,197,173,183,162,57,233,241,40,53,125,208,62,141,75,30,231,246,144],[102,122,222,4,180,11,187,254,150,94,122,190,190,250,95,245,48,242,217,215,127,17,10,253,92,247,123,116,44,129,159,235],[22,251,232,100,156,8,150,71,158,219,87,90,103,146,28,189,67,198,134,114,41,38,169,218,54,198,45,218,195,120,107,112],[160,209,198,72,35,72,141,223,45,198,63,248,79,76,67,226,114,142,141,215,236,184,2,225,188,99,21,241,142,138,214,134],[65,191,217,127,28,56,21,253,41,238,29,64,236,198,252,195,182,164,4,4,155,223,181,5,215,174,233,190,81,242,123,61],[85,228,138,30,194,82,203,23,15,99,120,178,213,105,45,222,12,241,63,94,209,82,246,242,156,12,228,148,16,22,80,220],[238,189,69,42,52,235,245,19,6,190,155,207,145,100,34,239,143,154,101,122,60,83,101,183,92,43,1,117,200,59,116,18],[54,163,112,112,10,90,182,96,71,75,114,35,21,157,25,210,51,36,230,59,20,229,241,169,204,51,200,38,208,1,38,52],[108,108,131,190,241,122,207,0,1,189,249,241,162,227,223,102,39,147,23,75,168,217,253,151,164,63,220,232,64,104,202,230],[182,11,8,232,172,53,117,167,34,252,164,170,89,173,191,50,65,248,12,211,94,71,241,137,116,95,85,25,167,107,228,19],[130,28,40,210,25,240,13,73,91,208,155,16,30,119,150,250,5,236,160,102,254,46,158,173,81,140,148,36,154,135,53,106],[191,103,238,57,206,72,40,148,188,213,30,249,33,165,161,37,2,8,159,62,48,239,238,137,114,158,78,66,150,13,50,126],[194,16,170,221,38,231,116,136,100,45,9,177,248,109,163,226,41,108,224,52,96,220,111,57,158,190,173,215,146,91,88,231],[186,132,208,58,90,125,102,131,152,201,104,170,168,91,151,78,162,220,190,170,226,78,146,168,84,105,231,181,191,85,109,84],[99,21,120,166,85,6,2,167,44,53,207,10,241,173,97,164,254,215,73,197,97,164,177,217,5,41,10,163,59,218,169,204],[63,30,91,28,132,75,22,150,180,25,24,216,206,74,223,60,73,135,35,203,75,4,190,185,177,174,253,245,104,37,138,200],[215,1,56,37,44,231,239,145,200,29,194,5,56,54,22,104,30,92,99,217,99,155,191,201,124,29,138,188,229,192,46,63],[20,98,250,140,10,56,224,31,78,34,130,15,104,44,150,185,97,69,175,158,19,175,219,69,236,129,118,90,75,17,216,67],[80,12,103,155,151,225,166,110,8,247,50,235,146,173,33,133,169,74,118,242,79,143,55,171,108,233,39,220,211,216,140,129],[223,172,215,106,213,35,63,202,42,252,209,189,130,93,171,126,192,101,78,71,53,236,248,134,53,46,187,154,195,170,8,106],[152,145,94,200,34,226,204,225,102,6,199,207,218,117,66,92,198,94,218,236,220,162,201,65,86,40,167,59,200,113,4,19],[12,250,192,185,103,190,54,9,30,187,211,117,6,7,16,232,70,46,130,173,185,170,109,96,105,65,149,129,36,76,214,253],[30,31,134,76,28,27,243,23,43,95,80,62,206,53,29,180,222,215,178,98,209,253,173,49,252,84,39,213,106,216,136,216],[92,103,17,159,20,223,149,212,98,5,132,118,212,229,29,188,95,28,94,150,142,68,60,72,150,69,231,131,2,92,216,1],[198,177,210,188,20,254,40,149,253,46,120,174,64,61,48,213,243,58,17,217,249,65,70,192,136,11,184,12,157,157,46,251],[235,19,139,36,232,156,164,8,202,186,16,40,115,205,132,150,26,62,163,21,137,237,204,168,251,19,125,23,146,251,52,176],[53,209,169,57,41,136,200,205,6,75,71,35,178,33,93,155,227,229,123,147,194,200,243,71,202,49,251,44,223,182,57,81],[166,123,237,104,33,129,14,144,59,150,80,10,201,247,56,219,93,149,106,152,36,169,255,97,20,4,40,220,113,216,56,68],[11,79,185,150,132,164,85,143,118,100,18,222,3,9,189,93,118,53,114,113,97,66,95,184,122,124,59,253,149,26,216,134],[60,169,51,56,119,53,60,23,136,30,21,28,71,0,228,178,116,35,87,32,93,34,61,0,153,200,29,121,50,61,40,21],[70,239,20,243,138,76,99,48,81,73,180,91,18,67,66,28,131,126,243,6,198,60,126,48,195,40,232,114,206,238,90,151],[255,239,115,72,243,140,115,211,92,195,182,93,9,89,251,53,194,150,100,114,112,182,163,199,108,19,251,26,45,232,255,150],[119,124,104,111,126,211,27,1,48,29,12,139,224,16,42,144,220,176,204,199,212,110,243,34,42,243,66,83,112,29,75,93],[25,171,136,28,236,235,123,17,33,170,224,109,179,64,57,178,121,246,104,0,52,173,252,240,63,149,226,121,95,130,73,55],[16,167,142,1,133,69,43,169,57,15,154,16,102,102,82,73,103,167,7,33,119,98,244,32,20,36,240,206,117,123,238,67],[6,173,0,35,121,217,107,148,191,109,67,11,129,85,16,65,190,163,100,188,224,149,49,137,116,54,34,204,36,230,51,133],[5,212,229,137,64,107,67,136,99,146,58,84,241,19,220,60,62,230,155,214,95,233,168,202,50,210,36,146,66,206,15,143],[2,143,31,223,80,148,36,71,24,11,188,255,248,143,160,231,123,53,225,109,56,160,130,255,252,90,112,32,195,56,225,7],[183,132,17,57,53,239,67,197,7,6,73,32,184,116,193,168,132,124,171,46,65,254,128,255,216,205,134,36,3,206,36,161],[59,63,141,158,41,250,3,144,160,4,66,25,207,186,191,63,139,117,183,166,161,250,145,247,68,14,217,90,131,201,248,133],[126,79,140,87,50,33,2,90,238,122,3,68,12,93,137,159,149,85,228,127,102,239,130,106,83,54,84,204,10,247,129,247],[233,72,114,51,39,182,153,77,69,140,81,82,19,48,197,100,77,228,103,183,3,229,185,49,23,129,82,104,26,64,222,116],[33,183,127,37,127,224,58,62,10,110,226,190,250,20,255,129,167,216,56,103,146,7,189,126,190,161,192,126,44,192,80,51],[51,60,34,238,169,142,97,157,249,111,202,121,75,135,198,15,49,11,31,236,105,40,41,26,242,184,100,16,78,184,27,246],[59,222,128,236,2,47,8,230,234,32,192,63,40,155,107,189,206,27,216,92,136,101,131,83,178,147,219,129,196,30,1,67],[100,116,93,17,20,231,146,55,243,20,68,90,131,91,103,202,71,74,244,197,225,56,77,29,182,0,59,199,37,62,243,250],[90,139,92,171,37,194,32,227,159,246,118,93,83,251,52,66,42,69,237,37,53,124,181,247,216,185,142,178,131,125,118,169],[62,111,81,14,56,171,162,3,182,45,206,181,17,201,28,40,145,107,138,145,123,221,213,29,133,113,174,172,241,95,37,237],[129,190,249,171,214,47,32,89,157,132,247,71,173,140,145,170,122,57,86,88,210,176,102,254,199,142,1,73,28,42,233,164],[123,197,178,93,240,224,58,110,140,230,23,155,126,229,43,138,93,192,82,142,190,157,119,197,102,132,104,153,161,189,124,118],[176,60,121,221,237,176,188,115,245,182,61,97,159,10,11,255,253,133,137,171,67,254,195,119,164,233,112,114,25,153,5,115],[203,16,189,21,140,61,204,191,240,15,13,219,165,206,72,252,128,207,254,229,228,146,133,204,101,114,185,215,14,176,195,224],[184,25,234,179,200,41,237,45,6,133,184,156,67,233,178,32,120,162,107,177,107,62,102,34,86,50,237,166,145,125,48,216],[103,67,234,46,150,180,112,229,161,62,219,85,65,36,134,164,116,56,104,14,25,222,26,99,204,53,19,103,247,95,104,128],[225,173,105,231,102,208,66,50,220,209,25,245,200,235,200,83,47,153,111,108,36,126,123,86,186,73,225,151,163,82,118,59],[200,163,55,129,96,11,140,248,30,189,183,186,46,234,163,130,50,199,190,45,64,64,203,110,6,129,141,110,116,244,64,184],[255,177,194,250,8,34,153,221,11,201,45,151,86,193,82,231,103,207,169,222,13,174,127,64,139,109,222,107,210,1,201,126],[233,231,43,114,30,210,241,14,195,189,39,214,249,96,243,137,180,240,18,223,189,87,125,159,123,150,93,255,97,16,204,163],[123,252,22,225,98,16,182,141,152,112,246,222,98,98,138,77,209,59,53,2,218,84,169,73,212,47,153,221,10,18,10,26],[238,52,154,105,188,234,149,109,160,28,46,94,47,12,197,122,50,110,252,29,64,73,8,188,72,204,13,180,160,208,11,134],[36,37,175,68,161,78,40,231,95,31,16,69,98,29,86,16,70,12,71,190,23,13,0,252,96,220,145,187,55,18,181,53],[156,120,48,103,134,213,61,41,241,155,232,57,12,233,191,210,83,74,100,241,94,184,25,40,177,170,212,21,180,8,155,186],[35,39,232,106,151,226,145,211,156,97,11,137,83,29,239,221,157,59,44,50,123,151,87,125,16,207,116,242,30,95,247,190],[108,220,137,207,52,71,111,5,80,210,67,74,66,76,235,226,53,43,70,75,215,186,12,133,179,59,197,104,58,217,228,214],[130,109,88,17,226,134,35,174,93,154,253,143,248,212,84,211,177,165,104,30,23,24,67,231,160,208,252,245,143,71,114,237],[151,184,188,82,182,214,71,166,178,62,33,83,202,120,132,30,12,180,94,107,46,27,224,92,60,73,77,94,241,42,133,147],[64,197,219,192,185,158,73,2,192,110,122,164,124,140,43,175,12,75,84,194,180,119,187,30,171,174,168,78,150,214,21,98],[9,86,182,248,68,119,73,182,227,22,224,66,44,249,64,91,93,155,45,90,142,229,157,217,12,16,244,5,30,154,65,7],[115,200,218,179,2,2,53,11,34,49,162,154,224,22,13,168,235,37,7,125,233,188,15,223,115,133,107,94,246,110,59,135],[220,81,52,142,213,23,210,240,104,212,7,12,70,76,230,122,134,73,197,16,114,231,81,35,66,62,131,131,132,7,191,229],[93,53,72,103,92,40,129,0,88,155,67,243,193,230,105,223,87,199,249,208,140,179,219,51,172,33,203,41,129,105,14,201],[187,77,139,44,78,94,95,240,57,77,246,159,156,116,104,73,209,80,130,216,126,162,62,21,130,86,239,59,103,217,77,202],[92,45,219,122,250,75,141,216,210,85,232,174,79,25,178,39,147,113,24,149,141,124,49,91,144,86,88,49,143,90,90,89],[7,40,194,237,205,65,200,171,239,18,133,234,24,112,44,182,84,241,36,231,217,106,82,69,96,1,35,232,250,210,232,82],[166,199,15,112,104,100,39,142,5,99,84,146,194,75,244,57,59,201,144,243,255,163,181,4,96,55,61,100,97,253,18,9],[208,5,120,9,136,226,129,206,47,29,94,69,77,79,159,42,225,204,34,3,216,8,241,9,232,49,64,203,130,167,43,6],[145,165,118,201,223,109,165,183,190,41,12,81,37,7,85,181,150,92,228,83,11,14,33,205,244,124,246,19,29,148,198,28],[134,105,236,128,28,185,45,194,101,253,227,178,255,208,225,174,112,227,14,52,105,227,171,107,33,25,48,84,220,118,196,116],[12,37,53,12,95,123,28,136,198,252,147,85,113,243,102,213,236,48,87,11,112,58,31,135,107,20,12,103,150,146,130,167],[204,224,119,15,170,231,106,38,88,118,164,144,26,40,87,109,28,219,198,182,110,85,128,199,186,116,118,8,150,202,227,58],[220,188,27,192,101,110,237,186,206,122,157,88,167,221,62,241,215,142,55,80,19,76,247,243,232,58,255,16,47,200,33,224],[253,54,193,80,164,221,225,1,224,32,255,89,179,170,116,233,62,3,56,91,102,184,196,146,81,86,57,170,226,189,221,159]]",
              "sol": "[bytes32(stringToBytes32(\"189,63,245,243,141,6,196,249,120,206,36,58,56,234,225,209,19,61,57,44,181,96,49,22,80,62,125,151,106,52,254,10\")),bytes32(stringToBytes32(\"111,161,225,220,167,55,76,85,158,216,161,27,57,220,45,181,244,25,226,90,59,17,247,68,100,172,55,209,24,26,46,162\")),bytes32(stringToBytes32(\"60,199,35,114,76,35,107,38,35,105,36,97,67,60,82,233,146,9,16,227,109,169,160,42,19,52,82,253,160,218,183,42\")),bytes32(stringToBytes32(\"39,142,75,172,10,131,52,5,8,20,154,102,95,171,212,102,6,153,0,118,31,208,109,253,212,188,143,206,35,146,179,221\")),bytes32(stringToBytes32(\"221,101,176,202,68,108,99,225,50,5,108,2,62,52,75,160,106,165,180,136,200,163,197,156,134,12,21,9,225,57,176,111\")),bytes32(stringToBytes32(\"85,95,85,207,72,94,182,160,191,93,222,151,240,250,143,29,172,2,176,224,48,175,85,183,30,212,79,7,123,234,140,166\")),bytes32(stringToBytes32(\"7,2,43,47,107,248,62,60,147,199,226,87,121,207,43,243,40,111,187,194,16,78,48,59,114,57,234,135,176,36,201,68\")),bytes32(stringToBytes32(\"61,145,15,31,237,134,192,67,4,11,28,35,2,71,184,174,75,68,199,138,237,234,70,74,244,155,70,193,21,62,19,187\")),bytes32(stringToBytes32(\"12,197,47,250,73,242,168,170,123,69,171,106,42,1,94,170,222,187,64,158,229,157,158,114,28,224,252,1,206,122,239,53\")),bytes32(stringToBytes32(\"117,111,241,132,245,46,137,250,171,215,240,109,152,35,241,238,79,18,196,107,46,34,88,9,1,88,175,102,242,196,106,93\")),bytes32(stringToBytes32(\"18,50,22,94,254,222,229,141,145,65,127,220,154,17,9,194,6,33,255,251,52,204,131,93,60,223,221,217,7,7,3,145\")),bytes32(stringToBytes32(\"228,203,116,103,213,83,43,200,79,152,107,237,60,255,87,32,179,27,248,161,250,83,31,160,177,39,6,130,99,203,36,111\")),bytes32(stringToBytes32(\"242,114,138,87,56,186,181,98,57,151,215,84,18,0,68,182,126,60,183,215,222,135,226,46,30,134,180,123,175,117,88,93\")),bytes32(stringToBytes32(\"120,34,61,195,179,132,218,191,85,233,22,120,82,13,158,50,11,143,62,28,230,25,162,150,131,117,169,108,71,106,161,113\")),bytes32(stringToBytes32(\"50,202,160,37,160,119,157,114,16,227,164,4,80,42,197,173,183,162,57,233,241,40,53,125,208,62,141,75,30,231,246,144\")),bytes32(stringToBytes32(\"102,122,222,4,180,11,187,254,150,94,122,190,190,250,95,245,48,242,217,215,127,17,10,253,92,247,123,116,44,129,159,235\")),bytes32(stringToBytes32(\"22,251,232,100,156,8,150,71,158,219,87,90,103,146,28,189,67,198,134,114,41,38,169,218,54,198,45,218,195,120,107,112\")),bytes32(stringToBytes32(\"160,209,198,72,35,72,141,223,45,198,63,248,79,76,67,226,114,142,141,215,236,184,2,225,188,99,21,241,142,138,214,134\")),bytes32(stringToBytes32(\"65,191,217,127,28,56,21,253,41,238,29,64,236,198,252,195,182,164,4,4,155,223,181,5,215,174,233,190,81,242,123,61\")),bytes32(stringToBytes32(\"85,228,138,30,194,82,203,23,15,99,120,178,213,105,45,222,12,241,63,94,209,82,246,242,156,12,228,148,16,22,80,220\")),bytes32(stringToBytes32(\"238,189,69,42,52,235,245,19,6,190,155,207,145,100,34,239,143,154,101,122,60,83,101,183,92,43,1,117,200,59,116,18\")),bytes32(stringToBytes32(\"54,163,112,112,10,90,182,96,71,75,114,35,21,157,25,210,51,36,230,59,20,229,241,169,204,51,200,38,208,1,38,52\")),bytes32(stringToBytes32(\"108,108,131,190,241,122,207,0,1,189,249,241,162,227,223,102,39,147,23,75,168,217,253,151,164,63,220,232,64,104,202,230\")),bytes32(stringToBytes32(\"182,11,8,232,172,53,117,167,34,252,164,170,89,173,191,50,65,248,12,211,94,71,241,137,116,95,85,25,167,107,228,19\")),bytes32(stringToBytes32(\"130,28,40,210,25,240,13,73,91,208,155,16,30,119,150,250,5,236,160,102,254,46,158,173,81,140,148,36,154,135,53,106\")),bytes32(stringToBytes32(\"191,103,238,57,206,72,40,148,188,213,30,249,33,165,161,37,2,8,159,62,48,239,238,137,114,158,78,66,150,13,50,126\")),bytes32(stringToBytes32(\"194,16,170,221,38,231,116,136,100,45,9,177,248,109,163,226,41,108,224,52,96,220,111,57,158,190,173,215,146,91,88,231\")),bytes32(stringToBytes32(\"186,132,208,58,90,125,102,131,152,201,104,170,168,91,151,78,162,220,190,170,226,78,146,168,84,105,231,181,191,85,109,84\")),bytes32(stringToBytes32(\"99,21,120,166,85,6,2,167,44,53,207,10,241,173,97,164,254,215,73,197,97,164,177,217,5,41,10,163,59,218,169,204\")),bytes32(stringToBytes32(\"63,30,91,28,132,75,22,150,180,25,24,216,206,74,223,60,73,135,35,203,75,4,190,185,177,174,253,245,104,37,138,200\")),bytes32(stringToBytes32(\"215,1,56,37,44,231,239,145,200,29,194,5,56,54,22,104,30,92,99,217,99,155,191,201,124,29,138,188,229,192,46,63\")),bytes32(stringToBytes32(\"20,98,250,140,10,56,224,31,78,34,130,15,104,44,150,185,97,69,175,158,19,175,219,69,236,129,118,90,75,17,216,67\")),bytes32(stringToBytes32(\"80,12,103,155,151,225,166,110,8,247,50,235,146,173,33,133,169,74,118,242,79,143,55,171,108,233,39,220,211,216,140,129\")),bytes32(stringToBytes32(\"223,172,215,106,213,35,63,202,42,252,209,189,130,93,171,126,192,101,78,71,53,236,248,134,53,46,187,154,195,170,8,106\")),bytes32(stringToBytes32(\"152,145,94,200,34,226,204,225,102,6,199,207,218,117,66,92,198,94,218,236,220,162,201,65,86,40,167,59,200,113,4,19\")),bytes32(stringToBytes32(\"12,250,192,185,103,190,54,9,30,187,211,117,6,7,16,232,70,46,130,173,185,170,109,96,105,65,149,129,36,76,214,253\")),bytes32(stringToBytes32(\"30,31,134,76,28,27,243,23,43,95,80,62,206,53,29,180,222,215,178,98,209,253,173,49,252,84,39,213,106,216,136,216\")),bytes32(stringToBytes32(\"92,103,17,159,20,223,149,212,98,5,132,118,212,229,29,188,95,28,94,150,142,68,60,72,150,69,231,131,2,92,216,1\")),bytes32(stringToBytes32(\"198,177,210,188,20,254,40,149,253,46,120,174,64,61,48,213,243,58,17,217,249,65,70,192,136,11,184,12,157,157,46,251\")),bytes32(stringToBytes32(\"235,19,139,36,232,156,164,8,202,186,16,40,115,205,132,150,26,62,163,21,137,237,204,168,251,19,125,23,146,251,52,176\")),bytes32(stringToBytes32(\"53,209,169,57,41,136,200,205,6,75,71,35,178,33,93,155,227,229,123,147,194,200,243,71,202,49,251,44,223,182,57,81\")),bytes32(stringToBytes32(\"166,123,237,104,33,129,14,144,59,150,80,10,201,247,56,219,93,149,106,152,36,169,255,97,20,4,40,220,113,216,56,68\")),bytes32(stringToBytes32(\"11,79,185,150,132,164,85,143,118,100,18,222,3,9,189,93,118,53,114,113,97,66,95,184,122,124,59,253,149,26,216,134\")),bytes32(stringToBytes32(\"60,169,51,56,119,53,60,23,136,30,21,28,71,0,228,178,116,35,87,32,93,34,61,0,153,200,29,121,50,61,40,21\")),bytes32(stringToBytes32(\"70,239,20,243,138,76,99,48,81,73,180,91,18,67,66,28,131,126,243,6,198,60,126,48,195,40,232,114,206,238,90,151\")),bytes32(stringToBytes32(\"255,239,115,72,243,140,115,211,92,195,182,93,9,89,251,53,194,150,100,114,112,182,163,199,108,19,251,26,45,232,255,150\")),bytes32(stringToBytes32(\"119,124,104,111,126,211,27,1,48,29,12,139,224,16,42,144,220,176,204,199,212,110,243,34,42,243,66,83,112,29,75,93\")),bytes32(stringToBytes32(\"25,171,136,28,236,235,123,17,33,170,224,109,179,64,57,178,121,246,104,0,52,173,252,240,63,149,226,121,95,130,73,55\")),bytes32(stringToBytes32(\"16,167,142,1,133,69,43,169,57,15,154,16,102,102,82,73,103,167,7,33,119,98,244,32,20,36,240,206,117,123,238,67\")),bytes32(stringToBytes32(\"6,173,0,35,121,217,107,148,191,109,67,11,129,85,16,65,190,163,100,188,224,149,49,137,116,54,34,204,36,230,51,133\")),bytes32(stringToBytes32(\"5,212,229,137,64,107,67,136,99,146,58,84,241,19,220,60,62,230,155,214,95,233,168,202,50,210,36,146,66,206,15,143\")),bytes32(stringToBytes32(\"2,143,31,223,80,148,36,71,24,11,188,255,248,143,160,231,123,53,225,109,56,160,130,255,252,90,112,32,195,56,225,7\")),bytes32(stringToBytes32(\"183,132,17,57,53,239,67,197,7,6,73,32,184,116,193,168,132,124,171,46,65,254,128,255,216,205,134,36,3,206,36,161\")),bytes32(stringToBytes32(\"59,63,141,158,41,250,3,144,160,4,66,25,207,186,191,63,139,117,183,166,161,250,145,247,68,14,217,90,131,201,248,133\")),bytes32(stringToBytes32(\"126,79,140,87,50,33,2,90,238,122,3,68,12,93,137,159,149,85,228,127,102,239,130,106,83,54,84,204,10,247,129,247\")),bytes32(stringToBytes32(\"233,72,114,51,39,182,153,77,69,140,81,82,19,48,197,100,77,228,103,183,3,229,185,49,23,129,82,104,26,64,222,116\")),bytes32(stringToBytes32(\"33,183,127,37,127,224,58,62,10,110,226,190,250,20,255,129,167,216,56,103,146,7,189,126,190,161,192,126,44,192,80,51\")),bytes32(stringToBytes32(\"51,60,34,238,169,142,97,157,249,111,202,121,75,135,198,15,49,11,31,236,105,40,41,26,242,184,100,16,78,184,27,246\")),bytes32(stringToBytes32(\"59,222,128,236,2,47,8,230,234,32,192,63,40,155,107,189,206,27,216,92,136,101,131,83,178,147,219,129,196,30,1,67\")),bytes32(stringToBytes32(\"100,116,93,17,20,231,146,55,243,20,68,90,131,91,103,202,71,74,244,197,225,56,77,29,182,0,59,199,37,62,243,250\")),bytes32(stringToBytes32(\"90,139,92,171,37,194,32,227,159,246,118,93,83,251,52,66,42,69,237,37,53,124,181,247,216,185,142,178,131,125,118,169\")),bytes32(stringToBytes32(\"62,111,81,14,56,171,162,3,182,45,206,181,17,201,28,40,145,107,138,145,123,221,213,29,133,113,174,172,241,95,37,237\")),bytes32(stringToBytes32(\"129,190,249,171,214,47,32,89,157,132,247,71,173,140,145,170,122,57,86,88,210,176,102,254,199,142,1,73,28,42,233,164\")),bytes32(stringToBytes32(\"123,197,178,93,240,224,58,110,140,230,23,155,126,229,43,138,93,192,82,142,190,157,119,197,102,132,104,153,161,189,124,118\")),bytes32(stringToBytes32(\"176,60,121,221,237,176,188,115,245,182,61,97,159,10,11,255,253,133,137,171,67,254,195,119,164,233,112,114,25,153,5,115\")),bytes32(stringToBytes32(\"203,16,189,21,140,61,204,191,240,15,13,219,165,206,72,252,128,207,254,229,228,146,133,204,101,114,185,215,14,176,195,224\")),bytes32(stringToBytes32(\"184,25,234,179,200,41,237,45,6,133,184,156,67,233,178,32,120,162,107,177,107,62,102,34,86,50,237,166,145,125,48,216\")),bytes32(stringToBytes32(\"103,67,234,46,150,180,112,229,161,62,219,85,65,36,134,164,116,56,104,14,25,222,26,99,204,53,19,103,247,95,104,128\")),bytes32(stringToBytes32(\"225,173,105,231,102,208,66,50,220,209,25,245,200,235,200,83,47,153,111,108,36,126,123,86,186,73,225,151,163,82,118,59\")),bytes32(stringToBytes32(\"200,163,55,129,96,11,140,248,30,189,183,186,46,234,163,130,50,199,190,45,64,64,203,110,6,129,141,110,116,244,64,184\")),bytes32(stringToBytes32(\"255,177,194,250,8,34,153,221,11,201,45,151,86,193,82,231,103,207,169,222,13,174,127,64,139,109,222,107,210,1,201,126\")),bytes32(stringToBytes32(\"233,231,43,114,30,210,241,14,195,189,39,214,249,96,243,137,180,240,18,223,189,87,125,159,123,150,93,255,97,16,204,163\")),bytes32(stringToBytes32(\"123,252,22,225,98,16,182,141,152,112,246,222,98,98,138,77,209,59,53,2,218,84,169,73,212,47,153,221,10,18,10,26\")),bytes32(stringToBytes32(\"238,52,154,105,188,234,149,109,160,28,46,94,47,12,197,122,50,110,252,29,64,73,8,188,72,204,13,180,160,208,11,134\")),bytes32(stringToBytes32(\"36,37,175,68,161,78,40,231,95,31,16,69,98,29,86,16,70,12,71,190,23,13,0,252,96,220,145,187,55,18,181,53\")),bytes32(stringToBytes32(\"156,120,48,103,134,213,61,41,241,155,232,57,12,233,191,210,83,74,100,241,94,184,25,40,177,170,212,21,180,8,155,186\")),bytes32(stringToBytes32(\"35,39,232,106,151,226,145,211,156,97,11,137,83,29,239,221,157,59,44,50,123,151,87,125,16,207,116,242,30,95,247,190\")),bytes32(stringToBytes32(\"108,220,137,207,52,71,111,5,80,210,67,74,66,76,235,226,53,43,70,75,215,186,12,133,179,59,197,104,58,217,228,214\")),bytes32(stringToBytes32(\"130,109,88,17,226,134,35,174,93,154,253,143,248,212,84,211,177,165,104,30,23,24,67,231,160,208,252,245,143,71,114,237\")),bytes32(stringToBytes32(\"151,184,188,82,182,214,71,166,178,62,33,83,202,120,132,30,12,180,94,107,46,27,224,92,60,73,77,94,241,42,133,147\")),bytes32(stringToBytes32(\"64,197,219,192,185,158,73,2,192,110,122,164,124,140,43,175,12,75,84,194,180,119,187,30,171,174,168,78,150,214,21,98\")),bytes32(stringToBytes32(\"9,86,182,248,68,119,73,182,227,22,224,66,44,249,64,91,93,155,45,90,142,229,157,217,12,16,244,5,30,154,65,7\")),bytes32(stringToBytes32(\"115,200,218,179,2,2,53,11,34,49,162,154,224,22,13,168,235,37,7,125,233,188,15,223,115,133,107,94,246,110,59,135\")),bytes32(stringToBytes32(\"220,81,52,142,213,23,210,240,104,212,7,12,70,76,230,122,134,73,197,16,114,231,81,35,66,62,131,131,132,7,191,229\")),bytes32(stringToBytes32(\"93,53,72,103,92,40,129,0,88,155,67,243,193,230,105,223,87,199,249,208,140,179,219,51,172,33,203,41,129,105,14,201\")),bytes32(stringToBytes32(\"187,77,139,44,78,94,95,240,57,77,246,159,156,116,104,73,209,80,130,216,126,162,62,21,130,86,239,59,103,217,77,202\")),bytes32(stringToBytes32(\"92,45,219,122,250,75,141,216,210,85,232,174,79,25,178,39,147,113,24,149,141,124,49,91,144,86,88,49,143,90,90,89\")),bytes32(stringToBytes32(\"7,40,194,237,205,65,200,171,239,18,133,234,24,112,44,182,84,241,36,231,217,106,82,69,96,1,35,232,250,210,232,82\")),bytes32(stringToBytes32(\"166,199,15,112,104,100,39,142,5,99,84,146,194,75,244,57,59,201,144,243,255,163,181,4,96,55,61,100,97,253,18,9\")),bytes32(stringToBytes32(\"208,5,120,9,136,226,129,206,47,29,94,69,77,79,159,42,225,204,34,3,216,8,241,9,232,49,64,203,130,167,43,6\")),bytes32(stringToBytes32(\"145,165,118,201,223,109,165,183,190,41,12,81,37,7,85,181,150,92,228,83,11,14,33,205,244,124,246,19,29,148,198,28\")),bytes32(stringToBytes32(\"134,105,236,128,28,185,45,194,101,253,227,178,255,208,225,174,112,227,14,52,105,227,171,107,33,25,48,84,220,118,196,116\")),bytes32(stringToBytes32(\"12,37,53,12,95,123,28,136,198,252,147,85,113,243,102,213,236,48,87,11,112,58,31,135,107,20,12,103,150,146,130,167\")),bytes32(stringToBytes32(\"204,224,119,15,170,231,106,38,88,118,164,144,26,40,87,109,28,219,198,182,110,85,128,199,186,116,118,8,150,202,227,58\")),bytes32(stringToBytes32(\"220,188,27,192,101,110,237,186,206,122,157,88,167,221,62,241,215,142,55,80,19,76,247,243,232,58,255,16,47,200,33,224\")),bytes32(stringToBytes32(\"253,54,193,80,164,221,225,1,224,32,255,89,179,170,116,233,62,3,56,91,102,184,196,146,81,86,57,170,226,189,221,159\"))]"
            },
            {
              "js": "[[19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211],[137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59],[181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36],[35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21],[174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198],[40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35],[0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114],[2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8],[150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59],[242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34],[165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150],[84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192],[188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79],[136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229],[138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209],[159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96],[221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224],[128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59],[78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216],[3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28],[208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10],[219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129],[250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207],[175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233],[32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125],[131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31],[138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112],[248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24],[93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24],[204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43],[46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168],[235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236],[15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164],[97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54],[245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21],[250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165],[21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45],[11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2],[26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177],[249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201],[152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5],[51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102],[89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75],[137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38],[112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218],[212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102],[230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169],[41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76],[187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58],[29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33],[183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215],[63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205],[115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57],[248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171],[204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11],[149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24],[66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37],[217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192],[99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144],[164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128],[94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9],[133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222],[95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149],[0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90],[230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51],[3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218],[202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14],[159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158],[41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139],[239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47],[248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225],[54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81],[220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177],[21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89],[54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30],[139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19],[45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202],[133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25],[171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201],[81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223],[83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62],[181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43],[26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98],[130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105],[197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234],[221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128],[234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254],[178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215],[26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29],[83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203],[49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149],[176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95],[116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29],[157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199],[181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216],[10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241]]",
              "sol": "[bytes32(stringToBytes32(\"19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211\")),bytes32(stringToBytes32(\"137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59\")),bytes32(stringToBytes32(\"181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36\")),bytes32(stringToBytes32(\"35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21\")),bytes32(stringToBytes32(\"174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198\")),bytes32(stringToBytes32(\"40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35\")),bytes32(stringToBytes32(\"0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114\")),bytes32(stringToBytes32(\"2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8\")),bytes32(stringToBytes32(\"150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59\")),bytes32(stringToBytes32(\"242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34\")),bytes32(stringToBytes32(\"165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150\")),bytes32(stringToBytes32(\"84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192\")),bytes32(stringToBytes32(\"188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79\")),bytes32(stringToBytes32(\"136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229\")),bytes32(stringToBytes32(\"138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209\")),bytes32(stringToBytes32(\"159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96\")),bytes32(stringToBytes32(\"221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224\")),bytes32(stringToBytes32(\"128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59\")),bytes32(stringToBytes32(\"78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216\")),bytes32(stringToBytes32(\"3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28\")),bytes32(stringToBytes32(\"208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10\")),bytes32(stringToBytes32(\"219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129\")),bytes32(stringToBytes32(\"250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207\")),bytes32(stringToBytes32(\"175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233\")),bytes32(stringToBytes32(\"32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125\")),bytes32(stringToBytes32(\"131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31\")),bytes32(stringToBytes32(\"138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112\")),bytes32(stringToBytes32(\"248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24\")),bytes32(stringToBytes32(\"93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24\")),bytes32(stringToBytes32(\"204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43\")),bytes32(stringToBytes32(\"46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168\")),bytes32(stringToBytes32(\"235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236\")),bytes32(stringToBytes32(\"15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164\")),bytes32(stringToBytes32(\"97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54\")),bytes32(stringToBytes32(\"245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21\")),bytes32(stringToBytes32(\"250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165\")),bytes32(stringToBytes32(\"21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45\")),bytes32(stringToBytes32(\"11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2\")),bytes32(stringToBytes32(\"26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177\")),bytes32(stringToBytes32(\"249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201\")),bytes32(stringToBytes32(\"152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5\")),bytes32(stringToBytes32(\"51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102\")),bytes32(stringToBytes32(\"89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75\")),bytes32(stringToBytes32(\"137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38\")),bytes32(stringToBytes32(\"112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218\")),bytes32(stringToBytes32(\"212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102\")),bytes32(stringToBytes32(\"230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169\")),bytes32(stringToBytes32(\"41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76\")),bytes32(stringToBytes32(\"187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58\")),bytes32(stringToBytes32(\"29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33\")),bytes32(stringToBytes32(\"183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215\")),bytes32(stringToBytes32(\"63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205\")),bytes32(stringToBytes32(\"115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57\")),bytes32(stringToBytes32(\"248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171\")),bytes32(stringToBytes32(\"204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11\")),bytes32(stringToBytes32(\"149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24\")),bytes32(stringToBytes32(\"66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37\")),bytes32(stringToBytes32(\"217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192\")),bytes32(stringToBytes32(\"99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144\")),bytes32(stringToBytes32(\"164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128\")),bytes32(stringToBytes32(\"94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9\")),bytes32(stringToBytes32(\"133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222\")),bytes32(stringToBytes32(\"95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149\")),bytes32(stringToBytes32(\"0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90\")),bytes32(stringToBytes32(\"230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51\")),bytes32(stringToBytes32(\"3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218\")),bytes32(stringToBytes32(\"202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14\")),bytes32(stringToBytes32(\"159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158\")),bytes32(stringToBytes32(\"41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139\")),bytes32(stringToBytes32(\"239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47\")),bytes32(stringToBytes32(\"248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225\")),bytes32(stringToBytes32(\"54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81\")),bytes32(stringToBytes32(\"220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177\")),bytes32(stringToBytes32(\"21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89\")),bytes32(stringToBytes32(\"54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30\")),bytes32(stringToBytes32(\"139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19\")),bytes32(stringToBytes32(\"45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202\")),bytes32(stringToBytes32(\"133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25\")),bytes32(stringToBytes32(\"171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201\")),bytes32(stringToBytes32(\"81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223\")),bytes32(stringToBytes32(\"83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62\")),bytes32(stringToBytes32(\"181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43\")),bytes32(stringToBytes32(\"26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98\")),bytes32(stringToBytes32(\"130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105\")),bytes32(stringToBytes32(\"197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234\")),bytes32(stringToBytes32(\"221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128\")),bytes32(stringToBytes32(\"234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254\")),bytes32(stringToBytes32(\"178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215\")),bytes32(stringToBytes32(\"26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29\")),bytes32(stringToBytes32(\"83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203\")),bytes32(stringToBytes32(\"49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149\")),bytes32(stringToBytes32(\"176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95\")),bytes32(stringToBytes32(\"116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29\")),bytes32(stringToBytes32(\"157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199\")),bytes32(stringToBytes32(\"181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216\")),bytes32(stringToBytes32(\"10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241\"))]"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[189,63,245,243,141,6,196,249,120,206,36,58,56,234,225,209,19,61,57,44,181,96,49,22,80,62,125,151,106,52,254,10],[111,161,225,220,167,55,76,85,158,216,161,27,57,220,45,181,244,25,226,90,59,17,247,68,100,172,55,209,24,26,46,162],[60,199,35,114,76,35,107,38,35,105,36,97,67,60,82,233,146,9,16,227,109,169,160,42,19,52,82,253,160,218,183,42],[39,142,75,172,10,131,52,5,8,20,154,102,95,171,212,102,6,153,0,118,31,208,109,253,212,188,143,206,35,146,179,221],[221,101,176,202,68,108,99,225,50,5,108,2,62,52,75,160,106,165,180,136,200,163,197,156,134,12,21,9,225,57,176,111],[85,95,85,207,72,94,182,160,191,93,222,151,240,250,143,29,172,2,176,224,48,175,85,183,30,212,79,7,123,234,140,166],[7,2,43,47,107,248,62,60,147,199,226,87,121,207,43,243,40,111,187,194,16,78,48,59,114,57,234,135,176,36,201,68],[61,145,15,31,237,134,192,67,4,11,28,35,2,71,184,174,75,68,199,138,237,234,70,74,244,155,70,193,21,62,19,187],[12,197,47,250,73,242,168,170,123,69,171,106,42,1,94,170,222,187,64,158,229,157,158,114,28,224,252,1,206,122,239,53],[117,111,241,132,245,46,137,250,171,215,240,109,152,35,241,238,79,18,196,107,46,34,88,9,1,88,175,102,242,196,106,93],[18,50,22,94,254,222,229,141,145,65,127,220,154,17,9,194,6,33,255,251,52,204,131,93,60,223,221,217,7,7,3,145],[228,203,116,103,213,83,43,200,79,152,107,237,60,255,87,32,179,27,248,161,250,83,31,160,177,39,6,130,99,203,36,111],[242,114,138,87,56,186,181,98,57,151,215,84,18,0,68,182,126,60,183,215,222,135,226,46,30,134,180,123,175,117,88,93],[120,34,61,195,179,132,218,191,85,233,22,120,82,13,158,50,11,143,62,28,230,25,162,150,131,117,169,108,71,106,161,113],[50,202,160,37,160,119,157,114,16,227,164,4,80,42,197,173,183,162,57,233,241,40,53,125,208,62,141,75,30,231,246,144],[102,122,222,4,180,11,187,254,150,94,122,190,190,250,95,245,48,242,217,215,127,17,10,253,92,247,123,116,44,129,159,235],[22,251,232,100,156,8,150,71,158,219,87,90,103,146,28,189,67,198,134,114,41,38,169,218,54,198,45,218,195,120,107,112],[160,209,198,72,35,72,141,223,45,198,63,248,79,76,67,226,114,142,141,215,236,184,2,225,188,99,21,241,142,138,214,134],[65,191,217,127,28,56,21,253,41,238,29,64,236,198,252,195,182,164,4,4,155,223,181,5,215,174,233,190,81,242,123,61],[85,228,138,30,194,82,203,23,15,99,120,178,213,105,45,222,12,241,63,94,209,82,246,242,156,12,228,148,16,22,80,220],[238,189,69,42,52,235,245,19,6,190,155,207,145,100,34,239,143,154,101,122,60,83,101,183,92,43,1,117,200,59,116,18],[54,163,112,112,10,90,182,96,71,75,114,35,21,157,25,210,51,36,230,59,20,229,241,169,204,51,200,38,208,1,38,52],[108,108,131,190,241,122,207,0,1,189,249,241,162,227,223,102,39,147,23,75,168,217,253,151,164,63,220,232,64,104,202,230],[182,11,8,232,172,53,117,167,34,252,164,170,89,173,191,50,65,248,12,211,94,71,241,137,116,95,85,25,167,107,228,19],[130,28,40,210,25,240,13,73,91,208,155,16,30,119,150,250,5,236,160,102,254,46,158,173,81,140,148,36,154,135,53,106],[191,103,238,57,206,72,40,148,188,213,30,249,33,165,161,37,2,8,159,62,48,239,238,137,114,158,78,66,150,13,50,126],[194,16,170,221,38,231,116,136,100,45,9,177,248,109,163,226,41,108,224,52,96,220,111,57,158,190,173,215,146,91,88,231],[186,132,208,58,90,125,102,131,152,201,104,170,168,91,151,78,162,220,190,170,226,78,146,168,84,105,231,181,191,85,109,84],[99,21,120,166,85,6,2,167,44,53,207,10,241,173,97,164,254,215,73,197,97,164,177,217,5,41,10,163,59,218,169,204],[63,30,91,28,132,75,22,150,180,25,24,216,206,74,223,60,73,135,35,203,75,4,190,185,177,174,253,245,104,37,138,200],[215,1,56,37,44,231,239,145,200,29,194,5,56,54,22,104,30,92,99,217,99,155,191,201,124,29,138,188,229,192,46,63],[20,98,250,140,10,56,224,31,78,34,130,15,104,44,150,185,97,69,175,158,19,175,219,69,236,129,118,90,75,17,216,67],[80,12,103,155,151,225,166,110,8,247,50,235,146,173,33,133,169,74,118,242,79,143,55,171,108,233,39,220,211,216,140,129],[223,172,215,106,213,35,63,202,42,252,209,189,130,93,171,126,192,101,78,71,53,236,248,134,53,46,187,154,195,170,8,106],[152,145,94,200,34,226,204,225,102,6,199,207,218,117,66,92,198,94,218,236,220,162,201,65,86,40,167,59,200,113,4,19],[12,250,192,185,103,190,54,9,30,187,211,117,6,7,16,232,70,46,130,173,185,170,109,96,105,65,149,129,36,76,214,253],[30,31,134,76,28,27,243,23,43,95,80,62,206,53,29,180,222,215,178,98,209,253,173,49,252,84,39,213,106,216,136,216],[92,103,17,159,20,223,149,212,98,5,132,118,212,229,29,188,95,28,94,150,142,68,60,72,150,69,231,131,2,92,216,1],[198,177,210,188,20,254,40,149,253,46,120,174,64,61,48,213,243,58,17,217,249,65,70,192,136,11,184,12,157,157,46,251],[235,19,139,36,232,156,164,8,202,186,16,40,115,205,132,150,26,62,163,21,137,237,204,168,251,19,125,23,146,251,52,176],[53,209,169,57,41,136,200,205,6,75,71,35,178,33,93,155,227,229,123,147,194,200,243,71,202,49,251,44,223,182,57,81],[166,123,237,104,33,129,14,144,59,150,80,10,201,247,56,219,93,149,106,152,36,169,255,97,20,4,40,220,113,216,56,68],[11,79,185,150,132,164,85,143,118,100,18,222,3,9,189,93,118,53,114,113,97,66,95,184,122,124,59,253,149,26,216,134],[60,169,51,56,119,53,60,23,136,30,21,28,71,0,228,178,116,35,87,32,93,34,61,0,153,200,29,121,50,61,40,21],[70,239,20,243,138,76,99,48,81,73,180,91,18,67,66,28,131,126,243,6,198,60,126,48,195,40,232,114,206,238,90,151],[255,239,115,72,243,140,115,211,92,195,182,93,9,89,251,53,194,150,100,114,112,182,163,199,108,19,251,26,45,232,255,150],[119,124,104,111,126,211,27,1,48,29,12,139,224,16,42,144,220,176,204,199,212,110,243,34,42,243,66,83,112,29,75,93],[25,171,136,28,236,235,123,17,33,170,224,109,179,64,57,178,121,246,104,0,52,173,252,240,63,149,226,121,95,130,73,55],[16,167,142,1,133,69,43,169,57,15,154,16,102,102,82,73,103,167,7,33,119,98,244,32,20,36,240,206,117,123,238,67],[6,173,0,35,121,217,107,148,191,109,67,11,129,85,16,65,190,163,100,188,224,149,49,137,116,54,34,204,36,230,51,133],[5,212,229,137,64,107,67,136,99,146,58,84,241,19,220,60,62,230,155,214,95,233,168,202,50,210,36,146,66,206,15,143],[2,143,31,223,80,148,36,71,24,11,188,255,248,143,160,231,123,53,225,109,56,160,130,255,252,90,112,32,195,56,225,7],[183,132,17,57,53,239,67,197,7,6,73,32,184,116,193,168,132,124,171,46,65,254,128,255,216,205,134,36,3,206,36,161],[59,63,141,158,41,250,3,144,160,4,66,25,207,186,191,63,139,117,183,166,161,250,145,247,68,14,217,90,131,201,248,133],[126,79,140,87,50,33,2,90,238,122,3,68,12,93,137,159,149,85,228,127,102,239,130,106,83,54,84,204,10,247,129,247],[233,72,114,51,39,182,153,77,69,140,81,82,19,48,197,100,77,228,103,183,3,229,185,49,23,129,82,104,26,64,222,116],[33,183,127,37,127,224,58,62,10,110,226,190,250,20,255,129,167,216,56,103,146,7,189,126,190,161,192,126,44,192,80,51],[51,60,34,238,169,142,97,157,249,111,202,121,75,135,198,15,49,11,31,236,105,40,41,26,242,184,100,16,78,184,27,246],[59,222,128,236,2,47,8,230,234,32,192,63,40,155,107,189,206,27,216,92,136,101,131,83,178,147,219,129,196,30,1,67],[100,116,93,17,20,231,146,55,243,20,68,90,131,91,103,202,71,74,244,197,225,56,77,29,182,0,59,199,37,62,243,250],[90,139,92,171,37,194,32,227,159,246,118,93,83,251,52,66,42,69,237,37,53,124,181,247,216,185,142,178,131,125,118,169],[62,111,81,14,56,171,162,3,182,45,206,181,17,201,28,40,145,107,138,145,123,221,213,29,133,113,174,172,241,95,37,237],[129,190,249,171,214,47,32,89,157,132,247,71,173,140,145,170,122,57,86,88,210,176,102,254,199,142,1,73,28,42,233,164],[123,197,178,93,240,224,58,110,140,230,23,155,126,229,43,138,93,192,82,142,190,157,119,197,102,132,104,153,161,189,124,118],[176,60,121,221,237,176,188,115,245,182,61,97,159,10,11,255,253,133,137,171,67,254,195,119,164,233,112,114,25,153,5,115],[203,16,189,21,140,61,204,191,240,15,13,219,165,206,72,252,128,207,254,229,228,146,133,204,101,114,185,215,14,176,195,224],[184,25,234,179,200,41,237,45,6,133,184,156,67,233,178,32,120,162,107,177,107,62,102,34,86,50,237,166,145,125,48,216],[103,67,234,46,150,180,112,229,161,62,219,85,65,36,134,164,116,56,104,14,25,222,26,99,204,53,19,103,247,95,104,128],[225,173,105,231,102,208,66,50,220,209,25,245,200,235,200,83,47,153,111,108,36,126,123,86,186,73,225,151,163,82,118,59],[200,163,55,129,96,11,140,248,30,189,183,186,46,234,163,130,50,199,190,45,64,64,203,110,6,129,141,110,116,244,64,184],[255,177,194,250,8,34,153,221,11,201,45,151,86,193,82,231,103,207,169,222,13,174,127,64,139,109,222,107,210,1,201,126],[233,231,43,114,30,210,241,14,195,189,39,214,249,96,243,137,180,240,18,223,189,87,125,159,123,150,93,255,97,16,204,163],[123,252,22,225,98,16,182,141,152,112,246,222,98,98,138,77,209,59,53,2,218,84,169,73,212,47,153,221,10,18,10,26],[238,52,154,105,188,234,149,109,160,28,46,94,47,12,197,122,50,110,252,29,64,73,8,188,72,204,13,180,160,208,11,134],[36,37,175,68,161,78,40,231,95,31,16,69,98,29,86,16,70,12,71,190,23,13,0,252,96,220,145,187,55,18,181,53],[156,120,48,103,134,213,61,41,241,155,232,57,12,233,191,210,83,74,100,241,94,184,25,40,177,170,212,21,180,8,155,186],[35,39,232,106,151,226,145,211,156,97,11,137,83,29,239,221,157,59,44,50,123,151,87,125,16,207,116,242,30,95,247,190],[108,220,137,207,52,71,111,5,80,210,67,74,66,76,235,226,53,43,70,75,215,186,12,133,179,59,197,104,58,217,228,214],[130,109,88,17,226,134,35,174,93,154,253,143,248,212,84,211,177,165,104,30,23,24,67,231,160,208,252,245,143,71,114,237],[151,184,188,82,182,214,71,166,178,62,33,83,202,120,132,30,12,180,94,107,46,27,224,92,60,73,77,94,241,42,133,147],[64,197,219,192,185,158,73,2,192,110,122,164,124,140,43,175,12,75,84,194,180,119,187,30,171,174,168,78,150,214,21,98],[9,86,182,248,68,119,73,182,227,22,224,66,44,249,64,91,93,155,45,90,142,229,157,217,12,16,244,5,30,154,65,7],[115,200,218,179,2,2,53,11,34,49,162,154,224,22,13,168,235,37,7,125,233,188,15,223,115,133,107,94,246,110,59,135],[220,81,52,142,213,23,210,240,104,212,7,12,70,76,230,122,134,73,197,16,114,231,81,35,66,62,131,131,132,7,191,229],[93,53,72,103,92,40,129,0,88,155,67,243,193,230,105,223,87,199,249,208,140,179,219,51,172,33,203,41,129,105,14,201],[187,77,139,44,78,94,95,240,57,77,246,159,156,116,104,73,209,80,130,216,126,162,62,21,130,86,239,59,103,217,77,202],[92,45,219,122,250,75,141,216,210,85,232,174,79,25,178,39,147,113,24,149,141,124,49,91,144,86,88,49,143,90,90,89],[7,40,194,237,205,65,200,171,239,18,133,234,24,112,44,182,84,241,36,231,217,106,82,69,96,1,35,232,250,210,232,82],[166,199,15,112,104,100,39,142,5,99,84,146,194,75,244,57,59,201,144,243,255,163,181,4,96,55,61,100,97,253,18,9],[208,5,120,9,136,226,129,206,47,29,94,69,77,79,159,42,225,204,34,3,216,8,241,9,232,49,64,203,130,167,43,6],[145,165,118,201,223,109,165,183,190,41,12,81,37,7,85,181,150,92,228,83,11,14,33,205,244,124,246,19,29,148,198,28],[134,105,236,128,28,185,45,194,101,253,227,178,255,208,225,174,112,227,14,52,105,227,171,107,33,25,48,84,220,118,196,116],[12,37,53,12,95,123,28,136,198,252,147,85,113,243,102,213,236,48,87,11,112,58,31,135,107,20,12,103,150,146,130,167],[204,224,119,15,170,231,106,38,88,118,164,144,26,40,87,109,28,219,198,182,110,85,128,199,186,116,118,8,150,202,227,58],[220,188,27,192,101,110,237,186,206,122,157,88,167,221,62,241,215,142,55,80,19,76,247,243,232,58,255,16,47,200,33,224],[253,54,193,80,164,221,225,1,224,32,255,89,179,170,116,233,62,3,56,91,102,184,196,146,81,86,57,170,226,189,221,159]]",
                "sol": "[bytes32(stringToBytes32(\"189,63,245,243,141,6,196,249,120,206,36,58,56,234,225,209,19,61,57,44,181,96,49,22,80,62,125,151,106,52,254,10\")),bytes32(stringToBytes32(\"111,161,225,220,167,55,76,85,158,216,161,27,57,220,45,181,244,25,226,90,59,17,247,68,100,172,55,209,24,26,46,162\")),bytes32(stringToBytes32(\"60,199,35,114,76,35,107,38,35,105,36,97,67,60,82,233,146,9,16,227,109,169,160,42,19,52,82,253,160,218,183,42\")),bytes32(stringToBytes32(\"39,142,75,172,10,131,52,5,8,20,154,102,95,171,212,102,6,153,0,118,31,208,109,253,212,188,143,206,35,146,179,221\")),bytes32(stringToBytes32(\"221,101,176,202,68,108,99,225,50,5,108,2,62,52,75,160,106,165,180,136,200,163,197,156,134,12,21,9,225,57,176,111\")),bytes32(stringToBytes32(\"85,95,85,207,72,94,182,160,191,93,222,151,240,250,143,29,172,2,176,224,48,175,85,183,30,212,79,7,123,234,140,166\")),bytes32(stringToBytes32(\"7,2,43,47,107,248,62,60,147,199,226,87,121,207,43,243,40,111,187,194,16,78,48,59,114,57,234,135,176,36,201,68\")),bytes32(stringToBytes32(\"61,145,15,31,237,134,192,67,4,11,28,35,2,71,184,174,75,68,199,138,237,234,70,74,244,155,70,193,21,62,19,187\")),bytes32(stringToBytes32(\"12,197,47,250,73,242,168,170,123,69,171,106,42,1,94,170,222,187,64,158,229,157,158,114,28,224,252,1,206,122,239,53\")),bytes32(stringToBytes32(\"117,111,241,132,245,46,137,250,171,215,240,109,152,35,241,238,79,18,196,107,46,34,88,9,1,88,175,102,242,196,106,93\")),bytes32(stringToBytes32(\"18,50,22,94,254,222,229,141,145,65,127,220,154,17,9,194,6,33,255,251,52,204,131,93,60,223,221,217,7,7,3,145\")),bytes32(stringToBytes32(\"228,203,116,103,213,83,43,200,79,152,107,237,60,255,87,32,179,27,248,161,250,83,31,160,177,39,6,130,99,203,36,111\")),bytes32(stringToBytes32(\"242,114,138,87,56,186,181,98,57,151,215,84,18,0,68,182,126,60,183,215,222,135,226,46,30,134,180,123,175,117,88,93\")),bytes32(stringToBytes32(\"120,34,61,195,179,132,218,191,85,233,22,120,82,13,158,50,11,143,62,28,230,25,162,150,131,117,169,108,71,106,161,113\")),bytes32(stringToBytes32(\"50,202,160,37,160,119,157,114,16,227,164,4,80,42,197,173,183,162,57,233,241,40,53,125,208,62,141,75,30,231,246,144\")),bytes32(stringToBytes32(\"102,122,222,4,180,11,187,254,150,94,122,190,190,250,95,245,48,242,217,215,127,17,10,253,92,247,123,116,44,129,159,235\")),bytes32(stringToBytes32(\"22,251,232,100,156,8,150,71,158,219,87,90,103,146,28,189,67,198,134,114,41,38,169,218,54,198,45,218,195,120,107,112\")),bytes32(stringToBytes32(\"160,209,198,72,35,72,141,223,45,198,63,248,79,76,67,226,114,142,141,215,236,184,2,225,188,99,21,241,142,138,214,134\")),bytes32(stringToBytes32(\"65,191,217,127,28,56,21,253,41,238,29,64,236,198,252,195,182,164,4,4,155,223,181,5,215,174,233,190,81,242,123,61\")),bytes32(stringToBytes32(\"85,228,138,30,194,82,203,23,15,99,120,178,213,105,45,222,12,241,63,94,209,82,246,242,156,12,228,148,16,22,80,220\")),bytes32(stringToBytes32(\"238,189,69,42,52,235,245,19,6,190,155,207,145,100,34,239,143,154,101,122,60,83,101,183,92,43,1,117,200,59,116,18\")),bytes32(stringToBytes32(\"54,163,112,112,10,90,182,96,71,75,114,35,21,157,25,210,51,36,230,59,20,229,241,169,204,51,200,38,208,1,38,52\")),bytes32(stringToBytes32(\"108,108,131,190,241,122,207,0,1,189,249,241,162,227,223,102,39,147,23,75,168,217,253,151,164,63,220,232,64,104,202,230\")),bytes32(stringToBytes32(\"182,11,8,232,172,53,117,167,34,252,164,170,89,173,191,50,65,248,12,211,94,71,241,137,116,95,85,25,167,107,228,19\")),bytes32(stringToBytes32(\"130,28,40,210,25,240,13,73,91,208,155,16,30,119,150,250,5,236,160,102,254,46,158,173,81,140,148,36,154,135,53,106\")),bytes32(stringToBytes32(\"191,103,238,57,206,72,40,148,188,213,30,249,33,165,161,37,2,8,159,62,48,239,238,137,114,158,78,66,150,13,50,126\")),bytes32(stringToBytes32(\"194,16,170,221,38,231,116,136,100,45,9,177,248,109,163,226,41,108,224,52,96,220,111,57,158,190,173,215,146,91,88,231\")),bytes32(stringToBytes32(\"186,132,208,58,90,125,102,131,152,201,104,170,168,91,151,78,162,220,190,170,226,78,146,168,84,105,231,181,191,85,109,84\")),bytes32(stringToBytes32(\"99,21,120,166,85,6,2,167,44,53,207,10,241,173,97,164,254,215,73,197,97,164,177,217,5,41,10,163,59,218,169,204\")),bytes32(stringToBytes32(\"63,30,91,28,132,75,22,150,180,25,24,216,206,74,223,60,73,135,35,203,75,4,190,185,177,174,253,245,104,37,138,200\")),bytes32(stringToBytes32(\"215,1,56,37,44,231,239,145,200,29,194,5,56,54,22,104,30,92,99,217,99,155,191,201,124,29,138,188,229,192,46,63\")),bytes32(stringToBytes32(\"20,98,250,140,10,56,224,31,78,34,130,15,104,44,150,185,97,69,175,158,19,175,219,69,236,129,118,90,75,17,216,67\")),bytes32(stringToBytes32(\"80,12,103,155,151,225,166,110,8,247,50,235,146,173,33,133,169,74,118,242,79,143,55,171,108,233,39,220,211,216,140,129\")),bytes32(stringToBytes32(\"223,172,215,106,213,35,63,202,42,252,209,189,130,93,171,126,192,101,78,71,53,236,248,134,53,46,187,154,195,170,8,106\")),bytes32(stringToBytes32(\"152,145,94,200,34,226,204,225,102,6,199,207,218,117,66,92,198,94,218,236,220,162,201,65,86,40,167,59,200,113,4,19\")),bytes32(stringToBytes32(\"12,250,192,185,103,190,54,9,30,187,211,117,6,7,16,232,70,46,130,173,185,170,109,96,105,65,149,129,36,76,214,253\")),bytes32(stringToBytes32(\"30,31,134,76,28,27,243,23,43,95,80,62,206,53,29,180,222,215,178,98,209,253,173,49,252,84,39,213,106,216,136,216\")),bytes32(stringToBytes32(\"92,103,17,159,20,223,149,212,98,5,132,118,212,229,29,188,95,28,94,150,142,68,60,72,150,69,231,131,2,92,216,1\")),bytes32(stringToBytes32(\"198,177,210,188,20,254,40,149,253,46,120,174,64,61,48,213,243,58,17,217,249,65,70,192,136,11,184,12,157,157,46,251\")),bytes32(stringToBytes32(\"235,19,139,36,232,156,164,8,202,186,16,40,115,205,132,150,26,62,163,21,137,237,204,168,251,19,125,23,146,251,52,176\")),bytes32(stringToBytes32(\"53,209,169,57,41,136,200,205,6,75,71,35,178,33,93,155,227,229,123,147,194,200,243,71,202,49,251,44,223,182,57,81\")),bytes32(stringToBytes32(\"166,123,237,104,33,129,14,144,59,150,80,10,201,247,56,219,93,149,106,152,36,169,255,97,20,4,40,220,113,216,56,68\")),bytes32(stringToBytes32(\"11,79,185,150,132,164,85,143,118,100,18,222,3,9,189,93,118,53,114,113,97,66,95,184,122,124,59,253,149,26,216,134\")),bytes32(stringToBytes32(\"60,169,51,56,119,53,60,23,136,30,21,28,71,0,228,178,116,35,87,32,93,34,61,0,153,200,29,121,50,61,40,21\")),bytes32(stringToBytes32(\"70,239,20,243,138,76,99,48,81,73,180,91,18,67,66,28,131,126,243,6,198,60,126,48,195,40,232,114,206,238,90,151\")),bytes32(stringToBytes32(\"255,239,115,72,243,140,115,211,92,195,182,93,9,89,251,53,194,150,100,114,112,182,163,199,108,19,251,26,45,232,255,150\")),bytes32(stringToBytes32(\"119,124,104,111,126,211,27,1,48,29,12,139,224,16,42,144,220,176,204,199,212,110,243,34,42,243,66,83,112,29,75,93\")),bytes32(stringToBytes32(\"25,171,136,28,236,235,123,17,33,170,224,109,179,64,57,178,121,246,104,0,52,173,252,240,63,149,226,121,95,130,73,55\")),bytes32(stringToBytes32(\"16,167,142,1,133,69,43,169,57,15,154,16,102,102,82,73,103,167,7,33,119,98,244,32,20,36,240,206,117,123,238,67\")),bytes32(stringToBytes32(\"6,173,0,35,121,217,107,148,191,109,67,11,129,85,16,65,190,163,100,188,224,149,49,137,116,54,34,204,36,230,51,133\")),bytes32(stringToBytes32(\"5,212,229,137,64,107,67,136,99,146,58,84,241,19,220,60,62,230,155,214,95,233,168,202,50,210,36,146,66,206,15,143\")),bytes32(stringToBytes32(\"2,143,31,223,80,148,36,71,24,11,188,255,248,143,160,231,123,53,225,109,56,160,130,255,252,90,112,32,195,56,225,7\")),bytes32(stringToBytes32(\"183,132,17,57,53,239,67,197,7,6,73,32,184,116,193,168,132,124,171,46,65,254,128,255,216,205,134,36,3,206,36,161\")),bytes32(stringToBytes32(\"59,63,141,158,41,250,3,144,160,4,66,25,207,186,191,63,139,117,183,166,161,250,145,247,68,14,217,90,131,201,248,133\")),bytes32(stringToBytes32(\"126,79,140,87,50,33,2,90,238,122,3,68,12,93,137,159,149,85,228,127,102,239,130,106,83,54,84,204,10,247,129,247\")),bytes32(stringToBytes32(\"233,72,114,51,39,182,153,77,69,140,81,82,19,48,197,100,77,228,103,183,3,229,185,49,23,129,82,104,26,64,222,116\")),bytes32(stringToBytes32(\"33,183,127,37,127,224,58,62,10,110,226,190,250,20,255,129,167,216,56,103,146,7,189,126,190,161,192,126,44,192,80,51\")),bytes32(stringToBytes32(\"51,60,34,238,169,142,97,157,249,111,202,121,75,135,198,15,49,11,31,236,105,40,41,26,242,184,100,16,78,184,27,246\")),bytes32(stringToBytes32(\"59,222,128,236,2,47,8,230,234,32,192,63,40,155,107,189,206,27,216,92,136,101,131,83,178,147,219,129,196,30,1,67\")),bytes32(stringToBytes32(\"100,116,93,17,20,231,146,55,243,20,68,90,131,91,103,202,71,74,244,197,225,56,77,29,182,0,59,199,37,62,243,250\")),bytes32(stringToBytes32(\"90,139,92,171,37,194,32,227,159,246,118,93,83,251,52,66,42,69,237,37,53,124,181,247,216,185,142,178,131,125,118,169\")),bytes32(stringToBytes32(\"62,111,81,14,56,171,162,3,182,45,206,181,17,201,28,40,145,107,138,145,123,221,213,29,133,113,174,172,241,95,37,237\")),bytes32(stringToBytes32(\"129,190,249,171,214,47,32,89,157,132,247,71,173,140,145,170,122,57,86,88,210,176,102,254,199,142,1,73,28,42,233,164\")),bytes32(stringToBytes32(\"123,197,178,93,240,224,58,110,140,230,23,155,126,229,43,138,93,192,82,142,190,157,119,197,102,132,104,153,161,189,124,118\")),bytes32(stringToBytes32(\"176,60,121,221,237,176,188,115,245,182,61,97,159,10,11,255,253,133,137,171,67,254,195,119,164,233,112,114,25,153,5,115\")),bytes32(stringToBytes32(\"203,16,189,21,140,61,204,191,240,15,13,219,165,206,72,252,128,207,254,229,228,146,133,204,101,114,185,215,14,176,195,224\")),bytes32(stringToBytes32(\"184,25,234,179,200,41,237,45,6,133,184,156,67,233,178,32,120,162,107,177,107,62,102,34,86,50,237,166,145,125,48,216\")),bytes32(stringToBytes32(\"103,67,234,46,150,180,112,229,161,62,219,85,65,36,134,164,116,56,104,14,25,222,26,99,204,53,19,103,247,95,104,128\")),bytes32(stringToBytes32(\"225,173,105,231,102,208,66,50,220,209,25,245,200,235,200,83,47,153,111,108,36,126,123,86,186,73,225,151,163,82,118,59\")),bytes32(stringToBytes32(\"200,163,55,129,96,11,140,248,30,189,183,186,46,234,163,130,50,199,190,45,64,64,203,110,6,129,141,110,116,244,64,184\")),bytes32(stringToBytes32(\"255,177,194,250,8,34,153,221,11,201,45,151,86,193,82,231,103,207,169,222,13,174,127,64,139,109,222,107,210,1,201,126\")),bytes32(stringToBytes32(\"233,231,43,114,30,210,241,14,195,189,39,214,249,96,243,137,180,240,18,223,189,87,125,159,123,150,93,255,97,16,204,163\")),bytes32(stringToBytes32(\"123,252,22,225,98,16,182,141,152,112,246,222,98,98,138,77,209,59,53,2,218,84,169,73,212,47,153,221,10,18,10,26\")),bytes32(stringToBytes32(\"238,52,154,105,188,234,149,109,160,28,46,94,47,12,197,122,50,110,252,29,64,73,8,188,72,204,13,180,160,208,11,134\")),bytes32(stringToBytes32(\"36,37,175,68,161,78,40,231,95,31,16,69,98,29,86,16,70,12,71,190,23,13,0,252,96,220,145,187,55,18,181,53\")),bytes32(stringToBytes32(\"156,120,48,103,134,213,61,41,241,155,232,57,12,233,191,210,83,74,100,241,94,184,25,40,177,170,212,21,180,8,155,186\")),bytes32(stringToBytes32(\"35,39,232,106,151,226,145,211,156,97,11,137,83,29,239,221,157,59,44,50,123,151,87,125,16,207,116,242,30,95,247,190\")),bytes32(stringToBytes32(\"108,220,137,207,52,71,111,5,80,210,67,74,66,76,235,226,53,43,70,75,215,186,12,133,179,59,197,104,58,217,228,214\")),bytes32(stringToBytes32(\"130,109,88,17,226,134,35,174,93,154,253,143,248,212,84,211,177,165,104,30,23,24,67,231,160,208,252,245,143,71,114,237\")),bytes32(stringToBytes32(\"151,184,188,82,182,214,71,166,178,62,33,83,202,120,132,30,12,180,94,107,46,27,224,92,60,73,77,94,241,42,133,147\")),bytes32(stringToBytes32(\"64,197,219,192,185,158,73,2,192,110,122,164,124,140,43,175,12,75,84,194,180,119,187,30,171,174,168,78,150,214,21,98\")),bytes32(stringToBytes32(\"9,86,182,248,68,119,73,182,227,22,224,66,44,249,64,91,93,155,45,90,142,229,157,217,12,16,244,5,30,154,65,7\")),bytes32(stringToBytes32(\"115,200,218,179,2,2,53,11,34,49,162,154,224,22,13,168,235,37,7,125,233,188,15,223,115,133,107,94,246,110,59,135\")),bytes32(stringToBytes32(\"220,81,52,142,213,23,210,240,104,212,7,12,70,76,230,122,134,73,197,16,114,231,81,35,66,62,131,131,132,7,191,229\")),bytes32(stringToBytes32(\"93,53,72,103,92,40,129,0,88,155,67,243,193,230,105,223,87,199,249,208,140,179,219,51,172,33,203,41,129,105,14,201\")),bytes32(stringToBytes32(\"187,77,139,44,78,94,95,240,57,77,246,159,156,116,104,73,209,80,130,216,126,162,62,21,130,86,239,59,103,217,77,202\")),bytes32(stringToBytes32(\"92,45,219,122,250,75,141,216,210,85,232,174,79,25,178,39,147,113,24,149,141,124,49,91,144,86,88,49,143,90,90,89\")),bytes32(stringToBytes32(\"7,40,194,237,205,65,200,171,239,18,133,234,24,112,44,182,84,241,36,231,217,106,82,69,96,1,35,232,250,210,232,82\")),bytes32(stringToBytes32(\"166,199,15,112,104,100,39,142,5,99,84,146,194,75,244,57,59,201,144,243,255,163,181,4,96,55,61,100,97,253,18,9\")),bytes32(stringToBytes32(\"208,5,120,9,136,226,129,206,47,29,94,69,77,79,159,42,225,204,34,3,216,8,241,9,232,49,64,203,130,167,43,6\")),bytes32(stringToBytes32(\"145,165,118,201,223,109,165,183,190,41,12,81,37,7,85,181,150,92,228,83,11,14,33,205,244,124,246,19,29,148,198,28\")),bytes32(stringToBytes32(\"134,105,236,128,28,185,45,194,101,253,227,178,255,208,225,174,112,227,14,52,105,227,171,107,33,25,48,84,220,118,196,116\")),bytes32(stringToBytes32(\"12,37,53,12,95,123,28,136,198,252,147,85,113,243,102,213,236,48,87,11,112,58,31,135,107,20,12,103,150,146,130,167\")),bytes32(stringToBytes32(\"204,224,119,15,170,231,106,38,88,118,164,144,26,40,87,109,28,219,198,182,110,85,128,199,186,116,118,8,150,202,227,58\")),bytes32(stringToBytes32(\"220,188,27,192,101,110,237,186,206,122,157,88,167,221,62,241,215,142,55,80,19,76,247,243,232,58,255,16,47,200,33,224\")),bytes32(stringToBytes32(\"253,54,193,80,164,221,225,1,224,32,255,89,179,170,116,233,62,3,56,91,102,184,196,146,81,86,57,170,226,189,221,159\"))]"
              },
              {
                "js": "[[19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211],[137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59],[181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36],[35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21],[174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198],[40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35],[0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114],[2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8],[150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59],[242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34],[165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150],[84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192],[188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79],[136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229],[138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209],[159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96],[221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224],[128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59],[78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216],[3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28],[208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10],[219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129],[250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207],[175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233],[32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125],[131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31],[138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112],[248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24],[93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24],[204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43],[46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168],[235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236],[15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164],[97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54],[245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21],[250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165],[21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45],[11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2],[26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177],[249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201],[152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5],[51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102],[89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75],[137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38],[112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218],[212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102],[230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169],[41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76],[187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58],[29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33],[183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215],[63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205],[115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57],[248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171],[204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11],[149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24],[66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37],[217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192],[99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144],[164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128],[94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9],[133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222],[95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149],[0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90],[230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51],[3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218],[202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14],[159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158],[41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139],[239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47],[248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225],[54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81],[220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177],[21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89],[54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30],[139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19],[45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202],[133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25],[171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201],[81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223],[83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62],[181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43],[26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98],[130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105],[197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234],[221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128],[234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254],[178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215],[26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29],[83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203],[49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149],[176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95],[116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29],[157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199],[181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216],[10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241]]",
                "sol": "[bytes32(stringToBytes32(\"19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211\")),bytes32(stringToBytes32(\"137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59\")),bytes32(stringToBytes32(\"181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36\")),bytes32(stringToBytes32(\"35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21\")),bytes32(stringToBytes32(\"174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198\")),bytes32(stringToBytes32(\"40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35\")),bytes32(stringToBytes32(\"0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114\")),bytes32(stringToBytes32(\"2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8\")),bytes32(stringToBytes32(\"150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59\")),bytes32(stringToBytes32(\"242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34\")),bytes32(stringToBytes32(\"165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150\")),bytes32(stringToBytes32(\"84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192\")),bytes32(stringToBytes32(\"188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79\")),bytes32(stringToBytes32(\"136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229\")),bytes32(stringToBytes32(\"138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209\")),bytes32(stringToBytes32(\"159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96\")),bytes32(stringToBytes32(\"221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224\")),bytes32(stringToBytes32(\"128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59\")),bytes32(stringToBytes32(\"78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216\")),bytes32(stringToBytes32(\"3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28\")),bytes32(stringToBytes32(\"208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10\")),bytes32(stringToBytes32(\"219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129\")),bytes32(stringToBytes32(\"250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207\")),bytes32(stringToBytes32(\"175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233\")),bytes32(stringToBytes32(\"32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125\")),bytes32(stringToBytes32(\"131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31\")),bytes32(stringToBytes32(\"138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112\")),bytes32(stringToBytes32(\"248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24\")),bytes32(stringToBytes32(\"93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24\")),bytes32(stringToBytes32(\"204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43\")),bytes32(stringToBytes32(\"46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168\")),bytes32(stringToBytes32(\"235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236\")),bytes32(stringToBytes32(\"15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164\")),bytes32(stringToBytes32(\"97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54\")),bytes32(stringToBytes32(\"245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21\")),bytes32(stringToBytes32(\"250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165\")),bytes32(stringToBytes32(\"21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45\")),bytes32(stringToBytes32(\"11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2\")),bytes32(stringToBytes32(\"26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177\")),bytes32(stringToBytes32(\"249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201\")),bytes32(stringToBytes32(\"152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5\")),bytes32(stringToBytes32(\"51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102\")),bytes32(stringToBytes32(\"89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75\")),bytes32(stringToBytes32(\"137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38\")),bytes32(stringToBytes32(\"112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218\")),bytes32(stringToBytes32(\"212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102\")),bytes32(stringToBytes32(\"230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169\")),bytes32(stringToBytes32(\"41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76\")),bytes32(stringToBytes32(\"187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58\")),bytes32(stringToBytes32(\"29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33\")),bytes32(stringToBytes32(\"183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215\")),bytes32(stringToBytes32(\"63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205\")),bytes32(stringToBytes32(\"115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57\")),bytes32(stringToBytes32(\"248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171\")),bytes32(stringToBytes32(\"204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11\")),bytes32(stringToBytes32(\"149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24\")),bytes32(stringToBytes32(\"66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37\")),bytes32(stringToBytes32(\"217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192\")),bytes32(stringToBytes32(\"99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144\")),bytes32(stringToBytes32(\"164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128\")),bytes32(stringToBytes32(\"94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9\")),bytes32(stringToBytes32(\"133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222\")),bytes32(stringToBytes32(\"95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149\")),bytes32(stringToBytes32(\"0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90\")),bytes32(stringToBytes32(\"230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51\")),bytes32(stringToBytes32(\"3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218\")),bytes32(stringToBytes32(\"202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14\")),bytes32(stringToBytes32(\"159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158\")),bytes32(stringToBytes32(\"41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139\")),bytes32(stringToBytes32(\"239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47\")),bytes32(stringToBytes32(\"248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225\")),bytes32(stringToBytes32(\"54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81\")),bytes32(stringToBytes32(\"220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177\")),bytes32(stringToBytes32(\"21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89\")),bytes32(stringToBytes32(\"54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30\")),bytes32(stringToBytes32(\"139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19\")),bytes32(stringToBytes32(\"45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202\")),bytes32(stringToBytes32(\"133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25\")),bytes32(stringToBytes32(\"171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201\")),bytes32(stringToBytes32(\"81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223\")),bytes32(stringToBytes32(\"83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62\")),bytes32(stringToBytes32(\"181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43\")),bytes32(stringToBytes32(\"26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98\")),bytes32(stringToBytes32(\"130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105\")),bytes32(stringToBytes32(\"197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234\")),bytes32(stringToBytes32(\"221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128\")),bytes32(stringToBytes32(\"234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254\")),bytes32(stringToBytes32(\"178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215\")),bytes32(stringToBytes32(\"26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29\")),bytes32(stringToBytes32(\"83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203\")),bytes32(stringToBytes32(\"49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149\")),bytes32(stringToBytes32(\"176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95\")),bytes32(stringToBytes32(\"116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29\")),bytes32(stringToBytes32(\"157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199\")),bytes32(stringToBytes32(\"181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216\")),bytes32(stringToBytes32(\"10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[147,134,103,224,129,83,128,47,205,100,203,222,41,148,183,124,33,97,128,228,121,171,1,253,254,34,0,22,55,89,141,202],[182,231,185,88,130,169,249,229,148,177,154,73,167,30,75,251,148,46,79,13,7,77,212,94,95,12,209,170,253,245,152,140],[24,84,169,80,13,118,136,21,202,230,27,197,5,40,167,241,91,132,60,72,157,21,51,156,28,87,118,251,225,253,176,44],[247,250,179,1,3,33,93,82,168,209,153,234,170,154,109,187,162,3,247,202,110,192,218,112,105,106,247,252,143,192,85,7],[10,172,144,116,48,226,98,63,106,186,163,40,78,242,254,51,67,17,107,3,181,30,224,148,148,0,63,67,237,116,238,217],[29,60,91,205,226,57,47,185,147,119,16,76,189,253,195,144,249,249,147,136,250,190,154,56,216,178,190,83,145,163,40,249],[109,14,84,126,132,46,174,233,96,110,183,102,146,4,194,247,25,36,85,13,227,154,61,127,18,117,112,237,151,37,30,219],[133,74,67,84,135,158,216,187,223,232,136,42,144,238,47,38,31,210,255,86,21,242,95,200,225,51,29,46,141,210,90,61],[115,154,185,169,72,21,67,71,169,197,132,187,224,209,161,239,185,134,244,40,140,122,138,223,25,173,222,189,77,141,91,149],[180,108,29,236,220,117,210,93,197,115,50,83,111,187,132,72,179,48,121,210,210,72,128,115,38,207,142,9,15,173,62,44],[212,85,230,208,39,41,56,188,105,23,248,249,55,171,159,10,20,103,160,137,146,138,250,166,86,6,212,206,140,133,155,141],[141,148,118,113,211,201,78,76,216,85,80,0,80,125,55,78,14,149,45,228,146,211,125,100,87,44,215,90,234,181,239,86],[76,145,69,75,168,96,78,107,14,79,23,40,169,179,16,169,59,179,214,123,36,28,117,123,75,120,122,14,229,196,2,119],[243,79,239,146,195,22,36,39,211,11,182,81,146,222,79,136,89,163,205,93,213,113,209,98,176,118,112,221,198,141,224,203],[201,117,223,83,79,118,77,70,124,202,74,208,57,187,126,35,37,145,218,22,30,94,116,34,21,145,148,169,143,211,119,200],[12,38,110,66,18,7,243,188,212,133,225,183,92,215,194,146,236,186,142,234,130,1,199,184,137,105,25,52,0,175,46,45],[235,31,90,94,181,170,91,154,206,150,125,113,139,46,94,58,225,14,210,210,66,226,74,91,18,206,106,162,127,46,219,211],[18,10,231,21,204,20,130,175,39,22,56,196,237,221,30,236,77,161,204,255,5,21,63,52,80,255,150,190,53,229,23,177],[193,144,147,117,40,93,125,145,137,1,216,70,204,75,126,46,118,82,64,251,142,176,164,29,93,8,248,221,5,139,216,202],[216,253,182,238,132,222,138,131,158,39,87,200,162,83,83,60,101,180,42,170,134,129,78,123,115,29,164,1,16,245,222,76],[166,219,53,152,170,44,107,193,67,142,38,25,114,228,70,52,221,174,51,245,118,80,196,44,228,200,237,160,52,209,27,40],[155,208,72,133,27,204,23,162,241,161,47,248,188,227,222,74,104,96,40,103,3,28,215,155,91,200,180,166,87,75,67,25],[113,241,90,32,137,17,16,184,190,93,242,247,130,26,123,45,107,4,96,50,189,161,148,170,137,220,38,123,11,65,61,86],[96,135,184,187,100,168,140,225,218,15,213,238,255,141,185,52,54,251,43,247,149,211,250,251,228,247,72,113,35,81,114,238],[226,44,204,108,170,190,11,132,63,48,31,20,55,84,116,67,36,117,11,209,184,86,69,19,59,134,240,206,204,116,160,126],[221,167,1,62,80,136,17,42,223,77,33,228,229,75,111,143,222,156,129,193,39,58,254,169,154,130,157,173,230,108,214,129],[201,157,102,68,42,98,140,52,187,125,16,22,59,193,225,169,14,174,190,190,169,233,116,174,138,69,105,26,111,42,74,77],[88,155,233,38,44,36,51,243,62,169,193,10,25,50,120,195,150,247,30,40,177,106,182,93,235,169,247,30,127,203,154,117],[232,72,201,50,145,107,162,9,133,171,165,16,78,159,202,0,112,12,106,208,108,188,61,76,49,58,0,222,169,139,245,254],[150,204,226,128,171,170,207,54,133,167,212,245,24,187,175,191,84,9,186,9,70,74,215,47,19,187,11,161,200,207,213,212],[34,82,98,37,24,192,50,41,16,50,84,72,95,38,225,255,137,244,66,237,96,228,2,107,204,69,87,219,116,116,143,170],[193,179,60,167,27,162,233,215,60,43,44,199,53,208,89,95,162,73,160,105,155,88,161,130,102,98,152,98,217,75,55,185],[234,67,215,8,232,252,163,149,140,13,43,101,221,234,82,189,229,247,183,86,39,25,104,68,124,177,1,205,242,55,116,110],[75,255,226,128,4,68,199,17,102,110,53,236,72,252,96,207,98,105,230,233,24,134,65,60,80,11,188,43,37,183,199,223],[152,181,160,3,75,9,173,21,78,201,224,24,61,167,207,254,252,86,38,81,149,97,160,208,178,88,204,52,4,111,198,33],[189,236,4,240,204,41,228,227,255,28,124,248,243,216,47,78,95,29,18,112,8,149,164,204,53,84,219,226,139,246,175,210],[123,140,31,103,243,236,48,74,111,167,65,87,136,247,195,137,42,157,93,171,247,197,172,66,221,133,17,86,112,49,72,193],[141,137,134,222,23,0,149,190,141,73,50,239,162,238,116,42,12,158,27,60,209,9,208,125,65,113,8,131,171,90,242,255],[79,22,105,50,43,182,45,86,92,127,56,23,245,16,82,25,225,47,252,225,197,18,52,196,50,114,158,90,139,200,206,41],[0,96,81,90,86,32,86,99,217,145,173,221,14,64,71,76,187,34,174,56,28,15,157,55,148,97,110,174,21,231,59,145],[212,43,61,47,228,4,162,188,204,172,40,116,49,90,204,106,227,53,115,253,114,233,216,201,63,14,194,119,56,183,17,204],[144,237,2,244,9,244,121,122,224,165,73,130,31,118,129,247,43,101,205,238,128,229,200,147,203,130,129,97,26,8,128,234],[156,227,195,36,212,164,108,243,54,105,36,2,131,23,140,189,66,83,77,97,92,213,8,117,9,121,88,133,87,80,149,116],[51,2,166,237,162,49,102,88,13,200,41,21,94,36,69,50,46,243,69,57,252,40,103,138,241,73,174,243,90,21,78,218],[139,255,244,33,214,216,150,162,149,30,183,131,142,189,43,150,87,141,145,127,15,196,31,45,239,125,44,220,89,81,113,200],[2,99,60,41,98,128,169,117,112,119,71,173,159,180,169,119,151,232,43,238,186,149,253,131,40,5,106,34,174,243,229,0],[74,230,99,238,48,125,128,100,162,90,62,172,18,238,141,181,171,26,108,73,121,150,115,24,112,227,48,103,41,9,237,253],[27,224,105,41,109,161,179,178,1,220,182,150,84,192,38,210,2,181,226,96,211,225,105,118,113,38,172,231,141,104,191,171],[88,10,250,107,8,63,209,155,0,163,253,1,254,87,162,71,209,94,149,31,142,236,17,51,174,157,53,130,168,16,116,109],[61,107,142,31,247,164,41,93,22,128,159,0,10,144,88,179,16,179,29,223,6,154,227,114,82,75,146,150,180,97,122,119],[37,232,86,114,96,165,234,109,80,52,28,41,74,166,244,105,211,39,55,158,180,82,218,233,77,90,32,19,112,180,106,94],[211,224,124,110,28,79,174,194,22,180,63,173,6,194,242,45,249,139,214,39,48,93,225,240,63,69,247,151,49,196,193,37],[7,250,95,181,145,145,100,139,151,252,210,194,32,194,220,154,54,81,165,242,163,78,30,63,126,96,80,151,104,63,156,233],[144,28,169,158,51,111,47,217,87,68,31,216,250,143,47,132,53,234,196,179,117,189,89,143,142,82,192,91,149,187,93,23],[252,16,182,169,110,94,13,230,66,202,21,174,69,148,142,55,143,235,121,223,99,42,61,132,86,240,100,217,106,67,178,0],[228,149,126,124,122,224,219,185,97,79,125,136,218,130,98,240,233,81,254,1,77,105,88,226,207,43,241,122,68,59,66,255],[173,103,21,25,174,21,41,125,129,16,173,55,76,243,159,118,88,222,105,135,146,76,187,44,145,164,89,44,57,119,61,75],[206,37,162,171,227,24,34,180,76,29,38,216,187,214,178,251,158,214,110,187,58,43,43,246,0,210,84,112,161,41,141,166],[1,185,187,211,98,231,159,57,23,138,23,108,76,126,172,30,20,115,183,181,66,155,128,27,224,13,163,132,226,5,42,186],[151,254,115,239,185,47,28,189,102,252,144,77,120,147,156,1,48,23,170,171,170,242,185,108,168,0,59,101,76,209,76,114],[174,244,28,196,225,199,50,40,6,98,241,110,139,163,57,98,188,93,90,121,90,253,199,204,148,107,67,234,179,153,201,123],[250,14,44,109,21,133,57,157,71,4,69,206,37,8,6,10,33,105,187,204,75,113,157,134,128,159,88,188,21,120,137,14],[73,165,83,195,68,93,157,182,186,68,114,83,221,245,177,90,125,149,120,250,245,204,183,36,6,57,183,40,75,23,202,191],[203,25,208,119,10,118,134,94,135,193,144,15,59,145,191,162,40,26,111,106,24,117,29,54,146,158,90,210,246,227,131,62],[78,43,119,237,0,17,172,1,223,99,150,171,195,34,141,113,219,26,114,159,242,181,148,14,126,238,39,217,164,161,172,62],[171,194,136,56,176,30,167,14,39,253,46,188,125,117,72,17,195,166,166,87,16,150,233,59,125,3,234,224,138,83,75,171],[250,77,121,78,65,198,104,169,159,180,31,94,147,69,246,192,181,183,214,57,4,13,248,252,203,109,217,94,78,255,140,251],[191,48,150,142,147,83,85,11,140,27,166,184,132,87,110,15,96,2,123,230,79,212,53,17,11,61,182,48,97,224,42,62],[191,204,238,13,231,111,207,176,124,124,16,244,220,247,191,190,225,25,199,171,47,118,124,172,194,203,176,144,122,34,79,2],[44,10,24,116,194,202,110,83,21,56,191,134,250,146,192,92,19,172,142,138,247,190,72,185,24,191,192,201,148,110,17,39],[32,30,73,57,19,207,31,5,235,233,216,184,159,101,33,233,88,200,216,141,148,21,142,190,229,115,41,250,61,168,240,218],[229,117,133,199,252,230,134,64,150,38,170,159,151,213,9,161,51,59,72,202,236,226,62,232,15,142,98,25,62,172,185,114],[50,111,160,252,145,199,242,191,189,135,38,90,133,249,146,78,11,99,112,192,246,97,165,12,245,127,204,14,75,207,51,59],[143,182,230,130,132,84,84,175,196,150,175,52,143,71,91,120,36,198,72,174,84,121,65,107,87,247,131,130,43,204,22,144],[23,32,54,47,153,170,127,90,47,71,211,249,188,90,56,193,165,112,80,182,83,61,200,156,58,115,205,1,166,177,103,72],[42,8,13,101,96,31,179,49,90,170,128,29,49,26,141,191,28,233,202,133,245,82,139,213,179,180,182,181,152,204,152,230],[114,129,37,253,60,12,73,203,7,216,253,41,111,136,103,44,23,40,1,43,122,233,39,102,88,230,10,79,211,91,133,198],[159,212,91,10,216,80,22,136,233,72,98,68,54,74,83,152,208,217,204,222,195,94,43,130,117,78,223,196,152,31,90,137],[22,135,129,105,170,38,128,41,115,216,93,131,237,159,0,206,168,24,248,183,85,131,185,32,71,145,175,47,77,65,54,237],[91,158,234,41,254,134,60,247,132,205,29,207,252,118,73,231,122,98,57,159,182,153,169,70,161,175,169,105,245,228,21,128],[51,96,48,194,44,37,0,141,191,128,59,220,93,64,197,14,110,135,155,137,223,133,52,238,82,251,44,223,197,87,20,36],[208,139,108,111,108,11,104,199,93,132,16,104,160,177,39,108,236,168,76,207,18,55,105,90,93,17,72,222,106,28,171,246],[217,60,217,189,90,84,136,224,170,195,106,243,95,177,21,9,206,22,96,239,175,196,7,120,70,55,245,206,211,47,41,71],[95,2,158,104,207,209,155,113,74,196,22,250,214,32,6,44,197,225,162,233,129,6,177,87,25,173,41,246,94,97,192,249],[10,190,157,203,146,69,66,83,207,136,79,44,211,48,89,165,174,217,22,213,183,17,172,167,193,167,184,112,174,6,190,76],[109,203,240,134,88,125,50,158,252,60,252,252,3,52,172,205,183,171,14,11,62,26,78,162,210,78,103,162,201,145,168,216],[194,21,135,46,171,216,65,222,47,193,111,249,232,235,19,239,111,49,154,106,193,108,33,97,70,180,0,44,200,86,169,26],[11,173,248,52,147,42,203,29,150,216,112,98,132,132,149,111,41,45,125,116,33,49,146,195,12,83,51,55,19,113,136,143],[249,73,191,151,253,161,190,177,55,55,110,143,103,157,77,157,1,52,157,115,42,102,199,20,9,100,49,206,93,176,232,66],[181,92,192,183,251,176,22,200,254,4,203,24,214,108,182,181,10,1,190,80,133,70,114,210,231,246,189,93,245,232,126,81],[50,29,63,171,64,98,69,42,173,165,78,159,188,80,51,98,249,115,255,5,111,29,6,106,54,80,139,181,83,40,233,136],[57,146,253,152,153,82,125,220,34,236,224,96,32,232,183,120,179,98,25,238,14,173,175,117,61,147,185,0,1,240,133,117],[0,219,43,69,156,208,203,249,67,13,236,75,218,237,54,53,135,119,110,11,237,180,63,53,204,222,130,11,192,135,209,21],[67,255,230,222,22,41,149,214,218,244,61,202,130,29,25,223,52,100,213,207,175,108,136,140,174,59,155,92,60,89,206,209],[204,149,5,30,217,53,22,128,109,167,39,82,125,186,255,33,4,165,101,88,118,52,74,215,99,231,50,10,2,2,73,125],[8,198,235,249,179,117,181,88,231,97,94,38,181,197,140,186,21,26,137,238,243,19,18,21,147,125,228,80,222,187,249,191],[184,158,114,15,7,165,89,20,175,185,139,143,255,218,26,146,115,83,252,228,93,171,149,47,144,54,100,149,143,46,156,245]]",
                "sol": "[stringToBytes32(\"95,253,72,123,157,251,2,73,173,182,137,30,175,161,230,164,192,78,130,25,114,72,135,110,116,213,176,13,95,94,85,110\"),stringToBytes32(\"89,118,249,23,117,245,112,88,253,28,2,181,111,49,2,19,41,132,106,218,196,85,55,35,168,189,91,117,123,115,187,37\"),stringToBytes32(\"168,234,43,48,48,69,28,94,253,150,89,83,136,224,226,140,207,84,206,253,236,226,148,134,70,97,251,191,111,98,249,92\"),stringToBytes32(\"81,44,92,238,160,50,119,81,45,147,25,165,230,127,240,60,58,18,228,43,250,163,153,173,122,225,89,70,93,39,68,84\"),stringToBytes32(\"35,55,32,47,9,85,116,58,195,183,229,88,155,23,20,106,195,217,22,10,23,162,155,211,148,146,185,206,44,194,206,57\"),stringToBytes32(\"228,197,87,90,55,16,5,58,79,198,8,246,146,116,0,211,87,239,215,28,59,77,245,114,228,158,110,159,95,253,67,46\"),stringToBytes32(\"136,133,62,229,189,114,169,141,252,27,65,239,209,164,197,75,80,143,106,223,248,192,239,6,227,191,99,44,108,180,188,34\"),stringToBytes32(\"126,216,21,78,101,214,41,135,140,159,13,236,52,209,226,191,142,137,234,110,229,143,202,31,10,166,190,238,146,191,222,212\"),stringToBytes32(\"0,72,222,166,156,191,106,15,138,80,163,207,3,139,248,89,36,32,28,49,240,7,52,218,57,90,119,15,183,94,210,74\"),stringToBytes32(\"101,211,134,151,106,128,50,33,49,199,226,154,30,72,150,50,205,105,90,163,250,133,239,28,13,168,64,219,12,44,233,249\"),stringToBytes32(\"1,219,38,208,31,255,134,67,186,58,59,30,125,149,211,143,214,90,167,146,32,239,15,104,135,87,214,139,77,136,187,65\"),stringToBytes32(\"42,127,112,74,44,108,214,90,193,123,62,247,83,137,173,74,196,92,74,93,34,199,114,247,124,40,254,182,47,228,182,84\"),stringToBytes32(\"107,55,215,130,160,116,74,82,216,114,110,205,83,119,229,138,250,117,163,202,141,120,25,21,226,178,212,195,86,241,210,153\"),stringToBytes32(\"150,118,48,108,68,217,49,113,120,44,233,62,105,105,27,230,184,243,219,172,249,75,209,203,142,195,20,255,88,219,171,121\"),stringToBytes32(\"141,216,6,27,244,145,230,164,172,142,253,96,53,214,180,112,151,248,212,31,248,47,216,46,0,195,105,174,197,34,146,69\"),stringToBytes32(\"163,45,132,33,9,61,56,179,55,250,53,74,111,141,181,55,220,135,129,163,238,221,69,47,233,168,81,107,215,244,78,35\"),stringToBytes32(\"94,178,222,168,82,100,215,30,171,196,117,0,24,83,29,110,119,67,4,169,132,13,39,147,154,192,75,70,97,25,49,240\"),stringToBytes32(\"103,118,82,226,67,143,92,23,77,111,233,74,110,141,46,172,7,216,34,109,206,179,156,4,4,246,175,10,104,240,23,171\"),stringToBytes32(\"201,148,236,25,211,253,135,163,139,61,140,45,127,91,187,224,3,129,234,184,88,149,255,61,114,157,183,80,229,17,48,183\"),stringToBytes32(\"195,244,5,239,12,104,144,210,209,90,152,245,169,236,155,18,111,249,41,158,169,190,82,194,73,252,216,197,76,139,132,231\"),stringToBytes32(\"164,107,202,154,191,131,184,249,120,122,218,95,91,22,197,147,67,144,189,112,245,186,72,245,147,247,57,139,106,115,112,50\"),stringToBytes32(\"123,233,147,143,62,237,196,103,246,144,96,60,96,150,163,240,208,214,226,194,30,145,127,139,104,191,220,196,151,196,224,68\"),stringToBytes32(\"215,225,148,67,53,238,12,6,102,191,84,249,229,66,65,154,105,197,22,92,68,128,22,159,17,81,20,10,169,62,147,210\"),stringToBytes32(\"235,162,161,44,208,149,243,220,81,210,149,171,222,126,17,111,209,142,76,46,163,54,37,176,147,106,153,187,22,60,214,4\"),stringToBytes32(\"10,128,219,80,240,15,32,0,182,215,41,52,45,106,80,69,195,194,222,35,36,153,79,120,168,243,222,10,45,112,114,210\"),stringToBytes32(\"86,23,222,239,55,28,131,50,241,223,48,38,29,46,209,129,16,168,187,125,237,156,147,201,55,9,113,192,145,221,99,253\"),stringToBytes32(\"72,47,216,188,119,149,101,185,90,110,91,127,18,141,71,22,232,14,47,66,197,47,98,145,129,79,214,113,69,234,228,64\"),stringToBytes32(\"114,220,180,79,51,54,137,22,38,45,13,231,126,179,34,157,129,53,146,208,201,57,82,69,222,194,213,180,116,11,77,46\"),stringToBytes32(\"211,150,84,62,229,247,23,104,6,187,49,68,22,51,87,164,159,6,86,158,221,42,53,192,224,56,68,97,180,103,155,195\"),stringToBytes32(\"1,161,111,60,6,195,76,213,67,75,108,25,194,142,103,245,108,133,91,53,65,206,172,15,5,97,249,205,132,41,46,83\"),stringToBytes32(\"56,140,166,214,191,56,36,193,106,59,142,147,124,213,254,41,125,72,36,43,51,183,128,7,247,31,38,171,54,48,102,239\"),stringToBytes32(\"203,10,143,149,106,11,200,189,38,88,25,134,125,12,26,185,41,162,245,84,141,171,151,122,3,126,10,182,68,43,96,54\"),stringToBytes32(\"84,252,134,162,131,129,29,102,215,135,120,174,83,244,205,147,132,122,221,15,109,17,152,187,231,221,208,121,216,105,190,180\"),stringToBytes32(\"17,39,127,23,99,236,19,211,112,217,224,30,210,6,25,71,50,44,83,176,39,185,170,5,133,68,111,95,87,179,139,99\"),stringToBytes32(\"193,151,8,244,178,54,233,17,10,134,142,166,13,199,81,117,44,248,214,192,52,181,248,193,6,56,159,11,227,237,27,221\"),stringToBytes32(\"133,194,216,222,137,79,15,79,5,19,253,191,221,108,244,218,138,221,47,241,198,135,195,25,163,174,221,174,183,208,115,35\"),stringToBytes32(\"146,157,120,136,63,120,238,102,63,128,20,92,230,221,69,156,107,236,46,145,90,223,34,127,40,244,222,254,154,139,139,147\"),stringToBytes32(\"209,160,250,135,114,177,255,174,113,4,216,237,35,249,137,211,79,232,205,38,228,164,8,234,156,249,78,202,209,71,118,241\"),stringToBytes32(\"60,170,251,13,37,151,243,50,219,5,29,215,173,215,88,158,130,12,225,195,29,109,7,99,72,180,228,219,140,187,23,78\"),stringToBytes32(\"67,192,141,72,94,36,122,162,43,172,238,24,118,38,155,32,103,23,1,158,229,66,251,2,135,165,82,74,30,45,196,167\"),stringToBytes32(\"109,38,47,117,21,55,94,242,237,150,78,156,118,181,212,234,62,239,127,56,80,27,213,5,146,246,200,133,5,203,151,206\"),stringToBytes32(\"52,72,244,108,59,254,90,88,194,177,73,217,152,38,255,166,52,167,82,236,89,89,12,84,201,76,138,125,35,180,54,227\"),stringToBytes32(\"191,114,252,134,54,236,60,184,41,125,79,101,11,252,238,207,10,101,75,28,122,53,100,15,58,223,98,220,85,44,124,118\"),stringToBytes32(\"208,117,155,203,159,220,219,104,63,146,32,23,133,22,149,75,121,171,118,223,120,62,122,139,182,54,230,254,83,4,182,72\"),stringToBytes32(\"255,215,142,143,84,194,14,78,52,150,35,123,45,189,216,175,253,6,165,9,65,186,27,248,48,86,113,89,25,27,78,67\"),stringToBytes32(\"167,77,147,13,5,169,129,151,72,187,113,59,114,167,73,95,136,31,1,20,22,174,63,201,199,18,180,239,105,246,122,148\"),stringToBytes32(\"3,188,56,157,195,173,221,32,163,6,11,37,211,234,124,253,62,190,93,53,33,186,253,53,250,116,178,202,154,154,78,55\"),stringToBytes32(\"164,49,48,180,124,245,8,90,140,128,0,209,61,162,218,113,253,121,81,254,249,209,124,90,40,251,29,19,10,176,1,17\"),stringToBytes32(\"93,84,160,70,214,123,126,143,197,161,109,74,240,23,86,217,212,9,151,64,67,79,234,186,6,12,231,222,168,157,80,203\"),stringToBytes32(\"197,1,197,133,70,142,18,44,231,156,200,70,137,114,196,89,12,133,166,182,158,230,133,111,221,243,3,254,63,144,195,240\"),stringToBytes32(\"209,93,44,97,207,139,171,2,219,217,83,29,41,158,242,172,213,73,23,91,136,8,232,57,161,213,252,137,235,193,143,223\"),stringToBytes32(\"84,16,152,206,205,9,178,73,136,221,219,57,233,119,217,171,187,91,195,141,8,244,2,185,131,114,157,158,147,245,150,201\"),stringToBytes32(\"153,49,218,132,2,243,209,4,142,183,117,159,203,249,228,229,168,200,89,60,106,173,152,30,166,186,122,148,23,63,189,93\"),stringToBytes32(\"146,186,245,24,7,92,20,14,16,169,93,115,103,108,105,239,137,183,152,29,183,211,124,29,150,13,198,143,83,164,230,86\"),stringToBytes32(\"169,115,99,64,174,75,39,15,143,120,22,162,204,134,7,89,140,52,254,70,236,89,22,108,91,93,58,80,91,224,186,60\"),stringToBytes32(\"152,77,219,197,3,39,59,174,162,253,65,55,74,182,5,92,87,123,28,169,192,64,159,88,135,58,244,35,127,162,166,196\"),stringToBytes32(\"181,186,164,213,30,204,87,179,117,204,249,225,152,7,176,181,159,184,139,193,185,60,91,33,13,52,142,246,251,201,44,221\"),stringToBytes32(\"107,104,47,48,220,12,30,102,187,224,210,117,156,84,93,188,175,233,52,249,174,241,106,218,55,31,160,254,133,255,10,67\"),stringToBytes32(\"126,223,230,35,86,214,5,61,57,79,238,236,229,185,153,39,136,142,165,204,94,84,229,100,12,1,232,20,99,44,45,126\"),stringToBytes32(\"217,124,87,146,152,222,143,188,71,247,77,168,105,195,94,206,184,24,117,29,168,227,146,193,62,164,168,77,7,73,152,205\"),stringToBytes32(\"177,146,254,23,12,107,200,125,223,119,100,200,232,100,199,240,195,154,136,75,81,165,148,238,6,107,183,66,140,40,109,123\"),stringToBytes32(\"218,105,129,231,49,232,161,165,218,111,142,68,197,250,8,216,161,47,5,236,136,39,185,171,90,139,123,73,146,141,88,220\"),stringToBytes32(\"169,207,105,10,55,223,39,243,125,214,72,213,33,5,36,91,242,128,195,245,95,222,178,178,131,79,37,74,120,46,151,163\"),stringToBytes32(\"8,67,149,207,4,163,233,49,194,159,99,156,47,75,2,20,86,185,193,178,138,206,23,44,175,240,254,97,69,232,166,26\"),stringToBytes32(\"85,119,237,32,63,255,222,123,176,111,236,210,63,192,17,5,46,147,43,223,168,213,225,88,117,86,148,31,137,25,195,27\"),stringToBytes32(\"215,60,51,214,152,235,203,19,151,182,50,232,225,183,105,178,42,104,207,211,77,32,145,5,121,61,194,77,170,189,173,226\"),stringToBytes32(\"141,205,63,157,53,50,195,96,58,65,156,226,54,30,97,103,15,182,35,79,62,118,175,35,74,59,132,185,42,185,241,240\"),stringToBytes32(\"46,203,98,164,241,13,44,142,66,127,208,240,49,145,59,134,90,124,133,106,110,191,43,64,169,223,55,251,150,244,71,222\"),stringToBytes32(\"191,0,182,188,98,24,97,67,80,97,243,121,235,48,29,254,133,161,145,13,45,90,227,58,88,245,247,199,61,10,210,189\"),stringToBytes32(\"1,9,168,249,59,209,37,238,37,211,223,156,59,134,236,102,162,177,139,133,191,90,2,76,228,9,214,99,84,200,157,186\"),stringToBytes32(\"122,12,186,19,224,70,34,236,23,6,188,117,215,149,236,217,76,155,250,116,72,128,103,102,64,70,55,49,187,145,36,131\"),stringToBytes32(\"33,167,45,170,253,97,244,72,69,28,35,146,27,85,19,172,3,54,91,24,210,192,184,104,154,249,207,215,66,217,190,88\"),stringToBytes32(\"98,89,210,203,137,104,117,118,110,85,71,160,194,125,201,159,103,89,35,216,239,5,140,207,200,0,5,224,214,35,25,195\"),stringToBytes32(\"68,89,9,62,206,119,81,166,210,4,159,140,59,74,100,210,124,204,61,198,16,49,243,255,220,184,168,119,170,76,145,182\"),stringToBytes32(\"140,22,78,73,26,17,77,151,74,141,117,18,7,92,70,155,226,176,252,0,190,23,92,10,7,110,242,176,90,9,238,220\"),stringToBytes32(\"10,23,56,208,59,53,111,209,211,93,90,66,9,202,227,154,100,14,47,12,183,245,160,227,38,137,34,183,189,151,46,133\"),stringToBytes32(\"30,83,195,94,22,14,92,41,251,182,197,30,187,160,253,220,211,55,3,239,156,51,241,26,237,94,252,37,132,37,125,102\"),stringToBytes32(\"65,70,18,186,220,99,154,38,147,218,156,160,198,201,0,11,142,44,63,184,101,4,5,38,232,218,3,228,35,86,35,50\"),stringToBytes32(\"116,228,118,115,234,192,172,40,234,50,214,246,172,193,185,60,153,194,178,243,188,230,132,172,152,135,2,151,36,97,168,233\"),stringToBytes32(\"6,38,134,55,124,78,73,50,148,160,81,129,149,95,165,79,159,217,86,212,245,105,98,20,74,229,32,65,139,221,175,169\"),stringToBytes32(\"45,100,235,12,219,139,0,177,200,251,231,30,52,59,247,12,223,176,114,91,209,9,214,238,114,54,158,232,154,240,19,134\"),stringToBytes32(\"145,166,38,133,96,43,198,142,178,237,169,249,119,140,86,210,187,62,5,0,53,171,36,99,237,63,31,30,216,18,88,246\"),stringToBytes32(\"85,244,81,183,5,167,221,236,79,151,37,61,101,16,228,222,6,21,120,124,227,179,182,19,17,45,51,14,250,206,79,184\"),stringToBytes32(\"12,167,47,181,231,247,62,124,11,223,6,230,185,88,159,94,93,26,219,62,178,83,243,150,85,95,245,154,55,132,7,116\"),stringToBytes32(\"183,229,9,150,24,69,159,126,113,38,0,243,156,74,13,41,250,218,170,71,126,7,82,171,3,146,47,57,175,241,13,227\"),stringToBytes32(\"100,83,140,229,62,141,28,50,45,141,90,95,28,31,116,113,89,90,6,154,251,46,125,56,154,232,230,192,9,185,125,233\"),stringToBytes32(\"115,181,157,27,133,162,226,179,59,26,95,221,247,200,246,52,94,193,233,235,170,230,212,143,40,42,225,213,164,7,231,197\"),stringToBytes32(\"112,127,215,154,144,113,201,52,68,74,165,45,61,116,163,88,124,85,24,35,97,172,71,111,39,175,17,118,97,216,142,60\"),stringToBytes32(\"140,50,148,66,246,211,25,115,122,94,211,92,45,197,12,68,49,91,207,255,77,114,9,229,51,247,229,134,182,44,97,33\"),stringToBytes32(\"25,5,239,176,159,254,170,158,217,217,22,168,209,179,71,97,165,203,114,239,179,53,122,164,145,28,102,91,108,77,67,77\"),stringToBytes32(\"135,100,207,115,211,142,254,214,53,108,124,35,142,204,25,254,119,161,62,79,158,120,21,121,130,111,7,5,152,194,122,230\"),stringToBytes32(\"230,1,21,88,233,31,55,246,8,120,76,204,213,233,236,234,235,122,130,4,75,101,172,70,79,176,106,156,123,58,6,238\"),stringToBytes32(\"193,22,23,81,222,149,144,223,87,15,245,178,189,88,92,162,100,242,239,167,209,16,32,208,246,24,34,59,128,220,219,43\"),stringToBytes32(\"237,7,245,74,219,139,54,2,249,94,22,239,89,174,73,200,147,158,77,140,51,58,249,137,135,130,245,75,224,100,14,174\"),stringToBytes32(\"176,137,67,171,116,106,202,251,145,194,103,58,182,49,81,195,133,126,44,212,223,194,186,89,240,123,50,159,135,18,93,104\"),stringToBytes32(\"120,173,120,130,20,207,201,2,180,86,212,221,220,33,135,118,61,199,247,92,246,198,149,141,242,186,149,156,146,16,63,95\"),stringToBytes32(\"172,136,255,155,15,113,194,209,107,240,145,201,66,34,45,166,3,136,18,238,136,89,233,240,214,245,100,211,49,183,120,221\")]"
              },
              {
                "js": "[[19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211],[137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59],[181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36],[35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21],[174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198],[40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35],[0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114],[2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8],[150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59],[242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34],[165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150],[84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192],[188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79],[136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229],[138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209],[159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96],[221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224],[128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59],[78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216],[3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28],[208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10],[219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129],[250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207],[175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233],[32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125],[131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31],[138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112],[248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24],[93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24],[204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43],[46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168],[235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236],[15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164],[97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54],[245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21],[250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165],[21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45],[11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2],[26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177],[249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201],[152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5],[51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102],[89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75],[137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38],[112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218],[212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102],[230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169],[41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76],[187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58],[29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33],[183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215],[63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205],[115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57],[248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171],[204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11],[149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24],[66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37],[217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192],[99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144],[164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128],[94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9],[133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222],[95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149],[0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90],[230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51],[3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218],[202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14],[159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158],[41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139],[239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47],[248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225],[54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81],[220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177],[21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89],[54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30],[139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19],[45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202],[133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25],[171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201],[81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223],[83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62],[181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43],[26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98],[130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105],[197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234],[221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128],[234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254],[178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215],[26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29],[83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203],[49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149],[176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95],[116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29],[157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199],[181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216],[10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241]]",
                "sol": "[bytes32(stringToBytes32(\"19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211\")),bytes32(stringToBytes32(\"137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59\")),bytes32(stringToBytes32(\"181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36\")),bytes32(stringToBytes32(\"35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21\")),bytes32(stringToBytes32(\"174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198\")),bytes32(stringToBytes32(\"40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35\")),bytes32(stringToBytes32(\"0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114\")),bytes32(stringToBytes32(\"2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8\")),bytes32(stringToBytes32(\"150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59\")),bytes32(stringToBytes32(\"242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34\")),bytes32(stringToBytes32(\"165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150\")),bytes32(stringToBytes32(\"84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192\")),bytes32(stringToBytes32(\"188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79\")),bytes32(stringToBytes32(\"136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229\")),bytes32(stringToBytes32(\"138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209\")),bytes32(stringToBytes32(\"159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96\")),bytes32(stringToBytes32(\"221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224\")),bytes32(stringToBytes32(\"128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59\")),bytes32(stringToBytes32(\"78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216\")),bytes32(stringToBytes32(\"3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28\")),bytes32(stringToBytes32(\"208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10\")),bytes32(stringToBytes32(\"219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129\")),bytes32(stringToBytes32(\"250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207\")),bytes32(stringToBytes32(\"175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233\")),bytes32(stringToBytes32(\"32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125\")),bytes32(stringToBytes32(\"131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31\")),bytes32(stringToBytes32(\"138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112\")),bytes32(stringToBytes32(\"248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24\")),bytes32(stringToBytes32(\"93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24\")),bytes32(stringToBytes32(\"204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43\")),bytes32(stringToBytes32(\"46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168\")),bytes32(stringToBytes32(\"235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236\")),bytes32(stringToBytes32(\"15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164\")),bytes32(stringToBytes32(\"97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54\")),bytes32(stringToBytes32(\"245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21\")),bytes32(stringToBytes32(\"250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165\")),bytes32(stringToBytes32(\"21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45\")),bytes32(stringToBytes32(\"11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2\")),bytes32(stringToBytes32(\"26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177\")),bytes32(stringToBytes32(\"249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201\")),bytes32(stringToBytes32(\"152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5\")),bytes32(stringToBytes32(\"51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102\")),bytes32(stringToBytes32(\"89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75\")),bytes32(stringToBytes32(\"137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38\")),bytes32(stringToBytes32(\"112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218\")),bytes32(stringToBytes32(\"212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102\")),bytes32(stringToBytes32(\"230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169\")),bytes32(stringToBytes32(\"41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76\")),bytes32(stringToBytes32(\"187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58\")),bytes32(stringToBytes32(\"29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33\")),bytes32(stringToBytes32(\"183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215\")),bytes32(stringToBytes32(\"63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205\")),bytes32(stringToBytes32(\"115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57\")),bytes32(stringToBytes32(\"248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171\")),bytes32(stringToBytes32(\"204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11\")),bytes32(stringToBytes32(\"149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24\")),bytes32(stringToBytes32(\"66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37\")),bytes32(stringToBytes32(\"217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192\")),bytes32(stringToBytes32(\"99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144\")),bytes32(stringToBytes32(\"164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128\")),bytes32(stringToBytes32(\"94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9\")),bytes32(stringToBytes32(\"133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222\")),bytes32(stringToBytes32(\"95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149\")),bytes32(stringToBytes32(\"0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90\")),bytes32(stringToBytes32(\"230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51\")),bytes32(stringToBytes32(\"3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218\")),bytes32(stringToBytes32(\"202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14\")),bytes32(stringToBytes32(\"159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158\")),bytes32(stringToBytes32(\"41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139\")),bytes32(stringToBytes32(\"239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47\")),bytes32(stringToBytes32(\"248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225\")),bytes32(stringToBytes32(\"54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81\")),bytes32(stringToBytes32(\"220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177\")),bytes32(stringToBytes32(\"21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89\")),bytes32(stringToBytes32(\"54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30\")),bytes32(stringToBytes32(\"139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19\")),bytes32(stringToBytes32(\"45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202\")),bytes32(stringToBytes32(\"133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25\")),bytes32(stringToBytes32(\"171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201\")),bytes32(stringToBytes32(\"81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223\")),bytes32(stringToBytes32(\"83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62\")),bytes32(stringToBytes32(\"181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43\")),bytes32(stringToBytes32(\"26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98\")),bytes32(stringToBytes32(\"130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105\")),bytes32(stringToBytes32(\"197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234\")),bytes32(stringToBytes32(\"221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128\")),bytes32(stringToBytes32(\"234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254\")),bytes32(stringToBytes32(\"178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215\")),bytes32(stringToBytes32(\"26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29\")),bytes32(stringToBytes32(\"83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203\")),bytes32(stringToBytes32(\"49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149\")),bytes32(stringToBytes32(\"176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95\")),bytes32(stringToBytes32(\"116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29\")),bytes32(stringToBytes32(\"157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199\")),bytes32(stringToBytes32(\"181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216\")),bytes32(stringToBytes32(\"10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211],[137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59],[181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36],[35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21],[174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198],[40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35],[0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114],[2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8],[150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59],[242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34],[165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150],[84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192],[188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79],[136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229],[138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209],[159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96],[221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224],[128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59],[78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216],[3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28],[208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10],[219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129],[250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207],[175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233],[32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125],[131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31],[138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112],[248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24],[93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24],[204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43],[46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168],[235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236],[15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164],[97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54],[245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21],[250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165],[21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45],[11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2],[26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177],[249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201],[152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5],[51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102],[89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75],[137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38],[112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218],[212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102],[230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169],[41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76],[187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58],[29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33],[183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215],[63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205],[115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57],[248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171],[204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11],[149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24],[66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37],[217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192],[99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144],[164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128],[94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9],[133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222],[95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149],[0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90],[230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51],[3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218],[202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14],[159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158],[41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139],[239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47],[248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225],[54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81],[220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177],[21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89],[54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30],[139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19],[45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202],[133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25],[171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201],[81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223],[83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62],[181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43],[26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98],[130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105],[197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234],[221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128],[234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254],[178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215],[26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29],[83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203],[49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149],[176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95],[116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29],[157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199],[181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216],[10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241]]",
                "sol": "[bytes32(stringToBytes32(\"19,16,59,172,110,193,149,53,80,172,7,251,208,129,231,214,137,191,158,234,52,128,37,67,136,130,75,64,100,5,194,211\")),bytes32(stringToBytes32(\"137,56,255,222,175,104,110,104,24,148,120,44,61,239,88,219,138,75,200,157,199,0,97,175,46,8,176,155,119,213,233,59\")),bytes32(stringToBytes32(\"181,9,242,156,28,56,221,183,130,96,207,70,8,1,178,156,209,54,197,219,189,142,68,79,18,4,122,143,56,41,66,36\")),bytes32(stringToBytes32(\"35,236,87,248,173,159,38,11,199,178,70,208,240,181,196,171,13,121,152,129,96,235,76,184,164,21,183,0,43,40,227,21\")),bytes32(stringToBytes32(\"174,107,183,91,211,15,152,253,251,216,76,46,233,79,157,136,155,42,221,145,5,69,227,177,47,137,67,188,207,108,166,198\")),bytes32(stringToBytes32(\"40,106,21,34,231,56,114,84,194,166,190,231,56,55,5,162,225,85,90,206,114,137,138,246,129,59,197,57,19,70,112,35\")),bytes32(stringToBytes32(\"0,243,36,241,25,101,99,251,187,212,16,188,243,176,156,173,143,241,17,231,215,229,252,134,60,188,141,126,99,63,216,114\")),bytes32(stringToBytes32(\"2,151,149,45,225,4,111,200,211,115,46,61,215,138,64,43,38,107,29,149,39,154,104,199,216,38,92,112,7,250,183,8\")),bytes32(stringToBytes32(\"150,140,60,166,116,133,166,157,98,117,219,40,23,224,62,185,255,255,85,46,209,112,51,220,214,163,229,97,186,231,165,59\")),bytes32(stringToBytes32(\"242,50,108,114,234,168,27,198,58,66,111,74,113,188,155,225,246,180,238,71,190,13,109,35,223,79,86,231,167,78,202,34\")),bytes32(stringToBytes32(\"165,105,191,20,191,244,215,122,41,147,195,15,113,255,83,193,168,53,113,92,248,207,149,177,224,143,225,186,201,187,128,150\")),bytes32(stringToBytes32(\"84,29,152,28,76,194,255,114,192,226,141,253,252,135,196,77,68,83,244,191,65,57,46,233,42,189,246,15,94,47,126,192\")),bytes32(stringToBytes32(\"188,181,160,77,83,74,110,107,67,83,48,177,23,170,94,64,62,0,216,88,186,162,212,194,254,150,184,91,17,128,79,79\")),bytes32(stringToBytes32(\"136,166,137,22,116,208,75,52,219,157,231,52,241,74,21,44,22,61,0,0,42,237,45,70,8,233,226,200,208,251,150,229\")),bytes32(stringToBytes32(\"138,245,169,182,0,224,91,72,172,103,131,145,116,7,186,82,112,139,241,84,82,196,143,187,190,231,86,115,29,99,128,209\")),bytes32(stringToBytes32(\"159,224,31,227,111,20,50,195,37,25,240,50,81,234,79,148,128,217,197,58,59,57,238,183,175,95,70,133,155,201,54,96\")),bytes32(stringToBytes32(\"221,160,144,209,82,23,188,116,241,144,178,135,81,67,56,168,226,37,126,236,37,69,220,99,204,7,158,45,217,13,92,224\")),bytes32(stringToBytes32(\"128,13,183,153,25,95,115,223,198,84,0,176,16,116,52,216,32,124,211,249,183,71,195,50,91,117,65,74,235,154,14,59\")),bytes32(stringToBytes32(\"78,115,119,205,188,170,89,219,163,118,158,226,85,233,151,33,122,41,4,233,179,174,81,144,178,214,142,187,202,9,178,216\")),bytes32(stringToBytes32(\"3,136,150,126,225,166,38,250,208,154,140,37,185,26,99,255,39,59,135,29,76,107,31,9,19,226,103,26,152,237,192,28\")),bytes32(stringToBytes32(\"208,41,105,212,139,8,166,124,29,177,56,228,110,229,100,49,233,207,174,135,11,164,24,234,162,148,80,110,10,110,177,10\")),bytes32(stringToBytes32(\"219,24,117,190,158,219,90,239,190,31,167,109,78,186,253,187,49,53,141,57,169,130,12,98,233,173,109,158,64,193,49,129\")),bytes32(stringToBytes32(\"250,185,76,230,191,147,66,218,219,101,24,218,212,93,207,90,130,119,184,83,36,251,90,233,250,137,7,186,234,142,213,207\")),bytes32(stringToBytes32(\"175,95,238,178,16,129,255,181,172,75,45,163,104,213,111,174,204,213,66,49,122,138,140,135,243,217,102,201,249,85,16,233\")),bytes32(stringToBytes32(\"32,57,53,184,117,180,126,85,57,160,244,119,55,86,55,253,32,52,3,215,202,159,131,182,255,232,130,253,95,140,252,125\")),bytes32(stringToBytes32(\"131,209,78,136,12,101,208,154,254,129,159,81,116,187,76,67,248,198,135,192,22,85,34,29,132,165,217,218,101,92,70,31\")),bytes32(stringToBytes32(\"138,131,204,244,36,136,101,88,74,0,83,212,182,213,65,176,66,190,134,218,22,5,245,220,145,181,229,116,18,102,63,112\")),bytes32(stringToBytes32(\"248,210,73,62,43,16,110,132,88,203,71,87,110,10,63,164,77,51,152,54,87,238,205,211,241,38,219,67,163,136,4,24\")),bytes32(stringToBytes32(\"93,147,244,140,103,152,224,250,20,67,174,222,29,110,85,67,147,192,113,164,48,189,243,66,31,104,106,190,175,71,138,24\")),bytes32(stringToBytes32(\"204,92,202,182,16,72,29,207,82,197,102,192,7,186,129,173,141,22,15,237,201,251,161,84,175,230,218,244,165,74,14,43\")),bytes32(stringToBytes32(\"46,139,112,5,180,236,186,72,176,114,102,147,136,62,93,96,66,27,154,21,19,107,86,183,98,224,110,27,223,201,74,168\")),bytes32(stringToBytes32(\"235,172,250,216,100,136,91,114,165,71,74,37,120,110,231,133,45,159,207,235,2,60,174,10,55,191,155,6,189,142,245,236\")),bytes32(stringToBytes32(\"15,233,34,140,182,210,115,48,246,160,126,3,121,76,37,177,136,176,127,28,128,226,2,138,13,14,4,11,170,78,86,164\")),bytes32(stringToBytes32(\"97,206,24,75,48,87,36,181,192,168,180,92,148,1,14,215,199,128,180,167,119,206,103,182,247,24,25,112,109,214,251,54\")),bytes32(stringToBytes32(\"245,104,32,58,183,128,169,25,149,71,220,82,193,24,214,199,30,107,64,228,176,161,156,55,45,100,233,217,210,54,214,21\")),bytes32(stringToBytes32(\"250,184,240,126,101,73,117,28,138,59,89,137,200,181,70,187,17,20,136,220,67,44,180,11,254,23,86,43,80,193,43,165\")),bytes32(stringToBytes32(\"21,12,181,82,30,73,200,141,126,116,27,187,69,36,127,86,39,158,177,121,152,54,1,224,158,254,9,104,23,32,233,45\")),bytes32(stringToBytes32(\"11,156,173,122,183,80,178,231,152,140,150,201,3,132,53,106,173,202,170,162,239,197,165,158,130,198,72,109,108,91,82,2\")),bytes32(stringToBytes32(\"26,12,23,183,225,228,231,91,75,113,56,41,243,53,7,127,175,103,64,134,219,66,208,111,62,244,48,23,243,58,37,177\")),bytes32(stringToBytes32(\"249,91,200,237,220,166,247,187,49,250,33,148,76,94,221,70,119,153,167,24,180,188,108,169,180,164,70,140,61,242,231,201\")),bytes32(stringToBytes32(\"152,243,137,55,204,94,108,217,183,92,99,184,194,84,185,96,77,76,167,252,157,3,20,175,239,98,119,69,248,63,113,5\")),bytes32(stringToBytes32(\"51,9,192,77,50,219,47,253,184,255,124,59,1,223,43,29,237,171,186,204,212,46,44,7,70,217,10,209,88,232,52,102\")),bytes32(stringToBytes32(\"89,231,185,100,20,173,47,108,128,232,197,232,57,81,3,250,106,225,10,67,191,101,247,181,162,169,42,76,180,217,74,75\")),bytes32(stringToBytes32(\"137,169,204,252,44,67,108,5,18,47,172,58,187,15,138,3,21,135,214,37,188,19,226,128,207,3,166,103,36,255,63,38\")),bytes32(stringToBytes32(\"112,189,70,229,163,141,221,204,10,96,201,210,233,192,73,250,224,37,62,66,33,93,51,158,64,204,87,199,102,238,228,218\")),bytes32(stringToBytes32(\"212,68,148,171,61,106,229,86,58,34,114,238,236,200,5,181,147,46,163,147,199,29,187,186,5,205,68,65,140,68,174,102\")),bytes32(stringToBytes32(\"230,136,222,67,6,227,145,119,139,232,141,113,79,104,111,251,149,103,196,68,22,1,251,171,154,12,104,255,228,181,201,169\")),bytes32(stringToBytes32(\"41,139,137,93,168,143,132,201,32,148,19,178,142,89,181,128,80,229,162,224,166,187,66,50,57,42,126,219,223,48,179,76\")),bytes32(stringToBytes32(\"187,173,179,114,148,60,47,7,224,100,230,49,65,230,101,30,186,136,10,170,154,227,218,68,1,250,203,181,242,27,216,58\")),bytes32(stringToBytes32(\"29,45,247,66,194,14,242,229,194,1,239,51,158,129,230,254,204,86,211,158,187,25,22,0,74,245,143,164,127,195,167,33\")),bytes32(stringToBytes32(\"183,163,201,238,222,66,245,215,144,59,72,73,238,61,114,239,83,100,144,191,50,255,127,42,147,186,218,205,152,188,231,215\")),bytes32(stringToBytes32(\"63,44,1,89,65,75,158,3,126,35,85,110,73,30,75,204,93,36,128,213,144,81,211,99,89,51,81,243,52,96,180,205\")),bytes32(stringToBytes32(\"115,181,164,38,19,159,41,171,222,226,90,135,182,139,70,73,209,132,118,224,250,57,154,206,154,148,28,55,46,198,48,57\")),bytes32(stringToBytes32(\"248,203,197,218,47,191,3,205,223,80,78,85,243,205,31,235,4,184,230,107,196,236,191,193,45,120,141,60,0,132,10,171\")),bytes32(stringToBytes32(\"204,162,251,147,255,232,64,67,140,218,128,104,41,176,97,191,188,39,25,12,195,71,233,35,137,232,122,145,184,102,80,11\")),bytes32(stringToBytes32(\"149,9,195,173,145,66,84,100,83,200,188,243,78,119,207,26,53,135,228,189,5,14,132,38,132,144,250,141,151,44,131,24\")),bytes32(stringToBytes32(\"66,196,200,127,217,66,36,192,134,112,87,174,42,88,248,50,26,220,14,16,140,110,80,173,8,1,169,56,252,220,105,37\")),bytes32(stringToBytes32(\"217,60,133,246,149,3,101,146,20,28,146,111,159,193,251,39,209,0,32,100,54,87,234,122,209,233,131,4,52,90,24,192\")),bytes32(stringToBytes32(\"99,130,233,211,253,102,216,135,235,98,127,155,228,158,200,23,22,80,147,116,9,156,175,180,87,1,246,139,24,229,80,144\")),bytes32(stringToBytes32(\"164,49,165,114,131,156,45,187,187,203,244,211,48,205,17,4,124,149,232,201,213,208,93,208,36,229,23,8,33,50,216,128\")),bytes32(stringToBytes32(\"94,117,135,197,101,139,124,138,62,142,31,83,78,144,168,152,152,23,242,189,124,212,151,62,124,123,10,171,6,154,27,9\")),bytes32(stringToBytes32(\"133,190,244,5,27,113,82,245,246,63,224,106,106,173,219,88,95,96,13,65,99,234,193,95,54,35,120,152,185,37,20,222\")),bytes32(stringToBytes32(\"95,18,119,140,23,133,178,13,93,65,18,171,54,42,248,16,204,136,156,179,147,254,68,49,233,170,11,162,73,4,5,149\")),bytes32(stringToBytes32(\"0,154,141,232,31,3,106,125,91,193,222,90,248,73,221,81,23,63,16,64,174,229,128,138,86,153,212,78,199,51,202,90\")),bytes32(stringToBytes32(\"230,8,234,184,37,164,128,177,221,10,119,204,228,31,192,149,30,1,14,148,168,108,1,108,11,249,68,58,228,12,214,51\")),bytes32(stringToBytes32(\"3,246,74,68,59,229,221,27,26,106,51,153,83,64,68,193,19,254,148,199,31,206,33,97,217,50,115,83,92,11,222,218\")),bytes32(stringToBytes32(\"202,26,71,227,56,240,177,27,159,57,150,93,138,192,4,191,185,217,207,98,210,169,60,33,110,118,229,96,59,206,126,14\")),bytes32(stringToBytes32(\"159,246,115,0,206,193,122,225,164,120,55,113,213,12,171,187,119,14,46,223,227,30,129,129,170,195,69,205,247,194,234,158\")),bytes32(stringToBytes32(\"41,185,82,88,28,16,56,9,228,36,85,119,218,233,134,41,57,40,242,183,190,242,199,217,117,113,21,144,23,186,5,139\")),bytes32(stringToBytes32(\"239,21,171,68,108,116,208,250,107,0,245,116,83,167,206,171,231,220,53,3,130,110,57,6,116,21,149,67,216,238,133,47\")),bytes32(stringToBytes32(\"248,50,226,184,20,130,227,50,37,49,176,144,175,107,61,156,148,182,196,2,131,164,178,2,223,220,132,190,141,155,114,225\")),bytes32(stringToBytes32(\"54,248,53,185,228,78,249,204,170,61,20,242,112,17,129,202,222,83,63,59,84,108,198,114,98,137,68,253,187,69,213,81\")),bytes32(stringToBytes32(\"220,208,67,114,230,208,202,176,23,96,121,155,90,15,4,170,231,210,141,213,246,13,27,147,86,137,152,177,61,49,159,177\")),bytes32(stringToBytes32(\"21,38,205,13,61,92,138,92,186,47,76,138,80,202,52,154,241,173,11,148,172,96,95,104,22,33,160,178,135,156,47,89\")),bytes32(stringToBytes32(\"54,202,120,161,6,117,195,105,228,103,17,27,174,246,192,192,224,148,79,128,141,3,126,8,12,70,63,85,18,117,91,30\")),bytes32(stringToBytes32(\"139,162,211,145,171,227,180,215,80,134,32,141,126,25,169,101,110,93,158,140,102,138,201,92,236,54,147,250,28,218,62,19\")),bytes32(stringToBytes32(\"45,90,215,114,80,11,242,144,71,101,62,33,35,27,32,204,181,56,16,3,229,145,9,200,153,90,44,150,158,207,250,202\")),bytes32(stringToBytes32(\"133,172,239,181,228,254,165,19,229,197,142,100,207,11,24,216,70,244,189,96,187,179,245,107,237,7,164,222,67,21,184,25\")),bytes32(stringToBytes32(\"171,85,226,246,241,244,192,107,183,44,109,2,72,41,159,162,111,188,233,136,80,176,57,77,96,111,64,102,41,157,36,201\")),bytes32(stringToBytes32(\"81,47,4,252,5,254,15,151,26,198,221,1,85,33,42,202,211,170,213,63,24,66,160,46,133,145,0,48,39,156,31,223\")),bytes32(stringToBytes32(\"83,73,180,12,157,39,233,183,92,99,201,105,128,222,248,177,166,215,222,204,181,80,166,19,239,170,146,181,241,246,240,62\")),bytes32(stringToBytes32(\"181,65,72,135,201,230,53,202,184,231,46,12,167,183,66,185,40,207,19,30,229,72,252,68,64,143,93,195,225,132,20,43\")),bytes32(stringToBytes32(\"26,54,253,174,225,215,243,171,160,148,168,26,71,194,65,30,213,255,151,198,161,26,122,237,85,78,166,58,76,226,36,98\")),bytes32(stringToBytes32(\"130,35,205,216,83,74,80,200,80,241,253,94,118,129,192,188,126,91,118,255,124,39,221,250,173,183,123,27,220,246,49,105\")),bytes32(stringToBytes32(\"197,59,166,131,97,45,186,244,38,4,149,68,78,47,194,166,240,245,71,154,6,232,32,231,7,66,241,122,96,58,114,234\")),bytes32(stringToBytes32(\"221,202,125,48,178,104,155,61,194,158,118,197,232,56,53,69,126,187,250,47,255,220,171,182,17,134,219,225,108,69,152,128\")),bytes32(stringToBytes32(\"234,85,69,36,227,133,34,177,140,74,136,21,236,40,53,58,33,52,201,135,47,40,60,172,136,72,125,107,156,94,147,254\")),bytes32(stringToBytes32(\"178,228,198,29,13,9,29,124,173,200,62,77,204,150,161,159,163,72,125,125,25,54,239,20,206,166,73,158,88,63,160,215\")),bytes32(stringToBytes32(\"26,155,212,124,17,29,93,189,202,79,90,123,55,142,161,42,35,208,226,125,97,185,227,28,107,20,15,255,137,100,237,29\")),bytes32(stringToBytes32(\"83,200,54,41,255,12,152,123,7,147,43,137,216,168,37,67,40,159,123,62,19,193,220,191,166,126,210,148,39,26,71,203\")),bytes32(stringToBytes32(\"49,34,194,113,22,248,79,109,52,133,127,163,108,17,101,201,43,69,125,59,118,123,31,209,174,232,166,64,220,216,62,149\")),bytes32(stringToBytes32(\"176,57,23,62,199,107,143,26,58,6,132,162,22,34,226,139,67,201,60,243,196,19,67,251,70,190,106,173,164,4,165,95\")),bytes32(stringToBytes32(\"116,227,92,24,76,95,144,35,23,136,15,143,106,254,253,172,196,183,39,56,236,27,122,248,124,37,26,14,87,251,178,29\")),bytes32(stringToBytes32(\"157,161,17,253,158,129,131,80,2,172,138,25,69,138,56,63,235,192,214,110,110,39,146,127,92,67,130,106,237,78,168,199\")),bytes32(stringToBytes32(\"181,194,163,115,101,206,227,132,233,67,162,37,219,10,66,88,118,214,83,158,17,239,205,114,139,207,254,34,107,246,249,216\")),bytes32(stringToBytes32(\"10,226,133,23,109,205,105,45,104,215,220,114,187,75,27,36,203,73,220,8,22,190,251,104,194,59,190,252,192,143,33,241\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.114ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"RevertWithReason\"",
                "sol": "\"RevertWithReason\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.118ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[5],accounts[5],accounts[6],accounts[5],accounts[3],accounts[3],accounts[4],accounts[2],accounts[2],accounts[3],accounts[4],accounts[6],accounts[9],accounts[2],accounts[0],accounts[5],accounts[6],accounts[6],accounts[1],accounts[8],accounts[3],accounts[2],accounts[6],accounts[0],accounts[9],accounts[2],accounts[4],accounts[1],accounts[5],accounts[0],accounts[5],accounts[6],accounts[7],accounts[8],accounts[0],accounts[1],accounts[6],accounts[0],accounts[4],accounts[7],accounts[9],accounts[4],accounts[0],accounts[0],accounts[6],accounts[6],accounts[0],accounts[3],accounts[4],accounts[6],accounts[9],accounts[7],accounts[6],accounts[4],accounts[1],accounts[6],accounts[5],accounts[5],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[96,27,3,1338,10001,10001,4,5,1532892064,0,257,1336,4,26,97,254,256,2014223715,3,256,1336,2014223715,10000,3,2014223716,257,2014223716,257,66,9999,66,254,2014223716,1337,97,1532892062,2014223716,97,9999,2,2,1336,255,3,4,1338,97,2014223716,29,2014223714,4,256,95,65,2014223716,1532892063,254,1336,1,2014223716,0,5,10000,1532892064]",
              "sol": "[uint256(96),uint256(27),uint256(3),uint256(1338),uint256(10001),uint256(10001),uint256(4),uint256(5),uint256(1532892064),uint256(0),uint256(257),uint256(1336),uint256(4),uint256(26),uint256(97),uint256(254),uint256(256),uint256(2014223715),uint256(3),uint256(256),uint256(1336),uint256(2014223715),uint256(10000),uint256(3),uint256(2014223716),uint256(257),uint256(2014223716),uint256(257),uint256(66),uint256(9999),uint256(66),uint256(254),uint256(2014223716),uint256(1337),uint256(97),uint256(1532892062),uint256(2014223716),uint256(97),uint256(9999),uint256(2),uint256(2),uint256(1336),uint256(255),uint256(3),uint256(4),uint256(1338),uint256(97),uint256(2014223716),uint256(29),uint256(2014223714),uint256(4),uint256(256),uint256(95),uint256(65),uint256(2014223716),uint256(1532892063),uint256(254),uint256(1336),uint256(1),uint256(2014223716),uint256(0),uint256(5),uint256(10000),uint256(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[5],accounts[5],accounts[6],accounts[5],accounts[3],accounts[3],accounts[4],accounts[2],accounts[2],accounts[3],accounts[4],accounts[6],accounts[9],accounts[2],accounts[0],accounts[5],accounts[6],accounts[6],accounts[1],accounts[8],accounts[3],accounts[2],accounts[6],accounts[0],accounts[9],accounts[2],accounts[4],accounts[1],accounts[5],accounts[0],accounts[5],accounts[6],accounts[7],accounts[8],accounts[0],accounts[1],accounts[6],accounts[0],accounts[4],accounts[7],accounts[9],accounts[4],accounts[0],accounts[0],accounts[6],accounts[6],accounts[0],accounts[3],accounts[4],accounts[6],accounts[9],accounts[7],accounts[6],accounts[4],accounts[1],accounts[6],accounts[5],accounts[5],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[96,27,3,1338,10001,10001,4,5,1532892064,0,257,1336,4,26,97,254,256,2014223715,3,256,1336,2014223715,10000,3,2014223716,257,2014223716,257,66,9999,66,254,2014223716,1337,97,1532892062,2014223716,97,9999,2,2,1336,255,3,4,1338,97,2014223716,29,2014223714,4,256,95,65,2014223716,1532892063,254,1336,1,2014223716,0,5,10000,1532892064]",
                "sol": "[uint256(96),uint256(27),uint256(3),uint256(1338),uint256(10001),uint256(10001),uint256(4),uint256(5),uint256(1532892064),uint256(0),uint256(257),uint256(1336),uint256(4),uint256(26),uint256(97),uint256(254),uint256(256),uint256(2014223715),uint256(3),uint256(256),uint256(1336),uint256(2014223715),uint256(10000),uint256(3),uint256(2014223716),uint256(257),uint256(2014223716),uint256(257),uint256(66),uint256(9999),uint256(66),uint256(254),uint256(2014223716),uint256(1337),uint256(97),uint256(1532892062),uint256(2014223716),uint256(97),uint256(9999),uint256(2),uint256(2),uint256(1336),uint256(255),uint256(3),uint256(4),uint256(1338),uint256(97),uint256(2014223716),uint256(29),uint256(2014223714),uint256(4),uint256(256),uint256(95),uint256(65),uint256(2014223716),uint256(1532892063),uint256(254),uint256(1336),uint256(1),uint256(2014223716),uint256(0),uint256(5),uint256(10000),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[1],accounts[6],accounts[3],accounts[7],accounts[2],accounts[2],accounts[5],accounts[6],accounts[9],accounts[5],accounts[0],accounts[5],accounts[2],accounts[1],accounts[5],accounts[5],accounts[6],accounts[9],accounts[6],accounts[9],accounts[1],accounts[9],accounts[0],accounts[6],accounts[1],accounts[1],accounts[2],accounts[9],accounts[3],accounts[8],accounts[6],accounts[8],accounts[3],accounts[9],accounts[0],accounts[2],accounts[2],accounts[7],accounts[4],accounts[9],accounts[3],accounts[6],accounts[5],accounts[6],accounts[5],accounts[0],accounts[4],accounts[0],accounts[1],accounts[3],accounts[8],accounts[3],accounts[5],accounts[2],accounts[3],accounts[5],accounts[6],accounts[4],accounts[1],accounts[9],accounts[5],accounts[7],accounts[9],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[96,27,3,1338,10001,10001,4,5,1532892064,0,257,1336,4,26,97,254,256,2014223715,3,256,1336,2014223715,10000,3,2014223716,257,2014223716,257,66,9999,66,254,2014223716,1337,97,1532892062,2014223716,97,9999,2,2,1336,255,3,4,1338,97,2014223716,29,2014223714,4,256,95,65,2014223716,1532892063,254,1336,1,2014223716,0,5,10000,1532892064]",
                "sol": "[uint256(96),uint256(27),uint256(3),uint256(1338),uint256(10001),uint256(10001),uint256(4),uint256(5),uint256(1532892064),uint256(0),uint256(257),uint256(1336),uint256(4),uint256(26),uint256(97),uint256(254),uint256(256),uint256(2014223715),uint256(3),uint256(256),uint256(1336),uint256(2014223715),uint256(10000),uint256(3),uint256(2014223716),uint256(257),uint256(2014223716),uint256(257),uint256(66),uint256(9999),uint256(66),uint256(254),uint256(2014223716),uint256(1337),uint256(97),uint256(1532892062),uint256(2014223716),uint256(97),uint256(9999),uint256(2),uint256(2),uint256(1336),uint256(255),uint256(3),uint256(4),uint256(1338),uint256(97),uint256(2014223716),uint256(29),uint256(2014223714),uint256(4),uint256(256),uint256(95),uint256(65),uint256(2014223716),uint256(1532892063),uint256(254),uint256(1336),uint256(1),uint256(2014223716),uint256(0),uint256(5),uint256(10000),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[96,27,3,1338,10001,10001,4,5,1532892064,0,257,1336,4,26,97,254,256,2014223715,3,256,1336,2014223715,10000,3,2014223716,257,2014223716,257,66,9999,66,254,2014223716,1337,97,1532892062,2014223716,97,9999,2,2,1336,255,3,4,1338,97,2014223716,29,2014223714,4,256,95,65,2014223716,1532892063,254,1336,1,2014223716,0,5,10000,1532892064]",
                "sol": "[uint256(96),uint256(27),uint256(3),uint256(1338),uint256(10001),uint256(10001),uint256(4),uint256(5),uint256(1532892064),uint256(0),uint256(257),uint256(1336),uint256(4),uint256(26),uint256(97),uint256(254),uint256(256),uint256(2014223715),uint256(3),uint256(256),uint256(1336),uint256(2014223715),uint256(10000),uint256(3),uint256(2014223716),uint256(257),uint256(2014223716),uint256(257),uint256(66),uint256(9999),uint256(66),uint256(254),uint256(2014223716),uint256(1337),uint256(97),uint256(1532892062),uint256(2014223716),uint256(97),uint256(9999),uint256(2),uint256(2),uint256(1336),uint256(255),uint256(3),uint256(4),uint256(1338),uint256(97),uint256(2014223716),uint256(29),uint256(2014223714),uint256(4),uint256(256),uint256(95),uint256(65),uint256(2014223716),uint256(1532892063),uint256(254),uint256(1336),uint256(1),uint256(2014223716),uint256(0),uint256(5),uint256(10000),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.122ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.123ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[0],accounts[5],accounts[7],accounts[4],accounts[9],accounts[5],accounts[8],accounts[4],accounts[9],accounts[9],accounts[8],accounts[5],accounts[7],accounts[8],accounts[1],accounts[5],accounts[1],accounts[7],accounts[7],accounts[1],accounts[3],accounts[2],accounts[1],accounts[7],accounts[1],accounts[4],accounts[6],accounts[4],accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[7],accounts[9],accounts[7],accounts[2],accounts[8],accounts[2],accounts[0],accounts[9],accounts[1],accounts[1],accounts[0],accounts[1],accounts[6],accounts[4],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[9],accounts[6],accounts[6],accounts[1],accounts[1],accounts[4],accounts[5],accounts[7],accounts[1],accounts[2],accounts[1],accounts[8]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0],accounts[5],accounts[7],accounts[4],accounts[9],accounts[5],accounts[8],accounts[4],accounts[9],accounts[9],accounts[8],accounts[5],accounts[7],accounts[8],accounts[1],accounts[5],accounts[1],accounts[7],accounts[7],accounts[1],accounts[3],accounts[2],accounts[1],accounts[7],accounts[1],accounts[4],accounts[6],accounts[4],accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[7],accounts[9],accounts[7],accounts[2],accounts[8],accounts[2],accounts[0],accounts[9],accounts[1],accounts[1],accounts[0],accounts[1],accounts[6],accounts[4],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[9],accounts[6],accounts[6],accounts[1],accounts[1],accounts[4],accounts[5],accounts[7],accounts[1],accounts[2],accounts[1],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[0],accounts[5],accounts[7],accounts[4],accounts[9],accounts[5],accounts[8],accounts[4],accounts[9],accounts[9],accounts[8],accounts[5],accounts[7],accounts[8],accounts[1],accounts[5],accounts[1],accounts[7],accounts[7],accounts[1],accounts[3],accounts[2],accounts[1],accounts[7],accounts[1],accounts[4],accounts[6],accounts[4],accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[7],accounts[9],accounts[7],accounts[2],accounts[8],accounts[2],accounts[0],accounts[9],accounts[1],accounts[1],accounts[0],accounts[1],accounts[6],accounts[4],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[9],accounts[6],accounts[6],accounts[1],accounts[1],accounts[4],accounts[5],accounts[7],accounts[1],accounts[2],accounts[1],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.126ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.127ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+128",
              "sol": "block.timestamp+128"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+128",
                "sol": "block.timestamp+128"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.132ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.135ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.140ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.145ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.147ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.151ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.152ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.152ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[5],accounts[4],accounts[4],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5],accounts[4],accounts[4],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[5],accounts[4],accounts[4],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.154ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T00:10:02.154ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T00:10:02.155ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}