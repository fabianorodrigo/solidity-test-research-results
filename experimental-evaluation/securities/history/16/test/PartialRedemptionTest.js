const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("PartialRedemption",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[8],29,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[8],29,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[1],1532892062,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[1],1532892062,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[7],{from:accounts[4]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[7],{from:accounts[4]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[1],66,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[1],66,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[9],{from:accounts[0]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[9],{from:accounts[0]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(1337,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[5],9999,2014223715,{from:accounts[6]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(1337,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[5],9999,2014223715,{from:accounts[6]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[5],1532892063,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[5],1532892063,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableTokenMock.address,accounts[6],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+665,{from:accounts[8]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableTokenMock.address,accounts[6],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+665,{from:accounts[8]}');
  });
  
  it('Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0', async () => {
    let result = await contractPartialRedemption.redeemTokens([accounts[4],accounts[9],accounts[2],accounts[5],accounts[4],accounts[6],accounts[8],accounts[2],accounts[7],accounts[8],accounts[2],accounts[4],accounts[7],accounts[6],accounts[7],accounts[2],accounts[4],accounts[8],accounts[5],accounts[4],accounts[7],accounts[2],accounts[3],accounts[1],accounts[8],accounts[5],accounts[9],accounts[3],accounts[6],accounts[6],accounts[5],accounts[0],accounts[2],accounts[3],accounts[9],accounts[7],accounts[3],accounts[8],accounts[2],accounts[5],accounts[0],accounts[7],accounts[2],accounts[8],accounts[9],accounts[4],accounts[0],accounts[9],accounts[6],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[0],accounts[3],accounts[3],accounts[4],accounts[3],accounts[8],accounts[7],accounts[9],accounts[5],accounts[0],accounts[6],accounts[0],accounts[7],accounts[9],accounts[2],accounts[4],accounts[3],accounts[9],accounts[1],accounts[5],accounts[2],accounts[2],accounts[1],accounts[4],accounts[5],accounts[3],accounts[2],accounts[8],accounts[5],accounts[9],accounts[2],accounts[6],accounts[8],accounts[9],accounts[6],accounts[0],accounts[2],accounts[3],accounts[7],accounts[8],accounts[4],accounts[0],accounts[9],accounts[8],accounts[2],accounts[0],accounts[4],accounts[3],accounts[2],accounts[9],accounts[1],accounts[4],accounts[6],accounts[2],accounts[3],accounts[5],accounts[4],accounts[8],accounts[2],accounts[8],accounts[6],accounts[7],accounts[9],accounts[3],accounts[0],accounts[8],accounts[5],accounts[8],accounts[3],accounts[9],accounts[5],accounts[1],accounts[5],accounts[1],accounts[7],accounts[3],accounts[3],accounts[4],accounts[4],accounts[0],accounts[0],accounts[8],accounts[9],accounts[9],accounts[1],accounts[4],accounts[7],accounts[6],accounts[8],accounts[2],accounts[1],accounts[5],accounts[5],accounts[0],accounts[0],accounts[6],accounts[8],accounts[4],accounts[7],accounts[5],accounts[3],accounts[7],accounts[0],accounts[5],accounts[3],accounts[8],accounts[1],accounts[4],accounts[2],accounts[8],accounts[3],accounts[5],accounts[5],accounts[9],accounts[7],accounts[3],accounts[4],accounts[6],accounts[3],accounts[2],accounts[8],accounts[0],accounts[2],accounts[5],accounts[2],accounts[1],accounts[0],accounts[7],accounts[7],accounts[1],accounts[4],accounts[8],accounts[8],accounts[6],accounts[3],accounts[3],accounts[3],accounts[2],accounts[3],accounts[5],accounts[4],accounts[5],accounts[9],accounts[0],accounts[5],accounts[5],accounts[6],accounts[3],accounts[5],accounts[9],accounts[5],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[7],accounts[2],accounts[2],accounts[7],accounts[4],accounts[6],accounts[7],accounts[4],accounts[0],accounts[5],accounts[3],accounts[4],accounts[1],accounts[6],accounts[7],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[2],accounts[7],accounts[1],accounts[9],accounts[1],accounts[9],accounts[4],accounts[9],accounts[7],accounts[3],accounts[6],accounts[3],accounts[2],accounts[7],accounts[9],accounts[4],accounts[7],accounts[5],accounts[0],accounts[6],accounts[1],accounts[6],accounts[2],accounts[7],accounts[1]], [4,1338,3,4,95,2014223716,28,96,0,2014223716,6,1338,2014223715,1337,2014223714,6,254,3,95,0,65,29,1336,1336,2014223716,10000,29,5,2014223714,6,64,10001,96,6,1532892064,28,10001,2014223714,9999,2,95,10001,256,9999,3,10000,1532892064,1338,1532892063,6,256,4,1532892062,1532892063,254,64,1,6,66,1,3,257,9999,0,257,256,1532892064,1337,1337,254,96,257,3,1,5,64,1532892064,95,97,1532892062,96,28,96,64,0,1532892064,97,6,66,1532892062,96,97,256,95,2014223714,96,29,0,1532892064,3,1532892064,10000,254,2014223714,1532892064,256,66,97,255,10000,1337,5,10001,2,1532892064,10000,66,4,3,3,1532892064,1532892064,2014223714,27,27,64,6,10000,65,2014223715,9999,6,255,64,64,10001,2014223715,64,28,1337,6,256,254,1532892064,1338,95,28,1336,96,66,29,97,64,6,2014223716,257,1336,1,9999,27,97,2014223716,254,1,26,26,64,2,1532892062,6,1532892062,255,2,64,65,27,256,257,3,27,2014223714,1338,95,96,1,6,5,1338,1532892064,1532892062,65,1532892063,97,6,4,64,2014223714,2014223715,66,1337,2014223715,1532892063,5,29,1532892062,2014223715,1532892063,64,2014223714,1532892062,97,4,66,2014223716,2014223716,29,66,257,257,1532892064,1532892064,97,1,1532892062,97,0,65,96,97,3,4,2014223714,65,1338,255,64,1338,254,2014223714,256,256,1532892063,0,1337,255,1532892062,256,255,95,3,1532892063,1532892062,0,4,5],{from: accounts[0]});
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[4],accounts[9],accounts[2],accounts[5],accounts[4],accounts[6],accounts[8],accounts[2],accounts[7],accounts[8],accounts[2],accounts[4],accounts[7],accounts[6],accounts[7],accounts[2],accounts[4],accounts[8],accounts[5],accounts[4],accounts[7],accounts[2],accounts[3],accounts[1],accounts[8],accounts[5],accounts[9],accounts[3],accounts[6],accounts[6],accounts[5],accounts[0],accounts[2],accounts[3],accounts[9],accounts[7],accounts[3],accounts[8],accounts[2],accounts[5],accounts[0],accounts[7],accounts[2],accounts[8],accounts[9],accounts[4],accounts[0],accounts[9],accounts[6],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[0],accounts[3],accounts[3],accounts[4],accounts[3],accounts[8],accounts[7],accounts[9],accounts[5],accounts[0],accounts[6],accounts[0],accounts[7],accounts[9],accounts[2],accounts[4],accounts[3],accounts[9],accounts[1],accounts[5],accounts[2],accounts[2],accounts[1],accounts[4],accounts[5],accounts[3],accounts[2],accounts[8],accounts[5],accounts[9],accounts[2],accounts[6],accounts[8],accounts[9],accounts[6],accounts[0],accounts[2],accounts[3],accounts[7],accounts[8],accounts[4],accounts[0],accounts[9],accounts[8],accounts[2],accounts[0],accounts[4],accounts[3],accounts[2],accounts[9],accounts[1],accounts[4],accounts[6],accounts[2],accounts[3],accounts[5],accounts[4],accounts[8],accounts[2],accounts[8],accounts[6],accounts[7],accounts[9],accounts[3],accounts[0],accounts[8],accounts[5],accounts[8],accounts[3],accounts[9],accounts[5],accounts[1],accounts[5],accounts[1],accounts[7],accounts[3],accounts[3],accounts[4],accounts[4],accounts[0],accounts[0],accounts[8],accounts[9],accounts[9],accounts[1],accounts[4],accounts[7],accounts[6],accounts[8],accounts[2],accounts[1],accounts[5],accounts[5],accounts[0],accounts[0],accounts[6],accounts[8],accounts[4],accounts[7],accounts[5],accounts[3],accounts[7],accounts[0],accounts[5],accounts[3],accounts[8],accounts[1],accounts[4],accounts[2],accounts[8],accounts[3],accounts[5],accounts[5],accounts[9],accounts[7],accounts[3],accounts[4],accounts[6],accounts[3],accounts[2],accounts[8],accounts[0],accounts[2],accounts[5],accounts[2],accounts[1],accounts[0],accounts[7],accounts[7],accounts[1],accounts[4],accounts[8],accounts[8],accounts[6],accounts[3],accounts[3],accounts[3],accounts[2],accounts[3],accounts[5],accounts[4],accounts[5],accounts[9],accounts[0],accounts[5],accounts[5],accounts[6],accounts[3],accounts[5],accounts[9],accounts[5],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[7],accounts[2],accounts[2],accounts[7],accounts[4],accounts[6],accounts[7],accounts[4],accounts[0],accounts[5],accounts[3],accounts[4],accounts[1],accounts[6],accounts[7],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[2],accounts[7],accounts[1],accounts[9],accounts[1],accounts[9],accounts[4],accounts[9],accounts[7],accounts[3],accounts[6],accounts[3],accounts[2],accounts[7],accounts[9],accounts[4],accounts[7],accounts[5],accounts[0],accounts[6],accounts[1],accounts[6],accounts[2],accounts[7],accounts[1]], [4,1338,3,4,95,2014223716,28,96,0,2014223716,6,1338,2014223715,1337,2014223714,6,254,3,95,0,65,29,1336,1336,2014223716,10000,29,5,2014223714,6,64,10001,96,6,1532892064,28,10001,2014223714,9999,2,95,10001,256,9999,3,10000,1532892064,1338,1532892063,6,256,4,1532892062,1532892063,254,64,1,6,66,1,3,257,9999,0,257,256,1532892064,1337,1337,254,96,257,3,1,5,64,1532892064,95,97,1532892062,96,28,96,64,0,1532892064,97,6,66,1532892062,96,97,256,95,2014223714,96,29,0,1532892064,3,1532892064,10000,254,2014223714,1532892064,256,66,97,255,10000,1337,5,10001,2,1532892064,10000,66,4,3,3,1532892064,1532892064,2014223714,27,27,64,6,10000,65,2014223715,9999,6,255,64,64,10001,2014223715,64,28,1337,6,256,254,1532892064,1338,95,28,1336,96,66,29,97,64,6,2014223716,257,1336,1,9999,27,97,2014223716,254,1,26,26,64,2,1532892062,6,1532892062,255,2,64,65,27,256,257,3,27,2014223714,1338,95,96,1,6,5,1338,1532892064,1532892062,65,1532892063,97,6,4,64,2014223714,2014223715,66,1337,2014223715,1532892063,5,29,1532892062,2014223715,1532892063,64,2014223714,1532892062,97,4,66,2014223716,2014223716,29,66,257,257,1532892064,1532892064,97,1,1532892062,97,0,65,96,97,3,4,2014223714,65,1338,255,64,1338,254,2014223714,256,256,1532892063,0,1337,255,1532892062,256,255,95,3,1532892063,1532892062,0,4,5],{from: accounts[9]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[0],accounts[6],accounts[4],accounts[0],accounts[5],accounts[5],accounts[7],accounts[6],accounts[0],accounts[7],accounts[4],accounts[7],accounts[6],accounts[8],accounts[3],accounts[9],accounts[1],accounts[4],accounts[8],accounts[2],accounts[2],accounts[9],accounts[3],accounts[3],accounts[2],accounts[7],accounts[5],accounts[2],accounts[4],accounts[6],accounts[8],accounts[9],accounts[8],accounts[9],accounts[6],accounts[0],accounts[0],accounts[0],accounts[3],accounts[3],accounts[5],accounts[8],accounts[7],accounts[5],accounts[0],accounts[1],accounts[6],accounts[3],accounts[2],accounts[7],accounts[8],accounts[0],accounts[2],accounts[5],accounts[1],accounts[9],accounts[8],accounts[5],accounts[3],accounts[4],accounts[1],accounts[9],accounts[8],accounts[7],accounts[3],accounts[6],accounts[6],accounts[8],accounts[7],accounts[5],accounts[2],accounts[7],accounts[3],accounts[4],accounts[5],accounts[9],accounts[7],accounts[1],accounts[8],accounts[0],accounts[1],accounts[0],accounts[1],accounts[5],accounts[2],accounts[8],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[0],accounts[2],accounts[6],accounts[0],accounts[2],accounts[6],accounts[5],accounts[3],accounts[7],accounts[5],accounts[8],accounts[0],accounts[1],accounts[6],accounts[5],accounts[0],accounts[9],accounts[8],accounts[6],accounts[4],accounts[0],accounts[3],accounts[9],accounts[0],accounts[6],accounts[8],accounts[9],accounts[9],accounts[4],accounts[5],accounts[7],accounts[3],accounts[3],accounts[0],accounts[8],accounts[1],accounts[8],accounts[5],accounts[9],accounts[5],accounts[2],accounts[0],accounts[9],accounts[2],accounts[6],accounts[2],accounts[9],accounts[4],accounts[2],accounts[0],accounts[1],accounts[3],accounts[4],accounts[7],accounts[9],accounts[6],accounts[8],accounts[4],accounts[6],accounts[0],accounts[7],accounts[3],accounts[6],accounts[6],accounts[3],accounts[0],accounts[3],accounts[7],accounts[7],accounts[5],accounts[1],accounts[2],accounts[9],accounts[2],accounts[7],accounts[5],accounts[3],accounts[3],accounts[6],accounts[3],accounts[0],accounts[5],accounts[9],accounts[3],accounts[4],accounts[5],accounts[8],accounts[8],accounts[4],accounts[7],accounts[3],accounts[7],accounts[3],accounts[6],accounts[2],accounts[7],accounts[6],accounts[8],accounts[0],accounts[2],accounts[7],accounts[1],accounts[1],accounts[1],accounts[8],accounts[8],accounts[2],accounts[9],accounts[6],accounts[5],accounts[5],accounts[5],accounts[4],accounts[6],accounts[0],accounts[2],accounts[2],accounts[8],accounts[2],accounts[5],accounts[1],accounts[4],accounts[6],accounts[8],accounts[1],accounts[1],accounts[6],accounts[6],accounts[5],accounts[7],accounts[5],accounts[7],accounts[0],accounts[4],accounts[0],accounts[1],accounts[1],accounts[1],accounts[6],accounts[1],accounts[9],accounts[6],accounts[9],accounts[6],accounts[6],accounts[1],accounts[0],accounts[9],accounts[4],accounts[2],accounts[9],accounts[1],accounts[3],accounts[6],accounts[8],accounts[4],accounts[1],accounts[0],accounts[5],accounts[9],accounts[7],accounts[4],accounts[5],accounts[8],accounts[4]], [4,1338,3,4,95,2014223716,28,96,0,2014223716,6,1338,2014223715,1337,2014223714,6,254,3,95,0,65,29,1336,1336,2014223716,10000,29,5,2014223714,6,64,10001,96,6,1532892064,28,10001,2014223714,9999,2,95,10001,256,9999,3,10000,1532892064,1338,1532892063,6,256,4,1532892062,1532892063,254,64,1,6,66,1,3,257,9999,0,257,256,1532892064,1337,1337,254,96,257,3,1,5,64,1532892064,95,97,1532892062,96,28,96,64,0,1532892064,97,6,66,1532892062,96,97,256,95,2014223714,96,29,0,1532892064,3,1532892064,10000,254,2014223714,1532892064,256,66,97,255,10000,1337,5,10001,2,1532892064,10000,66,4,3,3,1532892064,1532892064,2014223714,27,27,64,6,10000,65,2014223715,9999,6,255,64,64,10001,2014223715,64,28,1337,6,256,254,1532892064,1338,95,28,1336,96,66,29,97,64,6,2014223716,257,1336,1,9999,27,97,2014223716,254,1,26,26,64,2,1532892062,6,1532892062,255,2,64,65,27,256,257,3,27,2014223714,1338,95,96,1,6,5,1338,1532892064,1532892062,65,1532892063,97,6,4,64,2014223714,2014223715,66,1337,2014223715,1532892063,5,29,1532892062,2014223715,1532892063,64,2014223714,1532892062,97,4,66,2014223716,2014223716,29,66,257,257,1532892064,1532892064,97,1,1532892062,97,0,65,96,97,3,4,2014223714,65,1338,255,64,1338,254,2014223714,256,256,1532892063,0,1337,255,1532892062,256,255,95,3,1532892063,1532892062,0,4,5],{from: accounts[0]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([], [4,1338,3,4,95,2014223716,28,96,0,2014223716,6,1338,2014223715,1337,2014223714,6,254,3,95,0,65,29,1336,1336,2014223716,10000,29,5,2014223714,6,64,10001,96,6,1532892064,28,10001,2014223714,9999,2,95,10001,256,9999,3,10000,1532892064,1338,1532892063,6,256,4,1532892062,1532892063,254,64,1,6,66,1,3,257,9999,0,257,256,1532892064,1337,1337,254,96,257,3,1,5,64,1532892064,95,97,1532892062,96,28,96,64,0,1532892064,97,6,66,1532892062,96,97,256,95,2014223714,96,29,0,1532892064,3,1532892064,10000,254,2014223714,1532892064,256,66,97,255,10000,1337,5,10001,2,1532892064,10000,66,4,3,3,1532892064,1532892064,2014223714,27,27,64,6,10000,65,2014223715,9999,6,255,64,64,10001,2014223715,64,28,1337,6,256,254,1532892064,1338,95,28,1336,96,66,29,97,64,6,2014223716,257,1336,1,9999,27,97,2014223716,254,1,26,26,64,2,1532892062,6,1532892062,255,2,64,65,27,256,257,3,27,2014223714,1338,95,96,1,6,5,1338,1532892064,1532892062,65,1532892063,97,6,4,64,2014223714,2014223715,66,1337,2014223715,1532892063,5,29,1532892062,2014223715,1532892063,64,2014223714,1532892062,97,4,66,2014223716,2014223716,29,66,257,257,1532892064,1532892064,97,1,1532892062,97,0,65,96,97,3,4,2014223714,65,1338,255,64,1338,254,2014223714,256,256,1532892063,0,1337,255,1532892062,256,255,95,3,1532892063,1532892062,0,4,5],{from: accounts[0]}),'revert');
  });
});
