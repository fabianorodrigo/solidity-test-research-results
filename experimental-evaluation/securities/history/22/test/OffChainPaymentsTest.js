const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("OffChainPayments",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[0],2014223716,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[0],2014223716,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[7],27,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[7],27,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[1],{from:accounts[1]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[1],{from:accounts[1]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],1532892064,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],1532892064,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[7],{from:accounts[3]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[7],{from:accounts[3]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(6,contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[6],27,28,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(6,contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[6],27,28,{from:accounts[0]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[1],1532892063,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[1],1532892063,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653,{from:accounts[4]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableTokenMock.address,accounts[1],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653,{from:accounts[4]}');
  });
  
  it('Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length', async () => {
    let result = await contractOffChainPayments.recordPayments([accounts[6],accounts[8],accounts[6],accounts[8],accounts[0],accounts[0],accounts[2],accounts[4],accounts[7],accounts[0],accounts[0],accounts[7],accounts[7],accounts[3],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[7],accounts[1],accounts[9],accounts[2],accounts[8]], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[1]});
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[6],accounts[8],accounts[6],accounts[8],accounts[0],accounts[0],accounts[2],accounts[4],accounts[7],accounts[0],accounts[0],accounts[7],accounts[7],accounts[3],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[7],accounts[1],accounts[9],accounts[2],accounts[8]], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[9]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[1]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[0],accounts[5],accounts[7],accounts[6],accounts[7],accounts[0],accounts[9],accounts[2],accounts[9],accounts[4],accounts[5],accounts[1],accounts[8],accounts[0],accounts[9],accounts[8],accounts[0],accounts[4],accounts[7],accounts[4],accounts[1],accounts[1],accounts[6],accounts[0],accounts[0],accounts[6],accounts[9],accounts[0],accounts[2],accounts[4]], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[1]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[7],accounts[3],accounts[7],accounts[2],accounts[5],accounts[3],accounts[2],accounts[4],accounts[0],accounts[6],accounts[9],accounts[8],accounts[9],accounts[3],accounts[2],accounts[1],accounts[2],accounts[3],accounts[2],accounts[3],accounts[6],accounts[8],accounts[2],accounts[4],accounts[7],accounts[7],accounts[9],accounts[4],accounts[0],accounts[0]], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[1]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[9],accounts[0],accounts[9],accounts[4],accounts[9],accounts[9],accounts[3],accounts[9],accounts[1],accounts[0],accounts[7],accounts[8],accounts[3],accounts[2],accounts[1],accounts[6],accounts[6],accounts[0],accounts[8],accounts[6],accounts[0],accounts[1],accounts[7],accounts[4],accounts[0],accounts[4],accounts[1],accounts[0],accounts[7],accounts[3]], [5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6], [1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716], [[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]],{from: accounts[1]}),'revert');
  });
  it('Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractOffChainPayments.lookUpPaymentIndex(accounts[4], [230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161],{from: accounts[0]});
  });
  it('Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.lookUpPaymentIndex("0x0000000000000000000000000000000000000000", [230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161],{from: accounts[0]}),'revert');
  });
  it('Should execute challengePayment(uint256,uint256)', async () => {
    let result = await contractOffChainPayments.challengePayment(1337, 64,{from: accounts[0]});
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[9], 256, [53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133], 27,{from: accounts[1]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[9], 256, [53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133], 27,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[9], -1, [53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133], 27,{from: accounts[1]}),'revert');
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[4], 95, [190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127], 1338,{from: accounts[1]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[4], 95, [190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127], 1338,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[4], -1, [190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127], 1338,{from: accounts[1]}),'revert');
  });
});
