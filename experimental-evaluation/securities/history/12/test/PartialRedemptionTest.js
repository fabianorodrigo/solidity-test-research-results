const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("PartialRedemption",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[9],29,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[9],29,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[9],1,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[9],1,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[1],{from:accounts[9]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[1],{from:accounts[9]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[1],66,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[1],66,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[2],{from:accounts[2]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[2],{from:accounts[2]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(10001,contractRedeemableToken.address,contractRedeemableTokenMock.address,contractMath.address,0,10000,{from:accounts[1]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(10001,contractRedeemableToken.address,contractRedeemableTokenMock.address,contractMath.address,0,10000,{from:accounts[1]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[4],6,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[4],6,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableToken.address,accounts[5],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+31,{from:accounts[8]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableToken.address,accounts[5],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+31,{from:accounts[8]}');
  });
  
  it('Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0', async () => {
    let result = await contractPartialRedemption.redeemTokens([accounts[3],accounts[3],accounts[9],accounts[0],accounts[4],accounts[1],accounts[1],accounts[3],accounts[9],accounts[1],accounts[7],accounts[6],accounts[5],accounts[3],accounts[9],accounts[5],accounts[3],accounts[4],accounts[1],accounts[8],accounts[4],accounts[3],accounts[9],accounts[0],accounts[3],accounts[6],accounts[1],accounts[9],accounts[1],accounts[2],accounts[5],accounts[1],accounts[7],accounts[6],accounts[4],accounts[3],accounts[0],accounts[7],accounts[7],accounts[2],accounts[4],accounts[5],accounts[7],accounts[0],accounts[7],accounts[0],accounts[1],accounts[6],accounts[4],accounts[2],accounts[4],accounts[5],accounts[2],accounts[5],accounts[3],accounts[3],accounts[8],accounts[4],accounts[1],accounts[2],accounts[6],accounts[2],accounts[5],accounts[9],accounts[0],accounts[5],accounts[1],accounts[9],accounts[5],accounts[9],accounts[2],accounts[3],accounts[5],accounts[4],accounts[5],accounts[0],accounts[6],accounts[0],accounts[2],accounts[0],accounts[3],accounts[2],accounts[9],accounts[7],accounts[8],accounts[7],accounts[8],accounts[8],accounts[3],accounts[9],accounts[3],accounts[7],accounts[1],accounts[1],accounts[4],accounts[3],accounts[9],accounts[3],accounts[1],accounts[3],accounts[4],accounts[6],accounts[7],accounts[4],accounts[8],accounts[7],accounts[0],accounts[8],accounts[1],accounts[6],accounts[5],accounts[6],accounts[0],accounts[0],accounts[5],accounts[3],accounts[8],accounts[5],accounts[6],accounts[0],accounts[1],accounts[4],accounts[7],accounts[3],accounts[8],accounts[5],accounts[5],accounts[6],accounts[1],accounts[5],accounts[9],accounts[6],accounts[0],accounts[3],accounts[6],accounts[9],accounts[2],accounts[1],accounts[0],accounts[1],accounts[1],accounts[1],accounts[6],accounts[2],accounts[2],accounts[8],accounts[7],accounts[2],accounts[5],accounts[7],accounts[0],accounts[2],accounts[1],accounts[7],accounts[5],accounts[4],accounts[8],accounts[2],accounts[1],accounts[9],accounts[7],accounts[9],accounts[8],accounts[8],accounts[8],accounts[0],accounts[5],accounts[9],accounts[8],accounts[5],accounts[9],accounts[2],accounts[9],accounts[9],accounts[7],accounts[8],accounts[1],accounts[5],accounts[6],accounts[4],accounts[0],accounts[0],accounts[5],accounts[8],accounts[3],accounts[0],accounts[1],accounts[9],accounts[9],accounts[9],accounts[2],accounts[9],accounts[6],accounts[9],accounts[0],accounts[5],accounts[8],accounts[6],accounts[0],accounts[6],accounts[0],accounts[1],accounts[5],accounts[9],accounts[0],accounts[9],accounts[2],accounts[5],accounts[0],accounts[6],accounts[1],accounts[9],accounts[2],accounts[2],accounts[5],accounts[2],accounts[1],accounts[3],accounts[4],accounts[8],accounts[3],accounts[2],accounts[5],accounts[1],accounts[2],accounts[1],accounts[8],accounts[7],accounts[8],accounts[9],accounts[9],accounts[4],accounts[3],accounts[8],accounts[3],accounts[1],accounts[4],accounts[1],accounts[5],accounts[9],accounts[6],accounts[4],accounts[8],accounts[4],accounts[6],accounts[1],accounts[8],accounts[0],accounts[6],accounts[8],accounts[9],accounts[7],accounts[0],accounts[6]], [9999,256,256,1336,6,1338,1338,10000,64,2014223714,9999,29,9999,2014223714,2014223716,1532892063,1338,65,96,1,2014223715,96,28,1,2014223715,65,1532892063,255,10000,2014223714,0,4,3,1338,3,255,26,0,1338,256,3,28,97,256,2,1338,27,27,1337,1337,96,95,96,1532892062,26,2014223714,3,4,28,1,256,256,1337,10000,2014223715,1,66,256,64,257,255,1532892064,64,1,2014223716,6,1,1338,4,9999,1338,10001,1336,9999,256,1336,2014223716,1532892062,65,10000,1337,65,5,9999,10000,2014223715,256,66,257,257,1,1,257,4,10000,10001,2014223716,255,257,257,255,3,2,1532892062,28,2,6,1532892063,9999,257,64,2014223715,9999,2014223714,255,2,257,27,1337,1338,256,0,9999,1532892062,64,1337,256,26,66,65,2014223715,95,255,254,4,66,256,3,256,257,2014223714,256,257,256,65,256,1532892064,254,97,96,65,2014223714,1532892063,255,1,10001,96,28,1532892062,6,255,3,1,9999,1532892064,0,257,255,26,5,27,1532892063,1336,2014223715,27,64,1532892064,5,1532892063,9999,10001,1532892063,2,256,0,257,66,28,2014223716,2014223715,257,64,257,28,66,10000,2014223715,64,2014223716,96,0,254,2014223715,257,4,1532892064,3,1532892064,5,0,1,254,27,10000,28,5,4,254,256,2014223716,1532892064,10001,1532892064,2,10001,257,95,256,255,1337,10000,5,6,10001,2014223715,6,1532892063,1,26,64,27,6,96,257],{from: accounts[0]});
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[3],accounts[3],accounts[9],accounts[0],accounts[4],accounts[1],accounts[1],accounts[3],accounts[9],accounts[1],accounts[7],accounts[6],accounts[5],accounts[3],accounts[9],accounts[5],accounts[3],accounts[4],accounts[1],accounts[8],accounts[4],accounts[3],accounts[9],accounts[0],accounts[3],accounts[6],accounts[1],accounts[9],accounts[1],accounts[2],accounts[5],accounts[1],accounts[7],accounts[6],accounts[4],accounts[3],accounts[0],accounts[7],accounts[7],accounts[2],accounts[4],accounts[5],accounts[7],accounts[0],accounts[7],accounts[0],accounts[1],accounts[6],accounts[4],accounts[2],accounts[4],accounts[5],accounts[2],accounts[5],accounts[3],accounts[3],accounts[8],accounts[4],accounts[1],accounts[2],accounts[6],accounts[2],accounts[5],accounts[9],accounts[0],accounts[5],accounts[1],accounts[9],accounts[5],accounts[9],accounts[2],accounts[3],accounts[5],accounts[4],accounts[5],accounts[0],accounts[6],accounts[0],accounts[2],accounts[0],accounts[3],accounts[2],accounts[9],accounts[7],accounts[8],accounts[7],accounts[8],accounts[8],accounts[3],accounts[9],accounts[3],accounts[7],accounts[1],accounts[1],accounts[4],accounts[3],accounts[9],accounts[3],accounts[1],accounts[3],accounts[4],accounts[6],accounts[7],accounts[4],accounts[8],accounts[7],accounts[0],accounts[8],accounts[1],accounts[6],accounts[5],accounts[6],accounts[0],accounts[0],accounts[5],accounts[3],accounts[8],accounts[5],accounts[6],accounts[0],accounts[1],accounts[4],accounts[7],accounts[3],accounts[8],accounts[5],accounts[5],accounts[6],accounts[1],accounts[5],accounts[9],accounts[6],accounts[0],accounts[3],accounts[6],accounts[9],accounts[2],accounts[1],accounts[0],accounts[1],accounts[1],accounts[1],accounts[6],accounts[2],accounts[2],accounts[8],accounts[7],accounts[2],accounts[5],accounts[7],accounts[0],accounts[2],accounts[1],accounts[7],accounts[5],accounts[4],accounts[8],accounts[2],accounts[1],accounts[9],accounts[7],accounts[9],accounts[8],accounts[8],accounts[8],accounts[0],accounts[5],accounts[9],accounts[8],accounts[5],accounts[9],accounts[2],accounts[9],accounts[9],accounts[7],accounts[8],accounts[1],accounts[5],accounts[6],accounts[4],accounts[0],accounts[0],accounts[5],accounts[8],accounts[3],accounts[0],accounts[1],accounts[9],accounts[9],accounts[9],accounts[2],accounts[9],accounts[6],accounts[9],accounts[0],accounts[5],accounts[8],accounts[6],accounts[0],accounts[6],accounts[0],accounts[1],accounts[5],accounts[9],accounts[0],accounts[9],accounts[2],accounts[5],accounts[0],accounts[6],accounts[1],accounts[9],accounts[2],accounts[2],accounts[5],accounts[2],accounts[1],accounts[3],accounts[4],accounts[8],accounts[3],accounts[2],accounts[5],accounts[1],accounts[2],accounts[1],accounts[8],accounts[7],accounts[8],accounts[9],accounts[9],accounts[4],accounts[3],accounts[8],accounts[3],accounts[1],accounts[4],accounts[1],accounts[5],accounts[9],accounts[6],accounts[4],accounts[8],accounts[4],accounts[6],accounts[1],accounts[8],accounts[0],accounts[6],accounts[8],accounts[9],accounts[7],accounts[0],accounts[6]], [9999,256,256,1336,6,1338,1338,10000,64,2014223714,9999,29,9999,2014223714,2014223716,1532892063,1338,65,96,1,2014223715,96,28,1,2014223715,65,1532892063,255,10000,2014223714,0,4,3,1338,3,255,26,0,1338,256,3,28,97,256,2,1338,27,27,1337,1337,96,95,96,1532892062,26,2014223714,3,4,28,1,256,256,1337,10000,2014223715,1,66,256,64,257,255,1532892064,64,1,2014223716,6,1,1338,4,9999,1338,10001,1336,9999,256,1336,2014223716,1532892062,65,10000,1337,65,5,9999,10000,2014223715,256,66,257,257,1,1,257,4,10000,10001,2014223716,255,257,257,255,3,2,1532892062,28,2,6,1532892063,9999,257,64,2014223715,9999,2014223714,255,2,257,27,1337,1338,256,0,9999,1532892062,64,1337,256,26,66,65,2014223715,95,255,254,4,66,256,3,256,257,2014223714,256,257,256,65,256,1532892064,254,97,96,65,2014223714,1532892063,255,1,10001,96,28,1532892062,6,255,3,1,9999,1532892064,0,257,255,26,5,27,1532892063,1336,2014223715,27,64,1532892064,5,1532892063,9999,10001,1532892063,2,256,0,257,66,28,2014223716,2014223715,257,64,257,28,66,10000,2014223715,64,2014223716,96,0,254,2014223715,257,4,1532892064,3,1532892064,5,0,1,254,27,10000,28,5,4,254,256,2014223716,1532892064,10001,1532892064,2,10001,257,95,256,255,1337,10000,5,6,10001,2014223715,6,1532892063,1,26,64,27,6,96,257],{from: accounts[9]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[8],accounts[0],accounts[6],accounts[0],accounts[5],accounts[9],accounts[6],accounts[0],accounts[0],accounts[5],accounts[1],accounts[7],accounts[4],accounts[5],accounts[9],accounts[2],accounts[1],accounts[0],accounts[4],accounts[3],accounts[8],accounts[6],accounts[8],accounts[4],accounts[8],accounts[0],accounts[7],accounts[5],accounts[9],accounts[4],accounts[2],accounts[0],accounts[6],accounts[5],accounts[4],accounts[3],accounts[4],accounts[3],accounts[8],accounts[7],accounts[0],accounts[5],accounts[6],accounts[3],accounts[8],accounts[0],accounts[9],accounts[1],accounts[3],accounts[3],accounts[4],accounts[9],accounts[0],accounts[4],accounts[4],accounts[8],accounts[6],accounts[8],accounts[7],accounts[2],accounts[8],accounts[6],accounts[7],accounts[2],accounts[1],accounts[2],accounts[4],accounts[5],accounts[4],accounts[4],accounts[5],accounts[3],accounts[7],accounts[3],accounts[1],accounts[3],accounts[7],accounts[7],accounts[3],accounts[9],accounts[3],accounts[2],accounts[9],accounts[0],accounts[4],accounts[0],accounts[8],accounts[2],accounts[3],accounts[5],accounts[6],accounts[5],accounts[1],accounts[7],accounts[3],accounts[3],accounts[1],accounts[7],accounts[0],accounts[1],accounts[0],accounts[6],accounts[0],accounts[5],accounts[1],accounts[7],accounts[7],accounts[3],accounts[0],accounts[8],accounts[1],accounts[7],accounts[0],accounts[8],accounts[0],accounts[2],accounts[8],accounts[3],accounts[2],accounts[3],accounts[6],accounts[3],accounts[6],accounts[5],accounts[0],accounts[9],accounts[8],accounts[8],accounts[3],accounts[0],accounts[8],accounts[5],accounts[3],accounts[6],accounts[1],accounts[4],accounts[4],accounts[4],accounts[6],accounts[1],accounts[2],accounts[7],accounts[4],accounts[7],accounts[9],accounts[6],accounts[6],accounts[7],accounts[9],accounts[7],accounts[2],accounts[8],accounts[0],accounts[9],accounts[4],accounts[6],accounts[0],accounts[5],accounts[8],accounts[1],accounts[0],accounts[2],accounts[5],accounts[7],accounts[0],accounts[1],accounts[6],accounts[9],accounts[3],accounts[8],accounts[0],accounts[0],accounts[8],accounts[6],accounts[1],accounts[6],accounts[8],accounts[5],accounts[8],accounts[1],accounts[6],accounts[4],accounts[7],accounts[7],accounts[5],accounts[7],accounts[3],accounts[7],accounts[4],accounts[0],accounts[1],accounts[9],accounts[7],accounts[6],accounts[1],accounts[0],accounts[1],accounts[7],accounts[7],accounts[9],accounts[5],accounts[4],accounts[6],accounts[0],accounts[0],accounts[5],accounts[3],accounts[9],accounts[8],accounts[9],accounts[6],accounts[7],accounts[7],accounts[2],accounts[4],accounts[4],accounts[3],accounts[1],accounts[5],accounts[7],accounts[5],accounts[7],accounts[8],accounts[2],accounts[4],accounts[8],accounts[6],accounts[7],accounts[2],accounts[9],accounts[4],accounts[6],accounts[8],accounts[0],accounts[4],accounts[0],accounts[3],accounts[5],accounts[7],accounts[9],accounts[1],accounts[3],accounts[7],accounts[2],accounts[1],accounts[3],accounts[7],accounts[5],accounts[0],accounts[4],accounts[2],accounts[7],accounts[0],accounts[7],accounts[3]], [9999,256,256,1336,6,1338,1338,10000,64,2014223714,9999,29,9999,2014223714,2014223716,1532892063,1338,65,96,1,2014223715,96,28,1,2014223715,65,1532892063,255,10000,2014223714,0,4,3,1338,3,255,26,0,1338,256,3,28,97,256,2,1338,27,27,1337,1337,96,95,96,1532892062,26,2014223714,3,4,28,1,256,256,1337,10000,2014223715,1,66,256,64,257,255,1532892064,64,1,2014223716,6,1,1338,4,9999,1338,10001,1336,9999,256,1336,2014223716,1532892062,65,10000,1337,65,5,9999,10000,2014223715,256,66,257,257,1,1,257,4,10000,10001,2014223716,255,257,257,255,3,2,1532892062,28,2,6,1532892063,9999,257,64,2014223715,9999,2014223714,255,2,257,27,1337,1338,256,0,9999,1532892062,64,1337,256,26,66,65,2014223715,95,255,254,4,66,256,3,256,257,2014223714,256,257,256,65,256,1532892064,254,97,96,65,2014223714,1532892063,255,1,10001,96,28,1532892062,6,255,3,1,9999,1532892064,0,257,255,26,5,27,1532892063,1336,2014223715,27,64,1532892064,5,1532892063,9999,10001,1532892063,2,256,0,257,66,28,2014223716,2014223715,257,64,257,28,66,10000,2014223715,64,2014223716,96,0,254,2014223715,257,4,1532892064,3,1532892064,5,0,1,254,27,10000,28,5,4,254,256,2014223716,1532892064,10001,1532892064,2,10001,257,95,256,255,1337,10000,5,6,10001,2014223715,6,1532892063,1,26,64,27,6,96,257],{from: accounts[0]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([], [9999,256,256,1336,6,1338,1338,10000,64,2014223714,9999,29,9999,2014223714,2014223716,1532892063,1338,65,96,1,2014223715,96,28,1,2014223715,65,1532892063,255,10000,2014223714,0,4,3,1338,3,255,26,0,1338,256,3,28,97,256,2,1338,27,27,1337,1337,96,95,96,1532892062,26,2014223714,3,4,28,1,256,256,1337,10000,2014223715,1,66,256,64,257,255,1532892064,64,1,2014223716,6,1,1338,4,9999,1338,10001,1336,9999,256,1336,2014223716,1532892062,65,10000,1337,65,5,9999,10000,2014223715,256,66,257,257,1,1,257,4,10000,10001,2014223716,255,257,257,255,3,2,1532892062,28,2,6,1532892063,9999,257,64,2014223715,9999,2014223714,255,2,257,27,1337,1338,256,0,9999,1532892062,64,1337,256,26,66,65,2014223715,95,255,254,4,66,256,3,256,257,2014223714,256,257,256,65,256,1532892064,254,97,96,65,2014223714,1532892063,255,1,10001,96,28,1532892062,6,255,3,1,9999,1532892064,0,257,255,26,5,27,1532892063,1336,2014223715,27,64,1532892064,5,1532892063,9999,10001,1532892063,2,256,0,257,66,28,2014223716,2014223715,257,64,257,28,66,10000,2014223715,64,2014223716,96,0,254,2014223715,257,4,1532892064,3,1532892064,5,0,1,254,27,10000,28,5,4,254,256,2014223716,1532892064,10001,1532892064,2,10001,257,95,256,255,1337,10000,5,6,10001,2014223715,6,1532892063,1,26,64,27,6,96,257],{from: accounts[0]}),'revert');
  });
});
