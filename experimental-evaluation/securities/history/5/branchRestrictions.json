,{
  "2020-11-10T14:56:56.949ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:03.196ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:09.434ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:15.930ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:22.293ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:28.748ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:35.292ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:42.080ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282",
              "sol": "block.timestamp+282"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282",
                "sol": "block.timestamp+282"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282",
                "sol": "block.timestamp+282"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282",
                "sol": "block.timestamp+282"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.721ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.723ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.726ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.730ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[6],accounts[1],accounts[1],accounts[7],accounts[0],accounts[1],accounts[9],accounts[9],accounts[8],accounts[1],accounts[2],accounts[3],accounts[7],accounts[9],accounts[8],accounts[9],accounts[8],accounts[6],accounts[8],accounts[4],accounts[5],accounts[7],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[9],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
              "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
            },
            {
              "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
              "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
            },
            {
              "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
              "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6],accounts[1],accounts[1],accounts[7],accounts[0],accounts[1],accounts[9],accounts[9],accounts[8],accounts[1],accounts[2],accounts[3],accounts[7],accounts[9],accounts[8],accounts[9],accounts[8],accounts[6],accounts[8],accounts[4],accounts[5],accounts[7],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[9],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
                "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
              },
              {
                "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
                "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
              },
              {
                "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
                "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
                "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
              },
              {
                "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
                "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
              },
              {
                "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
                "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[9],accounts[7],accounts[0],accounts[8],accounts[4],accounts[5],accounts[6],accounts[4],accounts[7],accounts[3],accounts[1],accounts[1],accounts[2],accounts[8],accounts[5],accounts[3],accounts[7],accounts[1],accounts[2],accounts[3],accounts[9],accounts[6],accounts[3],accounts[5],accounts[2],accounts[9],accounts[0],accounts[6],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
                "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
              },
              {
                "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
                "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
              },
              {
                "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
                "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[7],accounts[0],accounts[1],accounts[8],accounts[7],accounts[6],accounts[1],accounts[0],accounts[2],accounts[0],accounts[6],accounts[9],accounts[9],accounts[0],accounts[3],accounts[8],accounts[8],accounts[0],accounts[3],accounts[8],accounts[2],accounts[1],accounts[2],accounts[3],accounts[7],accounts[6],accounts[7],accounts[7],accounts[6]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
                "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
              },
              {
                "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
                "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
              },
              {
                "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
                "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[7],accounts[3],accounts[8],accounts[9],accounts[9],accounts[1],accounts[0],accounts[8],accounts[3],accounts[4],accounts[8],accounts[0],accounts[5],accounts[6],accounts[9],accounts[0],accounts[1],accounts[2],accounts[1],accounts[8],accounts[7],accounts[0],accounts[4],accounts[3],accounts[5],accounts[1],accounts[8],accounts[8],accounts[1]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337]",
                "sol": "[uint256(97),uint256(1338),uint256(1336),uint256(28),uint256(28),uint256(256),uint256(1),uint256(5),uint256(256),uint256(3),uint256(65),uint256(1337),uint256(66),uint256(97),uint256(1532892062),uint256(2),uint256(256),uint256(1),uint256(1532892063),uint256(26),uint256(28),uint256(2),uint256(97),uint256(1),uint256(10001),uint256(27),uint256(66),uint256(2014223715),uint256(1337)]"
              },
              {
                "js": "[29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256]",
                "sol": "[uint256(29),uint256(27),uint256(1532892063),uint256(97),uint256(0),uint256(10001),uint256(0),uint256(3),uint256(66),uint256(27),uint256(10001),uint256(6),uint256(28),uint256(255),uint256(2014223715),uint256(0),uint256(96),uint256(1532892063),uint256(66),uint256(1338),uint256(1532892062),uint256(255),uint256(6),uint256(1337),uint256(1336),uint256(28),uint256(26),uint256(6),uint256(256)]"
              },
              {
                "js": "[[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]]",
                "sol": "[bytes32(stringToBytes32(\"179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181\")),bytes32(stringToBytes32(\"109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14\")),bytes32(stringToBytes32(\"163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52\")),bytes32(stringToBytes32(\"143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139\")),bytes32(stringToBytes32(\"180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184\")),bytes32(stringToBytes32(\"239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195\")),bytes32(stringToBytes32(\"26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164\")),bytes32(stringToBytes32(\"173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136\")),bytes32(stringToBytes32(\"153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112\")),bytes32(stringToBytes32(\"200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106\")),bytes32(stringToBytes32(\"81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159\")),bytes32(stringToBytes32(\"192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159\")),bytes32(stringToBytes32(\"54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184\")),bytes32(stringToBytes32(\"217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225\")),bytes32(stringToBytes32(\"155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129\")),bytes32(stringToBytes32(\"175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123\")),bytes32(stringToBytes32(\"69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74\")),bytes32(stringToBytes32(\"86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60\")),bytes32(stringToBytes32(\"1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206\")),bytes32(stringToBytes32(\"2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189\")),bytes32(stringToBytes32(\"187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79\")),bytes32(stringToBytes32(\"202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22\")),bytes32(stringToBytes32(\"135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217\")),bytes32(stringToBytes32(\"182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2\")),bytes32(stringToBytes32(\"2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4\")),bytes32(stringToBytes32(\"224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193\")),bytes32(stringToBytes32(\"250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121\")),bytes32(stringToBytes32(\"78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250\")),bytes32(stringToBytes32(\"153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.740ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202]",
              "sol": "stringToBytes32(\"204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202]",
                "sol": "stringToBytes32(\"204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.740ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.741ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "[0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47]",
              "sol": "stringToBytes32(\"0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47\")"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "[0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47]",
                "sol": "stringToBytes32(\"0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47\")"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47]",
                "sol": "stringToBytes32(\"0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47\")"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68]",
              "sol": "stringToBytes32(\"184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68\")"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "[184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68]",
                "sol": "stringToBytes32(\"184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68\")"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68]",
                "sol": "stringToBytes32(\"184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68\")"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.743ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.744ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[39,129,194,116,14,204,39,234,86,89,14,127,57,255,15,25,20,144,113,47,206,233,127,185,90,219,231,164,3,206,249,207],[162,106,236,138,79,152,141,114,151,97,5,86,218,16,190,190,138,218,191,33,130,196,253,28,68,204,242,230,96,113,223,62],[237,72,243,18,181,45,58,133,62,210,239,195,123,112,116,53,193,113,173,200,91,182,217,161,202,227,199,61,225,184,247,179],[36,99,245,15,249,174,210,191,193,124,123,1,30,88,0,25,121,202,17,35,124,212,103,124,96,225,9,241,0,251,86,88],[112,81,207,86,210,67,140,55,199,31,76,114,165,193,30,124,232,0,237,230,106,23,50,207,48,216,211,217,20,163,2,150],[148,56,153,254,84,3,69,93,221,82,73,32,81,43,45,121,29,47,166,229,104,121,122,173,25,70,171,14,138,220,93,77],[250,200,199,174,145,197,157,181,25,97,112,72,188,94,64,129,125,208,154,250,175,254,26,240,18,40,204,150,181,220,125,98],[165,223,28,16,143,118,73,27,41,76,171,12,252,251,47,198,41,181,198,74,66,31,31,34,204,209,120,158,90,118,239,157],[154,247,76,168,207,248,58,144,25,89,223,76,139,105,59,112,104,40,246,209,149,225,115,18,195,15,188,34,236,136,192,166],[45,126,220,74,56,24,246,13,31,60,221,77,133,211,106,237,82,87,202,176,51,3,107,153,87,77,165,34,147,88,135,108],[236,206,3,20,194,224,77,65,115,217,177,131,52,180,18,124,225,184,75,100,144,15,187,109,33,30,231,77,199,200,52,195],[125,37,77,189,239,87,203,20,74,23,194,250,124,153,95,225,76,14,143,21,212,232,255,252,192,19,75,91,42,86,193,39],[198,126,107,192,41,221,252,96,186,75,223,79,139,239,87,42,90,156,9,149,229,144,46,177,154,162,51,118,117,49,187,65],[172,161,142,95,168,227,139,221,207,15,176,252,159,244,243,224,9,249,63,66,144,4,49,157,130,129,251,143,175,146,115,47],[231,72,255,11,37,171,216,162,177,241,63,93,236,248,236,252,138,92,140,169,172,156,179,196,180,10,45,53,191,203,176,96],[255,233,82,208,189,59,13,140,237,30,13,160,254,77,66,97,226,97,111,51,0,179,104,61,11,39,77,166,195,79,57,118],[122,178,186,98,20,196,189,48,126,233,189,99,193,169,0,95,40,202,188,223,54,20,12,100,245,228,171,143,152,85,205,97],[61,208,194,34,177,78,14,10,108,149,93,166,115,231,249,167,48,210,34,139,205,38,54,135,45,65,0,200,171,106,204,37],[150,246,93,160,20,200,218,253,201,38,152,8,206,103,134,26,201,200,0,244,190,193,217,230,5,68,248,226,130,24,149,184],[164,55,33,17,74,15,204,205,219,58,97,104,102,118,190,181,149,120,174,46,232,187,223,255,159,223,74,51,213,81,80,153],[254,47,186,163,242,50,201,29,73,73,149,163,249,132,110,226,6,11,169,21,26,54,84,2,205,112,91,251,31,248,69,240],[165,53,237,156,104,27,193,129,20,205,85,233,21,125,238,116,111,10,138,232,45,60,82,226,201,66,132,153,186,181,24,90],[240,92,169,241,110,117,213,189,2,88,122,168,175,251,36,89,29,148,183,61,165,13,161,153,130,121,246,220,186,94,89,25],[33,223,51,217,24,234,191,174,205,224,94,187,214,82,234,26,35,28,240,1,181,233,19,175,33,56,53,28,45,22,194,81],[26,121,146,242,68,160,183,239,203,233,98,9,22,65,72,144,84,82,121,220,151,107,2,144,32,83,131,187,108,9,175,86],[253,148,2,1,140,227,189,186,252,42,237,188,103,191,56,191,254,212,220,128,139,99,220,111,63,106,24,120,122,53,78,106],[125,177,96,110,117,222,147,1,189,172,237,195,193,51,11,91,176,59,96,115,225,188,225,25,17,55,87,10,155,8,65,62],[62,91,225,114,229,228,91,54,0,69,192,76,252,210,189,183,207,50,94,180,7,39,127,191,77,87,139,90,38,15,165,4],[105,162,189,131,209,209,174,205,135,104,75,58,69,149,254,254,50,177,137,2,38,162,166,221,114,217,141,192,153,170,87,116],[5,183,50,175,96,112,90,31,32,123,243,66,39,211,64,118,212,159,82,135,196,201,63,172,122,232,251,151,175,166,110,235],[99,53,245,228,124,197,72,12,198,83,168,121,117,22,126,189,80,237,52,144,239,186,88,211,170,99,65,21,190,131,254,145],[40,0,247,87,194,239,199,216,204,133,16,34,228,170,116,38,236,211,173,100,12,231,124,233,180,112,14,131,105,93,61,94],[173,54,189,6,46,78,237,11,226,181,149,57,255,44,37,88,51,255,120,20,115,181,150,26,17,206,188,36,67,126,162,39],[18,205,134,115,253,252,215,29,223,77,102,238,4,73,30,89,25,40,79,168,232,116,98,198,225,31,151,91,236,122,59,87],[109,255,188,216,180,178,55,56,28,20,43,129,169,50,170,252,204,171,248,251,56,169,234,220,167,59,124,50,23,128,62,188],[114,77,225,128,127,47,198,48,75,195,35,210,5,147,98,27,209,235,129,141,2,28,112,213,84,184,10,89,249,252,126,25],[82,136,106,143,123,2,79,230,155,180,195,242,28,219,234,44,79,222,182,181,63,128,79,198,223,228,19,110,200,119,70,120],[111,82,241,142,46,17,28,174,209,127,45,22,253,187,184,167,7,74,245,9,176,240,124,193,235,44,225,211,207,138,89,213],[119,225,196,156,116,6,187,204,150,46,93,226,190,72,120,58,83,58,132,126,74,236,192,147,51,9,108,84,31,10,170,198],[82,175,100,79,63,244,237,228,116,88,248,78,63,233,111,77,249,183,142,0,59,245,218,116,131,124,43,212,42,41,87,225],[254,135,124,166,103,233,105,76,214,98,134,30,197,76,49,34,15,92,155,145,216,205,36,160,87,82,209,155,198,21,8,23],[232,151,83,32,193,220,114,219,61,161,230,47,148,203,233,26,81,108,160,97,209,111,190,203,48,241,180,17,57,122,198,89],[163,28,39,243,117,187,166,49,171,141,142,207,36,158,46,118,145,225,185,60,202,111,117,138,186,191,64,56,59,192,41,127],[62,123,74,16,225,93,255,100,187,35,65,92,5,214,188,236,5,217,17,233,7,124,172,105,73,125,96,244,3,188,86,209],[170,70,161,182,122,70,3,166,219,190,214,33,226,222,105,196,196,227,135,190,188,219,178,254,200,94,87,93,249,210,22,216],[197,118,207,172,101,9,74,163,112,15,18,191,99,91,139,138,164,79,250,89,34,58,49,185,80,67,36,243,19,190,144,150],[184,124,121,154,147,220,36,101,229,19,71,66,97,19,101,144,223,165,123,95,222,236,242,244,77,228,64,159,167,29,217,239],[226,231,75,213,149,27,63,14,218,152,103,231,76,128,44,38,19,129,237,99,225,18,211,149,132,49,210,145,198,91,39,241],[206,142,148,96,38,138,112,46,246,48,180,43,230,81,121,121,46,20,188,42,94,238,253,199,89,104,110,30,38,189,79,8],[252,178,116,226,101,25,212,34,141,70,20,119,223,153,55,195,243,223,143,34,121,221,223,239,97,148,100,239,11,220,38,134],[66,124,4,185,129,219,189,252,23,170,70,253,177,189,254,167,103,119,98,245,177,236,133,40,84,151,219,120,117,149,198,198],[164,95,172,124,151,172,123,188,2,173,23,219,143,11,6,20,59,93,39,7,207,250,101,152,133,83,236,112,228,8,73,114],[200,132,195,196,78,206,158,69,75,137,21,171,12,151,17,92,96,246,58,9,106,137,107,134,142,225,148,69,196,155,227,89],[154,206,11,41,12,54,250,44,203,155,89,191,231,184,10,237,136,195,188,158,27,38,79,173,57,153,106,157,51,200,136,59],[84,57,71,101,175,45,108,110,40,11,185,216,44,116,123,176,110,83,245,183,42,50,120,140,33,202,146,221,128,197,176,191],[204,173,63,55,115,53,130,142,121,80,231,131,126,174,51,254,209,53,33,15,20,149,218,54,19,32,239,55,214,42,236,60],[123,98,202,161,196,181,86,117,99,54,2,250,112,200,180,111,175,95,250,90,230,185,186,93,241,105,4,147,129,138,249,44],[61,178,223,83,12,120,108,92,60,88,149,236,215,140,209,68,201,46,23,102,191,137,23,38,203,221,245,65,230,113,76,78],[255,69,159,142,40,168,143,6,224,244,135,228,5,192,220,238,239,32,207,141,88,203,199,7,171,60,118,175,237,135,176,9],[25,230,140,56,72,158,101,69,100,46,22,204,49,111,197,226,160,255,18,197,139,136,193,80,121,68,198,128,235,102,228,118],[61,118,152,6,134,252,145,235,202,31,70,246,68,151,176,199,243,120,75,190,52,105,50,220,4,203,247,87,224,116,213,229],[232,17,144,62,158,248,161,75,167,71,244,26,227,1,63,122,114,134,201,30,31,190,169,12,55,100,20,164,38,172,108,126],[122,215,233,233,46,223,218,119,15,158,65,34,191,102,121,21,173,0,56,149,29,214,94,194,128,3,201,176,115,157,86,96],[150,176,179,80,163,32,128,168,185,157,205,225,180,208,177,185,128,38,184,120,98,222,125,118,51,151,190,62,210,87,29,214]]",
              "sol": "[bytes32(stringToBytes32(\"39,129,194,116,14,204,39,234,86,89,14,127,57,255,15,25,20,144,113,47,206,233,127,185,90,219,231,164,3,206,249,207\")),bytes32(stringToBytes32(\"162,106,236,138,79,152,141,114,151,97,5,86,218,16,190,190,138,218,191,33,130,196,253,28,68,204,242,230,96,113,223,62\")),bytes32(stringToBytes32(\"237,72,243,18,181,45,58,133,62,210,239,195,123,112,116,53,193,113,173,200,91,182,217,161,202,227,199,61,225,184,247,179\")),bytes32(stringToBytes32(\"36,99,245,15,249,174,210,191,193,124,123,1,30,88,0,25,121,202,17,35,124,212,103,124,96,225,9,241,0,251,86,88\")),bytes32(stringToBytes32(\"112,81,207,86,210,67,140,55,199,31,76,114,165,193,30,124,232,0,237,230,106,23,50,207,48,216,211,217,20,163,2,150\")),bytes32(stringToBytes32(\"148,56,153,254,84,3,69,93,221,82,73,32,81,43,45,121,29,47,166,229,104,121,122,173,25,70,171,14,138,220,93,77\")),bytes32(stringToBytes32(\"250,200,199,174,145,197,157,181,25,97,112,72,188,94,64,129,125,208,154,250,175,254,26,240,18,40,204,150,181,220,125,98\")),bytes32(stringToBytes32(\"165,223,28,16,143,118,73,27,41,76,171,12,252,251,47,198,41,181,198,74,66,31,31,34,204,209,120,158,90,118,239,157\")),bytes32(stringToBytes32(\"154,247,76,168,207,248,58,144,25,89,223,76,139,105,59,112,104,40,246,209,149,225,115,18,195,15,188,34,236,136,192,166\")),bytes32(stringToBytes32(\"45,126,220,74,56,24,246,13,31,60,221,77,133,211,106,237,82,87,202,176,51,3,107,153,87,77,165,34,147,88,135,108\")),bytes32(stringToBytes32(\"236,206,3,20,194,224,77,65,115,217,177,131,52,180,18,124,225,184,75,100,144,15,187,109,33,30,231,77,199,200,52,195\")),bytes32(stringToBytes32(\"125,37,77,189,239,87,203,20,74,23,194,250,124,153,95,225,76,14,143,21,212,232,255,252,192,19,75,91,42,86,193,39\")),bytes32(stringToBytes32(\"198,126,107,192,41,221,252,96,186,75,223,79,139,239,87,42,90,156,9,149,229,144,46,177,154,162,51,118,117,49,187,65\")),bytes32(stringToBytes32(\"172,161,142,95,168,227,139,221,207,15,176,252,159,244,243,224,9,249,63,66,144,4,49,157,130,129,251,143,175,146,115,47\")),bytes32(stringToBytes32(\"231,72,255,11,37,171,216,162,177,241,63,93,236,248,236,252,138,92,140,169,172,156,179,196,180,10,45,53,191,203,176,96\")),bytes32(stringToBytes32(\"255,233,82,208,189,59,13,140,237,30,13,160,254,77,66,97,226,97,111,51,0,179,104,61,11,39,77,166,195,79,57,118\")),bytes32(stringToBytes32(\"122,178,186,98,20,196,189,48,126,233,189,99,193,169,0,95,40,202,188,223,54,20,12,100,245,228,171,143,152,85,205,97\")),bytes32(stringToBytes32(\"61,208,194,34,177,78,14,10,108,149,93,166,115,231,249,167,48,210,34,139,205,38,54,135,45,65,0,200,171,106,204,37\")),bytes32(stringToBytes32(\"150,246,93,160,20,200,218,253,201,38,152,8,206,103,134,26,201,200,0,244,190,193,217,230,5,68,248,226,130,24,149,184\")),bytes32(stringToBytes32(\"164,55,33,17,74,15,204,205,219,58,97,104,102,118,190,181,149,120,174,46,232,187,223,255,159,223,74,51,213,81,80,153\")),bytes32(stringToBytes32(\"254,47,186,163,242,50,201,29,73,73,149,163,249,132,110,226,6,11,169,21,26,54,84,2,205,112,91,251,31,248,69,240\")),bytes32(stringToBytes32(\"165,53,237,156,104,27,193,129,20,205,85,233,21,125,238,116,111,10,138,232,45,60,82,226,201,66,132,153,186,181,24,90\")),bytes32(stringToBytes32(\"240,92,169,241,110,117,213,189,2,88,122,168,175,251,36,89,29,148,183,61,165,13,161,153,130,121,246,220,186,94,89,25\")),bytes32(stringToBytes32(\"33,223,51,217,24,234,191,174,205,224,94,187,214,82,234,26,35,28,240,1,181,233,19,175,33,56,53,28,45,22,194,81\")),bytes32(stringToBytes32(\"26,121,146,242,68,160,183,239,203,233,98,9,22,65,72,144,84,82,121,220,151,107,2,144,32,83,131,187,108,9,175,86\")),bytes32(stringToBytes32(\"253,148,2,1,140,227,189,186,252,42,237,188,103,191,56,191,254,212,220,128,139,99,220,111,63,106,24,120,122,53,78,106\")),bytes32(stringToBytes32(\"125,177,96,110,117,222,147,1,189,172,237,195,193,51,11,91,176,59,96,115,225,188,225,25,17,55,87,10,155,8,65,62\")),bytes32(stringToBytes32(\"62,91,225,114,229,228,91,54,0,69,192,76,252,210,189,183,207,50,94,180,7,39,127,191,77,87,139,90,38,15,165,4\")),bytes32(stringToBytes32(\"105,162,189,131,209,209,174,205,135,104,75,58,69,149,254,254,50,177,137,2,38,162,166,221,114,217,141,192,153,170,87,116\")),bytes32(stringToBytes32(\"5,183,50,175,96,112,90,31,32,123,243,66,39,211,64,118,212,159,82,135,196,201,63,172,122,232,251,151,175,166,110,235\")),bytes32(stringToBytes32(\"99,53,245,228,124,197,72,12,198,83,168,121,117,22,126,189,80,237,52,144,239,186,88,211,170,99,65,21,190,131,254,145\")),bytes32(stringToBytes32(\"40,0,247,87,194,239,199,216,204,133,16,34,228,170,116,38,236,211,173,100,12,231,124,233,180,112,14,131,105,93,61,94\")),bytes32(stringToBytes32(\"173,54,189,6,46,78,237,11,226,181,149,57,255,44,37,88,51,255,120,20,115,181,150,26,17,206,188,36,67,126,162,39\")),bytes32(stringToBytes32(\"18,205,134,115,253,252,215,29,223,77,102,238,4,73,30,89,25,40,79,168,232,116,98,198,225,31,151,91,236,122,59,87\")),bytes32(stringToBytes32(\"109,255,188,216,180,178,55,56,28,20,43,129,169,50,170,252,204,171,248,251,56,169,234,220,167,59,124,50,23,128,62,188\")),bytes32(stringToBytes32(\"114,77,225,128,127,47,198,48,75,195,35,210,5,147,98,27,209,235,129,141,2,28,112,213,84,184,10,89,249,252,126,25\")),bytes32(stringToBytes32(\"82,136,106,143,123,2,79,230,155,180,195,242,28,219,234,44,79,222,182,181,63,128,79,198,223,228,19,110,200,119,70,120\")),bytes32(stringToBytes32(\"111,82,241,142,46,17,28,174,209,127,45,22,253,187,184,167,7,74,245,9,176,240,124,193,235,44,225,211,207,138,89,213\")),bytes32(stringToBytes32(\"119,225,196,156,116,6,187,204,150,46,93,226,190,72,120,58,83,58,132,126,74,236,192,147,51,9,108,84,31,10,170,198\")),bytes32(stringToBytes32(\"82,175,100,79,63,244,237,228,116,88,248,78,63,233,111,77,249,183,142,0,59,245,218,116,131,124,43,212,42,41,87,225\")),bytes32(stringToBytes32(\"254,135,124,166,103,233,105,76,214,98,134,30,197,76,49,34,15,92,155,145,216,205,36,160,87,82,209,155,198,21,8,23\")),bytes32(stringToBytes32(\"232,151,83,32,193,220,114,219,61,161,230,47,148,203,233,26,81,108,160,97,209,111,190,203,48,241,180,17,57,122,198,89\")),bytes32(stringToBytes32(\"163,28,39,243,117,187,166,49,171,141,142,207,36,158,46,118,145,225,185,60,202,111,117,138,186,191,64,56,59,192,41,127\")),bytes32(stringToBytes32(\"62,123,74,16,225,93,255,100,187,35,65,92,5,214,188,236,5,217,17,233,7,124,172,105,73,125,96,244,3,188,86,209\")),bytes32(stringToBytes32(\"170,70,161,182,122,70,3,166,219,190,214,33,226,222,105,196,196,227,135,190,188,219,178,254,200,94,87,93,249,210,22,216\")),bytes32(stringToBytes32(\"197,118,207,172,101,9,74,163,112,15,18,191,99,91,139,138,164,79,250,89,34,58,49,185,80,67,36,243,19,190,144,150\")),bytes32(stringToBytes32(\"184,124,121,154,147,220,36,101,229,19,71,66,97,19,101,144,223,165,123,95,222,236,242,244,77,228,64,159,167,29,217,239\")),bytes32(stringToBytes32(\"226,231,75,213,149,27,63,14,218,152,103,231,76,128,44,38,19,129,237,99,225,18,211,149,132,49,210,145,198,91,39,241\")),bytes32(stringToBytes32(\"206,142,148,96,38,138,112,46,246,48,180,43,230,81,121,121,46,20,188,42,94,238,253,199,89,104,110,30,38,189,79,8\")),bytes32(stringToBytes32(\"252,178,116,226,101,25,212,34,141,70,20,119,223,153,55,195,243,223,143,34,121,221,223,239,97,148,100,239,11,220,38,134\")),bytes32(stringToBytes32(\"66,124,4,185,129,219,189,252,23,170,70,253,177,189,254,167,103,119,98,245,177,236,133,40,84,151,219,120,117,149,198,198\")),bytes32(stringToBytes32(\"164,95,172,124,151,172,123,188,2,173,23,219,143,11,6,20,59,93,39,7,207,250,101,152,133,83,236,112,228,8,73,114\")),bytes32(stringToBytes32(\"200,132,195,196,78,206,158,69,75,137,21,171,12,151,17,92,96,246,58,9,106,137,107,134,142,225,148,69,196,155,227,89\")),bytes32(stringToBytes32(\"154,206,11,41,12,54,250,44,203,155,89,191,231,184,10,237,136,195,188,158,27,38,79,173,57,153,106,157,51,200,136,59\")),bytes32(stringToBytes32(\"84,57,71,101,175,45,108,110,40,11,185,216,44,116,123,176,110,83,245,183,42,50,120,140,33,202,146,221,128,197,176,191\")),bytes32(stringToBytes32(\"204,173,63,55,115,53,130,142,121,80,231,131,126,174,51,254,209,53,33,15,20,149,218,54,19,32,239,55,214,42,236,60\")),bytes32(stringToBytes32(\"123,98,202,161,196,181,86,117,99,54,2,250,112,200,180,111,175,95,250,90,230,185,186,93,241,105,4,147,129,138,249,44\")),bytes32(stringToBytes32(\"61,178,223,83,12,120,108,92,60,88,149,236,215,140,209,68,201,46,23,102,191,137,23,38,203,221,245,65,230,113,76,78\")),bytes32(stringToBytes32(\"255,69,159,142,40,168,143,6,224,244,135,228,5,192,220,238,239,32,207,141,88,203,199,7,171,60,118,175,237,135,176,9\")),bytes32(stringToBytes32(\"25,230,140,56,72,158,101,69,100,46,22,204,49,111,197,226,160,255,18,197,139,136,193,80,121,68,198,128,235,102,228,118\")),bytes32(stringToBytes32(\"61,118,152,6,134,252,145,235,202,31,70,246,68,151,176,199,243,120,75,190,52,105,50,220,4,203,247,87,224,116,213,229\")),bytes32(stringToBytes32(\"232,17,144,62,158,248,161,75,167,71,244,26,227,1,63,122,114,134,201,30,31,190,169,12,55,100,20,164,38,172,108,126\")),bytes32(stringToBytes32(\"122,215,233,233,46,223,218,119,15,158,65,34,191,102,121,21,173,0,56,149,29,214,94,194,128,3,201,176,115,157,86,96\")),bytes32(stringToBytes32(\"150,176,179,80,163,32,128,168,185,157,205,225,180,208,177,185,128,38,184,120,98,222,125,118,51,151,190,62,210,87,29,214\"))]"
            },
            {
              "js": "[[75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51],[125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50],[233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117],[151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80],[126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34],[182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193],[45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158],[77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186],[65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32],[243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80],[155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215],[82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4],[157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155],[46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8],[3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56],[203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23],[212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87],[201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80],[144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187],[192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41],[27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52],[192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96],[10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39],[13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36],[6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56],[88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234],[228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25],[66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225],[149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141],[249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184],[133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4],[16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31],[0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228],[171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134],[214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137],[62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198],[98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41],[202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67],[144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22],[38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146],[124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195],[222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27],[190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134],[45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103],[28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136],[239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81],[163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159],[168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247],[213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231],[191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10],[33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216],[112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5],[137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176],[9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113],[119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161],[99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0],[147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157],[168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5],[161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196],[252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166],[212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97],[140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47],[252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138],[169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157]]",
              "sol": "[bytes32(stringToBytes32(\"75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51\")),bytes32(stringToBytes32(\"125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50\")),bytes32(stringToBytes32(\"233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117\")),bytes32(stringToBytes32(\"151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80\")),bytes32(stringToBytes32(\"126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34\")),bytes32(stringToBytes32(\"182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193\")),bytes32(stringToBytes32(\"45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158\")),bytes32(stringToBytes32(\"77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186\")),bytes32(stringToBytes32(\"65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32\")),bytes32(stringToBytes32(\"243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80\")),bytes32(stringToBytes32(\"155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215\")),bytes32(stringToBytes32(\"82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4\")),bytes32(stringToBytes32(\"157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155\")),bytes32(stringToBytes32(\"46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8\")),bytes32(stringToBytes32(\"3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56\")),bytes32(stringToBytes32(\"203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23\")),bytes32(stringToBytes32(\"212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87\")),bytes32(stringToBytes32(\"201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80\")),bytes32(stringToBytes32(\"144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187\")),bytes32(stringToBytes32(\"192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41\")),bytes32(stringToBytes32(\"27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52\")),bytes32(stringToBytes32(\"192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96\")),bytes32(stringToBytes32(\"10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39\")),bytes32(stringToBytes32(\"13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36\")),bytes32(stringToBytes32(\"6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56\")),bytes32(stringToBytes32(\"88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234\")),bytes32(stringToBytes32(\"228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25\")),bytes32(stringToBytes32(\"66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225\")),bytes32(stringToBytes32(\"149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141\")),bytes32(stringToBytes32(\"249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184\")),bytes32(stringToBytes32(\"133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4\")),bytes32(stringToBytes32(\"16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31\")),bytes32(stringToBytes32(\"0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228\")),bytes32(stringToBytes32(\"171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134\")),bytes32(stringToBytes32(\"214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137\")),bytes32(stringToBytes32(\"62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198\")),bytes32(stringToBytes32(\"98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41\")),bytes32(stringToBytes32(\"202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67\")),bytes32(stringToBytes32(\"144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22\")),bytes32(stringToBytes32(\"38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146\")),bytes32(stringToBytes32(\"124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195\")),bytes32(stringToBytes32(\"222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27\")),bytes32(stringToBytes32(\"190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134\")),bytes32(stringToBytes32(\"45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103\")),bytes32(stringToBytes32(\"28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136\")),bytes32(stringToBytes32(\"239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81\")),bytes32(stringToBytes32(\"163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159\")),bytes32(stringToBytes32(\"168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247\")),bytes32(stringToBytes32(\"213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231\")),bytes32(stringToBytes32(\"191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10\")),bytes32(stringToBytes32(\"33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216\")),bytes32(stringToBytes32(\"112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5\")),bytes32(stringToBytes32(\"137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176\")),bytes32(stringToBytes32(\"9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113\")),bytes32(stringToBytes32(\"119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161\")),bytes32(stringToBytes32(\"99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0\")),bytes32(stringToBytes32(\"147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157\")),bytes32(stringToBytes32(\"168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5\")),bytes32(stringToBytes32(\"161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196\")),bytes32(stringToBytes32(\"252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166\")),bytes32(stringToBytes32(\"212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97\")),bytes32(stringToBytes32(\"140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47\")),bytes32(stringToBytes32(\"252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138\")),bytes32(stringToBytes32(\"169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[39,129,194,116,14,204,39,234,86,89,14,127,57,255,15,25,20,144,113,47,206,233,127,185,90,219,231,164,3,206,249,207],[162,106,236,138,79,152,141,114,151,97,5,86,218,16,190,190,138,218,191,33,130,196,253,28,68,204,242,230,96,113,223,62],[237,72,243,18,181,45,58,133,62,210,239,195,123,112,116,53,193,113,173,200,91,182,217,161,202,227,199,61,225,184,247,179],[36,99,245,15,249,174,210,191,193,124,123,1,30,88,0,25,121,202,17,35,124,212,103,124,96,225,9,241,0,251,86,88],[112,81,207,86,210,67,140,55,199,31,76,114,165,193,30,124,232,0,237,230,106,23,50,207,48,216,211,217,20,163,2,150],[148,56,153,254,84,3,69,93,221,82,73,32,81,43,45,121,29,47,166,229,104,121,122,173,25,70,171,14,138,220,93,77],[250,200,199,174,145,197,157,181,25,97,112,72,188,94,64,129,125,208,154,250,175,254,26,240,18,40,204,150,181,220,125,98],[165,223,28,16,143,118,73,27,41,76,171,12,252,251,47,198,41,181,198,74,66,31,31,34,204,209,120,158,90,118,239,157],[154,247,76,168,207,248,58,144,25,89,223,76,139,105,59,112,104,40,246,209,149,225,115,18,195,15,188,34,236,136,192,166],[45,126,220,74,56,24,246,13,31,60,221,77,133,211,106,237,82,87,202,176,51,3,107,153,87,77,165,34,147,88,135,108],[236,206,3,20,194,224,77,65,115,217,177,131,52,180,18,124,225,184,75,100,144,15,187,109,33,30,231,77,199,200,52,195],[125,37,77,189,239,87,203,20,74,23,194,250,124,153,95,225,76,14,143,21,212,232,255,252,192,19,75,91,42,86,193,39],[198,126,107,192,41,221,252,96,186,75,223,79,139,239,87,42,90,156,9,149,229,144,46,177,154,162,51,118,117,49,187,65],[172,161,142,95,168,227,139,221,207,15,176,252,159,244,243,224,9,249,63,66,144,4,49,157,130,129,251,143,175,146,115,47],[231,72,255,11,37,171,216,162,177,241,63,93,236,248,236,252,138,92,140,169,172,156,179,196,180,10,45,53,191,203,176,96],[255,233,82,208,189,59,13,140,237,30,13,160,254,77,66,97,226,97,111,51,0,179,104,61,11,39,77,166,195,79,57,118],[122,178,186,98,20,196,189,48,126,233,189,99,193,169,0,95,40,202,188,223,54,20,12,100,245,228,171,143,152,85,205,97],[61,208,194,34,177,78,14,10,108,149,93,166,115,231,249,167,48,210,34,139,205,38,54,135,45,65,0,200,171,106,204,37],[150,246,93,160,20,200,218,253,201,38,152,8,206,103,134,26,201,200,0,244,190,193,217,230,5,68,248,226,130,24,149,184],[164,55,33,17,74,15,204,205,219,58,97,104,102,118,190,181,149,120,174,46,232,187,223,255,159,223,74,51,213,81,80,153],[254,47,186,163,242,50,201,29,73,73,149,163,249,132,110,226,6,11,169,21,26,54,84,2,205,112,91,251,31,248,69,240],[165,53,237,156,104,27,193,129,20,205,85,233,21,125,238,116,111,10,138,232,45,60,82,226,201,66,132,153,186,181,24,90],[240,92,169,241,110,117,213,189,2,88,122,168,175,251,36,89,29,148,183,61,165,13,161,153,130,121,246,220,186,94,89,25],[33,223,51,217,24,234,191,174,205,224,94,187,214,82,234,26,35,28,240,1,181,233,19,175,33,56,53,28,45,22,194,81],[26,121,146,242,68,160,183,239,203,233,98,9,22,65,72,144,84,82,121,220,151,107,2,144,32,83,131,187,108,9,175,86],[253,148,2,1,140,227,189,186,252,42,237,188,103,191,56,191,254,212,220,128,139,99,220,111,63,106,24,120,122,53,78,106],[125,177,96,110,117,222,147,1,189,172,237,195,193,51,11,91,176,59,96,115,225,188,225,25,17,55,87,10,155,8,65,62],[62,91,225,114,229,228,91,54,0,69,192,76,252,210,189,183,207,50,94,180,7,39,127,191,77,87,139,90,38,15,165,4],[105,162,189,131,209,209,174,205,135,104,75,58,69,149,254,254,50,177,137,2,38,162,166,221,114,217,141,192,153,170,87,116],[5,183,50,175,96,112,90,31,32,123,243,66,39,211,64,118,212,159,82,135,196,201,63,172,122,232,251,151,175,166,110,235],[99,53,245,228,124,197,72,12,198,83,168,121,117,22,126,189,80,237,52,144,239,186,88,211,170,99,65,21,190,131,254,145],[40,0,247,87,194,239,199,216,204,133,16,34,228,170,116,38,236,211,173,100,12,231,124,233,180,112,14,131,105,93,61,94],[173,54,189,6,46,78,237,11,226,181,149,57,255,44,37,88,51,255,120,20,115,181,150,26,17,206,188,36,67,126,162,39],[18,205,134,115,253,252,215,29,223,77,102,238,4,73,30,89,25,40,79,168,232,116,98,198,225,31,151,91,236,122,59,87],[109,255,188,216,180,178,55,56,28,20,43,129,169,50,170,252,204,171,248,251,56,169,234,220,167,59,124,50,23,128,62,188],[114,77,225,128,127,47,198,48,75,195,35,210,5,147,98,27,209,235,129,141,2,28,112,213,84,184,10,89,249,252,126,25],[82,136,106,143,123,2,79,230,155,180,195,242,28,219,234,44,79,222,182,181,63,128,79,198,223,228,19,110,200,119,70,120],[111,82,241,142,46,17,28,174,209,127,45,22,253,187,184,167,7,74,245,9,176,240,124,193,235,44,225,211,207,138,89,213],[119,225,196,156,116,6,187,204,150,46,93,226,190,72,120,58,83,58,132,126,74,236,192,147,51,9,108,84,31,10,170,198],[82,175,100,79,63,244,237,228,116,88,248,78,63,233,111,77,249,183,142,0,59,245,218,116,131,124,43,212,42,41,87,225],[254,135,124,166,103,233,105,76,214,98,134,30,197,76,49,34,15,92,155,145,216,205,36,160,87,82,209,155,198,21,8,23],[232,151,83,32,193,220,114,219,61,161,230,47,148,203,233,26,81,108,160,97,209,111,190,203,48,241,180,17,57,122,198,89],[163,28,39,243,117,187,166,49,171,141,142,207,36,158,46,118,145,225,185,60,202,111,117,138,186,191,64,56,59,192,41,127],[62,123,74,16,225,93,255,100,187,35,65,92,5,214,188,236,5,217,17,233,7,124,172,105,73,125,96,244,3,188,86,209],[170,70,161,182,122,70,3,166,219,190,214,33,226,222,105,196,196,227,135,190,188,219,178,254,200,94,87,93,249,210,22,216],[197,118,207,172,101,9,74,163,112,15,18,191,99,91,139,138,164,79,250,89,34,58,49,185,80,67,36,243,19,190,144,150],[184,124,121,154,147,220,36,101,229,19,71,66,97,19,101,144,223,165,123,95,222,236,242,244,77,228,64,159,167,29,217,239],[226,231,75,213,149,27,63,14,218,152,103,231,76,128,44,38,19,129,237,99,225,18,211,149,132,49,210,145,198,91,39,241],[206,142,148,96,38,138,112,46,246,48,180,43,230,81,121,121,46,20,188,42,94,238,253,199,89,104,110,30,38,189,79,8],[252,178,116,226,101,25,212,34,141,70,20,119,223,153,55,195,243,223,143,34,121,221,223,239,97,148,100,239,11,220,38,134],[66,124,4,185,129,219,189,252,23,170,70,253,177,189,254,167,103,119,98,245,177,236,133,40,84,151,219,120,117,149,198,198],[164,95,172,124,151,172,123,188,2,173,23,219,143,11,6,20,59,93,39,7,207,250,101,152,133,83,236,112,228,8,73,114],[200,132,195,196,78,206,158,69,75,137,21,171,12,151,17,92,96,246,58,9,106,137,107,134,142,225,148,69,196,155,227,89],[154,206,11,41,12,54,250,44,203,155,89,191,231,184,10,237,136,195,188,158,27,38,79,173,57,153,106,157,51,200,136,59],[84,57,71,101,175,45,108,110,40,11,185,216,44,116,123,176,110,83,245,183,42,50,120,140,33,202,146,221,128,197,176,191],[204,173,63,55,115,53,130,142,121,80,231,131,126,174,51,254,209,53,33,15,20,149,218,54,19,32,239,55,214,42,236,60],[123,98,202,161,196,181,86,117,99,54,2,250,112,200,180,111,175,95,250,90,230,185,186,93,241,105,4,147,129,138,249,44],[61,178,223,83,12,120,108,92,60,88,149,236,215,140,209,68,201,46,23,102,191,137,23,38,203,221,245,65,230,113,76,78],[255,69,159,142,40,168,143,6,224,244,135,228,5,192,220,238,239,32,207,141,88,203,199,7,171,60,118,175,237,135,176,9],[25,230,140,56,72,158,101,69,100,46,22,204,49,111,197,226,160,255,18,197,139,136,193,80,121,68,198,128,235,102,228,118],[61,118,152,6,134,252,145,235,202,31,70,246,68,151,176,199,243,120,75,190,52,105,50,220,4,203,247,87,224,116,213,229],[232,17,144,62,158,248,161,75,167,71,244,26,227,1,63,122,114,134,201,30,31,190,169,12,55,100,20,164,38,172,108,126],[122,215,233,233,46,223,218,119,15,158,65,34,191,102,121,21,173,0,56,149,29,214,94,194,128,3,201,176,115,157,86,96],[150,176,179,80,163,32,128,168,185,157,205,225,180,208,177,185,128,38,184,120,98,222,125,118,51,151,190,62,210,87,29,214]]",
                "sol": "[bytes32(stringToBytes32(\"39,129,194,116,14,204,39,234,86,89,14,127,57,255,15,25,20,144,113,47,206,233,127,185,90,219,231,164,3,206,249,207\")),bytes32(stringToBytes32(\"162,106,236,138,79,152,141,114,151,97,5,86,218,16,190,190,138,218,191,33,130,196,253,28,68,204,242,230,96,113,223,62\")),bytes32(stringToBytes32(\"237,72,243,18,181,45,58,133,62,210,239,195,123,112,116,53,193,113,173,200,91,182,217,161,202,227,199,61,225,184,247,179\")),bytes32(stringToBytes32(\"36,99,245,15,249,174,210,191,193,124,123,1,30,88,0,25,121,202,17,35,124,212,103,124,96,225,9,241,0,251,86,88\")),bytes32(stringToBytes32(\"112,81,207,86,210,67,140,55,199,31,76,114,165,193,30,124,232,0,237,230,106,23,50,207,48,216,211,217,20,163,2,150\")),bytes32(stringToBytes32(\"148,56,153,254,84,3,69,93,221,82,73,32,81,43,45,121,29,47,166,229,104,121,122,173,25,70,171,14,138,220,93,77\")),bytes32(stringToBytes32(\"250,200,199,174,145,197,157,181,25,97,112,72,188,94,64,129,125,208,154,250,175,254,26,240,18,40,204,150,181,220,125,98\")),bytes32(stringToBytes32(\"165,223,28,16,143,118,73,27,41,76,171,12,252,251,47,198,41,181,198,74,66,31,31,34,204,209,120,158,90,118,239,157\")),bytes32(stringToBytes32(\"154,247,76,168,207,248,58,144,25,89,223,76,139,105,59,112,104,40,246,209,149,225,115,18,195,15,188,34,236,136,192,166\")),bytes32(stringToBytes32(\"45,126,220,74,56,24,246,13,31,60,221,77,133,211,106,237,82,87,202,176,51,3,107,153,87,77,165,34,147,88,135,108\")),bytes32(stringToBytes32(\"236,206,3,20,194,224,77,65,115,217,177,131,52,180,18,124,225,184,75,100,144,15,187,109,33,30,231,77,199,200,52,195\")),bytes32(stringToBytes32(\"125,37,77,189,239,87,203,20,74,23,194,250,124,153,95,225,76,14,143,21,212,232,255,252,192,19,75,91,42,86,193,39\")),bytes32(stringToBytes32(\"198,126,107,192,41,221,252,96,186,75,223,79,139,239,87,42,90,156,9,149,229,144,46,177,154,162,51,118,117,49,187,65\")),bytes32(stringToBytes32(\"172,161,142,95,168,227,139,221,207,15,176,252,159,244,243,224,9,249,63,66,144,4,49,157,130,129,251,143,175,146,115,47\")),bytes32(stringToBytes32(\"231,72,255,11,37,171,216,162,177,241,63,93,236,248,236,252,138,92,140,169,172,156,179,196,180,10,45,53,191,203,176,96\")),bytes32(stringToBytes32(\"255,233,82,208,189,59,13,140,237,30,13,160,254,77,66,97,226,97,111,51,0,179,104,61,11,39,77,166,195,79,57,118\")),bytes32(stringToBytes32(\"122,178,186,98,20,196,189,48,126,233,189,99,193,169,0,95,40,202,188,223,54,20,12,100,245,228,171,143,152,85,205,97\")),bytes32(stringToBytes32(\"61,208,194,34,177,78,14,10,108,149,93,166,115,231,249,167,48,210,34,139,205,38,54,135,45,65,0,200,171,106,204,37\")),bytes32(stringToBytes32(\"150,246,93,160,20,200,218,253,201,38,152,8,206,103,134,26,201,200,0,244,190,193,217,230,5,68,248,226,130,24,149,184\")),bytes32(stringToBytes32(\"164,55,33,17,74,15,204,205,219,58,97,104,102,118,190,181,149,120,174,46,232,187,223,255,159,223,74,51,213,81,80,153\")),bytes32(stringToBytes32(\"254,47,186,163,242,50,201,29,73,73,149,163,249,132,110,226,6,11,169,21,26,54,84,2,205,112,91,251,31,248,69,240\")),bytes32(stringToBytes32(\"165,53,237,156,104,27,193,129,20,205,85,233,21,125,238,116,111,10,138,232,45,60,82,226,201,66,132,153,186,181,24,90\")),bytes32(stringToBytes32(\"240,92,169,241,110,117,213,189,2,88,122,168,175,251,36,89,29,148,183,61,165,13,161,153,130,121,246,220,186,94,89,25\")),bytes32(stringToBytes32(\"33,223,51,217,24,234,191,174,205,224,94,187,214,82,234,26,35,28,240,1,181,233,19,175,33,56,53,28,45,22,194,81\")),bytes32(stringToBytes32(\"26,121,146,242,68,160,183,239,203,233,98,9,22,65,72,144,84,82,121,220,151,107,2,144,32,83,131,187,108,9,175,86\")),bytes32(stringToBytes32(\"253,148,2,1,140,227,189,186,252,42,237,188,103,191,56,191,254,212,220,128,139,99,220,111,63,106,24,120,122,53,78,106\")),bytes32(stringToBytes32(\"125,177,96,110,117,222,147,1,189,172,237,195,193,51,11,91,176,59,96,115,225,188,225,25,17,55,87,10,155,8,65,62\")),bytes32(stringToBytes32(\"62,91,225,114,229,228,91,54,0,69,192,76,252,210,189,183,207,50,94,180,7,39,127,191,77,87,139,90,38,15,165,4\")),bytes32(stringToBytes32(\"105,162,189,131,209,209,174,205,135,104,75,58,69,149,254,254,50,177,137,2,38,162,166,221,114,217,141,192,153,170,87,116\")),bytes32(stringToBytes32(\"5,183,50,175,96,112,90,31,32,123,243,66,39,211,64,118,212,159,82,135,196,201,63,172,122,232,251,151,175,166,110,235\")),bytes32(stringToBytes32(\"99,53,245,228,124,197,72,12,198,83,168,121,117,22,126,189,80,237,52,144,239,186,88,211,170,99,65,21,190,131,254,145\")),bytes32(stringToBytes32(\"40,0,247,87,194,239,199,216,204,133,16,34,228,170,116,38,236,211,173,100,12,231,124,233,180,112,14,131,105,93,61,94\")),bytes32(stringToBytes32(\"173,54,189,6,46,78,237,11,226,181,149,57,255,44,37,88,51,255,120,20,115,181,150,26,17,206,188,36,67,126,162,39\")),bytes32(stringToBytes32(\"18,205,134,115,253,252,215,29,223,77,102,238,4,73,30,89,25,40,79,168,232,116,98,198,225,31,151,91,236,122,59,87\")),bytes32(stringToBytes32(\"109,255,188,216,180,178,55,56,28,20,43,129,169,50,170,252,204,171,248,251,56,169,234,220,167,59,124,50,23,128,62,188\")),bytes32(stringToBytes32(\"114,77,225,128,127,47,198,48,75,195,35,210,5,147,98,27,209,235,129,141,2,28,112,213,84,184,10,89,249,252,126,25\")),bytes32(stringToBytes32(\"82,136,106,143,123,2,79,230,155,180,195,242,28,219,234,44,79,222,182,181,63,128,79,198,223,228,19,110,200,119,70,120\")),bytes32(stringToBytes32(\"111,82,241,142,46,17,28,174,209,127,45,22,253,187,184,167,7,74,245,9,176,240,124,193,235,44,225,211,207,138,89,213\")),bytes32(stringToBytes32(\"119,225,196,156,116,6,187,204,150,46,93,226,190,72,120,58,83,58,132,126,74,236,192,147,51,9,108,84,31,10,170,198\")),bytes32(stringToBytes32(\"82,175,100,79,63,244,237,228,116,88,248,78,63,233,111,77,249,183,142,0,59,245,218,116,131,124,43,212,42,41,87,225\")),bytes32(stringToBytes32(\"254,135,124,166,103,233,105,76,214,98,134,30,197,76,49,34,15,92,155,145,216,205,36,160,87,82,209,155,198,21,8,23\")),bytes32(stringToBytes32(\"232,151,83,32,193,220,114,219,61,161,230,47,148,203,233,26,81,108,160,97,209,111,190,203,48,241,180,17,57,122,198,89\")),bytes32(stringToBytes32(\"163,28,39,243,117,187,166,49,171,141,142,207,36,158,46,118,145,225,185,60,202,111,117,138,186,191,64,56,59,192,41,127\")),bytes32(stringToBytes32(\"62,123,74,16,225,93,255,100,187,35,65,92,5,214,188,236,5,217,17,233,7,124,172,105,73,125,96,244,3,188,86,209\")),bytes32(stringToBytes32(\"170,70,161,182,122,70,3,166,219,190,214,33,226,222,105,196,196,227,135,190,188,219,178,254,200,94,87,93,249,210,22,216\")),bytes32(stringToBytes32(\"197,118,207,172,101,9,74,163,112,15,18,191,99,91,139,138,164,79,250,89,34,58,49,185,80,67,36,243,19,190,144,150\")),bytes32(stringToBytes32(\"184,124,121,154,147,220,36,101,229,19,71,66,97,19,101,144,223,165,123,95,222,236,242,244,77,228,64,159,167,29,217,239\")),bytes32(stringToBytes32(\"226,231,75,213,149,27,63,14,218,152,103,231,76,128,44,38,19,129,237,99,225,18,211,149,132,49,210,145,198,91,39,241\")),bytes32(stringToBytes32(\"206,142,148,96,38,138,112,46,246,48,180,43,230,81,121,121,46,20,188,42,94,238,253,199,89,104,110,30,38,189,79,8\")),bytes32(stringToBytes32(\"252,178,116,226,101,25,212,34,141,70,20,119,223,153,55,195,243,223,143,34,121,221,223,239,97,148,100,239,11,220,38,134\")),bytes32(stringToBytes32(\"66,124,4,185,129,219,189,252,23,170,70,253,177,189,254,167,103,119,98,245,177,236,133,40,84,151,219,120,117,149,198,198\")),bytes32(stringToBytes32(\"164,95,172,124,151,172,123,188,2,173,23,219,143,11,6,20,59,93,39,7,207,250,101,152,133,83,236,112,228,8,73,114\")),bytes32(stringToBytes32(\"200,132,195,196,78,206,158,69,75,137,21,171,12,151,17,92,96,246,58,9,106,137,107,134,142,225,148,69,196,155,227,89\")),bytes32(stringToBytes32(\"154,206,11,41,12,54,250,44,203,155,89,191,231,184,10,237,136,195,188,158,27,38,79,173,57,153,106,157,51,200,136,59\")),bytes32(stringToBytes32(\"84,57,71,101,175,45,108,110,40,11,185,216,44,116,123,176,110,83,245,183,42,50,120,140,33,202,146,221,128,197,176,191\")),bytes32(stringToBytes32(\"204,173,63,55,115,53,130,142,121,80,231,131,126,174,51,254,209,53,33,15,20,149,218,54,19,32,239,55,214,42,236,60\")),bytes32(stringToBytes32(\"123,98,202,161,196,181,86,117,99,54,2,250,112,200,180,111,175,95,250,90,230,185,186,93,241,105,4,147,129,138,249,44\")),bytes32(stringToBytes32(\"61,178,223,83,12,120,108,92,60,88,149,236,215,140,209,68,201,46,23,102,191,137,23,38,203,221,245,65,230,113,76,78\")),bytes32(stringToBytes32(\"255,69,159,142,40,168,143,6,224,244,135,228,5,192,220,238,239,32,207,141,88,203,199,7,171,60,118,175,237,135,176,9\")),bytes32(stringToBytes32(\"25,230,140,56,72,158,101,69,100,46,22,204,49,111,197,226,160,255,18,197,139,136,193,80,121,68,198,128,235,102,228,118\")),bytes32(stringToBytes32(\"61,118,152,6,134,252,145,235,202,31,70,246,68,151,176,199,243,120,75,190,52,105,50,220,4,203,247,87,224,116,213,229\")),bytes32(stringToBytes32(\"232,17,144,62,158,248,161,75,167,71,244,26,227,1,63,122,114,134,201,30,31,190,169,12,55,100,20,164,38,172,108,126\")),bytes32(stringToBytes32(\"122,215,233,233,46,223,218,119,15,158,65,34,191,102,121,21,173,0,56,149,29,214,94,194,128,3,201,176,115,157,86,96\")),bytes32(stringToBytes32(\"150,176,179,80,163,32,128,168,185,157,205,225,180,208,177,185,128,38,184,120,98,222,125,118,51,151,190,62,210,87,29,214\"))]"
              },
              {
                "js": "[[75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51],[125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50],[233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117],[151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80],[126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34],[182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193],[45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158],[77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186],[65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32],[243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80],[155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215],[82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4],[157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155],[46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8],[3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56],[203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23],[212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87],[201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80],[144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187],[192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41],[27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52],[192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96],[10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39],[13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36],[6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56],[88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234],[228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25],[66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225],[149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141],[249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184],[133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4],[16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31],[0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228],[171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134],[214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137],[62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198],[98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41],[202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67],[144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22],[38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146],[124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195],[222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27],[190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134],[45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103],[28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136],[239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81],[163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159],[168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247],[213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231],[191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10],[33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216],[112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5],[137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176],[9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113],[119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161],[99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0],[147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157],[168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5],[161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196],[252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166],[212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97],[140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47],[252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138],[169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157]]",
                "sol": "[bytes32(stringToBytes32(\"75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51\")),bytes32(stringToBytes32(\"125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50\")),bytes32(stringToBytes32(\"233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117\")),bytes32(stringToBytes32(\"151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80\")),bytes32(stringToBytes32(\"126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34\")),bytes32(stringToBytes32(\"182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193\")),bytes32(stringToBytes32(\"45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158\")),bytes32(stringToBytes32(\"77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186\")),bytes32(stringToBytes32(\"65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32\")),bytes32(stringToBytes32(\"243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80\")),bytes32(stringToBytes32(\"155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215\")),bytes32(stringToBytes32(\"82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4\")),bytes32(stringToBytes32(\"157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155\")),bytes32(stringToBytes32(\"46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8\")),bytes32(stringToBytes32(\"3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56\")),bytes32(stringToBytes32(\"203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23\")),bytes32(stringToBytes32(\"212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87\")),bytes32(stringToBytes32(\"201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80\")),bytes32(stringToBytes32(\"144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187\")),bytes32(stringToBytes32(\"192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41\")),bytes32(stringToBytes32(\"27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52\")),bytes32(stringToBytes32(\"192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96\")),bytes32(stringToBytes32(\"10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39\")),bytes32(stringToBytes32(\"13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36\")),bytes32(stringToBytes32(\"6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56\")),bytes32(stringToBytes32(\"88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234\")),bytes32(stringToBytes32(\"228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25\")),bytes32(stringToBytes32(\"66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225\")),bytes32(stringToBytes32(\"149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141\")),bytes32(stringToBytes32(\"249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184\")),bytes32(stringToBytes32(\"133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4\")),bytes32(stringToBytes32(\"16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31\")),bytes32(stringToBytes32(\"0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228\")),bytes32(stringToBytes32(\"171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134\")),bytes32(stringToBytes32(\"214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137\")),bytes32(stringToBytes32(\"62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198\")),bytes32(stringToBytes32(\"98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41\")),bytes32(stringToBytes32(\"202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67\")),bytes32(stringToBytes32(\"144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22\")),bytes32(stringToBytes32(\"38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146\")),bytes32(stringToBytes32(\"124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195\")),bytes32(stringToBytes32(\"222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27\")),bytes32(stringToBytes32(\"190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134\")),bytes32(stringToBytes32(\"45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103\")),bytes32(stringToBytes32(\"28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136\")),bytes32(stringToBytes32(\"239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81\")),bytes32(stringToBytes32(\"163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159\")),bytes32(stringToBytes32(\"168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247\")),bytes32(stringToBytes32(\"213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231\")),bytes32(stringToBytes32(\"191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10\")),bytes32(stringToBytes32(\"33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216\")),bytes32(stringToBytes32(\"112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5\")),bytes32(stringToBytes32(\"137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176\")),bytes32(stringToBytes32(\"9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113\")),bytes32(stringToBytes32(\"119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161\")),bytes32(stringToBytes32(\"99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0\")),bytes32(stringToBytes32(\"147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157\")),bytes32(stringToBytes32(\"168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5\")),bytes32(stringToBytes32(\"161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196\")),bytes32(stringToBytes32(\"252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166\")),bytes32(stringToBytes32(\"212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97\")),bytes32(stringToBytes32(\"140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47\")),bytes32(stringToBytes32(\"252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138\")),bytes32(stringToBytes32(\"169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[93,146,233,101,75,128,253,248,61,146,121,135,181,136,60,6,126,174,133,242,25,167,145,162,225,60,2,9,66,65,115,37],[54,17,94,79,235,115,82,139,124,38,184,190,123,101,105,22,158,222,233,224,7,15,138,21,200,239,18,146,0,99,26,217],[70,224,162,158,106,96,242,73,191,238,227,164,95,217,137,0,121,210,195,76,51,16,38,71,206,1,232,235,205,203,58,134],[117,248,62,224,250,37,223,42,245,255,117,240,129,153,29,167,50,245,25,156,218,86,1,56,96,60,5,219,119,182,247,166],[191,212,51,113,201,14,159,47,116,187,252,126,124,230,195,70,231,78,232,154,75,129,74,135,100,29,115,206,174,19,243,39],[125,149,113,21,52,232,224,209,32,33,251,9,117,54,5,99,217,54,177,179,41,150,21,51,45,118,149,88,69,212,9,129],[79,231,77,47,250,21,71,197,253,139,168,152,146,67,51,87,131,160,11,117,26,160,229,208,12,43,11,12,216,133,173,188],[84,223,176,74,98,5,11,54,195,64,212,116,48,34,0,212,110,35,253,1,181,200,184,143,172,121,233,44,78,246,29,174],[100,108,101,38,103,229,86,122,190,184,132,80,114,224,188,130,252,152,62,33,35,138,198,98,251,59,191,255,241,248,5,27],[113,9,58,232,62,3,86,31,159,90,115,230,137,50,59,179,81,204,165,179,149,220,66,70,131,36,229,37,40,108,14,249],[26,98,82,207,27,220,41,251,43,30,126,125,10,180,161,136,173,160,86,193,216,132,57,210,222,167,168,175,63,210,124,201],[171,22,229,255,173,239,143,139,169,212,122,71,118,254,92,200,244,239,195,13,68,43,244,203,6,104,192,95,88,45,34,246],[30,92,169,72,188,90,181,125,15,134,184,183,120,104,173,117,193,114,51,33,137,170,60,227,106,59,235,175,98,153,176,199],[214,17,15,233,172,220,241,197,25,51,139,254,31,250,179,71,82,105,66,124,195,148,196,248,166,10,22,148,8,145,160,66],[109,39,252,104,242,0,106,167,147,34,32,195,168,70,53,31,106,162,43,36,63,54,93,50,79,229,143,232,219,62,111,205],[156,54,51,86,125,253,153,66,191,184,95,211,107,213,226,236,204,121,48,185,137,181,40,28,41,247,111,222,92,145,3,183],[119,5,174,49,41,43,23,40,129,130,59,225,107,22,207,196,11,170,108,125,136,183,155,31,12,56,219,45,142,240,41,192],[81,5,35,87,201,219,86,71,56,40,45,54,65,224,162,183,249,117,209,90,37,17,93,141,248,54,240,115,163,69,145,38],[17,163,175,239,214,177,113,214,185,8,181,187,161,45,211,28,162,181,187,91,38,49,184,230,14,33,89,46,64,222,53,66],[49,30,99,233,226,72,199,197,134,133,175,115,10,184,40,130,118,64,248,249,147,60,58,139,55,243,235,153,221,103,195,142],[177,245,59,170,124,179,55,150,232,177,36,94,56,55,35,130,138,124,45,99,118,229,174,212,124,163,20,46,33,204,80,29],[17,156,232,209,5,173,46,255,22,201,127,224,205,198,183,3,239,142,60,176,212,174,42,7,33,232,79,80,124,186,215,53],[26,96,182,61,212,218,0,28,3,228,238,208,227,26,68,251,2,251,238,212,37,51,131,39,71,173,131,0,152,63,185,34],[186,199,27,164,246,144,250,57,137,200,139,81,167,154,21,190,44,223,8,45,133,201,20,58,148,84,43,233,161,241,161,133],[136,204,149,236,199,213,45,221,10,124,140,189,236,159,132,64,84,26,227,73,125,25,195,51,123,18,7,113,126,241,254,82],[254,164,166,140,225,21,123,39,223,132,97,210,93,94,24,34,168,217,151,63,79,135,255,22,185,151,226,139,209,124,17,171],[238,248,173,39,137,85,132,83,120,28,118,249,149,137,218,50,130,84,21,218,21,155,156,174,232,241,91,97,140,181,250,213],[214,66,121,249,187,178,191,146,174,34,49,180,248,123,5,66,45,236,79,182,213,20,35,156,6,138,62,195,40,202,82,120],[206,254,203,154,165,133,133,2,155,233,170,20,254,223,130,41,147,228,228,92,121,85,249,177,178,179,156,231,26,52,13,77],[0,218,65,248,170,212,227,236,234,64,62,89,117,140,63,54,39,114,90,237,59,242,59,115,189,188,239,47,106,15,5,218],[248,123,75,95,70,194,86,194,249,20,209,228,76,159,41,158,141,131,245,90,210,101,124,247,146,231,7,145,173,248,59,213],[255,89,96,13,66,179,23,212,119,219,146,169,64,86,15,207,167,189,13,134,156,132,222,155,139,64,64,248,194,124,128,158],[50,60,88,129,53,78,58,187,135,177,23,201,224,247,174,248,10,124,220,105,49,119,31,196,31,209,92,219,151,10,17,205],[87,60,175,246,244,242,34,44,48,249,120,135,38,159,116,41,186,155,230,164,83,163,22,106,221,72,38,155,14,111,207,24],[85,180,142,59,218,73,107,239,168,84,123,232,21,144,22,100,240,96,52,138,145,118,73,18,203,4,108,215,95,84,44,115],[106,51,143,165,150,164,232,135,180,90,45,87,62,210,96,191,207,139,207,154,135,99,218,154,191,76,248,19,107,121,153,166],[49,148,33,251,176,87,206,128,180,23,60,67,253,19,133,7,9,53,150,6,213,67,99,114,244,200,172,244,222,81,181,71],[123,11,69,95,101,240,98,168,161,156,39,175,192,133,19,226,231,112,176,137,77,224,152,241,144,150,157,85,207,91,153,244],[232,99,103,87,3,47,206,116,9,36,110,40,133,175,62,138,210,101,214,219,13,191,90,45,183,176,171,29,115,97,141,99],[13,179,154,113,86,223,42,8,172,158,249,145,75,160,248,46,187,182,52,240,50,185,28,59,189,240,242,242,24,89,75,62],[170,221,24,223,21,68,155,117,9,171,111,46,2,152,152,10,199,103,152,191,21,181,143,103,146,147,229,189,65,184,144,24],[142,196,4,101,239,169,160,226,183,248,58,232,43,52,242,178,107,195,121,187,252,170,34,27,96,236,61,230,215,222,123,33],[8,93,51,162,2,154,4,213,236,251,20,114,8,140,137,135,4,22,77,223,135,15,55,239,214,34,69,204,1,237,151,155],[45,119,240,139,61,101,102,72,148,243,18,143,206,188,210,221,8,161,163,73,251,198,111,182,61,30,49,140,30,232,127,121],[172,188,254,232,150,128,96,147,105,207,47,253,240,155,98,188,51,174,113,68,145,38,81,143,134,128,9,167,5,71,237,75],[190,103,249,192,97,122,141,125,84,31,85,215,7,185,137,58,83,189,68,140,159,33,157,93,37,68,60,225,36,214,164,77],[153,134,82,64,154,237,246,145,249,116,60,102,202,79,67,138,239,134,79,143,149,93,177,41,16,23,182,112,220,93,55,230],[225,41,91,254,11,211,168,24,186,206,12,162,213,136,208,237,105,18,91,213,232,162,110,214,118,45,87,213,214,198,187,107],[206,143,31,67,9,30,199,47,229,154,225,247,16,198,215,28,25,146,28,214,198,94,148,236,222,37,21,222,127,147,65,174],[189,176,46,104,40,12,34,212,95,80,233,141,80,118,101,152,166,189,164,0,87,122,86,113,108,168,197,60,22,191,66,128],[65,147,16,25,201,227,85,72,254,33,176,90,39,229,168,106,36,161,147,235,95,36,5,63,135,3,66,245,124,188,18,186],[139,228,78,178,240,127,184,179,246,9,55,161,66,242,243,1,215,200,60,154,220,178,124,174,83,75,6,249,172,62,194,147],[141,217,0,28,60,163,73,144,80,106,137,156,167,89,225,216,234,195,195,234,184,210,125,207,120,41,174,187,17,7,247,154],[78,231,243,89,9,14,220,55,194,137,77,113,96,80,226,218,41,167,158,240,123,52,122,27,232,46,229,47,118,157,82,23],[199,134,60,118,28,167,27,48,22,2,168,166,222,48,138,61,151,88,223,71,96,209,23,83,28,232,242,202,59,183,177,211],[181,113,12,191,204,198,225,160,129,240,198,51,89,16,11,181,199,159,206,77,164,1,191,46,74,221,211,207,17,159,247,4],[184,94,44,93,106,208,239,172,166,119,216,146,46,88,229,43,29,137,190,169,118,219,242,124,121,249,176,57,128,40,150,61],[180,148,214,228,245,141,247,57,182,27,143,70,32,180,83,37,25,181,64,46,129,13,100,7,117,222,195,120,253,76,53,145],[38,140,175,82,62,84,26,3,50,118,36,245,133,147,2,97,251,36,25,136,150,1,224,12,42,180,82,100,253,173,10,235],[3,156,28,71,30,61,6,173,226,233,69,247,84,27,99,255,150,236,5,182,175,148,185,130,221,209,233,78,245,38,195,90],[233,105,253,38,103,158,46,24,189,151,254,18,121,212,227,150,11,36,185,160,154,229,128,213,95,176,231,212,71,92,77,160],[1,13,174,131,249,62,241,164,219,35,27,243,167,144,34,149,60,151,223,35,180,194,179,107,249,43,39,137,229,91,16,177],[206,114,60,27,183,200,115,207,92,175,255,123,77,174,253,109,36,75,183,35,227,13,24,224,40,146,139,1,7,210,109,125],[77,90,199,66,193,216,42,81,139,142,135,52,108,203,50,128,16,128,41,60,206,224,156,245,174,231,216,122,64,225,233,66],[113,61,170,77,166,108,243,219,78,168,47,24,210,49,73,11,74,235,101,169,26,62,238,7,81,201,156,93,243,122,223,219]]",
                "sol": "[stringToBytes32(\"70,61,254,115,106,26,153,108,224,66,110,65,228,168,135,30,72,160,219,225,144,225,212,148,47,84,168,2,202,163,138,201\"),stringToBytes32(\"187,164,8,74,60,185,170,85,10,125,148,208,11,49,220,161,135,39,235,135,109,149,46,215,103,28,187,210,32,33,12,212\"),stringToBytes32(\"67,71,38,198,144,113,118,152,90,202,124,163,114,55,135,62,110,166,72,115,165,64,55,36,121,65,143,162,62,201,134,154\"),stringToBytes32(\"83,155,228,165,202,197,124,82,8,37,49,1,155,4,76,64,175,97,47,69,207,45,178,171,210,126,135,69,52,26,179,79\"),stringToBytes32(\"121,202,160,0,242,8,14,250,250,165,145,16,133,102,71,63,116,207,0,213,245,144,170,190,38,191,110,47,174,96,21,65\"),stringToBytes32(\"77,186,186,110,215,61,48,18,27,51,205,74,14,198,143,12,151,162,149,193,206,84,205,91,228,81,254,247,17,239,188,182\"),stringToBytes32(\"83,29,160,124,181,28,132,3,179,133,142,177,140,72,223,144,232,61,74,133,5,252,218,103,19,184,207,110,189,117,1,102\"),stringToBytes32(\"169,47,246,249,171,95,174,43,152,136,195,50,159,28,62,174,114,223,46,106,78,90,64,212,27,36,34,1,72,127,154,117\"),stringToBytes32(\"246,178,157,145,19,94,99,255,175,202,93,96,84,227,151,132,154,124,2,210,169,194,60,55,142,2,230,44,187,200,150,205\"),stringToBytes32(\"148,74,253,68,134,143,48,182,54,170,249,30,222,157,198,102,104,202,165,211,113,147,239,104,18,138,203,133,188,224,53,3\"),stringToBytes32(\"59,238,215,65,203,86,245,200,253,178,105,202,235,93,156,207,26,170,252,113,178,40,55,230,81,153,23,75,55,73,62,188\"),stringToBytes32(\"15,245,125,56,145,132,63,115,52,109,29,81,64,61,91,160,141,231,255,235,3,51,231,154,15,161,247,105,141,185,83,183\"),stringToBytes32(\"154,30,188,134,195,159,200,84,13,67,181,34,63,20,253,128,129,37,130,72,245,206,52,234,168,164,114,222,250,73,52,26\"),stringToBytes32(\"195,241,200,60,96,106,77,250,168,120,203,78,48,94,225,62,189,3,55,110,99,247,22,104,237,77,170,1,104,229,29,125\"),stringToBytes32(\"110,27,112,7,100,24,92,168,154,36,15,190,15,48,36,138,47,183,27,43,191,57,176,123,14,107,47,112,27,102,112,191\"),stringToBytes32(\"219,190,249,254,209,255,85,156,225,246,55,239,235,113,29,251,27,152,96,178,98,153,170,13,227,97,49,106,186,39,46,187\"),stringToBytes32(\"51,167,118,14,229,118,250,66,23,61,111,15,29,108,129,35,141,179,44,148,219,216,158,87,33,2,179,218,202,99,182,13\"),stringToBytes32(\"110,216,237,159,137,38,62,232,226,226,101,227,185,50,44,251,99,156,48,3,116,17,190,72,170,94,102,133,31,6,69,109\"),stringToBytes32(\"253,158,186,52,242,119,43,92,106,148,124,142,241,215,235,142,2,99,18,174,148,71,68,135,155,107,56,174,114,215,179,75\"),stringToBytes32(\"195,193,248,63,148,221,175,112,110,232,114,118,158,205,218,180,196,158,255,211,169,235,102,64,152,145,2,205,203,212,220,124\"),stringToBytes32(\"132,12,164,179,175,217,143,110,35,199,124,44,23,14,177,38,255,80,235,201,207,96,235,139,124,93,217,175,2,200,177,39\"),stringToBytes32(\"60,114,182,254,2,252,114,113,4,27,102,106,87,24,71,180,196,153,214,203,83,90,236,157,218,60,4,244,2,168,41,61\"),stringToBytes32(\"153,250,60,40,109,183,12,227,64,212,213,120,173,161,155,52,132,211,47,104,82,51,49,237,246,103,228,214,202,96,162,203\"),stringToBytes32(\"23,39,46,215,55,105,150,40,60,216,185,78,34,198,251,154,28,230,83,110,131,197,20,197,27,170,136,14,31,66,215,170\"),stringToBytes32(\"58,35,177,245,181,71,76,218,103,85,150,0,241,238,246,180,199,111,221,247,12,44,70,45,13,168,246,98,221,12,136,3\"),stringToBytes32(\"160,64,251,104,41,19,65,203,223,183,219,32,157,47,82,34,112,119,179,191,251,208,202,166,41,69,185,59,193,215,56,135\"),stringToBytes32(\"148,131,226,162,46,112,21,239,58,5,163,87,90,51,198,191,166,26,217,191,14,218,112,16,39,169,122,71,45,161,37,180\"),stringToBytes32(\"218,216,212,10,19,66,233,116,208,96,243,121,36,144,2,168,75,129,164,104,250,236,238,146,7,159,158,150,90,67,70,171\"),stringToBytes32(\"218,212,140,37,43,118,6,71,55,97,192,81,120,84,48,61,141,126,87,126,23,95,72,132,47,19,136,150,1,182,45,59\"),stringToBytes32(\"200,128,68,182,4,31,106,188,176,200,48,229,83,157,174,104,13,222,37,43,58,23,18,129,75,188,237,19,169,16,181,234\"),stringToBytes32(\"213,217,162,169,220,1,84,225,147,74,167,82,63,207,250,193,113,149,240,254,85,144,145,71,69,187,79,229,162,79,138,110\"),stringToBytes32(\"222,202,59,18,8,138,39,36,177,102,168,5,124,205,9,106,138,188,224,87,71,241,52,14,50,133,123,0,81,253,170,145\"),stringToBytes32(\"58,91,194,114,201,172,40,3,81,103,85,174,42,220,19,118,178,103,248,232,229,57,24,120,111,198,199,61,80,127,83,14\"),stringToBytes32(\"178,183,200,140,113,145,227,245,209,252,30,97,5,241,64,42,246,152,138,117,254,50,57,134,114,188,48,243,251,207,38,138\"),stringToBytes32(\"39,59,147,22,254,97,138,89,186,135,172,7,121,189,191,252,187,200,73,68,216,149,252,13,170,39,81,164,167,145,179,245\"),stringToBytes32(\"169,218,253,109,105,183,31,101,104,13,51,156,45,186,162,235,133,227,237,115,211,248,78,164,16,199,149,31,190,186,45,179\"),stringToBytes32(\"38,203,2,248,120,26,237,14,221,215,15,122,104,154,123,74,155,194,240,212,204,99,85,12,91,185,35,179,239,56,73,246\"),stringToBytes32(\"204,29,115,212,161,251,15,185,85,234,29,121,47,156,185,131,227,153,152,220,7,166,93,228,188,10,100,120,131,241,168,113\"),stringToBytes32(\"5,210,105,157,228,135,8,208,231,97,45,83,230,189,48,156,95,255,80,229,96,61,118,60,144,51,20,12,112,107,241,12\"),stringToBytes32(\"139,3,51,225,130,36,133,13,187,70,218,98,215,14,41,129,80,233,14,201,16,116,10,114,244,10,169,31,7,63,143,124\"),stringToBytes32(\"2,167,138,212,125,182,247,196,179,196,188,22,76,136,37,189,150,63,181,46,125,247,78,154,190,87,64,248,94,192,83,103\"),stringToBytes32(\"24,24,143,41,104,187,169,71,45,250,107,204,20,69,233,162,163,179,104,173,85,227,93,12,91,59,181,177,166,64,220,228\"),stringToBytes32(\"83,241,193,137,249,150,109,48,254,35,26,167,203,158,32,59,131,52,152,97,41,1,62,10,47,124,97,230,248,122,111,42\"),stringToBytes32(\"67,8,184,151,144,232,215,178,94,170,3,34,167,129,72,148,133,160,232,103,217,249,124,224,45,27,177,210,250,211,171,25\"),stringToBytes32(\"249,3,30,242,15,26,155,145,137,226,126,35,110,163,97,168,25,68,159,44,207,174,167,183,14,206,116,229,152,253,157,34\"),stringToBytes32(\"78,230,115,63,123,120,59,201,184,115,173,143,18,4,157,47,137,245,191,147,210,187,157,195,239,22,189,198,237,157,160,238\"),stringToBytes32(\"56,119,21,42,13,84,123,94,142,9,101,27,36,46,179,152,166,124,47,153,145,243,120,242,175,129,174,213,19,178,217,174\"),stringToBytes32(\"228,7,182,58,213,93,226,28,0,75,83,165,31,183,128,105,83,177,20,187,5,228,228,75,255,194,205,120,86,143,250,149\"),stringToBytes32(\"97,155,56,110,226,198,198,182,214,89,157,32,118,100,48,26,34,155,5,112,245,68,240,140,167,234,193,2,176,246,225,50\"),stringToBytes32(\"230,16,194,172,238,49,36,193,165,210,117,227,77,115,139,188,218,127,109,169,159,31,197,120,245,234,21,116,148,243,175,159\"),stringToBytes32(\"137,229,19,89,20,218,145,93,9,149,142,135,37,228,223,106,92,215,247,57,107,53,130,50,216,95,11,224,134,161,188,80\"),stringToBytes32(\"3,90,174,26,174,29,4,186,52,171,167,18,116,171,142,68,23,65,211,23,130,69,44,49,144,165,76,3,159,129,42,158\"),stringToBytes32(\"27,162,234,127,136,88,135,251,36,160,3,39,207,0,145,12,51,163,66,204,255,176,41,216,116,144,190,13,232,45,8,135\"),stringToBytes32(\"132,211,45,224,199,68,52,44,197,89,41,22,28,69,35,205,64,84,90,5,4,51,145,86,79,214,69,73,187,217,252,236\"),stringToBytes32(\"72,67,178,216,108,37,96,221,62,240,33,228,19,131,205,215,164,91,186,220,76,84,251,149,181,86,249,171,150,62,62,189\"),stringToBytes32(\"228,239,218,77,173,71,30,166,45,11,239,160,152,15,196,21,90,175,159,206,154,161,188,0,91,117,124,135,203,224,105,237\"),stringToBytes32(\"15,2,164,95,236,210,57,253,147,214,156,4,161,45,37,187,64,65,223,210,57,50,140,57,159,40,56,162,192,56,162,150\"),stringToBytes32(\"120,151,141,212,52,194,135,188,210,32,132,23,99,216,232,81,10,85,101,234,135,122,229,13,177,11,134,27,72,197,175,56\"),stringToBytes32(\"53,43,63,164,55,166,40,139,25,213,41,186,179,53,77,40,21,128,247,41,169,231,229,3,165,205,58,122,18,131,49,236\"),stringToBytes32(\"20,86,37,177,185,81,208,87,63,96,180,90,137,214,227,50,81,47,170,164,3,178,240,65,208,254,197,96,110,4,125,55\"),stringToBytes32(\"64,114,133,145,211,125,247,22,67,87,102,65,72,174,89,138,76,209,168,211,47,127,70,197,71,153,187,128,157,107,168,72\"),stringToBytes32(\"201,242,222,193,114,21,19,40,131,166,240,218,164,33,70,42,231,133,183,97,152,157,191,75,54,63,236,18,153,110,244,114\"),stringToBytes32(\"221,108,240,217,99,140,255,221,31,239,253,53,129,186,226,80,240,36,76,165,151,37,216,236,176,121,243,16,186,133,166,137\"),stringToBytes32(\"10,222,101,15,145,101,36,31,112,98,240,65,164,143,140,156,190,68,88,68,66,67,227,142,25,186,239,202,181,58,42,236\"),stringToBytes32(\"234,215,18,105,57,109,166,166,80,233,99,242,249,225,1,86,192,49,92,121,21,158,18,195,101,220,253,81,100,200,18,216\")]"
              },
              {
                "js": "[[75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51],[125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50],[233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117],[151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80],[126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34],[182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193],[45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158],[77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186],[65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32],[243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80],[155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215],[82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4],[157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155],[46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8],[3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56],[203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23],[212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87],[201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80],[144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187],[192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41],[27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52],[192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96],[10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39],[13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36],[6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56],[88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234],[228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25],[66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225],[149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141],[249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184],[133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4],[16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31],[0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228],[171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134],[214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137],[62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198],[98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41],[202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67],[144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22],[38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146],[124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195],[222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27],[190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134],[45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103],[28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136],[239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81],[163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159],[168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247],[213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231],[191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10],[33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216],[112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5],[137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176],[9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113],[119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161],[99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0],[147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157],[168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5],[161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196],[252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166],[212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97],[140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47],[252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138],[169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157]]",
                "sol": "[bytes32(stringToBytes32(\"75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51\")),bytes32(stringToBytes32(\"125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50\")),bytes32(stringToBytes32(\"233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117\")),bytes32(stringToBytes32(\"151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80\")),bytes32(stringToBytes32(\"126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34\")),bytes32(stringToBytes32(\"182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193\")),bytes32(stringToBytes32(\"45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158\")),bytes32(stringToBytes32(\"77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186\")),bytes32(stringToBytes32(\"65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32\")),bytes32(stringToBytes32(\"243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80\")),bytes32(stringToBytes32(\"155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215\")),bytes32(stringToBytes32(\"82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4\")),bytes32(stringToBytes32(\"157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155\")),bytes32(stringToBytes32(\"46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8\")),bytes32(stringToBytes32(\"3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56\")),bytes32(stringToBytes32(\"203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23\")),bytes32(stringToBytes32(\"212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87\")),bytes32(stringToBytes32(\"201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80\")),bytes32(stringToBytes32(\"144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187\")),bytes32(stringToBytes32(\"192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41\")),bytes32(stringToBytes32(\"27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52\")),bytes32(stringToBytes32(\"192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96\")),bytes32(stringToBytes32(\"10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39\")),bytes32(stringToBytes32(\"13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36\")),bytes32(stringToBytes32(\"6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56\")),bytes32(stringToBytes32(\"88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234\")),bytes32(stringToBytes32(\"228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25\")),bytes32(stringToBytes32(\"66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225\")),bytes32(stringToBytes32(\"149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141\")),bytes32(stringToBytes32(\"249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184\")),bytes32(stringToBytes32(\"133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4\")),bytes32(stringToBytes32(\"16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31\")),bytes32(stringToBytes32(\"0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228\")),bytes32(stringToBytes32(\"171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134\")),bytes32(stringToBytes32(\"214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137\")),bytes32(stringToBytes32(\"62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198\")),bytes32(stringToBytes32(\"98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41\")),bytes32(stringToBytes32(\"202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67\")),bytes32(stringToBytes32(\"144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22\")),bytes32(stringToBytes32(\"38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146\")),bytes32(stringToBytes32(\"124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195\")),bytes32(stringToBytes32(\"222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27\")),bytes32(stringToBytes32(\"190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134\")),bytes32(stringToBytes32(\"45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103\")),bytes32(stringToBytes32(\"28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136\")),bytes32(stringToBytes32(\"239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81\")),bytes32(stringToBytes32(\"163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159\")),bytes32(stringToBytes32(\"168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247\")),bytes32(stringToBytes32(\"213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231\")),bytes32(stringToBytes32(\"191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10\")),bytes32(stringToBytes32(\"33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216\")),bytes32(stringToBytes32(\"112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5\")),bytes32(stringToBytes32(\"137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176\")),bytes32(stringToBytes32(\"9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113\")),bytes32(stringToBytes32(\"119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161\")),bytes32(stringToBytes32(\"99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0\")),bytes32(stringToBytes32(\"147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157\")),bytes32(stringToBytes32(\"168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5\")),bytes32(stringToBytes32(\"161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196\")),bytes32(stringToBytes32(\"252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166\")),bytes32(stringToBytes32(\"212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97\")),bytes32(stringToBytes32(\"140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47\")),bytes32(stringToBytes32(\"252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138\")),bytes32(stringToBytes32(\"169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51],[125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50],[233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117],[151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80],[126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34],[182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193],[45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158],[77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186],[65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32],[243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80],[155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215],[82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4],[157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155],[46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8],[3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56],[203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23],[212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87],[201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80],[144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187],[192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41],[27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52],[192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96],[10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39],[13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36],[6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56],[88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234],[228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25],[66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225],[149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141],[249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184],[133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4],[16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31],[0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228],[171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134],[214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137],[62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198],[98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41],[202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67],[144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22],[38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146],[124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195],[222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27],[190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134],[45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103],[28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136],[239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81],[163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159],[168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247],[213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231],[191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10],[33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216],[112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5],[137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176],[9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113],[119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161],[99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0],[147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157],[168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5],[161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196],[252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166],[212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97],[140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47],[252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138],[169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157]]",
                "sol": "[bytes32(stringToBytes32(\"75,174,6,187,186,228,6,76,113,92,155,147,93,233,173,199,135,18,119,54,111,206,200,119,16,208,27,173,140,204,89,51\")),bytes32(stringToBytes32(\"125,157,90,138,21,30,71,254,178,108,104,234,66,139,198,144,151,105,80,154,183,56,134,4,221,168,36,248,116,50,166,50\")),bytes32(stringToBytes32(\"233,250,15,144,70,80,230,35,210,222,156,176,159,254,242,153,108,184,68,174,237,29,141,215,16,126,52,241,83,69,48,117\")),bytes32(stringToBytes32(\"151,113,135,79,130,131,252,75,236,154,64,168,209,118,221,215,180,149,119,64,206,68,71,173,198,126,171,229,221,79,111,80\")),bytes32(stringToBytes32(\"126,51,131,208,223,45,96,132,60,141,45,16,220,132,204,104,24,149,162,156,174,93,92,175,136,29,181,233,24,111,23,34\")),bytes32(stringToBytes32(\"182,175,44,98,53,10,101,142,74,80,40,137,198,26,123,197,70,198,145,35,41,87,46,14,127,51,53,198,103,107,185,193\")),bytes32(stringToBytes32(\"45,84,109,133,216,111,216,63,202,222,242,58,155,206,21,40,39,188,158,15,15,235,105,4,140,131,52,196,192,52,204,158\")),bytes32(stringToBytes32(\"77,181,145,195,102,48,178,16,231,2,165,38,193,211,89,239,254,93,69,254,192,199,111,230,133,135,69,240,136,71,46,186\")),bytes32(stringToBytes32(\"65,179,33,128,125,13,131,194,246,224,153,143,151,95,229,132,242,123,214,172,130,36,86,21,64,70,195,44,174,15,132,32\")),bytes32(stringToBytes32(\"243,145,246,193,246,45,153,254,51,197,90,135,211,25,104,49,208,24,82,148,200,199,17,157,253,81,95,11,92,230,173,80\")),bytes32(stringToBytes32(\"155,149,143,140,245,103,240,117,96,190,104,142,248,218,46,150,7,186,41,244,5,199,220,4,240,77,3,110,163,79,78,215\")),bytes32(stringToBytes32(\"82,12,248,192,242,54,174,208,63,177,34,108,218,21,132,154,213,65,18,209,97,26,238,150,26,75,167,209,181,165,21,4\")),bytes32(stringToBytes32(\"157,149,207,168,254,89,88,103,224,174,175,163,25,194,198,39,151,23,136,59,142,106,186,219,239,59,214,81,50,110,57,155\")),bytes32(stringToBytes32(\"46,11,118,240,10,48,48,28,243,183,237,185,228,170,193,58,218,10,59,233,90,53,42,75,189,16,152,107,151,14,102,8\")),bytes32(stringToBytes32(\"3,79,139,4,160,51,200,95,189,59,239,71,104,148,42,21,174,73,220,140,168,175,157,236,30,109,77,89,52,202,42,56\")),bytes32(stringToBytes32(\"203,195,215,36,5,200,13,111,107,160,159,31,2,28,127,233,238,247,230,240,120,144,30,252,183,24,243,252,223,94,180,23\")),bytes32(stringToBytes32(\"212,128,13,167,81,120,43,50,32,95,178,121,230,213,197,132,214,137,184,152,96,162,143,230,244,87,63,105,223,76,158,87\")),bytes32(stringToBytes32(\"201,28,23,219,83,69,65,187,5,97,154,133,197,102,192,199,186,129,246,25,240,28,175,121,127,153,8,238,6,76,111,80\")),bytes32(stringToBytes32(\"144,213,164,5,231,149,242,198,219,49,147,178,100,10,142,121,100,52,250,240,26,33,194,14,10,120,245,77,146,74,28,187\")),bytes32(stringToBytes32(\"192,57,6,30,203,118,54,115,31,24,47,19,133,160,46,233,123,27,173,254,126,102,30,179,97,250,47,23,138,33,248,41\")),bytes32(stringToBytes32(\"27,68,151,8,184,140,129,65,89,251,5,213,128,123,178,166,18,154,179,202,12,65,207,100,13,109,141,20,254,10,169,52\")),bytes32(stringToBytes32(\"192,84,136,182,53,190,186,239,145,210,182,204,42,62,241,172,173,66,165,204,184,166,144,233,91,1,26,178,136,25,10,96\")),bytes32(stringToBytes32(\"10,19,69,118,105,141,51,157,132,41,71,140,117,134,190,75,143,153,154,36,208,194,98,172,248,181,237,48,87,10,5,39\")),bytes32(stringToBytes32(\"13,173,51,233,187,81,155,5,132,2,16,56,39,208,4,155,65,45,199,163,198,173,217,3,13,133,76,107,90,247,111,36\")),bytes32(stringToBytes32(\"6,201,0,141,77,105,222,65,133,223,210,149,152,208,215,192,179,21,6,57,79,13,75,159,189,100,38,160,152,6,137,56\")),bytes32(stringToBytes32(\"88,81,191,241,230,199,161,57,102,159,191,189,85,216,113,104,255,148,26,155,221,242,223,182,30,239,135,32,100,70,146,234\")),bytes32(stringToBytes32(\"228,226,93,175,114,239,120,44,143,138,148,144,93,74,178,77,199,161,246,185,46,155,137,14,34,193,120,193,58,153,30,25\")),bytes32(stringToBytes32(\"66,56,96,148,131,51,165,210,214,231,167,160,235,5,220,129,6,178,224,82,184,169,57,34,196,98,205,48,12,55,0,225\")),bytes32(stringToBytes32(\"149,241,143,50,206,203,47,217,134,184,90,178,163,121,51,172,177,80,97,204,145,103,107,163,200,24,127,251,93,233,190,141\")),bytes32(stringToBytes32(\"249,21,45,156,148,252,75,125,9,183,234,140,10,60,160,231,252,232,18,124,155,137,216,191,109,71,5,77,124,189,255,184\")),bytes32(stringToBytes32(\"133,92,16,131,168,96,175,153,68,65,149,48,146,68,16,185,44,190,67,13,14,109,233,225,153,100,136,215,142,120,163,4\")),bytes32(stringToBytes32(\"16,13,67,181,87,99,246,89,184,87,37,239,238,68,248,173,83,151,87,253,231,13,143,38,91,149,169,117,197,207,57,31\")),bytes32(stringToBytes32(\"0,112,244,97,179,43,228,116,11,233,4,111,18,26,190,142,201,60,218,247,178,163,118,203,126,39,121,187,196,86,60,228\")),bytes32(stringToBytes32(\"171,148,156,142,156,212,102,225,6,27,105,255,146,197,226,221,46,26,61,102,83,171,235,150,129,97,69,168,76,255,12,134\")),bytes32(stringToBytes32(\"214,239,106,229,76,242,63,133,19,150,160,200,158,175,162,166,100,5,206,52,157,6,117,124,134,156,59,75,252,113,161,137\")),bytes32(stringToBytes32(\"62,38,56,174,5,184,4,243,255,152,251,52,244,52,123,124,38,60,216,218,4,227,192,104,49,105,211,100,70,247,84,198\")),bytes32(stringToBytes32(\"98,151,88,118,159,247,19,104,223,166,242,172,186,1,215,89,50,238,66,66,204,162,93,150,20,124,203,245,25,39,185,41\")),bytes32(stringToBytes32(\"202,221,107,239,211,171,82,95,172,74,69,117,85,133,222,152,199,92,145,246,135,171,187,193,69,180,46,27,175,72,171,67\")),bytes32(stringToBytes32(\"144,160,203,212,18,214,53,252,49,209,66,124,68,221,205,110,70,232,67,216,45,126,38,243,222,166,96,37,108,12,245,22\")),bytes32(stringToBytes32(\"38,36,80,102,241,140,223,146,170,95,52,221,252,206,39,46,174,146,236,90,116,191,19,173,80,0,61,117,26,62,255,146\")),bytes32(stringToBytes32(\"124,147,245,142,163,127,123,10,246,24,78,0,174,24,203,253,249,182,139,124,179,9,55,243,94,177,145,173,114,151,77,195\")),bytes32(stringToBytes32(\"222,106,122,105,201,45,212,114,45,164,55,26,223,65,193,223,0,116,123,8,6,195,149,187,29,79,74,207,205,156,20,27\")),bytes32(stringToBytes32(\"190,129,134,64,120,108,183,136,127,30,163,68,98,38,54,149,145,97,149,191,162,115,135,133,165,187,241,11,165,234,105,134\")),bytes32(stringToBytes32(\"45,150,116,231,206,183,30,168,209,88,68,190,173,70,27,82,62,27,193,217,98,214,144,124,224,93,76,154,66,97,102,103\")),bytes32(stringToBytes32(\"28,152,234,11,98,200,118,125,154,152,147,238,123,203,225,245,201,113,113,37,51,31,132,11,203,170,136,249,116,242,134,136\")),bytes32(stringToBytes32(\"239,75,243,83,24,166,118,99,150,156,161,11,85,232,86,127,45,140,212,52,48,189,25,172,238,140,66,201,129,75,130,81\")),bytes32(stringToBytes32(\"163,115,209,160,205,161,234,47,49,192,240,123,96,188,203,20,235,252,61,71,128,67,208,145,20,97,156,181,225,139,1,159\")),bytes32(stringToBytes32(\"168,202,254,204,174,208,81,139,130,142,250,190,99,107,87,77,228,91,77,102,95,60,214,161,13,236,183,50,80,93,84,247\")),bytes32(stringToBytes32(\"213,127,249,198,38,201,94,239,73,134,93,73,134,98,62,195,220,239,138,131,86,30,250,91,227,121,195,218,34,77,28,231\")),bytes32(stringToBytes32(\"191,168,44,154,220,117,127,67,124,59,116,152,80,199,0,95,98,18,123,248,79,141,163,210,44,2,126,70,113,135,2,10\")),bytes32(stringToBytes32(\"33,116,82,231,70,99,127,193,58,190,71,86,247,73,198,165,26,57,62,117,184,189,53,207,108,250,58,209,123,157,225,216\")),bytes32(stringToBytes32(\"112,9,212,80,95,11,79,12,98,124,158,196,231,229,81,168,240,0,70,235,99,81,35,225,38,49,115,228,161,207,63,5\")),bytes32(stringToBytes32(\"137,173,241,244,253,98,38,55,136,32,156,153,22,129,114,76,109,193,53,24,231,241,39,186,101,34,73,165,209,120,34,176\")),bytes32(stringToBytes32(\"9,6,251,239,115,31,124,140,227,34,30,241,32,57,33,111,175,54,26,125,140,14,4,154,226,164,150,15,115,161,231,113\")),bytes32(stringToBytes32(\"119,38,145,215,82,182,194,53,124,83,122,28,48,188,165,236,182,28,86,232,183,141,178,44,205,8,171,35,239,118,93,161\")),bytes32(stringToBytes32(\"99,212,67,26,232,10,255,45,198,33,148,127,173,189,216,34,203,237,89,17,148,77,173,221,156,112,101,194,171,129,173,0\")),bytes32(stringToBytes32(\"147,147,32,116,56,236,15,243,37,95,4,211,92,63,139,174,210,35,48,242,157,209,208,91,16,165,109,70,40,14,121,157\")),bytes32(stringToBytes32(\"168,184,47,17,58,233,11,49,255,87,204,86,28,103,106,31,78,32,223,173,73,86,250,33,31,190,213,81,41,112,47,5\")),bytes32(stringToBytes32(\"161,211,247,102,176,176,185,209,6,158,2,197,0,52,171,212,140,149,249,226,188,95,211,157,211,78,138,236,182,75,63,196\")),bytes32(stringToBytes32(\"252,13,32,7,131,212,116,71,190,127,137,175,50,111,116,76,224,178,123,186,249,76,36,172,234,44,167,16,150,4,71,166\")),bytes32(stringToBytes32(\"212,162,135,101,242,203,169,159,43,47,166,71,205,54,124,145,138,50,103,4,49,150,241,90,146,117,14,87,171,203,167,97\")),bytes32(stringToBytes32(\"140,60,68,32,141,67,48,120,71,194,6,27,231,162,176,128,101,13,122,31,32,139,46,227,161,197,149,162,157,3,151,47\")),bytes32(stringToBytes32(\"252,255,185,48,230,196,45,94,135,232,179,213,195,210,234,149,36,83,248,160,43,8,117,109,178,124,173,141,210,42,226,138\")),bytes32(stringToBytes32(\"169,244,93,167,117,129,250,64,222,2,76,179,28,85,228,229,50,76,148,11,70,34,75,105,152,196,233,213,68,91,244,157\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.764ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"RevertWithReason\"",
                "sol": "\"RevertWithReason\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.768ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[9],accounts[9],accounts[6],accounts[8],accounts[8],accounts[2],accounts[6],accounts[8],accounts[1],accounts[4],accounts[9],accounts[4],accounts[1],accounts[1],accounts[4],accounts[9],accounts[8],accounts[5],accounts[9],accounts[8],accounts[1],accounts[9],accounts[8],accounts[6],accounts[2],accounts[9],accounts[9],accounts[4],accounts[6],accounts[5],accounts[5],accounts[1],accounts[8],accounts[3],accounts[3],accounts[5],accounts[5],accounts[1],accounts[1],accounts[4],accounts[3],accounts[5],accounts[9],accounts[7],accounts[8],accounts[1],accounts[0],accounts[6],accounts[1],accounts[9],accounts[7],accounts[8],accounts[5],accounts[8],accounts[1],accounts[0],accounts[8],accounts[8],accounts[2],accounts[6],accounts[3],accounts[2],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892062,255,5,1,10001,66,254,1337,65,6,1532892062,256,28,3,2014223715,4,6,3,26,1532892064,1,0,2014223714,28,2014223714,26,66,5,10000,97,1337,256,66,6,0,29,10000,1532892064,26,2014223714,2014223715,254,1336,65,2014223715,4,2014223715,1336,10000,27,2014223716,4,96,29,66,2014223715,4,29,1532892062,29,1532892063,9999,27,255]",
              "sol": "[uint256(1532892062),uint256(255),uint256(5),uint256(1),uint256(10001),uint256(66),uint256(254),uint256(1337),uint256(65),uint256(6),uint256(1532892062),uint256(256),uint256(28),uint256(3),uint256(2014223715),uint256(4),uint256(6),uint256(3),uint256(26),uint256(1532892064),uint256(1),uint256(0),uint256(2014223714),uint256(28),uint256(2014223714),uint256(26),uint256(66),uint256(5),uint256(10000),uint256(97),uint256(1337),uint256(256),uint256(66),uint256(6),uint256(0),uint256(29),uint256(10000),uint256(1532892064),uint256(26),uint256(2014223714),uint256(2014223715),uint256(254),uint256(1336),uint256(65),uint256(2014223715),uint256(4),uint256(2014223715),uint256(1336),uint256(10000),uint256(27),uint256(2014223716),uint256(4),uint256(96),uint256(29),uint256(66),uint256(2014223715),uint256(4),uint256(29),uint256(1532892062),uint256(29),uint256(1532892063),uint256(9999),uint256(27),uint256(255)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[9],accounts[9],accounts[6],accounts[8],accounts[8],accounts[2],accounts[6],accounts[8],accounts[1],accounts[4],accounts[9],accounts[4],accounts[1],accounts[1],accounts[4],accounts[9],accounts[8],accounts[5],accounts[9],accounts[8],accounts[1],accounts[9],accounts[8],accounts[6],accounts[2],accounts[9],accounts[9],accounts[4],accounts[6],accounts[5],accounts[5],accounts[1],accounts[8],accounts[3],accounts[3],accounts[5],accounts[5],accounts[1],accounts[1],accounts[4],accounts[3],accounts[5],accounts[9],accounts[7],accounts[8],accounts[1],accounts[0],accounts[6],accounts[1],accounts[9],accounts[7],accounts[8],accounts[5],accounts[8],accounts[1],accounts[0],accounts[8],accounts[8],accounts[2],accounts[6],accounts[3],accounts[2],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892062,255,5,1,10001,66,254,1337,65,6,1532892062,256,28,3,2014223715,4,6,3,26,1532892064,1,0,2014223714,28,2014223714,26,66,5,10000,97,1337,256,66,6,0,29,10000,1532892064,26,2014223714,2014223715,254,1336,65,2014223715,4,2014223715,1336,10000,27,2014223716,4,96,29,66,2014223715,4,29,1532892062,29,1532892063,9999,27,255]",
                "sol": "[uint256(1532892062),uint256(255),uint256(5),uint256(1),uint256(10001),uint256(66),uint256(254),uint256(1337),uint256(65),uint256(6),uint256(1532892062),uint256(256),uint256(28),uint256(3),uint256(2014223715),uint256(4),uint256(6),uint256(3),uint256(26),uint256(1532892064),uint256(1),uint256(0),uint256(2014223714),uint256(28),uint256(2014223714),uint256(26),uint256(66),uint256(5),uint256(10000),uint256(97),uint256(1337),uint256(256),uint256(66),uint256(6),uint256(0),uint256(29),uint256(10000),uint256(1532892064),uint256(26),uint256(2014223714),uint256(2014223715),uint256(254),uint256(1336),uint256(65),uint256(2014223715),uint256(4),uint256(2014223715),uint256(1336),uint256(10000),uint256(27),uint256(2014223716),uint256(4),uint256(96),uint256(29),uint256(66),uint256(2014223715),uint256(4),uint256(29),uint256(1532892062),uint256(29),uint256(1532892063),uint256(9999),uint256(27),uint256(255)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[1],accounts[8],accounts[3],accounts[2],accounts[9],accounts[4],accounts[3],accounts[2],accounts[9],accounts[0],accounts[0],accounts[8],accounts[7],accounts[4],accounts[1],accounts[2],accounts[8],accounts[0],accounts[3],accounts[4],accounts[1],accounts[0],accounts[1],accounts[3],accounts[5],accounts[2],accounts[9],accounts[7],accounts[7],accounts[5],accounts[3],accounts[8],accounts[2],accounts[2],accounts[5],accounts[5],accounts[7],accounts[4],accounts[0],accounts[3],accounts[4],accounts[8],accounts[9],accounts[3],accounts[4],accounts[8],accounts[5],accounts[5],accounts[0],accounts[1],accounts[3],accounts[1],accounts[8],accounts[7],accounts[4],accounts[8],accounts[7],accounts[9],accounts[6],accounts[2],accounts[5],accounts[3],accounts[5],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892062,255,5,1,10001,66,254,1337,65,6,1532892062,256,28,3,2014223715,4,6,3,26,1532892064,1,0,2014223714,28,2014223714,26,66,5,10000,97,1337,256,66,6,0,29,10000,1532892064,26,2014223714,2014223715,254,1336,65,2014223715,4,2014223715,1336,10000,27,2014223716,4,96,29,66,2014223715,4,29,1532892062,29,1532892063,9999,27,255]",
                "sol": "[uint256(1532892062),uint256(255),uint256(5),uint256(1),uint256(10001),uint256(66),uint256(254),uint256(1337),uint256(65),uint256(6),uint256(1532892062),uint256(256),uint256(28),uint256(3),uint256(2014223715),uint256(4),uint256(6),uint256(3),uint256(26),uint256(1532892064),uint256(1),uint256(0),uint256(2014223714),uint256(28),uint256(2014223714),uint256(26),uint256(66),uint256(5),uint256(10000),uint256(97),uint256(1337),uint256(256),uint256(66),uint256(6),uint256(0),uint256(29),uint256(10000),uint256(1532892064),uint256(26),uint256(2014223714),uint256(2014223715),uint256(254),uint256(1336),uint256(65),uint256(2014223715),uint256(4),uint256(2014223715),uint256(1336),uint256(10000),uint256(27),uint256(2014223716),uint256(4),uint256(96),uint256(29),uint256(66),uint256(2014223715),uint256(4),uint256(29),uint256(1532892062),uint256(29),uint256(1532892063),uint256(9999),uint256(27),uint256(255)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892062,255,5,1,10001,66,254,1337,65,6,1532892062,256,28,3,2014223715,4,6,3,26,1532892064,1,0,2014223714,28,2014223714,26,66,5,10000,97,1337,256,66,6,0,29,10000,1532892064,26,2014223714,2014223715,254,1336,65,2014223715,4,2014223715,1336,10000,27,2014223716,4,96,29,66,2014223715,4,29,1532892062,29,1532892063,9999,27,255]",
                "sol": "[uint256(1532892062),uint256(255),uint256(5),uint256(1),uint256(10001),uint256(66),uint256(254),uint256(1337),uint256(65),uint256(6),uint256(1532892062),uint256(256),uint256(28),uint256(3),uint256(2014223715),uint256(4),uint256(6),uint256(3),uint256(26),uint256(1532892064),uint256(1),uint256(0),uint256(2014223714),uint256(28),uint256(2014223714),uint256(26),uint256(66),uint256(5),uint256(10000),uint256(97),uint256(1337),uint256(256),uint256(66),uint256(6),uint256(0),uint256(29),uint256(10000),uint256(1532892064),uint256(26),uint256(2014223714),uint256(2014223715),uint256(254),uint256(1336),uint256(65),uint256(2014223715),uint256(4),uint256(2014223715),uint256(1336),uint256(10000),uint256(27),uint256(2014223716),uint256(4),uint256(96),uint256(29),uint256(66),uint256(2014223715),uint256(4),uint256(29),uint256(1532892062),uint256(29),uint256(1532892063),uint256(9999),uint256(27),uint256(255)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.772ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.773ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[6],accounts[2],accounts[8],accounts[0],accounts[0],accounts[9],accounts[1],accounts[4],accounts[3],accounts[1],accounts[2],accounts[8],accounts[7],accounts[9],accounts[0],accounts[5],accounts[1],accounts[5],accounts[7],accounts[2],accounts[5],accounts[6],accounts[4],accounts[5],accounts[3],accounts[0],accounts[4],accounts[9],accounts[3],accounts[7],accounts[9],accounts[1],accounts[7],accounts[9],accounts[4],accounts[8],accounts[1],accounts[0],accounts[9],accounts[5],accounts[0],accounts[8],accounts[1],accounts[8],accounts[6],accounts[7],accounts[8],accounts[8],accounts[9],accounts[8],accounts[3],accounts[6],accounts[8],accounts[0],accounts[6],accounts[9],accounts[8],accounts[5],accounts[1],accounts[1],accounts[9],accounts[9],accounts[0],accounts[8],accounts[6],accounts[4],accounts[1],accounts[8],accounts[8],accounts[8],accounts[9],accounts[4],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[4],accounts[3],accounts[4],accounts[4],accounts[3],accounts[3],accounts[9],accounts[4],accounts[2],accounts[7],accounts[6],accounts[2],accounts[6],accounts[4],accounts[8],accounts[9],accounts[9],accounts[3],accounts[4],accounts[4],accounts[1],accounts[5],accounts[2],accounts[2],accounts[5],accounts[1],accounts[0],accounts[7],accounts[8],accounts[7],accounts[2],accounts[1],accounts[1],accounts[4],accounts[1],accounts[4],accounts[7],accounts[1],accounts[7],accounts[5],accounts[4],accounts[7],accounts[2],accounts[9],accounts[9],accounts[7],accounts[0],accounts[2],accounts[5],accounts[7],accounts[3],accounts[7],accounts[1],accounts[4],accounts[2],accounts[9],accounts[3],accounts[5],accounts[1],accounts[6],accounts[0],accounts[1],accounts[9],accounts[2],accounts[3],accounts[0],accounts[0],accounts[0],accounts[3],accounts[4],accounts[4],accounts[9],accounts[0],accounts[4],accounts[0],accounts[1],accounts[1],accounts[1],accounts[3],accounts[3],accounts[2],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[1],accounts[1],accounts[7],accounts[9],accounts[6],accounts[8],accounts[5],accounts[5],accounts[3],accounts[1],accounts[7],accounts[8],accounts[7],accounts[7],accounts[1],accounts[2],accounts[2],accounts[7],accounts[7],accounts[6],accounts[9],accounts[1],accounts[4],accounts[3],accounts[7],accounts[7],accounts[2],accounts[5],accounts[4],accounts[2],accounts[6],accounts[6],accounts[8],accounts[7],accounts[8],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[6],accounts[3],accounts[5],accounts[2],accounts[3],accounts[9],accounts[2],accounts[1],accounts[3],accounts[8],accounts[4],accounts[2],accounts[2],accounts[7],accounts[2],accounts[5],accounts[3],accounts[9],accounts[6],accounts[9],accounts[0],accounts[3],accounts[8],accounts[1],accounts[9],accounts[1],accounts[1],accounts[6],accounts[4],accounts[0],accounts[6],accounts[8],accounts[4],accounts[4],accounts[8],accounts[5],accounts[7],accounts[7],accounts[4],accounts[8],accounts[6],accounts[8],accounts[7],accounts[1],accounts[1],accounts[0],accounts[0],accounts[2],accounts[2],accounts[8],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[6],accounts[2],accounts[8],accounts[0],accounts[0],accounts[9],accounts[1],accounts[4],accounts[3],accounts[1],accounts[2],accounts[8],accounts[7],accounts[9],accounts[0],accounts[5],accounts[1],accounts[5],accounts[7],accounts[2],accounts[5],accounts[6],accounts[4],accounts[5],accounts[3],accounts[0],accounts[4],accounts[9],accounts[3],accounts[7],accounts[9],accounts[1],accounts[7],accounts[9],accounts[4],accounts[8],accounts[1],accounts[0],accounts[9],accounts[5],accounts[0],accounts[8],accounts[1],accounts[8],accounts[6],accounts[7],accounts[8],accounts[8],accounts[9],accounts[8],accounts[3],accounts[6],accounts[8],accounts[0],accounts[6],accounts[9],accounts[8],accounts[5],accounts[1],accounts[1],accounts[9],accounts[9],accounts[0],accounts[8],accounts[6],accounts[4],accounts[1],accounts[8],accounts[8],accounts[8],accounts[9],accounts[4],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[4],accounts[3],accounts[4],accounts[4],accounts[3],accounts[3],accounts[9],accounts[4],accounts[2],accounts[7],accounts[6],accounts[2],accounts[6],accounts[4],accounts[8],accounts[9],accounts[9],accounts[3],accounts[4],accounts[4],accounts[1],accounts[5],accounts[2],accounts[2],accounts[5],accounts[1],accounts[0],accounts[7],accounts[8],accounts[7],accounts[2],accounts[1],accounts[1],accounts[4],accounts[1],accounts[4],accounts[7],accounts[1],accounts[7],accounts[5],accounts[4],accounts[7],accounts[2],accounts[9],accounts[9],accounts[7],accounts[0],accounts[2],accounts[5],accounts[7],accounts[3],accounts[7],accounts[1],accounts[4],accounts[2],accounts[9],accounts[3],accounts[5],accounts[1],accounts[6],accounts[0],accounts[1],accounts[9],accounts[2],accounts[3],accounts[0],accounts[0],accounts[0],accounts[3],accounts[4],accounts[4],accounts[9],accounts[0],accounts[4],accounts[0],accounts[1],accounts[1],accounts[1],accounts[3],accounts[3],accounts[2],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[1],accounts[1],accounts[7],accounts[9],accounts[6],accounts[8],accounts[5],accounts[5],accounts[3],accounts[1],accounts[7],accounts[8],accounts[7],accounts[7],accounts[1],accounts[2],accounts[2],accounts[7],accounts[7],accounts[6],accounts[9],accounts[1],accounts[4],accounts[3],accounts[7],accounts[7],accounts[2],accounts[5],accounts[4],accounts[2],accounts[6],accounts[6],accounts[8],accounts[7],accounts[8],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[6],accounts[3],accounts[5],accounts[2],accounts[3],accounts[9],accounts[2],accounts[1],accounts[3],accounts[8],accounts[4],accounts[2],accounts[2],accounts[7],accounts[2],accounts[5],accounts[3],accounts[9],accounts[6],accounts[9],accounts[0],accounts[3],accounts[8],accounts[1],accounts[9],accounts[1],accounts[1],accounts[6],accounts[4],accounts[0],accounts[6],accounts[8],accounts[4],accounts[4],accounts[8],accounts[5],accounts[7],accounts[7],accounts[4],accounts[8],accounts[6],accounts[8],accounts[7],accounts[1],accounts[1],accounts[0],accounts[0],accounts[2],accounts[2],accounts[8],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[9],accounts[6],accounts[2],accounts[8],accounts[0],accounts[0],accounts[9],accounts[1],accounts[4],accounts[3],accounts[1],accounts[2],accounts[8],accounts[7],accounts[9],accounts[0],accounts[5],accounts[1],accounts[5],accounts[7],accounts[2],accounts[5],accounts[6],accounts[4],accounts[5],accounts[3],accounts[0],accounts[4],accounts[9],accounts[3],accounts[7],accounts[9],accounts[1],accounts[7],accounts[9],accounts[4],accounts[8],accounts[1],accounts[0],accounts[9],accounts[5],accounts[0],accounts[8],accounts[1],accounts[8],accounts[6],accounts[7],accounts[8],accounts[8],accounts[9],accounts[8],accounts[3],accounts[6],accounts[8],accounts[0],accounts[6],accounts[9],accounts[8],accounts[5],accounts[1],accounts[1],accounts[9],accounts[9],accounts[0],accounts[8],accounts[6],accounts[4],accounts[1],accounts[8],accounts[8],accounts[8],accounts[9],accounts[4],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[4],accounts[3],accounts[4],accounts[4],accounts[3],accounts[3],accounts[9],accounts[4],accounts[2],accounts[7],accounts[6],accounts[2],accounts[6],accounts[4],accounts[8],accounts[9],accounts[9],accounts[3],accounts[4],accounts[4],accounts[1],accounts[5],accounts[2],accounts[2],accounts[5],accounts[1],accounts[0],accounts[7],accounts[8],accounts[7],accounts[2],accounts[1],accounts[1],accounts[4],accounts[1],accounts[4],accounts[7],accounts[1],accounts[7],accounts[5],accounts[4],accounts[7],accounts[2],accounts[9],accounts[9],accounts[7],accounts[0],accounts[2],accounts[5],accounts[7],accounts[3],accounts[7],accounts[1],accounts[4],accounts[2],accounts[9],accounts[3],accounts[5],accounts[1],accounts[6],accounts[0],accounts[1],accounts[9],accounts[2],accounts[3],accounts[0],accounts[0],accounts[0],accounts[3],accounts[4],accounts[4],accounts[9],accounts[0],accounts[4],accounts[0],accounts[1],accounts[1],accounts[1],accounts[3],accounts[3],accounts[2],accounts[8],accounts[4],accounts[9],accounts[4],accounts[2],accounts[1],accounts[1],accounts[7],accounts[9],accounts[6],accounts[8],accounts[5],accounts[5],accounts[3],accounts[1],accounts[7],accounts[8],accounts[7],accounts[7],accounts[1],accounts[2],accounts[2],accounts[7],accounts[7],accounts[6],accounts[9],accounts[1],accounts[4],accounts[3],accounts[7],accounts[7],accounts[2],accounts[5],accounts[4],accounts[2],accounts[6],accounts[6],accounts[8],accounts[7],accounts[8],accounts[9],accounts[5],accounts[0],accounts[7],accounts[1],accounts[6],accounts[3],accounts[5],accounts[2],accounts[3],accounts[9],accounts[2],accounts[1],accounts[3],accounts[8],accounts[4],accounts[2],accounts[2],accounts[7],accounts[2],accounts[5],accounts[3],accounts[9],accounts[6],accounts[9],accounts[0],accounts[3],accounts[8],accounts[1],accounts[9],accounts[1],accounts[1],accounts[6],accounts[4],accounts[0],accounts[6],accounts[8],accounts[4],accounts[4],accounts[8],accounts[5],accounts[7],accounts[7],accounts[4],accounts[8],accounts[6],accounts[8],accounts[7],accounts[1],accounts[1],accounts[0],accounts[0],accounts[2],accounts[2],accounts[8],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.778ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.779ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
              "sol": "block.timestamp+725"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
                "sol": "block.timestamp+725"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.784ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.788ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.793ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.798ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.801ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.804ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.805ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.805ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[0],accounts[4],accounts[2],accounts[0],accounts[0],accounts[8],accounts[4],accounts[2],accounts[1],accounts[4],accounts[5],accounts[7],accounts[6],accounts[6],accounts[1],accounts[8],accounts[3],accounts[8],accounts[0],accounts[9],accounts[5],accounts[5],accounts[4],accounts[6],accounts[8],accounts[1],accounts[0]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0],accounts[4],accounts[2],accounts[0],accounts[0],accounts[8],accounts[4],accounts[2],accounts[1],accounts[4],accounts[5],accounts[7],accounts[6],accounts[6],accounts[1],accounts[8],accounts[3],accounts[8],accounts[0],accounts[9],accounts[5],accounts[5],accounts[4],accounts[6],accounts[8],accounts[1],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[0],accounts[4],accounts[2],accounts[0],accounts[0],accounts[8],accounts[4],accounts[2],accounts[1],accounts[4],accounts[5],accounts[7],accounts[6],accounts[6],accounts[1],accounts[8],accounts[3],accounts[8],accounts[0],accounts[9],accounts[5],accounts[5],accounts[4],accounts[6],accounts[8],accounts[1],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.807ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:57:48.808ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:57:48.808ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}